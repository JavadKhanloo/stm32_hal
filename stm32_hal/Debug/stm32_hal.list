
stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08004c88  08004c88  00014c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800508c  0800508c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800508c  0800508c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  08005270  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005270  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005534  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001609  00000000  00000000  00025739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00026d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  000273b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002082  00000000  00000000  00027970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092f8  00000000  00000000  000299f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007278c  00000000  00000000  00032cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f0  00000000  00000000  000a54c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000a7db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000a7e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c70 	.word	0x08004c70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004c70 	.word	0x08004c70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:

//-----------------------------------------------------------------------//
// main function                                                         //
//-----------------------------------------------------------------------//
int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a8c:	f000 f886 	bl	8000b9c <HAL_Init>
  // clock
  rcc_system_clock_config();
 8000a90:	f001 fa94 	bl	8001fbc <rcc_system_clock_config>

  // uart
  uart_UART1_GPIO_config();
 8000a94:	f001 fad6 	bl	8002044 <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000a98:	f001 fb06 	bl	80020a8 <uart_UART1_config>

  // led
  gpio_LED_config();
 8000a9c:	f001 f9de 	bl	8001e5c <gpio_LED_config>

  // pb
  gpio_PB_config();
 8000aa0:	f001 fa16 	bl	8001ed0 <gpio_PB_config>

  //sw
  gpio_SW_config();
 8000aa4:	f001 fa40 	bl	8001f28 <gpio_SW_config>

  // interrupt
  exti_pb_config();
 8000aa8:	f001 f9a2 	bl	8001df0 <exti_pb_config>



  while (1)
  {
	  if(pb_intertupt_flag)
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <main+0x4c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0fb      	beq.n	8000aac <main+0x24>
	  {
		  pb_intertupt_flag = false;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <main+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
		  gpio_LED_toggle_green();
 8000aba:	f001 f9fd 	bl	8001eb8 <gpio_LED_toggle_green>
		  HAL_Delay(10);
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f000 f8d4 	bl	8000c6c <HAL_Delay>
		  EXTI->IMR |= (1UL << 0);
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <main+0x50>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <main+0x50>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]
	  if(pb_intertupt_flag)
 8000ad0:	e7ec      	b.n	8000aac <main+0x24>
 8000ad2:	bf00      	nop
 8000ad4:	200001f8 	.word	0x200001f8
 8000ad8:	40010400 	.word	0x40010400

08000adc <HAL_GPIO_EXTI_Callback>:
	  }
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x22>
	{
		pb_intertupt_flag = true;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
		EXTI->IMR &= ~(1UL << 0);
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x30>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x30>)
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
	}
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200001f8 	.word	0x200001f8
 8000b0c:	40010400 	.word	0x40010400

08000b10 <__io_putchar>:
//-----------------------------------------------------------------------//
int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    uint8_t c[1];
    c[0] = ch & 0x00FF;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000b1e:	f107 010c 	add.w	r1, r7, #12
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	2201      	movs	r2, #1
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <__io_putchar+0x28>)
 8000b28:	f000 fff8 	bl	8001b1c <HAL_UART_Transmit>
    return ch;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000200 	.word	0x20000200

08000b3c <_write>:

int _write(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e009      	b.n	8000b62 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	60ba      	str	r2, [r7, #8]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffda 	bl	8000b10 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbf1      	blt.n	8000b4e <_write+0x12>
    }
    return len;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SysTick_Handler>:

//-----------------------------------------------------------------------//
// function definition                                                   //
//-----------------------------------------------------------------------//
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b78:	f000 f85c 	bl	8000c34 <HAL_IncTick>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fb41 	bl	800120c <HAL_GPIO_EXTI_IRQHandler>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_Init+0x28>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x28>)
 8000ba6:	f043 0310 	orr.w	r3, r3, #16
 8000baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f94d 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f80e 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f000 f806 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f95f 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f927 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200001fc 	.word	0x200001fc

08000c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	200001fc 	.word	0x200001fc

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4906      	ldr	r1, [pc, #24]	; (8000d4c <__NVIC_EnableIRQ+0x34>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff90 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff2d 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff42 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff90 	bl	8000da4 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5f 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff35 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e169      	b.n	80011b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8158 	bne.w	80011b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4a9a      	ldr	r2, [pc, #616]	; (8001170 <HAL_GPIO_Init+0x2a0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d05e      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f0c:	4a98      	ldr	r2, [pc, #608]	; (8001170 <HAL_GPIO_Init+0x2a0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d875      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f12:	4a98      	ldr	r2, [pc, #608]	; (8001174 <HAL_GPIO_Init+0x2a4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d058      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f18:	4a96      	ldr	r2, [pc, #600]	; (8001174 <HAL_GPIO_Init+0x2a4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d86f      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f1e:	4a96      	ldr	r2, [pc, #600]	; (8001178 <HAL_GPIO_Init+0x2a8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d052      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f24:	4a94      	ldr	r2, [pc, #592]	; (8001178 <HAL_GPIO_Init+0x2a8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d869      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f2a:	4a94      	ldr	r2, [pc, #592]	; (800117c <HAL_GPIO_Init+0x2ac>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d04c      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f30:	4a92      	ldr	r2, [pc, #584]	; (800117c <HAL_GPIO_Init+0x2ac>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d863      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f36:	4a92      	ldr	r2, [pc, #584]	; (8001180 <HAL_GPIO_Init+0x2b0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d046      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f3c:	4a90      	ldr	r2, [pc, #576]	; (8001180 <HAL_GPIO_Init+0x2b0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d85d      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d82a      	bhi.n	8000f9c <HAL_GPIO_Init+0xcc>
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d859      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f4a:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <HAL_GPIO_Init+0x80>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000fcb 	.word	0x08000fcb
 8000f54:	08000fa5 	.word	0x08000fa5
 8000f58:	08000fb7 	.word	0x08000fb7
 8000f5c:	08000ff9 	.word	0x08000ff9
 8000f60:	08000fff 	.word	0x08000fff
 8000f64:	08000fff 	.word	0x08000fff
 8000f68:	08000fff 	.word	0x08000fff
 8000f6c:	08000fff 	.word	0x08000fff
 8000f70:	08000fff 	.word	0x08000fff
 8000f74:	08000fff 	.word	0x08000fff
 8000f78:	08000fff 	.word	0x08000fff
 8000f7c:	08000fff 	.word	0x08000fff
 8000f80:	08000fff 	.word	0x08000fff
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08000fff 	.word	0x08000fff
 8000f8c:	08000fff 	.word	0x08000fff
 8000f90:	08000fff 	.word	0x08000fff
 8000f94:	08000fad 	.word	0x08000fad
 8000f98:	08000fc1 	.word	0x08000fc1
 8000f9c:	4a79      	ldr	r2, [pc, #484]	; (8001184 <HAL_GPIO_Init+0x2b4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fa2:	e02c      	b.n	8000ffe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e029      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e024      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e01f      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e01a      	b.n	8001000 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e013      	b.n	8001000 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	611a      	str	r2, [r3, #16]
          break;
 8000fea:	e009      	b.n	8001000 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	615a      	str	r2, [r3, #20]
          break;
 8000ff6:	e003      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x130>
          break;
 8000ffe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d801      	bhi.n	800100a <HAL_GPIO_Init+0x13a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	e001      	b.n	800100e <HAL_GPIO_Init+0x13e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d802      	bhi.n	800101c <HAL_GPIO_Init+0x14c>
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x152>
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	3b08      	subs	r3, #8
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	210f      	movs	r1, #15
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	6a39      	ldr	r1, [r7, #32]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80b1 	beq.w	80011b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001050:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <HAL_GPIO_Init+0x2b8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001068:	4a48      	ldr	r2, [pc, #288]	; (800118c <HAL_GPIO_Init+0x2bc>)
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a40      	ldr	r2, [pc, #256]	; (8001190 <HAL_GPIO_Init+0x2c0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_GPIO_Init+0x1ec>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d00d      	beq.n	80010b8 <HAL_GPIO_Init+0x1e8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3e      	ldr	r2, [pc, #248]	; (8001198 <HAL_GPIO_Init+0x2c8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x1e4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3d      	ldr	r2, [pc, #244]	; (800119c <HAL_GPIO_Init+0x2cc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d101      	bne.n	80010b0 <HAL_GPIO_Init+0x1e0>
 80010ac:	2303      	movs	r3, #3
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010b0:	2304      	movs	r3, #4
 80010b2:	e004      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_GPIO_Init+0x1ee>
 80010bc:	2300      	movs	r3, #0
 80010be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ce:	492f      	ldr	r1, [pc, #188]	; (800118c <HAL_GPIO_Init+0x2bc>)
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	492c      	ldr	r1, [pc, #176]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4928      	ldr	r1, [pc, #160]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001100:	4013      	ands	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4922      	ldr	r1, [pc, #136]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	43db      	mvns	r3, r3
 8001126:	491e      	ldr	r1, [pc, #120]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001128:	4013      	ands	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	4918      	ldr	r1, [pc, #96]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4914      	ldr	r1, [pc, #80]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001150:	4013      	ands	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d021      	beq.n	80011a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	490e      	ldr	r1, [pc, #56]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
 800116c:	e021      	b.n	80011b2 <HAL_GPIO_Init+0x2e2>
 800116e:	bf00      	nop
 8001170:	10320000 	.word	0x10320000
 8001174:	10310000 	.word	0x10310000
 8001178:	10220000 	.word	0x10220000
 800117c:	10210000 	.word	0x10210000
 8001180:	10120000 	.word	0x10120000
 8001184:	10110000 	.word	0x10110000
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00
 8001198:	40011000 	.word	0x40011000
 800119c:	40011400 	.word	0x40011400
 80011a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_GPIO_Init+0x304>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4909      	ldr	r1, [pc, #36]	; (80011d4 <HAL_GPIO_Init+0x304>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	3301      	adds	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f47f ae8e 	bne.w	8000ee4 <HAL_GPIO_Init+0x14>
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	372c      	adds	r7, #44	; 0x2c
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4013      	ands	r3, r2
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43d9      	mvns	r1, r3
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	400b      	ands	r3, r1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	611a      	str	r2, [r3, #16]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fc56 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e272      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8087 	beq.w	800136a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b04      	cmp	r3, #4
 8001266:	d00c      	beq.n	8001282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001268:	4b8f      	ldr	r3, [pc, #572]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d112      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
 8001274:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d10b      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d06c      	beq.n	8001368 <HAL_RCC_OscConfig+0x12c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d168      	bne.n	8001368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e24c      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x76>
 80012a4:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7f      	ldr	r2, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e02e      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b7b      	ldr	r3, [pc, #492]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7a      	ldr	r2, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a77      	ldr	r2, [pc, #476]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0xbc>
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a71      	ldr	r2, [pc, #452]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012f8:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a6a      	ldr	r2, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a67      	ldr	r2, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc9e 	bl	8000c58 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc9a 	bl	8000c58 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e200      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xe4>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc8a 	bl	8000c58 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc86 	bl	8000c58 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1ec      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x10c>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001376:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
 800138e:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c0      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4939      	ldr	r1, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x270>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fc3f 	bl	8000c58 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fc3b 	bl	8000c58 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a1      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4927      	ldr	r1, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_RCC_OscConfig+0x270>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fc1e 	bl	8000c58 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fc1a 	bl	8000c58 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e180      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03a      	beq.n	80014c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d019      	beq.n	8001486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fbfe 	bl	8000c58 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fbfa 	bl	8000c58 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e160      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f000 fad8 	bl	8001a34 <RCC_Delay>
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fbe4 	bl	8000c58 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001492:	e00f      	b.n	80014b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fbe0 	bl	8000c58 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d908      	bls.n	80014b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e146      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	42420000 	.word	0x42420000
 80014b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e9      	bne.n	8001494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a6 	beq.w	800161a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b8b      	ldr	r3, [pc, #556]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a87      	ldr	r2, [pc, #540]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d118      	bne.n	8001538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a7e      	ldr	r2, [pc, #504]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff fba1 	bl	8000c58 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff fb9d 	bl	8000c58 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e103      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b75      	ldr	r3, [pc, #468]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x312>
 8001540:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e02d      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001556:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a69      	ldr	r2, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a66      	ldr	r2, [pc, #408]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	e01c      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x356>
 8001578:	4b61      	ldr	r3, [pc, #388]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a60      	ldr	r2, [pc, #384]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a5d      	ldr	r2, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a5a      	ldr	r2, [pc, #360]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d015      	beq.n	80015de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb51 	bl	8000c58 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff fb4d 	bl	8000c58 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0b1      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ee      	beq.n	80015ba <HAL_RCC_OscConfig+0x37e>
 80015dc:	e014      	b.n	8001608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fb3b 	bl	8000c58 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fb37 	bl	8000c58 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e09b      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d105      	bne.n	800161a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8087 	beq.w	8001732 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d061      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d146      	bne.n	80016c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb0b 	bl	8000c58 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fb07 	bl	8000c58 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e06d      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4921      	ldr	r1, [pc, #132]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a19      	ldr	r1, [r3, #32]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	430b      	orrs	r3, r1
 8001692:	491b      	ldr	r1, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x4cc>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fadb 	bl	8000c58 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fad7 	bl	8000c58 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46a>
 80016c4:	e035      	b.n	8001732 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x4cc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fac4 	bl	8000c58 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fac0 	bl	8000c58 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e026      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x498>
 80016f2:	e01e      	b.n	8001732 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e019      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
 8001700:	40021000 	.word	0x40021000
 8001704:	40007000 	.word	0x40007000
 8001708:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_OscConfig+0x500>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	429a      	cmp	r2, r3
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0d0      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d910      	bls.n	8001784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0207 	bic.w	r2, r3, #7
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b8      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800179c:	4b59      	ldr	r3, [pc, #356]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a58      	ldr	r2, [pc, #352]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b4:	4b53      	ldr	r3, [pc, #332]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	494d      	ldr	r1, [pc, #308]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d040      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e07f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e073      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06b      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4936      	ldr	r1, [pc, #216]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fa12 	bl	8000c58 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fa0e 	bl	8000c58 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e053      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d210      	bcs.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	4922      	ldr	r1, [pc, #136]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e032      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4916      	ldr	r1, [pc, #88]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	490e      	ldr	r1, [pc, #56]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ce:	f000 f821 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	490a      	ldr	r1, [pc, #40]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	5ccb      	ldrb	r3, [r1, r3]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1cc>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff f970 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000
 8001904:	40021000 	.word	0x40021000
 8001908:	08004c98 	.word	0x08004c98
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b490      	push	{r4, r7}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800191c:	1d3c      	adds	r4, r7, #4
 800191e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001920:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001924:	f240 2301 	movw	r3, #513	; 0x201
 8001928:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b04      	cmp	r3, #4
 800194c:	d002      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x40>
 800194e:	2b08      	cmp	r3, #8
 8001950:	d003      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x46>
 8001952:	e02b      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001956:	623b      	str	r3, [r7, #32]
      break;
 8001958:	e02b      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3328      	adds	r3, #40	; 0x28
 8001964:	443b      	add	r3, r7
 8001966:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800196a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0c5b      	lsrs	r3, r3, #17
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	3328      	adds	r3, #40	; 0x28
 8001982:	443b      	add	r3, r7
 8001984:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001988:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800198e:	fb03 f202 	mul.w	r2, r3, r2
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	e004      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	623b      	str	r3, [r7, #32]
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ae:	623b      	str	r3, [r7, #32]
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6a3b      	ldr	r3, [r7, #32]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc90      	pop	{r4, r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	08004c88 	.word	0x08004c88
 80019c4:	40021000 	.word	0x40021000
 80019c8:	007a1200 	.word	0x007a1200
 80019cc:	003d0900 	.word	0x003d0900

080019d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff2 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08004ca8 	.word	0x08004ca8

08001a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	0adb      	lsrs	r3, r3, #11
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4903      	ldr	r1, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08004ca8 	.word	0x08004ca8

08001a34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <RCC_Delay+0x34>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <RCC_Delay+0x38>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a50:	bf00      	nop
  }
  while (Delay --);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	60fa      	str	r2, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <RCC_Delay+0x1c>
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	10624dd3 	.word	0x10624dd3

08001a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e03f      	b.n	8001b02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f837 	bl	8001b0a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f90d 	bl	8001cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d17c      	bne.n	8001c36 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <HAL_UART_Transmit+0x2c>
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e075      	b.n	8001c38 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Transmit+0x3e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e06e      	b.n	8001c38 <HAL_UART_Transmit+0x11c>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2221      	movs	r2, #33	; 0x21
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f872 	bl	8000c58 <HAL_GetTick>
 8001b74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	88fa      	ldrh	r2, [r7, #6]
 8001b80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8a:	d108      	bne.n	8001b9e <HAL_UART_Transmit+0x82>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d104      	bne.n	8001b9e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e003      	b.n	8001ba6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bae:	e02a      	b.n	8001c06 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f840 	bl	8001c40 <UART_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e036      	b.n	8001c38 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10b      	bne.n	8001be8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	3302      	adds	r3, #2
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e007      	b.n	8001bf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1cf      	bne.n	8001bb0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f810 	bl	8001c40 <UART_WaitOnFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e006      	b.n	8001c38 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c50:	e02c      	b.n	8001cac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d028      	beq.n	8001cac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c60:	f7fe fffa 	bl	8000c58 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d21d      	bcs.n	8001cac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e00f      	b.n	8001ccc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d0c3      	beq.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d0e:	f023 030c 	bic.w	r3, r3, #12
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <UART_SetConfig+0x114>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d103      	bne.n	8001d44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d3c:	f7ff fe66 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	e002      	b.n	8001d4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d44:	f7ff fe4e 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8001d48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <UART_SetConfig+0x118>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	0119      	lsls	r1, r3, #4
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009a      	lsls	r2, r3, #2
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <UART_SetConfig+0x118>)
 8001d82:	fba3 0302 	umull	r0, r3, r3, r2
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2064      	movs	r0, #100	; 0x64
 8001d8a:	fb00 f303 	mul.w	r3, r0, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	3332      	adds	r3, #50	; 0x32
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <UART_SetConfig+0x118>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	4419      	add	r1, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <UART_SetConfig+0x118>)
 8001dba:	fba3 0302 	umull	r0, r3, r3, r2
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2064      	movs	r0, #100	; 0x64
 8001dc2:	fb00 f303 	mul.w	r3, r0, r3
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	3332      	adds	r3, #50	; 0x32
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <UART_SetConfig+0x118>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	440a      	add	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40013800 	.word	0x40013800
 8001dec:	51eb851f 	.word	0x51eb851f

08001df0 <exti_pb_config>:

/*
// @brief EXTI Configuration
*/
void exti_pb_config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
  	// user button PA0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <exti_pb_config+0x60>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <exti_pb_config+0x60>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6193      	str	r3, [r2, #24]
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <exti_pb_config+0x60>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_IT_RISING;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <exti_pb_config+0x64>)
 8001e1e:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pin = GPIO_PIN_0;
 8001e20:	2301      	movs	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <exti_pb_config+0x68>)
 8001e34:	f7ff f84c 	bl	8000ed0 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2105      	movs	r1, #5
 8001e3c:	2006      	movs	r0, #6
 8001e3e:	f7ff f810 	bl	8000e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e42:	2006      	movs	r0, #6
 8001e44:	f7ff f829 	bl	8000e9a <HAL_NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	10110000 	.word	0x10110000
 8001e58:	40010800 	.word	0x40010800

08001e5c <gpio_LED_config>:

/*
// @brief LED GPIO Configuration
*/
void gpio_LED_config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
	// green LED => PB13
	// red   LED => PB14

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <gpio_LED_config+0x54>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <gpio_LED_config+0x54>)
 8001e68:	f043 0308 	orr.w	r3, r3, #8
 8001e6c:	6193      	str	r3, [r2, #24]
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <gpio_LED_config+0x54>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef gpio_init_struct = {0};
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
  gpio_init_struct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001e8c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e90:	60bb      	str	r3, [r7, #8]
  gpio_init_struct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2302      	movs	r3, #2
 8001e98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_struct);
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <gpio_LED_config+0x58>)
 8001ea2:	f7ff f815 	bl	8000ed0 <HAL_GPIO_Init>

}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010c00 	.word	0x40010c00

08001eb8 <gpio_LED_toggle_green>:
void gpio_LED_write_red(bool state)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)state);
}
void gpio_LED_toggle_green(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <gpio_LED_toggle_green+0x14>)
 8001ec2:	f7ff f989 	bl	80011d8 <HAL_GPIO_TogglePin>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40010c00 	.word	0x40010c00

08001ed0 <gpio_PB_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_PB_config(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
	// user button PA0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <gpio_PB_config+0x50>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <gpio_PB_config+0x50>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6193      	str	r3, [r2, #24]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <gpio_PB_config+0x50>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pin = GPIO_PIN_0;
 8001f00:	2301      	movs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4619      	mov	r1, r3
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <gpio_PB_config+0x54>)
 8001f14:	f7fe ffdc 	bl	8000ed0 <HAL_GPIO_Init>

}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010800 	.word	0x40010800

08001f28 <gpio_SW_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_SW_config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
	// sw-1 PA8
	// sw-2 PA15

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <gpio_SW_config+0x88>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <gpio_SW_config+0x88>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <gpio_SW_config+0x88>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pin = GPIO_PIN_8 | GPIO_PIN_15;
 8001f58:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001f5c:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <gpio_SW_config+0x8c>)
 8001f6e:	f7fe ffaf 	bl	8000ed0 <HAL_GPIO_Init>

	// remap
	__HAL_RCC_AFIO_CLK_ENABLE();
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <gpio_SW_config+0x88>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <gpio_SW_config+0x88>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6193      	str	r3, [r2, #24]
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <gpio_SW_config+0x88>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <gpio_SW_config+0x90>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <gpio_SW_config+0x90>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	6053      	str	r3, [r2, #4]
}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	40010000 	.word	0x40010000

08001fbc <rcc_system_clock_config>:
//-----------------------------------------------------------------------//
/*
// rcc clock configuration
*/
bool rcc_system_clock_config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af00      	add	r7, sp, #0

    // APB1 Prescaler = 2 => 36, 72 MHz
    // APB2 Prescaler = 1 => 72, 72 MHz
    // ADC Prescaler = 6 => 12 MHz

    RCC_OscInitTypeDef osc_init_struct = {0};
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	2228      	movs	r2, #40	; 0x28
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f8f2 	bl	80021b4 <memset>
    RCC_ClkInitTypeDef clk_init_struct = {0};
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]

    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
    osc_init_struct.HSEState = RCC_HSE_ON;
 8001fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe6:	61fb      	str	r3, [r7, #28]
    osc_init_struct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
    osc_init_struct.PLL.PLLState = RCC_PLL_ON;
 8001fec:	2302      	movs	r3, #2
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ff6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_RCC_OscConfig(&osc_init_struct) != HAL_OK)
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f91b 	bl	800123c <HAL_RCC_OscConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <rcc_system_clock_config+0x54>
    {
      return false;
 800200c:	2300      	movs	r3, #0
 800200e:	e014      	b.n	800203a <rcc_system_clock_config+0x7e>
    }

    // clock initialization
    clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8002010:	230f      	movs	r3, #15
 8002012:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1  |
                                RCC_CLOCKTYPE_PCLK2  |
                                RCC_CLOCKTYPE_SYSCLK ;

    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002014:	2302      	movs	r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
    clk_init_struct.APB1CLKDivider = RCC_SYSCLK_DIV2;
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	613b      	str	r3, [r7, #16]
    clk_init_struct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    // 00 - 24MHz => 0
    // 24 - 48MHz => 1
    // 48 - 72MHz => 2
    if(HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2102      	movs	r1, #2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fb89 	bl	8001740 <HAL_RCC_ClockConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <rcc_system_clock_config+0x7c>
    {
      return false;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <rcc_system_clock_config+0x7e>
    }

    return true;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	3740      	adds	r7, #64	; 0x40
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <uart_UART1_GPIO_config>:
//-----------------------------------------------------------------------//
/*
// @brief UART1 GPIO configuration
*/
void uart_UART1_GPIO_config(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
    // PA9  => TX
    // PA10 => RX
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <uart_UART1_GPIO_config+0x5c>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <uart_UART1_GPIO_config+0x5c>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <uart_UART1_GPIO_config+0x5c>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    // PA9  => TX
    gpio_init_struct.Pin = GPIO_PIN_9;
 8002062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002066:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4619      	mov	r1, r3
 8002076:	480b      	ldr	r0, [pc, #44]	; (80020a4 <uart_UART1_GPIO_config+0x60>)
 8002078:	f7fe ff2a 	bl	8000ed0 <HAL_GPIO_Init>

    // PA10 => RX
    gpio_init_struct.Pin = GPIO_PIN_10;
 800207c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002080:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4619      	mov	r1, r3
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <uart_UART1_GPIO_config+0x60>)
 8002092:	f7fe ff1d 	bl	8000ed0 <HAL_GPIO_Init>




}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010800 	.word	0x40010800

080020a8 <uart_UART1_config>:
/*
// @brief UART1 Peripheral configuration
*/
bool uart_UART1_config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  __HAL_RCC_USART1_CLK_ENABLE();
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <uart_UART1_config+0x6c>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4a18      	ldr	r2, [pc, #96]	; (8002114 <uart_UART1_config+0x6c>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6193      	str	r3, [r2, #24]
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <uart_UART1_config+0x6c>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]

  huart1.Instance = USART1;
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <uart_UART1_config+0x70>)
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <uart_UART1_config+0x74>)
 80020ca:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <uart_UART1_config+0x70>)
 80020ce:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d2:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <uart_UART1_config+0x70>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <uart_UART1_config+0x70>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <uart_UART1_config+0x70>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <uart_UART1_config+0x70>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <uart_UART1_config+0x70>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <uart_UART1_config+0x70>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 80020f8:	4807      	ldr	r0, [pc, #28]	; (8002118 <uart_UART1_config+0x70>)
 80020fa:	f7ff fcb9 	bl	8001a70 <HAL_UART_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <uart_UART1_config+0x60>
  {
    return false;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <uart_UART1_config+0x62>
  }

  return true;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	20000200 	.word	0x20000200
 800211c:	40013800 	.word	0x40013800

08002120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002122:	490d      	ldr	r1, [pc, #52]	; (8002158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002138:	4c0a      	ldr	r4, [pc, #40]	; (8002164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002146:	f7fe fd22 	bl	8000b8e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f000 f80f 	bl	800216c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214e:	f7fe fc9b 	bl	8000a88 <main>
  bx lr
 8002152:	4770      	bx	lr
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800215c:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8002160:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002164:	20000258 	.word	0x20000258

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <__libc_init_array>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2600      	movs	r6, #0
 8002170:	4d0c      	ldr	r5, [pc, #48]	; (80021a4 <__libc_init_array+0x38>)
 8002172:	4c0d      	ldr	r4, [pc, #52]	; (80021a8 <__libc_init_array+0x3c>)
 8002174:	1b64      	subs	r4, r4, r5
 8002176:	10a4      	asrs	r4, r4, #2
 8002178:	42a6      	cmp	r6, r4
 800217a:	d109      	bne.n	8002190 <__libc_init_array+0x24>
 800217c:	f002 fd78 	bl	8004c70 <_init>
 8002180:	2600      	movs	r6, #0
 8002182:	4d0a      	ldr	r5, [pc, #40]	; (80021ac <__libc_init_array+0x40>)
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <__libc_init_array+0x44>)
 8002186:	1b64      	subs	r4, r4, r5
 8002188:	10a4      	asrs	r4, r4, #2
 800218a:	42a6      	cmp	r6, r4
 800218c:	d105      	bne.n	800219a <__libc_init_array+0x2e>
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	f855 3b04 	ldr.w	r3, [r5], #4
 8002194:	4798      	blx	r3
 8002196:	3601      	adds	r6, #1
 8002198:	e7ee      	b.n	8002178 <__libc_init_array+0xc>
 800219a:	f855 3b04 	ldr.w	r3, [r5], #4
 800219e:	4798      	blx	r3
 80021a0:	3601      	adds	r6, #1
 80021a2:	e7f2      	b.n	800218a <__libc_init_array+0x1e>
 80021a4:	0800508c 	.word	0x0800508c
 80021a8:	0800508c 	.word	0x0800508c
 80021ac:	0800508c 	.word	0x0800508c
 80021b0:	08005090 	.word	0x08005090

080021b4 <memset>:
 80021b4:	4603      	mov	r3, r0
 80021b6:	4402      	add	r2, r0
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d100      	bne.n	80021be <memset+0xa>
 80021bc:	4770      	bx	lr
 80021be:	f803 1b01 	strb.w	r1, [r3], #1
 80021c2:	e7f9      	b.n	80021b8 <memset+0x4>

080021c4 <__cvt>:
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021ca:	461f      	mov	r7, r3
 80021cc:	bfbb      	ittet	lt
 80021ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	461f      	movlt	r7, r3
 80021d4:	2300      	movge	r3, #0
 80021d6:	232d      	movlt	r3, #45	; 0x2d
 80021d8:	b088      	sub	sp, #32
 80021da:	4614      	mov	r4, r2
 80021dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80021de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80021e0:	7013      	strb	r3, [r2, #0]
 80021e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80021e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80021e8:	f023 0820 	bic.w	r8, r3, #32
 80021ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80021f0:	d005      	beq.n	80021fe <__cvt+0x3a>
 80021f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80021f6:	d100      	bne.n	80021fa <__cvt+0x36>
 80021f8:	3501      	adds	r5, #1
 80021fa:	2302      	movs	r3, #2
 80021fc:	e000      	b.n	8002200 <__cvt+0x3c>
 80021fe:	2303      	movs	r3, #3
 8002200:	aa07      	add	r2, sp, #28
 8002202:	9204      	str	r2, [sp, #16]
 8002204:	aa06      	add	r2, sp, #24
 8002206:	e9cd a202 	strd	sl, r2, [sp, #8]
 800220a:	e9cd 3500 	strd	r3, r5, [sp]
 800220e:	4622      	mov	r2, r4
 8002210:	463b      	mov	r3, r7
 8002212:	f000 fcc5 	bl	8002ba0 <_dtoa_r>
 8002216:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800221a:	4606      	mov	r6, r0
 800221c:	d102      	bne.n	8002224 <__cvt+0x60>
 800221e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002220:	07db      	lsls	r3, r3, #31
 8002222:	d522      	bpl.n	800226a <__cvt+0xa6>
 8002224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002228:	eb06 0905 	add.w	r9, r6, r5
 800222c:	d110      	bne.n	8002250 <__cvt+0x8c>
 800222e:	7833      	ldrb	r3, [r6, #0]
 8002230:	2b30      	cmp	r3, #48	; 0x30
 8002232:	d10a      	bne.n	800224a <__cvt+0x86>
 8002234:	2200      	movs	r2, #0
 8002236:	2300      	movs	r3, #0
 8002238:	4620      	mov	r0, r4
 800223a:	4639      	mov	r1, r7
 800223c:	f7fe fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8002240:	b918      	cbnz	r0, 800224a <__cvt+0x86>
 8002242:	f1c5 0501 	rsb	r5, r5, #1
 8002246:	f8ca 5000 	str.w	r5, [sl]
 800224a:	f8da 3000 	ldr.w	r3, [sl]
 800224e:	4499      	add	r9, r3
 8002250:	2200      	movs	r2, #0
 8002252:	2300      	movs	r3, #0
 8002254:	4620      	mov	r0, r4
 8002256:	4639      	mov	r1, r7
 8002258:	f7fe fba6 	bl	80009a8 <__aeabi_dcmpeq>
 800225c:	b108      	cbz	r0, 8002262 <__cvt+0x9e>
 800225e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002262:	2230      	movs	r2, #48	; 0x30
 8002264:	9b07      	ldr	r3, [sp, #28]
 8002266:	454b      	cmp	r3, r9
 8002268:	d307      	bcc.n	800227a <__cvt+0xb6>
 800226a:	4630      	mov	r0, r6
 800226c:	9b07      	ldr	r3, [sp, #28]
 800226e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002270:	1b9b      	subs	r3, r3, r6
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	b008      	add	sp, #32
 8002276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	9107      	str	r1, [sp, #28]
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e7f0      	b.n	8002264 <__cvt+0xa0>

08002282 <__exponent>:
 8002282:	4603      	mov	r3, r0
 8002284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002286:	2900      	cmp	r1, #0
 8002288:	f803 2b02 	strb.w	r2, [r3], #2
 800228c:	bfb6      	itet	lt
 800228e:	222d      	movlt	r2, #45	; 0x2d
 8002290:	222b      	movge	r2, #43	; 0x2b
 8002292:	4249      	neglt	r1, r1
 8002294:	2909      	cmp	r1, #9
 8002296:	7042      	strb	r2, [r0, #1]
 8002298:	dd2b      	ble.n	80022f2 <__exponent+0x70>
 800229a:	f10d 0407 	add.w	r4, sp, #7
 800229e:	46a4      	mov	ip, r4
 80022a0:	270a      	movs	r7, #10
 80022a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80022a6:	460a      	mov	r2, r1
 80022a8:	46a6      	mov	lr, r4
 80022aa:	fb07 1516 	mls	r5, r7, r6, r1
 80022ae:	2a63      	cmp	r2, #99	; 0x63
 80022b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80022b4:	4631      	mov	r1, r6
 80022b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80022ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80022be:	dcf0      	bgt.n	80022a2 <__exponent+0x20>
 80022c0:	3130      	adds	r1, #48	; 0x30
 80022c2:	f1ae 0502 	sub.w	r5, lr, #2
 80022c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80022ca:	4629      	mov	r1, r5
 80022cc:	1c44      	adds	r4, r0, #1
 80022ce:	4561      	cmp	r1, ip
 80022d0:	d30a      	bcc.n	80022e8 <__exponent+0x66>
 80022d2:	f10d 0209 	add.w	r2, sp, #9
 80022d6:	eba2 020e 	sub.w	r2, r2, lr
 80022da:	4565      	cmp	r5, ip
 80022dc:	bf88      	it	hi
 80022de:	2200      	movhi	r2, #0
 80022e0:	4413      	add	r3, r2
 80022e2:	1a18      	subs	r0, r3, r0
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80022f0:	e7ed      	b.n	80022ce <__exponent+0x4c>
 80022f2:	2330      	movs	r3, #48	; 0x30
 80022f4:	3130      	adds	r1, #48	; 0x30
 80022f6:	7083      	strb	r3, [r0, #2]
 80022f8:	70c1      	strb	r1, [r0, #3]
 80022fa:	1d03      	adds	r3, r0, #4
 80022fc:	e7f1      	b.n	80022e2 <__exponent+0x60>
	...

08002300 <_printf_float>:
 8002300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002304:	b091      	sub	sp, #68	; 0x44
 8002306:	460c      	mov	r4, r1
 8002308:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800230c:	4616      	mov	r6, r2
 800230e:	461f      	mov	r7, r3
 8002310:	4605      	mov	r5, r0
 8002312:	f001 fa33 	bl	800377c <_localeconv_r>
 8002316:	6803      	ldr	r3, [r0, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	9309      	str	r3, [sp, #36]	; 0x24
 800231c:	f7fd ff18 	bl	8000150 <strlen>
 8002320:	2300      	movs	r3, #0
 8002322:	930e      	str	r3, [sp, #56]	; 0x38
 8002324:	f8d8 3000 	ldr.w	r3, [r8]
 8002328:	900a      	str	r0, [sp, #40]	; 0x28
 800232a:	3307      	adds	r3, #7
 800232c:	f023 0307 	bic.w	r3, r3, #7
 8002330:	f103 0208 	add.w	r2, r3, #8
 8002334:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002338:	f8d4 b000 	ldr.w	fp, [r4]
 800233c:	f8c8 2000 	str.w	r2, [r8]
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002348:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800234c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002350:	930b      	str	r3, [sp, #44]	; 0x2c
 8002352:	f04f 32ff 	mov.w	r2, #4294967295
 8002356:	4640      	mov	r0, r8
 8002358:	4b9c      	ldr	r3, [pc, #624]	; (80025cc <_printf_float+0x2cc>)
 800235a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800235c:	f7fe fb56 	bl	8000a0c <__aeabi_dcmpun>
 8002360:	bb70      	cbnz	r0, 80023c0 <_printf_float+0xc0>
 8002362:	f04f 32ff 	mov.w	r2, #4294967295
 8002366:	4640      	mov	r0, r8
 8002368:	4b98      	ldr	r3, [pc, #608]	; (80025cc <_printf_float+0x2cc>)
 800236a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800236c:	f7fe fb30 	bl	80009d0 <__aeabi_dcmple>
 8002370:	bb30      	cbnz	r0, 80023c0 <_printf_float+0xc0>
 8002372:	2200      	movs	r2, #0
 8002374:	2300      	movs	r3, #0
 8002376:	4640      	mov	r0, r8
 8002378:	4651      	mov	r1, sl
 800237a:	f7fe fb1f 	bl	80009bc <__aeabi_dcmplt>
 800237e:	b110      	cbz	r0, 8002386 <_printf_float+0x86>
 8002380:	232d      	movs	r3, #45	; 0x2d
 8002382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002386:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <_printf_float+0x2d0>)
 8002388:	4892      	ldr	r0, [pc, #584]	; (80025d4 <_printf_float+0x2d4>)
 800238a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800238e:	bf94      	ite	ls
 8002390:	4698      	movls	r8, r3
 8002392:	4680      	movhi	r8, r0
 8002394:	2303      	movs	r3, #3
 8002396:	f04f 0a00 	mov.w	sl, #0
 800239a:	6123      	str	r3, [r4, #16]
 800239c:	f02b 0304 	bic.w	r3, fp, #4
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	4633      	mov	r3, r6
 80023a4:	4621      	mov	r1, r4
 80023a6:	4628      	mov	r0, r5
 80023a8:	9700      	str	r7, [sp, #0]
 80023aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80023ac:	f000 f9d4 	bl	8002758 <_printf_common>
 80023b0:	3001      	adds	r0, #1
 80023b2:	f040 8090 	bne.w	80024d6 <_printf_float+0x1d6>
 80023b6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ba:	b011      	add	sp, #68	; 0x44
 80023bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c0:	4642      	mov	r2, r8
 80023c2:	4653      	mov	r3, sl
 80023c4:	4640      	mov	r0, r8
 80023c6:	4651      	mov	r1, sl
 80023c8:	f7fe fb20 	bl	8000a0c <__aeabi_dcmpun>
 80023cc:	b148      	cbz	r0, 80023e2 <_printf_float+0xe2>
 80023ce:	f1ba 0f00 	cmp.w	sl, #0
 80023d2:	bfb8      	it	lt
 80023d4:	232d      	movlt	r3, #45	; 0x2d
 80023d6:	4880      	ldr	r0, [pc, #512]	; (80025d8 <_printf_float+0x2d8>)
 80023d8:	bfb8      	it	lt
 80023da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <_printf_float+0x2dc>)
 80023e0:	e7d3      	b.n	800238a <_printf_float+0x8a>
 80023e2:	6863      	ldr	r3, [r4, #4]
 80023e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	d142      	bne.n	8002472 <_printf_float+0x172>
 80023ec:	2306      	movs	r3, #6
 80023ee:	6063      	str	r3, [r4, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	9206      	str	r2, [sp, #24]
 80023f4:	aa0e      	add	r2, sp, #56	; 0x38
 80023f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80023fa:	aa0d      	add	r2, sp, #52	; 0x34
 80023fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002400:	9203      	str	r2, [sp, #12]
 8002402:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002406:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800240a:	6023      	str	r3, [r4, #0]
 800240c:	6863      	ldr	r3, [r4, #4]
 800240e:	4642      	mov	r2, r8
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	4628      	mov	r0, r5
 8002414:	4653      	mov	r3, sl
 8002416:	910b      	str	r1, [sp, #44]	; 0x2c
 8002418:	f7ff fed4 	bl	80021c4 <__cvt>
 800241c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800241e:	4680      	mov	r8, r0
 8002420:	2947      	cmp	r1, #71	; 0x47
 8002422:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002424:	d108      	bne.n	8002438 <_printf_float+0x138>
 8002426:	1cc8      	adds	r0, r1, #3
 8002428:	db02      	blt.n	8002430 <_printf_float+0x130>
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	4299      	cmp	r1, r3
 800242e:	dd40      	ble.n	80024b2 <_printf_float+0x1b2>
 8002430:	f1a9 0902 	sub.w	r9, r9, #2
 8002434:	fa5f f989 	uxtb.w	r9, r9
 8002438:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800243c:	d81f      	bhi.n	800247e <_printf_float+0x17e>
 800243e:	464a      	mov	r2, r9
 8002440:	3901      	subs	r1, #1
 8002442:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002446:	910d      	str	r1, [sp, #52]	; 0x34
 8002448:	f7ff ff1b 	bl	8002282 <__exponent>
 800244c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800244e:	4682      	mov	sl, r0
 8002450:	1813      	adds	r3, r2, r0
 8002452:	2a01      	cmp	r2, #1
 8002454:	6123      	str	r3, [r4, #16]
 8002456:	dc02      	bgt.n	800245e <_printf_float+0x15e>
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	07d2      	lsls	r2, r2, #31
 800245c:	d501      	bpl.n	8002462 <_printf_float+0x162>
 800245e:	3301      	adds	r3, #1
 8002460:	6123      	str	r3, [r4, #16]
 8002462:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002466:	2b00      	cmp	r3, #0
 8002468:	d09b      	beq.n	80023a2 <_printf_float+0xa2>
 800246a:	232d      	movs	r3, #45	; 0x2d
 800246c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002470:	e797      	b.n	80023a2 <_printf_float+0xa2>
 8002472:	2947      	cmp	r1, #71	; 0x47
 8002474:	d1bc      	bne.n	80023f0 <_printf_float+0xf0>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ba      	bne.n	80023f0 <_printf_float+0xf0>
 800247a:	2301      	movs	r3, #1
 800247c:	e7b7      	b.n	80023ee <_printf_float+0xee>
 800247e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002482:	d118      	bne.n	80024b6 <_printf_float+0x1b6>
 8002484:	2900      	cmp	r1, #0
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	dd0b      	ble.n	80024a2 <_printf_float+0x1a2>
 800248a:	6121      	str	r1, [r4, #16]
 800248c:	b913      	cbnz	r3, 8002494 <_printf_float+0x194>
 800248e:	6822      	ldr	r2, [r4, #0]
 8002490:	07d0      	lsls	r0, r2, #31
 8002492:	d502      	bpl.n	800249a <_printf_float+0x19a>
 8002494:	3301      	adds	r3, #1
 8002496:	440b      	add	r3, r1
 8002498:	6123      	str	r3, [r4, #16]
 800249a:	f04f 0a00 	mov.w	sl, #0
 800249e:	65a1      	str	r1, [r4, #88]	; 0x58
 80024a0:	e7df      	b.n	8002462 <_printf_float+0x162>
 80024a2:	b913      	cbnz	r3, 80024aa <_printf_float+0x1aa>
 80024a4:	6822      	ldr	r2, [r4, #0]
 80024a6:	07d2      	lsls	r2, r2, #31
 80024a8:	d501      	bpl.n	80024ae <_printf_float+0x1ae>
 80024aa:	3302      	adds	r3, #2
 80024ac:	e7f4      	b.n	8002498 <_printf_float+0x198>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e7f2      	b.n	8002498 <_printf_float+0x198>
 80024b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80024b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024b8:	4299      	cmp	r1, r3
 80024ba:	db05      	blt.n	80024c8 <_printf_float+0x1c8>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	6121      	str	r1, [r4, #16]
 80024c0:	07d8      	lsls	r0, r3, #31
 80024c2:	d5ea      	bpl.n	800249a <_printf_float+0x19a>
 80024c4:	1c4b      	adds	r3, r1, #1
 80024c6:	e7e7      	b.n	8002498 <_printf_float+0x198>
 80024c8:	2900      	cmp	r1, #0
 80024ca:	bfcc      	ite	gt
 80024cc:	2201      	movgt	r2, #1
 80024ce:	f1c1 0202 	rsble	r2, r1, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	e7e0      	b.n	8002498 <_printf_float+0x198>
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	055a      	lsls	r2, r3, #21
 80024da:	d407      	bmi.n	80024ec <_printf_float+0x1ec>
 80024dc:	6923      	ldr	r3, [r4, #16]
 80024de:	4642      	mov	r2, r8
 80024e0:	4631      	mov	r1, r6
 80024e2:	4628      	mov	r0, r5
 80024e4:	47b8      	blx	r7
 80024e6:	3001      	adds	r0, #1
 80024e8:	d12b      	bne.n	8002542 <_printf_float+0x242>
 80024ea:	e764      	b.n	80023b6 <_printf_float+0xb6>
 80024ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80024f0:	f240 80dd 	bls.w	80026ae <_printf_float+0x3ae>
 80024f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80024f8:	2200      	movs	r2, #0
 80024fa:	2300      	movs	r3, #0
 80024fc:	f7fe fa54 	bl	80009a8 <__aeabi_dcmpeq>
 8002500:	2800      	cmp	r0, #0
 8002502:	d033      	beq.n	800256c <_printf_float+0x26c>
 8002504:	2301      	movs	r3, #1
 8002506:	4631      	mov	r1, r6
 8002508:	4628      	mov	r0, r5
 800250a:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <_printf_float+0x2e0>)
 800250c:	47b8      	blx	r7
 800250e:	3001      	adds	r0, #1
 8002510:	f43f af51 	beq.w	80023b6 <_printf_float+0xb6>
 8002514:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002518:	429a      	cmp	r2, r3
 800251a:	db02      	blt.n	8002522 <_printf_float+0x222>
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	07d8      	lsls	r0, r3, #31
 8002520:	d50f      	bpl.n	8002542 <_printf_float+0x242>
 8002522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002526:	4631      	mov	r1, r6
 8002528:	4628      	mov	r0, r5
 800252a:	47b8      	blx	r7
 800252c:	3001      	adds	r0, #1
 800252e:	f43f af42 	beq.w	80023b6 <_printf_float+0xb6>
 8002532:	f04f 0800 	mov.w	r8, #0
 8002536:	f104 091a 	add.w	r9, r4, #26
 800253a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800253c:	3b01      	subs	r3, #1
 800253e:	4543      	cmp	r3, r8
 8002540:	dc09      	bgt.n	8002556 <_printf_float+0x256>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	079b      	lsls	r3, r3, #30
 8002546:	f100 8102 	bmi.w	800274e <_printf_float+0x44e>
 800254a:	68e0      	ldr	r0, [r4, #12]
 800254c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800254e:	4298      	cmp	r0, r3
 8002550:	bfb8      	it	lt
 8002552:	4618      	movlt	r0, r3
 8002554:	e731      	b.n	80023ba <_printf_float+0xba>
 8002556:	2301      	movs	r3, #1
 8002558:	464a      	mov	r2, r9
 800255a:	4631      	mov	r1, r6
 800255c:	4628      	mov	r0, r5
 800255e:	47b8      	blx	r7
 8002560:	3001      	adds	r0, #1
 8002562:	f43f af28 	beq.w	80023b6 <_printf_float+0xb6>
 8002566:	f108 0801 	add.w	r8, r8, #1
 800256a:	e7e6      	b.n	800253a <_printf_float+0x23a>
 800256c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800256e:	2b00      	cmp	r3, #0
 8002570:	dc38      	bgt.n	80025e4 <_printf_float+0x2e4>
 8002572:	2301      	movs	r3, #1
 8002574:	4631      	mov	r1, r6
 8002576:	4628      	mov	r0, r5
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <_printf_float+0x2e0>)
 800257a:	47b8      	blx	r7
 800257c:	3001      	adds	r0, #1
 800257e:	f43f af1a 	beq.w	80023b6 <_printf_float+0xb6>
 8002582:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002586:	4313      	orrs	r3, r2
 8002588:	d102      	bne.n	8002590 <_printf_float+0x290>
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	07d9      	lsls	r1, r3, #31
 800258e:	d5d8      	bpl.n	8002542 <_printf_float+0x242>
 8002590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002594:	4631      	mov	r1, r6
 8002596:	4628      	mov	r0, r5
 8002598:	47b8      	blx	r7
 800259a:	3001      	adds	r0, #1
 800259c:	f43f af0b 	beq.w	80023b6 <_printf_float+0xb6>
 80025a0:	f04f 0900 	mov.w	r9, #0
 80025a4:	f104 0a1a 	add.w	sl, r4, #26
 80025a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025aa:	425b      	negs	r3, r3
 80025ac:	454b      	cmp	r3, r9
 80025ae:	dc01      	bgt.n	80025b4 <_printf_float+0x2b4>
 80025b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025b2:	e794      	b.n	80024de <_printf_float+0x1de>
 80025b4:	2301      	movs	r3, #1
 80025b6:	4652      	mov	r2, sl
 80025b8:	4631      	mov	r1, r6
 80025ba:	4628      	mov	r0, r5
 80025bc:	47b8      	blx	r7
 80025be:	3001      	adds	r0, #1
 80025c0:	f43f aef9 	beq.w	80023b6 <_printf_float+0xb6>
 80025c4:	f109 0901 	add.w	r9, r9, #1
 80025c8:	e7ee      	b.n	80025a8 <_printf_float+0x2a8>
 80025ca:	bf00      	nop
 80025cc:	7fefffff 	.word	0x7fefffff
 80025d0:	08004cb4 	.word	0x08004cb4
 80025d4:	08004cb8 	.word	0x08004cb8
 80025d8:	08004cc0 	.word	0x08004cc0
 80025dc:	08004cbc 	.word	0x08004cbc
 80025e0:	08004cc4 	.word	0x08004cc4
 80025e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80025e8:	429a      	cmp	r2, r3
 80025ea:	bfa8      	it	ge
 80025ec:	461a      	movge	r2, r3
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	4691      	mov	r9, r2
 80025f2:	dc37      	bgt.n	8002664 <_printf_float+0x364>
 80025f4:	f04f 0b00 	mov.w	fp, #0
 80025f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025fc:	f104 021a 	add.w	r2, r4, #26
 8002600:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002604:	ebaa 0309 	sub.w	r3, sl, r9
 8002608:	455b      	cmp	r3, fp
 800260a:	dc33      	bgt.n	8002674 <_printf_float+0x374>
 800260c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002610:	429a      	cmp	r2, r3
 8002612:	db3b      	blt.n	800268c <_printf_float+0x38c>
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	07da      	lsls	r2, r3, #31
 8002618:	d438      	bmi.n	800268c <_printf_float+0x38c>
 800261a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800261c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800261e:	eba3 020a 	sub.w	r2, r3, sl
 8002622:	eba3 0901 	sub.w	r9, r3, r1
 8002626:	4591      	cmp	r9, r2
 8002628:	bfa8      	it	ge
 800262a:	4691      	movge	r9, r2
 800262c:	f1b9 0f00 	cmp.w	r9, #0
 8002630:	dc34      	bgt.n	800269c <_printf_float+0x39c>
 8002632:	f04f 0800 	mov.w	r8, #0
 8002636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800263a:	f104 0a1a 	add.w	sl, r4, #26
 800263e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	eba3 0309 	sub.w	r3, r3, r9
 8002648:	4543      	cmp	r3, r8
 800264a:	f77f af7a 	ble.w	8002542 <_printf_float+0x242>
 800264e:	2301      	movs	r3, #1
 8002650:	4652      	mov	r2, sl
 8002652:	4631      	mov	r1, r6
 8002654:	4628      	mov	r0, r5
 8002656:	47b8      	blx	r7
 8002658:	3001      	adds	r0, #1
 800265a:	f43f aeac 	beq.w	80023b6 <_printf_float+0xb6>
 800265e:	f108 0801 	add.w	r8, r8, #1
 8002662:	e7ec      	b.n	800263e <_printf_float+0x33e>
 8002664:	4613      	mov	r3, r2
 8002666:	4631      	mov	r1, r6
 8002668:	4642      	mov	r2, r8
 800266a:	4628      	mov	r0, r5
 800266c:	47b8      	blx	r7
 800266e:	3001      	adds	r0, #1
 8002670:	d1c0      	bne.n	80025f4 <_printf_float+0x2f4>
 8002672:	e6a0      	b.n	80023b6 <_printf_float+0xb6>
 8002674:	2301      	movs	r3, #1
 8002676:	4631      	mov	r1, r6
 8002678:	4628      	mov	r0, r5
 800267a:	920b      	str	r2, [sp, #44]	; 0x2c
 800267c:	47b8      	blx	r7
 800267e:	3001      	adds	r0, #1
 8002680:	f43f ae99 	beq.w	80023b6 <_printf_float+0xb6>
 8002684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002686:	f10b 0b01 	add.w	fp, fp, #1
 800268a:	e7b9      	b.n	8002600 <_printf_float+0x300>
 800268c:	4631      	mov	r1, r6
 800268e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002692:	4628      	mov	r0, r5
 8002694:	47b8      	blx	r7
 8002696:	3001      	adds	r0, #1
 8002698:	d1bf      	bne.n	800261a <_printf_float+0x31a>
 800269a:	e68c      	b.n	80023b6 <_printf_float+0xb6>
 800269c:	464b      	mov	r3, r9
 800269e:	4631      	mov	r1, r6
 80026a0:	4628      	mov	r0, r5
 80026a2:	eb08 020a 	add.w	r2, r8, sl
 80026a6:	47b8      	blx	r7
 80026a8:	3001      	adds	r0, #1
 80026aa:	d1c2      	bne.n	8002632 <_printf_float+0x332>
 80026ac:	e683      	b.n	80023b6 <_printf_float+0xb6>
 80026ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026b0:	2a01      	cmp	r2, #1
 80026b2:	dc01      	bgt.n	80026b8 <_printf_float+0x3b8>
 80026b4:	07db      	lsls	r3, r3, #31
 80026b6:	d537      	bpl.n	8002728 <_printf_float+0x428>
 80026b8:	2301      	movs	r3, #1
 80026ba:	4642      	mov	r2, r8
 80026bc:	4631      	mov	r1, r6
 80026be:	4628      	mov	r0, r5
 80026c0:	47b8      	blx	r7
 80026c2:	3001      	adds	r0, #1
 80026c4:	f43f ae77 	beq.w	80023b6 <_printf_float+0xb6>
 80026c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026cc:	4631      	mov	r1, r6
 80026ce:	4628      	mov	r0, r5
 80026d0:	47b8      	blx	r7
 80026d2:	3001      	adds	r0, #1
 80026d4:	f43f ae6f 	beq.w	80023b6 <_printf_float+0xb6>
 80026d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026dc:	2200      	movs	r2, #0
 80026de:	2300      	movs	r3, #0
 80026e0:	f7fe f962 	bl	80009a8 <__aeabi_dcmpeq>
 80026e4:	b9d8      	cbnz	r0, 800271e <_printf_float+0x41e>
 80026e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026e8:	f108 0201 	add.w	r2, r8, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	4631      	mov	r1, r6
 80026f0:	4628      	mov	r0, r5
 80026f2:	47b8      	blx	r7
 80026f4:	3001      	adds	r0, #1
 80026f6:	d10e      	bne.n	8002716 <_printf_float+0x416>
 80026f8:	e65d      	b.n	80023b6 <_printf_float+0xb6>
 80026fa:	2301      	movs	r3, #1
 80026fc:	464a      	mov	r2, r9
 80026fe:	4631      	mov	r1, r6
 8002700:	4628      	mov	r0, r5
 8002702:	47b8      	blx	r7
 8002704:	3001      	adds	r0, #1
 8002706:	f43f ae56 	beq.w	80023b6 <_printf_float+0xb6>
 800270a:	f108 0801 	add.w	r8, r8, #1
 800270e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002710:	3b01      	subs	r3, #1
 8002712:	4543      	cmp	r3, r8
 8002714:	dcf1      	bgt.n	80026fa <_printf_float+0x3fa>
 8002716:	4653      	mov	r3, sl
 8002718:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800271c:	e6e0      	b.n	80024e0 <_printf_float+0x1e0>
 800271e:	f04f 0800 	mov.w	r8, #0
 8002722:	f104 091a 	add.w	r9, r4, #26
 8002726:	e7f2      	b.n	800270e <_printf_float+0x40e>
 8002728:	2301      	movs	r3, #1
 800272a:	4642      	mov	r2, r8
 800272c:	e7df      	b.n	80026ee <_printf_float+0x3ee>
 800272e:	2301      	movs	r3, #1
 8002730:	464a      	mov	r2, r9
 8002732:	4631      	mov	r1, r6
 8002734:	4628      	mov	r0, r5
 8002736:	47b8      	blx	r7
 8002738:	3001      	adds	r0, #1
 800273a:	f43f ae3c 	beq.w	80023b6 <_printf_float+0xb6>
 800273e:	f108 0801 	add.w	r8, r8, #1
 8002742:	68e3      	ldr	r3, [r4, #12]
 8002744:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002746:	1a5b      	subs	r3, r3, r1
 8002748:	4543      	cmp	r3, r8
 800274a:	dcf0      	bgt.n	800272e <_printf_float+0x42e>
 800274c:	e6fd      	b.n	800254a <_printf_float+0x24a>
 800274e:	f04f 0800 	mov.w	r8, #0
 8002752:	f104 0919 	add.w	r9, r4, #25
 8002756:	e7f4      	b.n	8002742 <_printf_float+0x442>

08002758 <_printf_common>:
 8002758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275c:	4616      	mov	r6, r2
 800275e:	4699      	mov	r9, r3
 8002760:	688a      	ldr	r2, [r1, #8]
 8002762:	690b      	ldr	r3, [r1, #16]
 8002764:	4607      	mov	r7, r0
 8002766:	4293      	cmp	r3, r2
 8002768:	bfb8      	it	lt
 800276a:	4613      	movlt	r3, r2
 800276c:	6033      	str	r3, [r6, #0]
 800276e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002772:	460c      	mov	r4, r1
 8002774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002778:	b10a      	cbz	r2, 800277e <_printf_common+0x26>
 800277a:	3301      	adds	r3, #1
 800277c:	6033      	str	r3, [r6, #0]
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	0699      	lsls	r1, r3, #26
 8002782:	bf42      	ittt	mi
 8002784:	6833      	ldrmi	r3, [r6, #0]
 8002786:	3302      	addmi	r3, #2
 8002788:	6033      	strmi	r3, [r6, #0]
 800278a:	6825      	ldr	r5, [r4, #0]
 800278c:	f015 0506 	ands.w	r5, r5, #6
 8002790:	d106      	bne.n	80027a0 <_printf_common+0x48>
 8002792:	f104 0a19 	add.w	sl, r4, #25
 8002796:	68e3      	ldr	r3, [r4, #12]
 8002798:	6832      	ldr	r2, [r6, #0]
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	42ab      	cmp	r3, r5
 800279e:	dc28      	bgt.n	80027f2 <_printf_common+0x9a>
 80027a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027a4:	1e13      	subs	r3, r2, #0
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	bf18      	it	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	0692      	lsls	r2, r2, #26
 80027ae:	d42d      	bmi.n	800280c <_printf_common+0xb4>
 80027b0:	4649      	mov	r1, r9
 80027b2:	4638      	mov	r0, r7
 80027b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027b8:	47c0      	blx	r8
 80027ba:	3001      	adds	r0, #1
 80027bc:	d020      	beq.n	8002800 <_printf_common+0xa8>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	68e5      	ldr	r5, [r4, #12]
 80027c2:	f003 0306 	and.w	r3, r3, #6
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf18      	it	ne
 80027ca:	2500      	movne	r5, #0
 80027cc:	6832      	ldr	r2, [r6, #0]
 80027ce:	f04f 0600 	mov.w	r6, #0
 80027d2:	68a3      	ldr	r3, [r4, #8]
 80027d4:	bf08      	it	eq
 80027d6:	1aad      	subeq	r5, r5, r2
 80027d8:	6922      	ldr	r2, [r4, #16]
 80027da:	bf08      	it	eq
 80027dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bfc4      	itt	gt
 80027e4:	1a9b      	subgt	r3, r3, r2
 80027e6:	18ed      	addgt	r5, r5, r3
 80027e8:	341a      	adds	r4, #26
 80027ea:	42b5      	cmp	r5, r6
 80027ec:	d11a      	bne.n	8002824 <_printf_common+0xcc>
 80027ee:	2000      	movs	r0, #0
 80027f0:	e008      	b.n	8002804 <_printf_common+0xac>
 80027f2:	2301      	movs	r3, #1
 80027f4:	4652      	mov	r2, sl
 80027f6:	4649      	mov	r1, r9
 80027f8:	4638      	mov	r0, r7
 80027fa:	47c0      	blx	r8
 80027fc:	3001      	adds	r0, #1
 80027fe:	d103      	bne.n	8002808 <_printf_common+0xb0>
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002808:	3501      	adds	r5, #1
 800280a:	e7c4      	b.n	8002796 <_printf_common+0x3e>
 800280c:	2030      	movs	r0, #48	; 0x30
 800280e:	18e1      	adds	r1, r4, r3
 8002810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800281a:	4422      	add	r2, r4
 800281c:	3302      	adds	r3, #2
 800281e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002822:	e7c5      	b.n	80027b0 <_printf_common+0x58>
 8002824:	2301      	movs	r3, #1
 8002826:	4622      	mov	r2, r4
 8002828:	4649      	mov	r1, r9
 800282a:	4638      	mov	r0, r7
 800282c:	47c0      	blx	r8
 800282e:	3001      	adds	r0, #1
 8002830:	d0e6      	beq.n	8002800 <_printf_common+0xa8>
 8002832:	3601      	adds	r6, #1
 8002834:	e7d9      	b.n	80027ea <_printf_common+0x92>
	...

08002838 <_printf_i>:
 8002838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800283c:	7e0f      	ldrb	r7, [r1, #24]
 800283e:	4691      	mov	r9, r2
 8002840:	2f78      	cmp	r7, #120	; 0x78
 8002842:	4680      	mov	r8, r0
 8002844:	460c      	mov	r4, r1
 8002846:	469a      	mov	sl, r3
 8002848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800284a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800284e:	d807      	bhi.n	8002860 <_printf_i+0x28>
 8002850:	2f62      	cmp	r7, #98	; 0x62
 8002852:	d80a      	bhi.n	800286a <_printf_i+0x32>
 8002854:	2f00      	cmp	r7, #0
 8002856:	f000 80d9 	beq.w	8002a0c <_printf_i+0x1d4>
 800285a:	2f58      	cmp	r7, #88	; 0x58
 800285c:	f000 80a4 	beq.w	80029a8 <_printf_i+0x170>
 8002860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002868:	e03a      	b.n	80028e0 <_printf_i+0xa8>
 800286a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800286e:	2b15      	cmp	r3, #21
 8002870:	d8f6      	bhi.n	8002860 <_printf_i+0x28>
 8002872:	a101      	add	r1, pc, #4	; (adr r1, 8002878 <_printf_i+0x40>)
 8002874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002878:	080028d1 	.word	0x080028d1
 800287c:	080028e5 	.word	0x080028e5
 8002880:	08002861 	.word	0x08002861
 8002884:	08002861 	.word	0x08002861
 8002888:	08002861 	.word	0x08002861
 800288c:	08002861 	.word	0x08002861
 8002890:	080028e5 	.word	0x080028e5
 8002894:	08002861 	.word	0x08002861
 8002898:	08002861 	.word	0x08002861
 800289c:	08002861 	.word	0x08002861
 80028a0:	08002861 	.word	0x08002861
 80028a4:	080029f3 	.word	0x080029f3
 80028a8:	08002915 	.word	0x08002915
 80028ac:	080029d5 	.word	0x080029d5
 80028b0:	08002861 	.word	0x08002861
 80028b4:	08002861 	.word	0x08002861
 80028b8:	08002a15 	.word	0x08002a15
 80028bc:	08002861 	.word	0x08002861
 80028c0:	08002915 	.word	0x08002915
 80028c4:	08002861 	.word	0x08002861
 80028c8:	08002861 	.word	0x08002861
 80028cc:	080029dd 	.word	0x080029dd
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	1d1a      	adds	r2, r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	602a      	str	r2, [r5, #0]
 80028d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0a4      	b.n	8002a2e <_printf_i+0x1f6>
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	6829      	ldr	r1, [r5, #0]
 80028e8:	0606      	lsls	r6, r0, #24
 80028ea:	f101 0304 	add.w	r3, r1, #4
 80028ee:	d50a      	bpl.n	8002906 <_printf_i+0xce>
 80028f0:	680e      	ldr	r6, [r1, #0]
 80028f2:	602b      	str	r3, [r5, #0]
 80028f4:	2e00      	cmp	r6, #0
 80028f6:	da03      	bge.n	8002900 <_printf_i+0xc8>
 80028f8:	232d      	movs	r3, #45	; 0x2d
 80028fa:	4276      	negs	r6, r6
 80028fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002900:	230a      	movs	r3, #10
 8002902:	485e      	ldr	r0, [pc, #376]	; (8002a7c <_printf_i+0x244>)
 8002904:	e019      	b.n	800293a <_printf_i+0x102>
 8002906:	680e      	ldr	r6, [r1, #0]
 8002908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800290c:	602b      	str	r3, [r5, #0]
 800290e:	bf18      	it	ne
 8002910:	b236      	sxthne	r6, r6
 8002912:	e7ef      	b.n	80028f4 <_printf_i+0xbc>
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	6820      	ldr	r0, [r4, #0]
 8002918:	1d19      	adds	r1, r3, #4
 800291a:	6029      	str	r1, [r5, #0]
 800291c:	0601      	lsls	r1, r0, #24
 800291e:	d501      	bpl.n	8002924 <_printf_i+0xec>
 8002920:	681e      	ldr	r6, [r3, #0]
 8002922:	e002      	b.n	800292a <_printf_i+0xf2>
 8002924:	0646      	lsls	r6, r0, #25
 8002926:	d5fb      	bpl.n	8002920 <_printf_i+0xe8>
 8002928:	881e      	ldrh	r6, [r3, #0]
 800292a:	2f6f      	cmp	r7, #111	; 0x6f
 800292c:	bf0c      	ite	eq
 800292e:	2308      	moveq	r3, #8
 8002930:	230a      	movne	r3, #10
 8002932:	4852      	ldr	r0, [pc, #328]	; (8002a7c <_printf_i+0x244>)
 8002934:	2100      	movs	r1, #0
 8002936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800293a:	6865      	ldr	r5, [r4, #4]
 800293c:	2d00      	cmp	r5, #0
 800293e:	bfa8      	it	ge
 8002940:	6821      	ldrge	r1, [r4, #0]
 8002942:	60a5      	str	r5, [r4, #8]
 8002944:	bfa4      	itt	ge
 8002946:	f021 0104 	bicge.w	r1, r1, #4
 800294a:	6021      	strge	r1, [r4, #0]
 800294c:	b90e      	cbnz	r6, 8002952 <_printf_i+0x11a>
 800294e:	2d00      	cmp	r5, #0
 8002950:	d04d      	beq.n	80029ee <_printf_i+0x1b6>
 8002952:	4615      	mov	r5, r2
 8002954:	fbb6 f1f3 	udiv	r1, r6, r3
 8002958:	fb03 6711 	mls	r7, r3, r1, r6
 800295c:	5dc7      	ldrb	r7, [r0, r7]
 800295e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002962:	4637      	mov	r7, r6
 8002964:	42bb      	cmp	r3, r7
 8002966:	460e      	mov	r6, r1
 8002968:	d9f4      	bls.n	8002954 <_printf_i+0x11c>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d10b      	bne.n	8002986 <_printf_i+0x14e>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	07de      	lsls	r6, r3, #31
 8002972:	d508      	bpl.n	8002986 <_printf_i+0x14e>
 8002974:	6923      	ldr	r3, [r4, #16]
 8002976:	6861      	ldr	r1, [r4, #4]
 8002978:	4299      	cmp	r1, r3
 800297a:	bfde      	ittt	le
 800297c:	2330      	movle	r3, #48	; 0x30
 800297e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002982:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002986:	1b52      	subs	r2, r2, r5
 8002988:	6122      	str	r2, [r4, #16]
 800298a:	464b      	mov	r3, r9
 800298c:	4621      	mov	r1, r4
 800298e:	4640      	mov	r0, r8
 8002990:	f8cd a000 	str.w	sl, [sp]
 8002994:	aa03      	add	r2, sp, #12
 8002996:	f7ff fedf 	bl	8002758 <_printf_common>
 800299a:	3001      	adds	r0, #1
 800299c:	d14c      	bne.n	8002a38 <_printf_i+0x200>
 800299e:	f04f 30ff 	mov.w	r0, #4294967295
 80029a2:	b004      	add	sp, #16
 80029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a8:	4834      	ldr	r0, [pc, #208]	; (8002a7c <_printf_i+0x244>)
 80029aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80029ae:	6829      	ldr	r1, [r5, #0]
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80029b6:	6029      	str	r1, [r5, #0]
 80029b8:	061d      	lsls	r5, r3, #24
 80029ba:	d514      	bpl.n	80029e6 <_printf_i+0x1ae>
 80029bc:	07df      	lsls	r7, r3, #31
 80029be:	bf44      	itt	mi
 80029c0:	f043 0320 	orrmi.w	r3, r3, #32
 80029c4:	6023      	strmi	r3, [r4, #0]
 80029c6:	b91e      	cbnz	r6, 80029d0 <_printf_i+0x198>
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	f023 0320 	bic.w	r3, r3, #32
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	2310      	movs	r3, #16
 80029d2:	e7af      	b.n	8002934 <_printf_i+0xfc>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	2378      	movs	r3, #120	; 0x78
 80029de:	4828      	ldr	r0, [pc, #160]	; (8002a80 <_printf_i+0x248>)
 80029e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029e4:	e7e3      	b.n	80029ae <_printf_i+0x176>
 80029e6:	0659      	lsls	r1, r3, #25
 80029e8:	bf48      	it	mi
 80029ea:	b2b6      	uxthmi	r6, r6
 80029ec:	e7e6      	b.n	80029bc <_printf_i+0x184>
 80029ee:	4615      	mov	r5, r2
 80029f0:	e7bb      	b.n	800296a <_printf_i+0x132>
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	6826      	ldr	r6, [r4, #0]
 80029f6:	1d18      	adds	r0, r3, #4
 80029f8:	6961      	ldr	r1, [r4, #20]
 80029fa:	6028      	str	r0, [r5, #0]
 80029fc:	0635      	lsls	r5, r6, #24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	d501      	bpl.n	8002a06 <_printf_i+0x1ce>
 8002a02:	6019      	str	r1, [r3, #0]
 8002a04:	e002      	b.n	8002a0c <_printf_i+0x1d4>
 8002a06:	0670      	lsls	r0, r6, #25
 8002a08:	d5fb      	bpl.n	8002a02 <_printf_i+0x1ca>
 8002a0a:	8019      	strh	r1, [r3, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4615      	mov	r5, r2
 8002a10:	6123      	str	r3, [r4, #16]
 8002a12:	e7ba      	b.n	800298a <_printf_i+0x152>
 8002a14:	682b      	ldr	r3, [r5, #0]
 8002a16:	2100      	movs	r1, #0
 8002a18:	1d1a      	adds	r2, r3, #4
 8002a1a:	602a      	str	r2, [r5, #0]
 8002a1c:	681d      	ldr	r5, [r3, #0]
 8002a1e:	6862      	ldr	r2, [r4, #4]
 8002a20:	4628      	mov	r0, r5
 8002a22:	f000 feb7 	bl	8003794 <memchr>
 8002a26:	b108      	cbz	r0, 8002a2c <_printf_i+0x1f4>
 8002a28:	1b40      	subs	r0, r0, r5
 8002a2a:	6060      	str	r0, [r4, #4]
 8002a2c:	6863      	ldr	r3, [r4, #4]
 8002a2e:	6123      	str	r3, [r4, #16]
 8002a30:	2300      	movs	r3, #0
 8002a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a36:	e7a8      	b.n	800298a <_printf_i+0x152>
 8002a38:	462a      	mov	r2, r5
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	6923      	ldr	r3, [r4, #16]
 8002a40:	47d0      	blx	sl
 8002a42:	3001      	adds	r0, #1
 8002a44:	d0ab      	beq.n	800299e <_printf_i+0x166>
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	079b      	lsls	r3, r3, #30
 8002a4a:	d413      	bmi.n	8002a74 <_printf_i+0x23c>
 8002a4c:	68e0      	ldr	r0, [r4, #12]
 8002a4e:	9b03      	ldr	r3, [sp, #12]
 8002a50:	4298      	cmp	r0, r3
 8002a52:	bfb8      	it	lt
 8002a54:	4618      	movlt	r0, r3
 8002a56:	e7a4      	b.n	80029a2 <_printf_i+0x16a>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4632      	mov	r2, r6
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	4640      	mov	r0, r8
 8002a60:	47d0      	blx	sl
 8002a62:	3001      	adds	r0, #1
 8002a64:	d09b      	beq.n	800299e <_printf_i+0x166>
 8002a66:	3501      	adds	r5, #1
 8002a68:	68e3      	ldr	r3, [r4, #12]
 8002a6a:	9903      	ldr	r1, [sp, #12]
 8002a6c:	1a5b      	subs	r3, r3, r1
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	dcf2      	bgt.n	8002a58 <_printf_i+0x220>
 8002a72:	e7eb      	b.n	8002a4c <_printf_i+0x214>
 8002a74:	2500      	movs	r5, #0
 8002a76:	f104 0619 	add.w	r6, r4, #25
 8002a7a:	e7f5      	b.n	8002a68 <_printf_i+0x230>
 8002a7c:	08004cc6 	.word	0x08004cc6
 8002a80:	08004cd7 	.word	0x08004cd7

08002a84 <quorem>:
 8002a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a88:	6903      	ldr	r3, [r0, #16]
 8002a8a:	690c      	ldr	r4, [r1, #16]
 8002a8c:	4607      	mov	r7, r0
 8002a8e:	42a3      	cmp	r3, r4
 8002a90:	f2c0 8082 	blt.w	8002b98 <quorem+0x114>
 8002a94:	3c01      	subs	r4, #1
 8002a96:	f100 0514 	add.w	r5, r0, #20
 8002a9a:	f101 0814 	add.w	r8, r1, #20
 8002a9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002aa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002aac:	3301      	adds	r3, #1
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ab4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002ab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002abc:	d331      	bcc.n	8002b22 <quorem+0x9e>
 8002abe:	f04f 0e00 	mov.w	lr, #0
 8002ac2:	4640      	mov	r0, r8
 8002ac4:	46ac      	mov	ip, r5
 8002ac6:	46f2      	mov	sl, lr
 8002ac8:	f850 2b04 	ldr.w	r2, [r0], #4
 8002acc:	b293      	uxth	r3, r2
 8002ace:	fb06 e303 	mla	r3, r6, r3, lr
 8002ad2:	0c12      	lsrs	r2, r2, #16
 8002ad4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	fb06 e202 	mla	r2, r6, r2, lr
 8002ade:	ebaa 0303 	sub.w	r3, sl, r3
 8002ae2:	f8dc a000 	ldr.w	sl, [ip]
 8002ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002aea:	fa1f fa8a 	uxth.w	sl, sl
 8002aee:	4453      	add	r3, sl
 8002af0:	f8dc a000 	ldr.w	sl, [ip]
 8002af4:	b292      	uxth	r2, r2
 8002af6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002afa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b04:	4581      	cmp	r9, r0
 8002b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002b0a:	f84c 3b04 	str.w	r3, [ip], #4
 8002b0e:	d2db      	bcs.n	8002ac8 <quorem+0x44>
 8002b10:	f855 300b 	ldr.w	r3, [r5, fp]
 8002b14:	b92b      	cbnz	r3, 8002b22 <quorem+0x9e>
 8002b16:	9b01      	ldr	r3, [sp, #4]
 8002b18:	3b04      	subs	r3, #4
 8002b1a:	429d      	cmp	r5, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	d32f      	bcc.n	8002b80 <quorem+0xfc>
 8002b20:	613c      	str	r4, [r7, #16]
 8002b22:	4638      	mov	r0, r7
 8002b24:	f001 f8d0 	bl	8003cc8 <__mcmp>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	db25      	blt.n	8002b78 <quorem+0xf4>
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f04f 0c00 	mov.w	ip, #0
 8002b32:	3601      	adds	r6, #1
 8002b34:	f858 1b04 	ldr.w	r1, [r8], #4
 8002b38:	f8d0 e000 	ldr.w	lr, [r0]
 8002b3c:	b28b      	uxth	r3, r1
 8002b3e:	ebac 0303 	sub.w	r3, ip, r3
 8002b42:	fa1f f28e 	uxth.w	r2, lr
 8002b46:	4413      	add	r3, r2
 8002b48:	0c0a      	lsrs	r2, r1, #16
 8002b4a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002b4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b58:	45c1      	cmp	r9, r8
 8002b5a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b5e:	f840 3b04 	str.w	r3, [r0], #4
 8002b62:	d2e7      	bcs.n	8002b34 <quorem+0xb0>
 8002b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b6c:	b922      	cbnz	r2, 8002b78 <quorem+0xf4>
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	429d      	cmp	r5, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	d30a      	bcc.n	8002b8c <quorem+0x108>
 8002b76:	613c      	str	r4, [r7, #16]
 8002b78:	4630      	mov	r0, r6
 8002b7a:	b003      	add	sp, #12
 8002b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	3b04      	subs	r3, #4
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	d1cb      	bne.n	8002b20 <quorem+0x9c>
 8002b88:	3c01      	subs	r4, #1
 8002b8a:	e7c6      	b.n	8002b1a <quorem+0x96>
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	d1f0      	bne.n	8002b76 <quorem+0xf2>
 8002b94:	3c01      	subs	r4, #1
 8002b96:	e7eb      	b.n	8002b70 <quorem+0xec>
 8002b98:	2000      	movs	r0, #0
 8002b9a:	e7ee      	b.n	8002b7a <quorem+0xf6>
 8002b9c:	0000      	movs	r0, r0
	...

08002ba0 <_dtoa_r>:
 8002ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba4:	4616      	mov	r6, r2
 8002ba6:	461f      	mov	r7, r3
 8002ba8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002baa:	b099      	sub	sp, #100	; 0x64
 8002bac:	4605      	mov	r5, r0
 8002bae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002bb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002bb6:	b974      	cbnz	r4, 8002bd6 <_dtoa_r+0x36>
 8002bb8:	2010      	movs	r0, #16
 8002bba:	f000 fde3 	bl	8003784 <malloc>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6268      	str	r0, [r5, #36]	; 0x24
 8002bc2:	b920      	cbnz	r0, 8002bce <_dtoa_r+0x2e>
 8002bc4:	21ea      	movs	r1, #234	; 0xea
 8002bc6:	4ba8      	ldr	r3, [pc, #672]	; (8002e68 <_dtoa_r+0x2c8>)
 8002bc8:	48a8      	ldr	r0, [pc, #672]	; (8002e6c <_dtoa_r+0x2cc>)
 8002bca:	f001 fa81 	bl	80040d0 <__assert_func>
 8002bce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002bd2:	6004      	str	r4, [r0, #0]
 8002bd4:	60c4      	str	r4, [r0, #12]
 8002bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	b151      	cbz	r1, 8002bf2 <_dtoa_r+0x52>
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	2301      	movs	r3, #1
 8002be0:	4093      	lsls	r3, r2
 8002be2:	604a      	str	r2, [r1, #4]
 8002be4:	608b      	str	r3, [r1, #8]
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 fe30 	bl	800384c <_Bfree>
 8002bec:	2200      	movs	r2, #0
 8002bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	1e3b      	subs	r3, r7, #0
 8002bf4:	bfaf      	iteee	ge
 8002bf6:	2300      	movge	r3, #0
 8002bf8:	2201      	movlt	r2, #1
 8002bfa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002bfe:	9305      	strlt	r3, [sp, #20]
 8002c00:	bfa8      	it	ge
 8002c02:	f8c8 3000 	strge.w	r3, [r8]
 8002c06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002c0a:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <_dtoa_r+0x2d0>)
 8002c0c:	bfb8      	it	lt
 8002c0e:	f8c8 2000 	strlt.w	r2, [r8]
 8002c12:	ea33 0309 	bics.w	r3, r3, r9
 8002c16:	d119      	bne.n	8002c4c <_dtoa_r+0xac>
 8002c18:	f242 730f 	movw	r3, #9999	; 0x270f
 8002c1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002c24:	4333      	orrs	r3, r6
 8002c26:	f000 857f 	beq.w	8003728 <_dtoa_r+0xb88>
 8002c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002c2c:	b953      	cbnz	r3, 8002c44 <_dtoa_r+0xa4>
 8002c2e:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <_dtoa_r+0x2d4>)
 8002c30:	e022      	b.n	8002c78 <_dtoa_r+0xd8>
 8002c32:	4b91      	ldr	r3, [pc, #580]	; (8002e78 <_dtoa_r+0x2d8>)
 8002c34:	9303      	str	r3, [sp, #12]
 8002c36:	3308      	adds	r3, #8
 8002c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	9803      	ldr	r0, [sp, #12]
 8002c3e:	b019      	add	sp, #100	; 0x64
 8002c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c44:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <_dtoa_r+0x2d4>)
 8002c46:	9303      	str	r3, [sp, #12]
 8002c48:	3303      	adds	r3, #3
 8002c4a:	e7f5      	b.n	8002c38 <_dtoa_r+0x98>
 8002c4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002c50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f7fd fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8002c60:	4680      	mov	r8, r0
 8002c62:	b158      	cbz	r0, 8002c7c <_dtoa_r+0xdc>
 8002c64:	2301      	movs	r3, #1
 8002c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8558 	beq.w	8003722 <_dtoa_r+0xb82>
 8002c72:	4882      	ldr	r0, [pc, #520]	; (8002e7c <_dtoa_r+0x2dc>)
 8002c74:	6018      	str	r0, [r3, #0]
 8002c76:	1e43      	subs	r3, r0, #1
 8002c78:	9303      	str	r3, [sp, #12]
 8002c7a:	e7df      	b.n	8002c3c <_dtoa_r+0x9c>
 8002c7c:	ab16      	add	r3, sp, #88	; 0x58
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	ab17      	add	r3, sp, #92	; 0x5c
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4628      	mov	r0, r5
 8002c86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002c8a:	f001 f8c5 	bl	8003e18 <__d2b>
 8002c8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002c92:	4683      	mov	fp, r0
 8002c94:	2c00      	cmp	r4, #0
 8002c96:	d07f      	beq.n	8002d98 <_dtoa_r+0x1f8>
 8002c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002caa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002cae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <_dtoa_r+0x2e0>)
 8002cb6:	f7fd fa57 	bl	8000168 <__aeabi_dsub>
 8002cba:	a365      	add	r3, pc, #404	; (adr r3, 8002e50 <_dtoa_r+0x2b0>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fc0a 	bl	80004d8 <__aeabi_dmul>
 8002cc4:	a364      	add	r3, pc, #400	; (adr r3, 8002e58 <_dtoa_r+0x2b8>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fa4f 	bl	800016c <__adddf3>
 8002cce:	4606      	mov	r6, r0
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	460f      	mov	r7, r1
 8002cd4:	f7fd fb96 	bl	8000404 <__aeabi_i2d>
 8002cd8:	a361      	add	r3, pc, #388	; (adr r3, 8002e60 <_dtoa_r+0x2c0>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fbfb 	bl	80004d8 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	4639      	mov	r1, r7
 8002cea:	f7fd fa3f 	bl	800016c <__adddf3>
 8002cee:	4606      	mov	r6, r0
 8002cf0:	460f      	mov	r7, r1
 8002cf2:	f7fd fea1 	bl	8000a38 <__aeabi_d2iz>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4682      	mov	sl, r0
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	4639      	mov	r1, r7
 8002d00:	f7fd fe5c 	bl	80009bc <__aeabi_dcmplt>
 8002d04:	b148      	cbz	r0, 8002d1a <_dtoa_r+0x17a>
 8002d06:	4650      	mov	r0, sl
 8002d08:	f7fd fb7c 	bl	8000404 <__aeabi_i2d>
 8002d0c:	4632      	mov	r2, r6
 8002d0e:	463b      	mov	r3, r7
 8002d10:	f7fd fe4a 	bl	80009a8 <__aeabi_dcmpeq>
 8002d14:	b908      	cbnz	r0, 8002d1a <_dtoa_r+0x17a>
 8002d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d1a:	f1ba 0f16 	cmp.w	sl, #22
 8002d1e:	d858      	bhi.n	8002dd2 <_dtoa_r+0x232>
 8002d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d24:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <_dtoa_r+0x2e4>)
 8002d26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fe45 	bl	80009bc <__aeabi_dcmplt>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d04f      	beq.n	8002dd6 <_dtoa_r+0x236>
 8002d36:	2300      	movs	r3, #0
 8002d38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002d40:	1b1c      	subs	r4, r3, r4
 8002d42:	1e63      	subs	r3, r4, #1
 8002d44:	9309      	str	r3, [sp, #36]	; 0x24
 8002d46:	bf49      	itett	mi
 8002d48:	f1c4 0301 	rsbmi	r3, r4, #1
 8002d4c:	2300      	movpl	r3, #0
 8002d4e:	9306      	strmi	r3, [sp, #24]
 8002d50:	2300      	movmi	r3, #0
 8002d52:	bf54      	ite	pl
 8002d54:	9306      	strpl	r3, [sp, #24]
 8002d56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002d58:	f1ba 0f00 	cmp.w	sl, #0
 8002d5c:	db3d      	blt.n	8002dda <_dtoa_r+0x23a>
 8002d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d60:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002d64:	4453      	add	r3, sl
 8002d66:	9309      	str	r3, [sp, #36]	; 0x24
 8002d68:	2300      	movs	r3, #0
 8002d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8002d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d6e:	2b09      	cmp	r3, #9
 8002d70:	f200 808c 	bhi.w	8002e8c <_dtoa_r+0x2ec>
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	bfc4      	itt	gt
 8002d78:	3b04      	subgt	r3, #4
 8002d7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d7e:	bfc8      	it	gt
 8002d80:	2400      	movgt	r4, #0
 8002d82:	f1a3 0302 	sub.w	r3, r3, #2
 8002d86:	bfd8      	it	le
 8002d88:	2401      	movle	r4, #1
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	f200 808a 	bhi.w	8002ea4 <_dtoa_r+0x304>
 8002d90:	e8df f003 	tbb	[pc, r3]
 8002d94:	5b4d4f2d 	.word	0x5b4d4f2d
 8002d98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002d9c:	441c      	add	r4, r3
 8002d9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	bfc3      	ittte	gt
 8002da6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002daa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002dae:	fa09 f303 	lslgt.w	r3, r9, r3
 8002db2:	f1c3 0320 	rsble	r3, r3, #32
 8002db6:	bfc6      	itte	gt
 8002db8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002dbc:	4318      	orrgt	r0, r3
 8002dbe:	fa06 f003 	lslle.w	r0, r6, r3
 8002dc2:	f7fd fb0f 	bl	80003e4 <__aeabi_ui2d>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002dcc:	3c01      	subs	r4, #1
 8002dce:	9313      	str	r3, [sp, #76]	; 0x4c
 8002dd0:	e76f      	b.n	8002cb2 <_dtoa_r+0x112>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e7b2      	b.n	8002d3c <_dtoa_r+0x19c>
 8002dd6:	900f      	str	r0, [sp, #60]	; 0x3c
 8002dd8:	e7b1      	b.n	8002d3e <_dtoa_r+0x19e>
 8002dda:	9b06      	ldr	r3, [sp, #24]
 8002ddc:	eba3 030a 	sub.w	r3, r3, sl
 8002de0:	9306      	str	r3, [sp, #24]
 8002de2:	f1ca 0300 	rsb	r3, sl, #0
 8002de6:	930a      	str	r3, [sp, #40]	; 0x28
 8002de8:	2300      	movs	r3, #0
 8002dea:	930e      	str	r3, [sp, #56]	; 0x38
 8002dec:	e7be      	b.n	8002d6c <_dtoa_r+0x1cc>
 8002dee:	2300      	movs	r3, #0
 8002df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002df2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dc58      	bgt.n	8002eaa <_dtoa_r+0x30a>
 8002df8:	f04f 0901 	mov.w	r9, #1
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e02:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002e06:	2200      	movs	r2, #0
 8002e08:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002e0a:	6042      	str	r2, [r0, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	f102 0614 	add.w	r6, r2, #20
 8002e12:	429e      	cmp	r6, r3
 8002e14:	6841      	ldr	r1, [r0, #4]
 8002e16:	d94e      	bls.n	8002eb6 <_dtoa_r+0x316>
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f000 fcd7 	bl	80037cc <_Balloc>
 8002e1e:	9003      	str	r0, [sp, #12]
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d14c      	bne.n	8002ebe <_dtoa_r+0x31e>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <_dtoa_r+0x2e8>)
 8002e2c:	e6cc      	b.n	8002bc8 <_dtoa_r+0x28>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e7de      	b.n	8002df0 <_dtoa_r+0x250>
 8002e32:	2300      	movs	r3, #0
 8002e34:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002e38:	eb0a 0903 	add.w	r9, sl, r3
 8002e3c:	f109 0301 	add.w	r3, r9, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	9308      	str	r3, [sp, #32]
 8002e44:	bfb8      	it	lt
 8002e46:	2301      	movlt	r3, #1
 8002e48:	e7dd      	b.n	8002e06 <_dtoa_r+0x266>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e7f2      	b.n	8002e34 <_dtoa_r+0x294>
 8002e4e:	bf00      	nop
 8002e50:	636f4361 	.word	0x636f4361
 8002e54:	3fd287a7 	.word	0x3fd287a7
 8002e58:	8b60c8b3 	.word	0x8b60c8b3
 8002e5c:	3fc68a28 	.word	0x3fc68a28
 8002e60:	509f79fb 	.word	0x509f79fb
 8002e64:	3fd34413 	.word	0x3fd34413
 8002e68:	08004cf5 	.word	0x08004cf5
 8002e6c:	08004d0c 	.word	0x08004d0c
 8002e70:	7ff00000 	.word	0x7ff00000
 8002e74:	08004cf1 	.word	0x08004cf1
 8002e78:	08004ce8 	.word	0x08004ce8
 8002e7c:	08004cc5 	.word	0x08004cc5
 8002e80:	3ff80000 	.word	0x3ff80000
 8002e84:	08004e00 	.word	0x08004e00
 8002e88:	08004d67 	.word	0x08004d67
 8002e8c:	2401      	movs	r4, #1
 8002e8e:	2300      	movs	r3, #0
 8002e90:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e92:	9322      	str	r3, [sp, #136]	; 0x88
 8002e94:	f04f 39ff 	mov.w	r9, #4294967295
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2312      	movs	r3, #18
 8002e9c:	f8cd 9020 	str.w	r9, [sp, #32]
 8002ea0:	9223      	str	r2, [sp, #140]	; 0x8c
 8002ea2:	e7b0      	b.n	8002e06 <_dtoa_r+0x266>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ea8:	e7f4      	b.n	8002e94 <_dtoa_r+0x2f4>
 8002eaa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002eae:	464b      	mov	r3, r9
 8002eb0:	f8cd 9020 	str.w	r9, [sp, #32]
 8002eb4:	e7a7      	b.n	8002e06 <_dtoa_r+0x266>
 8002eb6:	3101      	adds	r1, #1
 8002eb8:	6041      	str	r1, [r0, #4]
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	e7a7      	b.n	8002e0e <_dtoa_r+0x26e>
 8002ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ec0:	9a03      	ldr	r2, [sp, #12]
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	9b08      	ldr	r3, [sp, #32]
 8002ec6:	2b0e      	cmp	r3, #14
 8002ec8:	f200 80a8 	bhi.w	800301c <_dtoa_r+0x47c>
 8002ecc:	2c00      	cmp	r4, #0
 8002ece:	f000 80a5 	beq.w	800301c <_dtoa_r+0x47c>
 8002ed2:	f1ba 0f00 	cmp.w	sl, #0
 8002ed6:	dd34      	ble.n	8002f42 <_dtoa_r+0x3a2>
 8002ed8:	4a9a      	ldr	r2, [pc, #616]	; (8003144 <_dtoa_r+0x5a4>)
 8002eda:	f00a 030f 	and.w	r3, sl, #15
 8002ede:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002ee2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002ee6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002eea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002eee:	ea4f 142a 	mov.w	r4, sl, asr #4
 8002ef2:	d016      	beq.n	8002f22 <_dtoa_r+0x382>
 8002ef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002ef8:	4b93      	ldr	r3, [pc, #588]	; (8003148 <_dtoa_r+0x5a8>)
 8002efa:	2703      	movs	r7, #3
 8002efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f00:	f7fd fc14 	bl	800072c <__aeabi_ddiv>
 8002f04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f08:	f004 040f 	and.w	r4, r4, #15
 8002f0c:	4e8e      	ldr	r6, [pc, #568]	; (8003148 <_dtoa_r+0x5a8>)
 8002f0e:	b954      	cbnz	r4, 8002f26 <_dtoa_r+0x386>
 8002f10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f18:	f7fd fc08 	bl	800072c <__aeabi_ddiv>
 8002f1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f20:	e029      	b.n	8002f76 <_dtoa_r+0x3d6>
 8002f22:	2702      	movs	r7, #2
 8002f24:	e7f2      	b.n	8002f0c <_dtoa_r+0x36c>
 8002f26:	07e1      	lsls	r1, r4, #31
 8002f28:	d508      	bpl.n	8002f3c <_dtoa_r+0x39c>
 8002f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002f32:	f7fd fad1 	bl	80004d8 <__aeabi_dmul>
 8002f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f3a:	3701      	adds	r7, #1
 8002f3c:	1064      	asrs	r4, r4, #1
 8002f3e:	3608      	adds	r6, #8
 8002f40:	e7e5      	b.n	8002f0e <_dtoa_r+0x36e>
 8002f42:	f000 80a5 	beq.w	8003090 <_dtoa_r+0x4f0>
 8002f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002f4a:	f1ca 0400 	rsb	r4, sl, #0
 8002f4e:	4b7d      	ldr	r3, [pc, #500]	; (8003144 <_dtoa_r+0x5a4>)
 8002f50:	f004 020f 	and.w	r2, r4, #15
 8002f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fabc 	bl	80004d8 <__aeabi_dmul>
 8002f60:	2702      	movs	r7, #2
 8002f62:	2300      	movs	r3, #0
 8002f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f68:	4e77      	ldr	r6, [pc, #476]	; (8003148 <_dtoa_r+0x5a8>)
 8002f6a:	1124      	asrs	r4, r4, #4
 8002f6c:	2c00      	cmp	r4, #0
 8002f6e:	f040 8084 	bne.w	800307a <_dtoa_r+0x4da>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1d2      	bne.n	8002f1c <_dtoa_r+0x37c>
 8002f76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 808b 	beq.w	8003094 <_dtoa_r+0x4f4>
 8002f7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002f82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002f86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	; (800314c <_dtoa_r+0x5ac>)
 8002f8e:	f7fd fd15 	bl	80009bc <__aeabi_dcmplt>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d07e      	beq.n	8003094 <_dtoa_r+0x4f4>
 8002f96:	9b08      	ldr	r3, [sp, #32]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d07b      	beq.n	8003094 <_dtoa_r+0x4f4>
 8002f9c:	f1b9 0f00 	cmp.w	r9, #0
 8002fa0:	dd38      	ble.n	8003014 <_dtoa_r+0x474>
 8002fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4b69      	ldr	r3, [pc, #420]	; (8003150 <_dtoa_r+0x5b0>)
 8002faa:	f7fd fa95 	bl	80004d8 <__aeabi_dmul>
 8002fae:	464c      	mov	r4, r9
 8002fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fb4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8002fb8:	3701      	adds	r7, #1
 8002fba:	4638      	mov	r0, r7
 8002fbc:	f7fd fa22 	bl	8000404 <__aeabi_i2d>
 8002fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fc4:	f7fd fa88 	bl	80004d8 <__aeabi_dmul>
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4b62      	ldr	r3, [pc, #392]	; (8003154 <_dtoa_r+0x5b4>)
 8002fcc:	f7fd f8ce 	bl	800016c <__adddf3>
 8002fd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002fd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002fd8:	9611      	str	r6, [sp, #68]	; 0x44
 8002fda:	2c00      	cmp	r4, #0
 8002fdc:	d15d      	bne.n	800309a <_dtoa_r+0x4fa>
 8002fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <_dtoa_r+0x5b8>)
 8002fe6:	f7fd f8bf 	bl	8000168 <__aeabi_dsub>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ff2:	4633      	mov	r3, r6
 8002ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002ff6:	f7fd fcff 	bl	80009f8 <__aeabi_dcmpgt>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	f040 829c 	bne.w	8003538 <_dtoa_r+0x998>
 8003000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003006:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800300a:	f7fd fcd7 	bl	80009bc <__aeabi_dcmplt>
 800300e:	2800      	cmp	r0, #0
 8003010:	f040 8290 	bne.w	8003534 <_dtoa_r+0x994>
 8003014:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003018:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800301c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800301e:	2b00      	cmp	r3, #0
 8003020:	f2c0 8152 	blt.w	80032c8 <_dtoa_r+0x728>
 8003024:	f1ba 0f0e 	cmp.w	sl, #14
 8003028:	f300 814e 	bgt.w	80032c8 <_dtoa_r+0x728>
 800302c:	4b45      	ldr	r3, [pc, #276]	; (8003144 <_dtoa_r+0x5a4>)
 800302e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003032:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003036:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800303a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800303c:	2b00      	cmp	r3, #0
 800303e:	f280 80db 	bge.w	80031f8 <_dtoa_r+0x658>
 8003042:	9b08      	ldr	r3, [sp, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f300 80d7 	bgt.w	80031f8 <_dtoa_r+0x658>
 800304a:	f040 8272 	bne.w	8003532 <_dtoa_r+0x992>
 800304e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003052:	2200      	movs	r2, #0
 8003054:	4b40      	ldr	r3, [pc, #256]	; (8003158 <_dtoa_r+0x5b8>)
 8003056:	f7fd fa3f 	bl	80004d8 <__aeabi_dmul>
 800305a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800305e:	f7fd fcc1 	bl	80009e4 <__aeabi_dcmpge>
 8003062:	9c08      	ldr	r4, [sp, #32]
 8003064:	4626      	mov	r6, r4
 8003066:	2800      	cmp	r0, #0
 8003068:	f040 8248 	bne.w	80034fc <_dtoa_r+0x95c>
 800306c:	2331      	movs	r3, #49	; 0x31
 800306e:	9f03      	ldr	r7, [sp, #12]
 8003070:	f10a 0a01 	add.w	sl, sl, #1
 8003074:	f807 3b01 	strb.w	r3, [r7], #1
 8003078:	e244      	b.n	8003504 <_dtoa_r+0x964>
 800307a:	07e2      	lsls	r2, r4, #31
 800307c:	d505      	bpl.n	800308a <_dtoa_r+0x4ea>
 800307e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003082:	f7fd fa29 	bl	80004d8 <__aeabi_dmul>
 8003086:	2301      	movs	r3, #1
 8003088:	3701      	adds	r7, #1
 800308a:	1064      	asrs	r4, r4, #1
 800308c:	3608      	adds	r6, #8
 800308e:	e76d      	b.n	8002f6c <_dtoa_r+0x3cc>
 8003090:	2702      	movs	r7, #2
 8003092:	e770      	b.n	8002f76 <_dtoa_r+0x3d6>
 8003094:	46d0      	mov	r8, sl
 8003096:	9c08      	ldr	r4, [sp, #32]
 8003098:	e78f      	b.n	8002fba <_dtoa_r+0x41a>
 800309a:	9903      	ldr	r1, [sp, #12]
 800309c:	4b29      	ldr	r3, [pc, #164]	; (8003144 <_dtoa_r+0x5a4>)
 800309e:	4421      	add	r1, r4
 80030a0:	9112      	str	r1, [sp, #72]	; 0x48
 80030a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80030a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80030ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d055      	beq.n	8003160 <_dtoa_r+0x5c0>
 80030b4:	2000      	movs	r0, #0
 80030b6:	4929      	ldr	r1, [pc, #164]	; (800315c <_dtoa_r+0x5bc>)
 80030b8:	f7fd fb38 	bl	800072c <__aeabi_ddiv>
 80030bc:	463b      	mov	r3, r7
 80030be:	4632      	mov	r2, r6
 80030c0:	f7fd f852 	bl	8000168 <__aeabi_dsub>
 80030c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030c8:	9f03      	ldr	r7, [sp, #12]
 80030ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030ce:	f7fd fcb3 	bl	8000a38 <__aeabi_d2iz>
 80030d2:	4604      	mov	r4, r0
 80030d4:	f7fd f996 	bl	8000404 <__aeabi_i2d>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030e0:	f7fd f842 	bl	8000168 <__aeabi_dsub>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	3430      	adds	r4, #48	; 0x30
 80030ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80030f2:	f807 4b01 	strb.w	r4, [r7], #1
 80030f6:	f7fd fc61 	bl	80009bc <__aeabi_dcmplt>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d174      	bne.n	80031e8 <_dtoa_r+0x648>
 80030fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003102:	2000      	movs	r0, #0
 8003104:	4911      	ldr	r1, [pc, #68]	; (800314c <_dtoa_r+0x5ac>)
 8003106:	f7fd f82f 	bl	8000168 <__aeabi_dsub>
 800310a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800310e:	f7fd fc55 	bl	80009bc <__aeabi_dcmplt>
 8003112:	2800      	cmp	r0, #0
 8003114:	f040 80b7 	bne.w	8003286 <_dtoa_r+0x6e6>
 8003118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800311a:	429f      	cmp	r7, r3
 800311c:	f43f af7a 	beq.w	8003014 <_dtoa_r+0x474>
 8003120:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003124:	2200      	movs	r2, #0
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <_dtoa_r+0x5b0>)
 8003128:	f7fd f9d6 	bl	80004d8 <__aeabi_dmul>
 800312c:	2200      	movs	r2, #0
 800312e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <_dtoa_r+0x5b0>)
 8003138:	f7fd f9ce 	bl	80004d8 <__aeabi_dmul>
 800313c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003140:	e7c3      	b.n	80030ca <_dtoa_r+0x52a>
 8003142:	bf00      	nop
 8003144:	08004e00 	.word	0x08004e00
 8003148:	08004dd8 	.word	0x08004dd8
 800314c:	3ff00000 	.word	0x3ff00000
 8003150:	40240000 	.word	0x40240000
 8003154:	401c0000 	.word	0x401c0000
 8003158:	40140000 	.word	0x40140000
 800315c:	3fe00000 	.word	0x3fe00000
 8003160:	4630      	mov	r0, r6
 8003162:	4639      	mov	r1, r7
 8003164:	f7fd f9b8 	bl	80004d8 <__aeabi_dmul>
 8003168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800316a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800316e:	9c03      	ldr	r4, [sp, #12]
 8003170:	9314      	str	r3, [sp, #80]	; 0x50
 8003172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003176:	f7fd fc5f 	bl	8000a38 <__aeabi_d2iz>
 800317a:	9015      	str	r0, [sp, #84]	; 0x54
 800317c:	f7fd f942 	bl	8000404 <__aeabi_i2d>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003188:	f7fc ffee 	bl	8000168 <__aeabi_dsub>
 800318c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800318e:	4606      	mov	r6, r0
 8003190:	3330      	adds	r3, #48	; 0x30
 8003192:	f804 3b01 	strb.w	r3, [r4], #1
 8003196:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003198:	460f      	mov	r7, r1
 800319a:	429c      	cmp	r4, r3
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	d124      	bne.n	80031ec <_dtoa_r+0x64c>
 80031a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80031a6:	4bb0      	ldr	r3, [pc, #704]	; (8003468 <_dtoa_r+0x8c8>)
 80031a8:	f7fc ffe0 	bl	800016c <__adddf3>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4630      	mov	r0, r6
 80031b2:	4639      	mov	r1, r7
 80031b4:	f7fd fc20 	bl	80009f8 <__aeabi_dcmpgt>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d163      	bne.n	8003284 <_dtoa_r+0x6e4>
 80031bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80031c0:	2000      	movs	r0, #0
 80031c2:	49a9      	ldr	r1, [pc, #676]	; (8003468 <_dtoa_r+0x8c8>)
 80031c4:	f7fc ffd0 	bl	8000168 <__aeabi_dsub>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4630      	mov	r0, r6
 80031ce:	4639      	mov	r1, r7
 80031d0:	f7fd fbf4 	bl	80009bc <__aeabi_dcmplt>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	f43f af1d 	beq.w	8003014 <_dtoa_r+0x474>
 80031da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80031dc:	1e7b      	subs	r3, r7, #1
 80031de:	9314      	str	r3, [sp, #80]	; 0x50
 80031e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d0f8      	beq.n	80031da <_dtoa_r+0x63a>
 80031e8:	46c2      	mov	sl, r8
 80031ea:	e03b      	b.n	8003264 <_dtoa_r+0x6c4>
 80031ec:	4b9f      	ldr	r3, [pc, #636]	; (800346c <_dtoa_r+0x8cc>)
 80031ee:	f7fd f973 	bl	80004d8 <__aeabi_dmul>
 80031f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80031f6:	e7bc      	b.n	8003172 <_dtoa_r+0x5d2>
 80031f8:	9f03      	ldr	r7, [sp, #12]
 80031fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80031fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003202:	4640      	mov	r0, r8
 8003204:	4649      	mov	r1, r9
 8003206:	f7fd fa91 	bl	800072c <__aeabi_ddiv>
 800320a:	f7fd fc15 	bl	8000a38 <__aeabi_d2iz>
 800320e:	4604      	mov	r4, r0
 8003210:	f7fd f8f8 	bl	8000404 <__aeabi_i2d>
 8003214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003218:	f7fd f95e 	bl	80004d8 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4640      	mov	r0, r8
 8003222:	4649      	mov	r1, r9
 8003224:	f7fc ffa0 	bl	8000168 <__aeabi_dsub>
 8003228:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800322c:	f807 6b01 	strb.w	r6, [r7], #1
 8003230:	9e03      	ldr	r6, [sp, #12]
 8003232:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003236:	1bbe      	subs	r6, r7, r6
 8003238:	45b4      	cmp	ip, r6
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	d136      	bne.n	80032ae <_dtoa_r+0x70e>
 8003240:	f7fc ff94 	bl	800016c <__adddf3>
 8003244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003248:	4680      	mov	r8, r0
 800324a:	4689      	mov	r9, r1
 800324c:	f7fd fbd4 	bl	80009f8 <__aeabi_dcmpgt>
 8003250:	bb58      	cbnz	r0, 80032aa <_dtoa_r+0x70a>
 8003252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003256:	4640      	mov	r0, r8
 8003258:	4649      	mov	r1, r9
 800325a:	f7fd fba5 	bl	80009a8 <__aeabi_dcmpeq>
 800325e:	b108      	cbz	r0, 8003264 <_dtoa_r+0x6c4>
 8003260:	07e1      	lsls	r1, r4, #31
 8003262:	d422      	bmi.n	80032aa <_dtoa_r+0x70a>
 8003264:	4628      	mov	r0, r5
 8003266:	4659      	mov	r1, fp
 8003268:	f000 faf0 	bl	800384c <_Bfree>
 800326c:	2300      	movs	r3, #0
 800326e:	703b      	strb	r3, [r7, #0]
 8003270:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003272:	f10a 0001 	add.w	r0, sl, #1
 8003276:	6018      	str	r0, [r3, #0]
 8003278:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800327a:	2b00      	cmp	r3, #0
 800327c:	f43f acde 	beq.w	8002c3c <_dtoa_r+0x9c>
 8003280:	601f      	str	r7, [r3, #0]
 8003282:	e4db      	b.n	8002c3c <_dtoa_r+0x9c>
 8003284:	4627      	mov	r7, r4
 8003286:	463b      	mov	r3, r7
 8003288:	461f      	mov	r7, r3
 800328a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800328e:	2a39      	cmp	r2, #57	; 0x39
 8003290:	d107      	bne.n	80032a2 <_dtoa_r+0x702>
 8003292:	9a03      	ldr	r2, [sp, #12]
 8003294:	429a      	cmp	r2, r3
 8003296:	d1f7      	bne.n	8003288 <_dtoa_r+0x6e8>
 8003298:	2230      	movs	r2, #48	; 0x30
 800329a:	9903      	ldr	r1, [sp, #12]
 800329c:	f108 0801 	add.w	r8, r8, #1
 80032a0:	700a      	strb	r2, [r1, #0]
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	3201      	adds	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e79e      	b.n	80031e8 <_dtoa_r+0x648>
 80032aa:	46d0      	mov	r8, sl
 80032ac:	e7eb      	b.n	8003286 <_dtoa_r+0x6e6>
 80032ae:	2200      	movs	r2, #0
 80032b0:	4b6e      	ldr	r3, [pc, #440]	; (800346c <_dtoa_r+0x8cc>)
 80032b2:	f7fd f911 	bl	80004d8 <__aeabi_dmul>
 80032b6:	2200      	movs	r2, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	4680      	mov	r8, r0
 80032bc:	4689      	mov	r9, r1
 80032be:	f7fd fb73 	bl	80009a8 <__aeabi_dcmpeq>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d09b      	beq.n	80031fe <_dtoa_r+0x65e>
 80032c6:	e7cd      	b.n	8003264 <_dtoa_r+0x6c4>
 80032c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	f000 80d0 	beq.w	8003470 <_dtoa_r+0x8d0>
 80032d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80032d2:	2a01      	cmp	r2, #1
 80032d4:	f300 80ae 	bgt.w	8003434 <_dtoa_r+0x894>
 80032d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80032da:	2a00      	cmp	r2, #0
 80032dc:	f000 80a6 	beq.w	800342c <_dtoa_r+0x88c>
 80032e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80032e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80032e6:	9f06      	ldr	r7, [sp, #24]
 80032e8:	9a06      	ldr	r2, [sp, #24]
 80032ea:	2101      	movs	r1, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	9206      	str	r2, [sp, #24]
 80032f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f2:	4628      	mov	r0, r5
 80032f4:	441a      	add	r2, r3
 80032f6:	9209      	str	r2, [sp, #36]	; 0x24
 80032f8:	f000 fb5e 	bl	80039b8 <__i2b>
 80032fc:	4606      	mov	r6, r0
 80032fe:	2f00      	cmp	r7, #0
 8003300:	dd0c      	ble.n	800331c <_dtoa_r+0x77c>
 8003302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	dd09      	ble.n	800331c <_dtoa_r+0x77c>
 8003308:	42bb      	cmp	r3, r7
 800330a:	bfa8      	it	ge
 800330c:	463b      	movge	r3, r7
 800330e:	9a06      	ldr	r2, [sp, #24]
 8003310:	1aff      	subs	r7, r7, r3
 8003312:	1ad2      	subs	r2, r2, r3
 8003314:	9206      	str	r2, [sp, #24]
 8003316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	9309      	str	r3, [sp, #36]	; 0x24
 800331c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800331e:	b1f3      	cbz	r3, 800335e <_dtoa_r+0x7be>
 8003320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a8 	beq.w	8003478 <_dtoa_r+0x8d8>
 8003328:	2c00      	cmp	r4, #0
 800332a:	dd10      	ble.n	800334e <_dtoa_r+0x7ae>
 800332c:	4631      	mov	r1, r6
 800332e:	4622      	mov	r2, r4
 8003330:	4628      	mov	r0, r5
 8003332:	f000 fbff 	bl	8003b34 <__pow5mult>
 8003336:	465a      	mov	r2, fp
 8003338:	4601      	mov	r1, r0
 800333a:	4606      	mov	r6, r0
 800333c:	4628      	mov	r0, r5
 800333e:	f000 fb51 	bl	80039e4 <__multiply>
 8003342:	4680      	mov	r8, r0
 8003344:	4659      	mov	r1, fp
 8003346:	4628      	mov	r0, r5
 8003348:	f000 fa80 	bl	800384c <_Bfree>
 800334c:	46c3      	mov	fp, r8
 800334e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003350:	1b1a      	subs	r2, r3, r4
 8003352:	d004      	beq.n	800335e <_dtoa_r+0x7be>
 8003354:	4659      	mov	r1, fp
 8003356:	4628      	mov	r0, r5
 8003358:	f000 fbec 	bl	8003b34 <__pow5mult>
 800335c:	4683      	mov	fp, r0
 800335e:	2101      	movs	r1, #1
 8003360:	4628      	mov	r0, r5
 8003362:	f000 fb29 	bl	80039b8 <__i2b>
 8003366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003368:	4604      	mov	r4, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f340 8086 	ble.w	800347c <_dtoa_r+0x8dc>
 8003370:	461a      	mov	r2, r3
 8003372:	4601      	mov	r1, r0
 8003374:	4628      	mov	r0, r5
 8003376:	f000 fbdd 	bl	8003b34 <__pow5mult>
 800337a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800337c:	4604      	mov	r4, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	dd7f      	ble.n	8003482 <_dtoa_r+0x8e2>
 8003382:	f04f 0800 	mov.w	r8, #0
 8003386:	6923      	ldr	r3, [r4, #16]
 8003388:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800338c:	6918      	ldr	r0, [r3, #16]
 800338e:	f000 fac5 	bl	800391c <__hi0bits>
 8003392:	f1c0 0020 	rsb	r0, r0, #32
 8003396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003398:	4418      	add	r0, r3
 800339a:	f010 001f 	ands.w	r0, r0, #31
 800339e:	f000 8092 	beq.w	80034c6 <_dtoa_r+0x926>
 80033a2:	f1c0 0320 	rsb	r3, r0, #32
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	f340 808a 	ble.w	80034c0 <_dtoa_r+0x920>
 80033ac:	f1c0 001c 	rsb	r0, r0, #28
 80033b0:	9b06      	ldr	r3, [sp, #24]
 80033b2:	4407      	add	r7, r0
 80033b4:	4403      	add	r3, r0
 80033b6:	9306      	str	r3, [sp, #24]
 80033b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ba:	4403      	add	r3, r0
 80033bc:	9309      	str	r3, [sp, #36]	; 0x24
 80033be:	9b06      	ldr	r3, [sp, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dd05      	ble.n	80033d0 <_dtoa_r+0x830>
 80033c4:	4659      	mov	r1, fp
 80033c6:	461a      	mov	r2, r3
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 fc0d 	bl	8003be8 <__lshift>
 80033ce:	4683      	mov	fp, r0
 80033d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	dd05      	ble.n	80033e2 <_dtoa_r+0x842>
 80033d6:	4621      	mov	r1, r4
 80033d8:	461a      	mov	r2, r3
 80033da:	4628      	mov	r0, r5
 80033dc:	f000 fc04 	bl	8003be8 <__lshift>
 80033e0:	4604      	mov	r4, r0
 80033e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d070      	beq.n	80034ca <_dtoa_r+0x92a>
 80033e8:	4621      	mov	r1, r4
 80033ea:	4658      	mov	r0, fp
 80033ec:	f000 fc6c 	bl	8003cc8 <__mcmp>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	da6a      	bge.n	80034ca <_dtoa_r+0x92a>
 80033f4:	2300      	movs	r3, #0
 80033f6:	4659      	mov	r1, fp
 80033f8:	220a      	movs	r2, #10
 80033fa:	4628      	mov	r0, r5
 80033fc:	f000 fa48 	bl	8003890 <__multadd>
 8003400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003402:	4683      	mov	fp, r0
 8003404:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8194 	beq.w	8003736 <_dtoa_r+0xb96>
 800340e:	4631      	mov	r1, r6
 8003410:	2300      	movs	r3, #0
 8003412:	220a      	movs	r2, #10
 8003414:	4628      	mov	r0, r5
 8003416:	f000 fa3b 	bl	8003890 <__multadd>
 800341a:	f1b9 0f00 	cmp.w	r9, #0
 800341e:	4606      	mov	r6, r0
 8003420:	f300 8093 	bgt.w	800354a <_dtoa_r+0x9aa>
 8003424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003426:	2b02      	cmp	r3, #2
 8003428:	dc57      	bgt.n	80034da <_dtoa_r+0x93a>
 800342a:	e08e      	b.n	800354a <_dtoa_r+0x9aa>
 800342c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800342e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003432:	e757      	b.n	80032e4 <_dtoa_r+0x744>
 8003434:	9b08      	ldr	r3, [sp, #32]
 8003436:	1e5c      	subs	r4, r3, #1
 8003438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800343a:	42a3      	cmp	r3, r4
 800343c:	bfb7      	itett	lt
 800343e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003440:	1b1c      	subge	r4, r3, r4
 8003442:	1ae2      	sublt	r2, r4, r3
 8003444:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003446:	bfbe      	ittt	lt
 8003448:	940a      	strlt	r4, [sp, #40]	; 0x28
 800344a:	189b      	addlt	r3, r3, r2
 800344c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800344e:	9b08      	ldr	r3, [sp, #32]
 8003450:	bfb8      	it	lt
 8003452:	2400      	movlt	r4, #0
 8003454:	2b00      	cmp	r3, #0
 8003456:	bfbb      	ittet	lt
 8003458:	9b06      	ldrlt	r3, [sp, #24]
 800345a:	9a08      	ldrlt	r2, [sp, #32]
 800345c:	9f06      	ldrge	r7, [sp, #24]
 800345e:	1a9f      	sublt	r7, r3, r2
 8003460:	bfac      	ite	ge
 8003462:	9b08      	ldrge	r3, [sp, #32]
 8003464:	2300      	movlt	r3, #0
 8003466:	e73f      	b.n	80032e8 <_dtoa_r+0x748>
 8003468:	3fe00000 	.word	0x3fe00000
 800346c:	40240000 	.word	0x40240000
 8003470:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003472:	9f06      	ldr	r7, [sp, #24]
 8003474:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003476:	e742      	b.n	80032fe <_dtoa_r+0x75e>
 8003478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800347a:	e76b      	b.n	8003354 <_dtoa_r+0x7b4>
 800347c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800347e:	2b01      	cmp	r3, #1
 8003480:	dc19      	bgt.n	80034b6 <_dtoa_r+0x916>
 8003482:	9b04      	ldr	r3, [sp, #16]
 8003484:	b9bb      	cbnz	r3, 80034b6 <_dtoa_r+0x916>
 8003486:	9b05      	ldr	r3, [sp, #20]
 8003488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800348c:	b99b      	cbnz	r3, 80034b6 <_dtoa_r+0x916>
 800348e:	9b05      	ldr	r3, [sp, #20]
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003494:	0d1b      	lsrs	r3, r3, #20
 8003496:	051b      	lsls	r3, r3, #20
 8003498:	b183      	cbz	r3, 80034bc <_dtoa_r+0x91c>
 800349a:	f04f 0801 	mov.w	r8, #1
 800349e:	9b06      	ldr	r3, [sp, #24]
 80034a0:	3301      	adds	r3, #1
 80034a2:	9306      	str	r3, [sp, #24]
 80034a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a6:	3301      	adds	r3, #1
 80034a8:	9309      	str	r3, [sp, #36]	; 0x24
 80034aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f af6a 	bne.w	8003386 <_dtoa_r+0x7e6>
 80034b2:	2001      	movs	r0, #1
 80034b4:	e76f      	b.n	8003396 <_dtoa_r+0x7f6>
 80034b6:	f04f 0800 	mov.w	r8, #0
 80034ba:	e7f6      	b.n	80034aa <_dtoa_r+0x90a>
 80034bc:	4698      	mov	r8, r3
 80034be:	e7f4      	b.n	80034aa <_dtoa_r+0x90a>
 80034c0:	f43f af7d 	beq.w	80033be <_dtoa_r+0x81e>
 80034c4:	4618      	mov	r0, r3
 80034c6:	301c      	adds	r0, #28
 80034c8:	e772      	b.n	80033b0 <_dtoa_r+0x810>
 80034ca:	9b08      	ldr	r3, [sp, #32]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	dc36      	bgt.n	800353e <_dtoa_r+0x99e>
 80034d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	dd33      	ble.n	800353e <_dtoa_r+0x99e>
 80034d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034da:	f1b9 0f00 	cmp.w	r9, #0
 80034de:	d10d      	bne.n	80034fc <_dtoa_r+0x95c>
 80034e0:	4621      	mov	r1, r4
 80034e2:	464b      	mov	r3, r9
 80034e4:	2205      	movs	r2, #5
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f9d2 	bl	8003890 <__multadd>
 80034ec:	4601      	mov	r1, r0
 80034ee:	4604      	mov	r4, r0
 80034f0:	4658      	mov	r0, fp
 80034f2:	f000 fbe9 	bl	8003cc8 <__mcmp>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	f73f adb8 	bgt.w	800306c <_dtoa_r+0x4cc>
 80034fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034fe:	9f03      	ldr	r7, [sp, #12]
 8003500:	ea6f 0a03 	mvn.w	sl, r3
 8003504:	f04f 0800 	mov.w	r8, #0
 8003508:	4621      	mov	r1, r4
 800350a:	4628      	mov	r0, r5
 800350c:	f000 f99e 	bl	800384c <_Bfree>
 8003510:	2e00      	cmp	r6, #0
 8003512:	f43f aea7 	beq.w	8003264 <_dtoa_r+0x6c4>
 8003516:	f1b8 0f00 	cmp.w	r8, #0
 800351a:	d005      	beq.n	8003528 <_dtoa_r+0x988>
 800351c:	45b0      	cmp	r8, r6
 800351e:	d003      	beq.n	8003528 <_dtoa_r+0x988>
 8003520:	4641      	mov	r1, r8
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f992 	bl	800384c <_Bfree>
 8003528:	4631      	mov	r1, r6
 800352a:	4628      	mov	r0, r5
 800352c:	f000 f98e 	bl	800384c <_Bfree>
 8003530:	e698      	b.n	8003264 <_dtoa_r+0x6c4>
 8003532:	2400      	movs	r4, #0
 8003534:	4626      	mov	r6, r4
 8003536:	e7e1      	b.n	80034fc <_dtoa_r+0x95c>
 8003538:	46c2      	mov	sl, r8
 800353a:	4626      	mov	r6, r4
 800353c:	e596      	b.n	800306c <_dtoa_r+0x4cc>
 800353e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80fd 	beq.w	8003744 <_dtoa_r+0xba4>
 800354a:	2f00      	cmp	r7, #0
 800354c:	dd05      	ble.n	800355a <_dtoa_r+0x9ba>
 800354e:	4631      	mov	r1, r6
 8003550:	463a      	mov	r2, r7
 8003552:	4628      	mov	r0, r5
 8003554:	f000 fb48 	bl	8003be8 <__lshift>
 8003558:	4606      	mov	r6, r0
 800355a:	f1b8 0f00 	cmp.w	r8, #0
 800355e:	d05c      	beq.n	800361a <_dtoa_r+0xa7a>
 8003560:	4628      	mov	r0, r5
 8003562:	6871      	ldr	r1, [r6, #4]
 8003564:	f000 f932 	bl	80037cc <_Balloc>
 8003568:	4607      	mov	r7, r0
 800356a:	b928      	cbnz	r0, 8003578 <_dtoa_r+0x9d8>
 800356c:	4602      	mov	r2, r0
 800356e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003572:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <_dtoa_r+0xbd0>)
 8003574:	f7ff bb28 	b.w	8002bc8 <_dtoa_r+0x28>
 8003578:	6932      	ldr	r2, [r6, #16]
 800357a:	f106 010c 	add.w	r1, r6, #12
 800357e:	3202      	adds	r2, #2
 8003580:	0092      	lsls	r2, r2, #2
 8003582:	300c      	adds	r0, #12
 8003584:	f000 f914 	bl	80037b0 <memcpy>
 8003588:	2201      	movs	r2, #1
 800358a:	4639      	mov	r1, r7
 800358c:	4628      	mov	r0, r5
 800358e:	f000 fb2b 	bl	8003be8 <__lshift>
 8003592:	46b0      	mov	r8, r6
 8003594:	4606      	mov	r6, r0
 8003596:	9b03      	ldr	r3, [sp, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	9308      	str	r3, [sp, #32]
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	444b      	add	r3, r9
 80035a0:	930a      	str	r3, [sp, #40]	; 0x28
 80035a2:	9b04      	ldr	r3, [sp, #16]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	9309      	str	r3, [sp, #36]	; 0x24
 80035aa:	9b08      	ldr	r3, [sp, #32]
 80035ac:	4621      	mov	r1, r4
 80035ae:	3b01      	subs	r3, #1
 80035b0:	4658      	mov	r0, fp
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	f7ff fa66 	bl	8002a84 <quorem>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4641      	mov	r1, r8
 80035bc:	3330      	adds	r3, #48	; 0x30
 80035be:	9006      	str	r0, [sp, #24]
 80035c0:	4658      	mov	r0, fp
 80035c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80035c4:	f000 fb80 	bl	8003cc8 <__mcmp>
 80035c8:	4632      	mov	r2, r6
 80035ca:	4681      	mov	r9, r0
 80035cc:	4621      	mov	r1, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fb96 	bl	8003d00 <__mdiff>
 80035d4:	68c2      	ldr	r2, [r0, #12]
 80035d6:	4607      	mov	r7, r0
 80035d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035da:	bb02      	cbnz	r2, 800361e <_dtoa_r+0xa7e>
 80035dc:	4601      	mov	r1, r0
 80035de:	4658      	mov	r0, fp
 80035e0:	f000 fb72 	bl	8003cc8 <__mcmp>
 80035e4:	4602      	mov	r2, r0
 80035e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035e8:	4639      	mov	r1, r7
 80035ea:	4628      	mov	r0, r5
 80035ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80035f0:	f000 f92c 	bl	800384c <_Bfree>
 80035f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035f8:	9f08      	ldr	r7, [sp, #32]
 80035fa:	ea43 0102 	orr.w	r1, r3, r2
 80035fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003604:	d10d      	bne.n	8003622 <_dtoa_r+0xa82>
 8003606:	2b39      	cmp	r3, #57	; 0x39
 8003608:	d029      	beq.n	800365e <_dtoa_r+0xabe>
 800360a:	f1b9 0f00 	cmp.w	r9, #0
 800360e:	dd01      	ble.n	8003614 <_dtoa_r+0xa74>
 8003610:	9b06      	ldr	r3, [sp, #24]
 8003612:	3331      	adds	r3, #49	; 0x31
 8003614:	9a04      	ldr	r2, [sp, #16]
 8003616:	7013      	strb	r3, [r2, #0]
 8003618:	e776      	b.n	8003508 <_dtoa_r+0x968>
 800361a:	4630      	mov	r0, r6
 800361c:	e7b9      	b.n	8003592 <_dtoa_r+0x9f2>
 800361e:	2201      	movs	r2, #1
 8003620:	e7e2      	b.n	80035e8 <_dtoa_r+0xa48>
 8003622:	f1b9 0f00 	cmp.w	r9, #0
 8003626:	db06      	blt.n	8003636 <_dtoa_r+0xa96>
 8003628:	9922      	ldr	r1, [sp, #136]	; 0x88
 800362a:	ea41 0909 	orr.w	r9, r1, r9
 800362e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003630:	ea59 0101 	orrs.w	r1, r9, r1
 8003634:	d120      	bne.n	8003678 <_dtoa_r+0xad8>
 8003636:	2a00      	cmp	r2, #0
 8003638:	ddec      	ble.n	8003614 <_dtoa_r+0xa74>
 800363a:	4659      	mov	r1, fp
 800363c:	2201      	movs	r2, #1
 800363e:	4628      	mov	r0, r5
 8003640:	9308      	str	r3, [sp, #32]
 8003642:	f000 fad1 	bl	8003be8 <__lshift>
 8003646:	4621      	mov	r1, r4
 8003648:	4683      	mov	fp, r0
 800364a:	f000 fb3d 	bl	8003cc8 <__mcmp>
 800364e:	2800      	cmp	r0, #0
 8003650:	9b08      	ldr	r3, [sp, #32]
 8003652:	dc02      	bgt.n	800365a <_dtoa_r+0xaba>
 8003654:	d1de      	bne.n	8003614 <_dtoa_r+0xa74>
 8003656:	07da      	lsls	r2, r3, #31
 8003658:	d5dc      	bpl.n	8003614 <_dtoa_r+0xa74>
 800365a:	2b39      	cmp	r3, #57	; 0x39
 800365c:	d1d8      	bne.n	8003610 <_dtoa_r+0xa70>
 800365e:	2339      	movs	r3, #57	; 0x39
 8003660:	9a04      	ldr	r2, [sp, #16]
 8003662:	7013      	strb	r3, [r2, #0]
 8003664:	463b      	mov	r3, r7
 8003666:	461f      	mov	r7, r3
 8003668:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800366c:	3b01      	subs	r3, #1
 800366e:	2a39      	cmp	r2, #57	; 0x39
 8003670:	d050      	beq.n	8003714 <_dtoa_r+0xb74>
 8003672:	3201      	adds	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e747      	b.n	8003508 <_dtoa_r+0x968>
 8003678:	2a00      	cmp	r2, #0
 800367a:	dd03      	ble.n	8003684 <_dtoa_r+0xae4>
 800367c:	2b39      	cmp	r3, #57	; 0x39
 800367e:	d0ee      	beq.n	800365e <_dtoa_r+0xabe>
 8003680:	3301      	adds	r3, #1
 8003682:	e7c7      	b.n	8003614 <_dtoa_r+0xa74>
 8003684:	9a08      	ldr	r2, [sp, #32]
 8003686:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003688:	f802 3c01 	strb.w	r3, [r2, #-1]
 800368c:	428a      	cmp	r2, r1
 800368e:	d02a      	beq.n	80036e6 <_dtoa_r+0xb46>
 8003690:	4659      	mov	r1, fp
 8003692:	2300      	movs	r3, #0
 8003694:	220a      	movs	r2, #10
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f8fa 	bl	8003890 <__multadd>
 800369c:	45b0      	cmp	r8, r6
 800369e:	4683      	mov	fp, r0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	f04f 020a 	mov.w	r2, #10
 80036a8:	4641      	mov	r1, r8
 80036aa:	4628      	mov	r0, r5
 80036ac:	d107      	bne.n	80036be <_dtoa_r+0xb1e>
 80036ae:	f000 f8ef 	bl	8003890 <__multadd>
 80036b2:	4680      	mov	r8, r0
 80036b4:	4606      	mov	r6, r0
 80036b6:	9b08      	ldr	r3, [sp, #32]
 80036b8:	3301      	adds	r3, #1
 80036ba:	9308      	str	r3, [sp, #32]
 80036bc:	e775      	b.n	80035aa <_dtoa_r+0xa0a>
 80036be:	f000 f8e7 	bl	8003890 <__multadd>
 80036c2:	4631      	mov	r1, r6
 80036c4:	4680      	mov	r8, r0
 80036c6:	2300      	movs	r3, #0
 80036c8:	220a      	movs	r2, #10
 80036ca:	4628      	mov	r0, r5
 80036cc:	f000 f8e0 	bl	8003890 <__multadd>
 80036d0:	4606      	mov	r6, r0
 80036d2:	e7f0      	b.n	80036b6 <_dtoa_r+0xb16>
 80036d4:	f1b9 0f00 	cmp.w	r9, #0
 80036d8:	bfcc      	ite	gt
 80036da:	464f      	movgt	r7, r9
 80036dc:	2701      	movle	r7, #1
 80036de:	f04f 0800 	mov.w	r8, #0
 80036e2:	9a03      	ldr	r2, [sp, #12]
 80036e4:	4417      	add	r7, r2
 80036e6:	4659      	mov	r1, fp
 80036e8:	2201      	movs	r2, #1
 80036ea:	4628      	mov	r0, r5
 80036ec:	9308      	str	r3, [sp, #32]
 80036ee:	f000 fa7b 	bl	8003be8 <__lshift>
 80036f2:	4621      	mov	r1, r4
 80036f4:	4683      	mov	fp, r0
 80036f6:	f000 fae7 	bl	8003cc8 <__mcmp>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	dcb2      	bgt.n	8003664 <_dtoa_r+0xac4>
 80036fe:	d102      	bne.n	8003706 <_dtoa_r+0xb66>
 8003700:	9b08      	ldr	r3, [sp, #32]
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d4ae      	bmi.n	8003664 <_dtoa_r+0xac4>
 8003706:	463b      	mov	r3, r7
 8003708:	461f      	mov	r7, r3
 800370a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800370e:	2a30      	cmp	r2, #48	; 0x30
 8003710:	d0fa      	beq.n	8003708 <_dtoa_r+0xb68>
 8003712:	e6f9      	b.n	8003508 <_dtoa_r+0x968>
 8003714:	9a03      	ldr	r2, [sp, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d1a5      	bne.n	8003666 <_dtoa_r+0xac6>
 800371a:	2331      	movs	r3, #49	; 0x31
 800371c:	f10a 0a01 	add.w	sl, sl, #1
 8003720:	e779      	b.n	8003616 <_dtoa_r+0xa76>
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <_dtoa_r+0xbd4>)
 8003724:	f7ff baa8 	b.w	8002c78 <_dtoa_r+0xd8>
 8003728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800372a:	2b00      	cmp	r3, #0
 800372c:	f47f aa81 	bne.w	8002c32 <_dtoa_r+0x92>
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <_dtoa_r+0xbd8>)
 8003732:	f7ff baa1 	b.w	8002c78 <_dtoa_r+0xd8>
 8003736:	f1b9 0f00 	cmp.w	r9, #0
 800373a:	dc03      	bgt.n	8003744 <_dtoa_r+0xba4>
 800373c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800373e:	2b02      	cmp	r3, #2
 8003740:	f73f aecb 	bgt.w	80034da <_dtoa_r+0x93a>
 8003744:	9f03      	ldr	r7, [sp, #12]
 8003746:	4621      	mov	r1, r4
 8003748:	4658      	mov	r0, fp
 800374a:	f7ff f99b 	bl	8002a84 <quorem>
 800374e:	9a03      	ldr	r2, [sp, #12]
 8003750:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003754:	f807 3b01 	strb.w	r3, [r7], #1
 8003758:	1aba      	subs	r2, r7, r2
 800375a:	4591      	cmp	r9, r2
 800375c:	ddba      	ble.n	80036d4 <_dtoa_r+0xb34>
 800375e:	4659      	mov	r1, fp
 8003760:	2300      	movs	r3, #0
 8003762:	220a      	movs	r2, #10
 8003764:	4628      	mov	r0, r5
 8003766:	f000 f893 	bl	8003890 <__multadd>
 800376a:	4683      	mov	fp, r0
 800376c:	e7eb      	b.n	8003746 <_dtoa_r+0xba6>
 800376e:	bf00      	nop
 8003770:	08004d67 	.word	0x08004d67
 8003774:	08004cc4 	.word	0x08004cc4
 8003778:	08004ce8 	.word	0x08004ce8

0800377c <_localeconv_r>:
 800377c:	4800      	ldr	r0, [pc, #0]	; (8003780 <_localeconv_r+0x4>)
 800377e:	4770      	bx	lr
 8003780:	20000160 	.word	0x20000160

08003784 <malloc>:
 8003784:	4b02      	ldr	r3, [pc, #8]	; (8003790 <malloc+0xc>)
 8003786:	4601      	mov	r1, r0
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f000 bc1d 	b.w	8003fc8 <_malloc_r>
 800378e:	bf00      	nop
 8003790:	2000000c 	.word	0x2000000c

08003794 <memchr>:
 8003794:	4603      	mov	r3, r0
 8003796:	b510      	push	{r4, lr}
 8003798:	b2c9      	uxtb	r1, r1
 800379a:	4402      	add	r2, r0
 800379c:	4293      	cmp	r3, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	d101      	bne.n	80037a6 <memchr+0x12>
 80037a2:	2000      	movs	r0, #0
 80037a4:	e003      	b.n	80037ae <memchr+0x1a>
 80037a6:	7804      	ldrb	r4, [r0, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	428c      	cmp	r4, r1
 80037ac:	d1f6      	bne.n	800379c <memchr+0x8>
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <memcpy>:
 80037b0:	440a      	add	r2, r1
 80037b2:	4291      	cmp	r1, r2
 80037b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037b8:	d100      	bne.n	80037bc <memcpy+0xc>
 80037ba:	4770      	bx	lr
 80037bc:	b510      	push	{r4, lr}
 80037be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037c2:	4291      	cmp	r1, r2
 80037c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037c8:	d1f9      	bne.n	80037be <memcpy+0xe>
 80037ca:	bd10      	pop	{r4, pc}

080037cc <_Balloc>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80037d0:	4604      	mov	r4, r0
 80037d2:	460d      	mov	r5, r1
 80037d4:	b976      	cbnz	r6, 80037f4 <_Balloc+0x28>
 80037d6:	2010      	movs	r0, #16
 80037d8:	f7ff ffd4 	bl	8003784 <malloc>
 80037dc:	4602      	mov	r2, r0
 80037de:	6260      	str	r0, [r4, #36]	; 0x24
 80037e0:	b920      	cbnz	r0, 80037ec <_Balloc+0x20>
 80037e2:	2166      	movs	r1, #102	; 0x66
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <_Balloc+0x78>)
 80037e6:	4818      	ldr	r0, [pc, #96]	; (8003848 <_Balloc+0x7c>)
 80037e8:	f000 fc72 	bl	80040d0 <__assert_func>
 80037ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80037f0:	6006      	str	r6, [r0, #0]
 80037f2:	60c6      	str	r6, [r0, #12]
 80037f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80037f6:	68f3      	ldr	r3, [r6, #12]
 80037f8:	b183      	cbz	r3, 800381c <_Balloc+0x50>
 80037fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003802:	b9b8      	cbnz	r0, 8003834 <_Balloc+0x68>
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f605 	lsl.w	r6, r1, r5
 800380a:	1d72      	adds	r2, r6, #5
 800380c:	4620      	mov	r0, r4
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	f000 fb5e 	bl	8003ed0 <_calloc_r>
 8003814:	b160      	cbz	r0, 8003830 <_Balloc+0x64>
 8003816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800381a:	e00e      	b.n	800383a <_Balloc+0x6e>
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	2104      	movs	r1, #4
 8003820:	4620      	mov	r0, r4
 8003822:	f000 fb55 	bl	8003ed0 <_calloc_r>
 8003826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003828:	60f0      	str	r0, [r6, #12]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e4      	bne.n	80037fa <_Balloc+0x2e>
 8003830:	2000      	movs	r0, #0
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	6802      	ldr	r2, [r0, #0]
 8003836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800383a:	2300      	movs	r3, #0
 800383c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003840:	e7f7      	b.n	8003832 <_Balloc+0x66>
 8003842:	bf00      	nop
 8003844:	08004cf5 	.word	0x08004cf5
 8003848:	08004d78 	.word	0x08004d78

0800384c <_Bfree>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003850:	4605      	mov	r5, r0
 8003852:	460c      	mov	r4, r1
 8003854:	b976      	cbnz	r6, 8003874 <_Bfree+0x28>
 8003856:	2010      	movs	r0, #16
 8003858:	f7ff ff94 	bl	8003784 <malloc>
 800385c:	4602      	mov	r2, r0
 800385e:	6268      	str	r0, [r5, #36]	; 0x24
 8003860:	b920      	cbnz	r0, 800386c <_Bfree+0x20>
 8003862:	218a      	movs	r1, #138	; 0x8a
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <_Bfree+0x3c>)
 8003866:	4809      	ldr	r0, [pc, #36]	; (800388c <_Bfree+0x40>)
 8003868:	f000 fc32 	bl	80040d0 <__assert_func>
 800386c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003870:	6006      	str	r6, [r0, #0]
 8003872:	60c6      	str	r6, [r0, #12]
 8003874:	b13c      	cbz	r4, 8003886 <_Bfree+0x3a>
 8003876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003878:	6862      	ldr	r2, [r4, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003880:	6021      	str	r1, [r4, #0]
 8003882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	08004cf5 	.word	0x08004cf5
 800388c:	08004d78 	.word	0x08004d78

08003890 <__multadd>:
 8003890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003894:	4607      	mov	r7, r0
 8003896:	460c      	mov	r4, r1
 8003898:	461e      	mov	r6, r3
 800389a:	2000      	movs	r0, #0
 800389c:	690d      	ldr	r5, [r1, #16]
 800389e:	f101 0c14 	add.w	ip, r1, #20
 80038a2:	f8dc 3000 	ldr.w	r3, [ip]
 80038a6:	3001      	adds	r0, #1
 80038a8:	b299      	uxth	r1, r3
 80038aa:	fb02 6101 	mla	r1, r2, r1, r6
 80038ae:	0c1e      	lsrs	r6, r3, #16
 80038b0:	0c0b      	lsrs	r3, r1, #16
 80038b2:	fb02 3306 	mla	r3, r2, r6, r3
 80038b6:	b289      	uxth	r1, r1
 80038b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80038bc:	4285      	cmp	r5, r0
 80038be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80038c2:	f84c 1b04 	str.w	r1, [ip], #4
 80038c6:	dcec      	bgt.n	80038a2 <__multadd+0x12>
 80038c8:	b30e      	cbz	r6, 800390e <__multadd+0x7e>
 80038ca:	68a3      	ldr	r3, [r4, #8]
 80038cc:	42ab      	cmp	r3, r5
 80038ce:	dc19      	bgt.n	8003904 <__multadd+0x74>
 80038d0:	6861      	ldr	r1, [r4, #4]
 80038d2:	4638      	mov	r0, r7
 80038d4:	3101      	adds	r1, #1
 80038d6:	f7ff ff79 	bl	80037cc <_Balloc>
 80038da:	4680      	mov	r8, r0
 80038dc:	b928      	cbnz	r0, 80038ea <__multadd+0x5a>
 80038de:	4602      	mov	r2, r0
 80038e0:	21b5      	movs	r1, #181	; 0xb5
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <__multadd+0x84>)
 80038e4:	480c      	ldr	r0, [pc, #48]	; (8003918 <__multadd+0x88>)
 80038e6:	f000 fbf3 	bl	80040d0 <__assert_func>
 80038ea:	6922      	ldr	r2, [r4, #16]
 80038ec:	f104 010c 	add.w	r1, r4, #12
 80038f0:	3202      	adds	r2, #2
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	300c      	adds	r0, #12
 80038f6:	f7ff ff5b 	bl	80037b0 <memcpy>
 80038fa:	4621      	mov	r1, r4
 80038fc:	4638      	mov	r0, r7
 80038fe:	f7ff ffa5 	bl	800384c <_Bfree>
 8003902:	4644      	mov	r4, r8
 8003904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003908:	3501      	adds	r5, #1
 800390a:	615e      	str	r6, [r3, #20]
 800390c:	6125      	str	r5, [r4, #16]
 800390e:	4620      	mov	r0, r4
 8003910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003914:	08004d67 	.word	0x08004d67
 8003918:	08004d78 	.word	0x08004d78

0800391c <__hi0bits>:
 800391c:	0c02      	lsrs	r2, r0, #16
 800391e:	0412      	lsls	r2, r2, #16
 8003920:	4603      	mov	r3, r0
 8003922:	b9ca      	cbnz	r2, 8003958 <__hi0bits+0x3c>
 8003924:	0403      	lsls	r3, r0, #16
 8003926:	2010      	movs	r0, #16
 8003928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800392c:	bf04      	itt	eq
 800392e:	021b      	lsleq	r3, r3, #8
 8003930:	3008      	addeq	r0, #8
 8003932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003936:	bf04      	itt	eq
 8003938:	011b      	lsleq	r3, r3, #4
 800393a:	3004      	addeq	r0, #4
 800393c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003940:	bf04      	itt	eq
 8003942:	009b      	lsleq	r3, r3, #2
 8003944:	3002      	addeq	r0, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	db05      	blt.n	8003956 <__hi0bits+0x3a>
 800394a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800394e:	f100 0001 	add.w	r0, r0, #1
 8003952:	bf08      	it	eq
 8003954:	2020      	moveq	r0, #32
 8003956:	4770      	bx	lr
 8003958:	2000      	movs	r0, #0
 800395a:	e7e5      	b.n	8003928 <__hi0bits+0xc>

0800395c <__lo0bits>:
 800395c:	6803      	ldr	r3, [r0, #0]
 800395e:	4602      	mov	r2, r0
 8003960:	f013 0007 	ands.w	r0, r3, #7
 8003964:	d00b      	beq.n	800397e <__lo0bits+0x22>
 8003966:	07d9      	lsls	r1, r3, #31
 8003968:	d421      	bmi.n	80039ae <__lo0bits+0x52>
 800396a:	0798      	lsls	r0, r3, #30
 800396c:	bf49      	itett	mi
 800396e:	085b      	lsrmi	r3, r3, #1
 8003970:	089b      	lsrpl	r3, r3, #2
 8003972:	2001      	movmi	r0, #1
 8003974:	6013      	strmi	r3, [r2, #0]
 8003976:	bf5c      	itt	pl
 8003978:	2002      	movpl	r0, #2
 800397a:	6013      	strpl	r3, [r2, #0]
 800397c:	4770      	bx	lr
 800397e:	b299      	uxth	r1, r3
 8003980:	b909      	cbnz	r1, 8003986 <__lo0bits+0x2a>
 8003982:	2010      	movs	r0, #16
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b2d9      	uxtb	r1, r3
 8003988:	b909      	cbnz	r1, 800398e <__lo0bits+0x32>
 800398a:	3008      	adds	r0, #8
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	0719      	lsls	r1, r3, #28
 8003990:	bf04      	itt	eq
 8003992:	091b      	lsreq	r3, r3, #4
 8003994:	3004      	addeq	r0, #4
 8003996:	0799      	lsls	r1, r3, #30
 8003998:	bf04      	itt	eq
 800399a:	089b      	lsreq	r3, r3, #2
 800399c:	3002      	addeq	r0, #2
 800399e:	07d9      	lsls	r1, r3, #31
 80039a0:	d403      	bmi.n	80039aa <__lo0bits+0x4e>
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	f100 0001 	add.w	r0, r0, #1
 80039a8:	d003      	beq.n	80039b2 <__lo0bits+0x56>
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4770      	bx	lr
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
 80039b2:	2020      	movs	r0, #32
 80039b4:	4770      	bx	lr
	...

080039b8 <__i2b>:
 80039b8:	b510      	push	{r4, lr}
 80039ba:	460c      	mov	r4, r1
 80039bc:	2101      	movs	r1, #1
 80039be:	f7ff ff05 	bl	80037cc <_Balloc>
 80039c2:	4602      	mov	r2, r0
 80039c4:	b928      	cbnz	r0, 80039d2 <__i2b+0x1a>
 80039c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <__i2b+0x24>)
 80039cc:	4804      	ldr	r0, [pc, #16]	; (80039e0 <__i2b+0x28>)
 80039ce:	f000 fb7f 	bl	80040d0 <__assert_func>
 80039d2:	2301      	movs	r3, #1
 80039d4:	6144      	str	r4, [r0, #20]
 80039d6:	6103      	str	r3, [r0, #16]
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	bf00      	nop
 80039dc:	08004d67 	.word	0x08004d67
 80039e0:	08004d78 	.word	0x08004d78

080039e4 <__multiply>:
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	4691      	mov	r9, r2
 80039ea:	690a      	ldr	r2, [r1, #16]
 80039ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80039f0:	460c      	mov	r4, r1
 80039f2:	429a      	cmp	r2, r3
 80039f4:	bfbe      	ittt	lt
 80039f6:	460b      	movlt	r3, r1
 80039f8:	464c      	movlt	r4, r9
 80039fa:	4699      	movlt	r9, r3
 80039fc:	6927      	ldr	r7, [r4, #16]
 80039fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	6861      	ldr	r1, [r4, #4]
 8003a06:	eb07 060a 	add.w	r6, r7, sl
 8003a0a:	42b3      	cmp	r3, r6
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	bfb8      	it	lt
 8003a10:	3101      	addlt	r1, #1
 8003a12:	f7ff fedb 	bl	80037cc <_Balloc>
 8003a16:	b930      	cbnz	r0, 8003a26 <__multiply+0x42>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f240 115d 	movw	r1, #349	; 0x15d
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <__multiply+0x148>)
 8003a20:	4843      	ldr	r0, [pc, #268]	; (8003b30 <__multiply+0x14c>)
 8003a22:	f000 fb55 	bl	80040d0 <__assert_func>
 8003a26:	f100 0514 	add.w	r5, r0, #20
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003a32:	4543      	cmp	r3, r8
 8003a34:	d321      	bcc.n	8003a7a <__multiply+0x96>
 8003a36:	f104 0314 	add.w	r3, r4, #20
 8003a3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003a3e:	f109 0314 	add.w	r3, r9, #20
 8003a42:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003a46:	9202      	str	r2, [sp, #8]
 8003a48:	1b3a      	subs	r2, r7, r4
 8003a4a:	3a15      	subs	r2, #21
 8003a4c:	f022 0203 	bic.w	r2, r2, #3
 8003a50:	3204      	adds	r2, #4
 8003a52:	f104 0115 	add.w	r1, r4, #21
 8003a56:	428f      	cmp	r7, r1
 8003a58:	bf38      	it	cc
 8003a5a:	2204      	movcc	r2, #4
 8003a5c:	9201      	str	r2, [sp, #4]
 8003a5e:	9a02      	ldr	r2, [sp, #8]
 8003a60:	9303      	str	r3, [sp, #12]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d80c      	bhi.n	8003a80 <__multiply+0x9c>
 8003a66:	2e00      	cmp	r6, #0
 8003a68:	dd03      	ble.n	8003a72 <__multiply+0x8e>
 8003a6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d059      	beq.n	8003b26 <__multiply+0x142>
 8003a72:	6106      	str	r6, [r0, #16]
 8003a74:	b005      	add	sp, #20
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	f843 2b04 	str.w	r2, [r3], #4
 8003a7e:	e7d8      	b.n	8003a32 <__multiply+0x4e>
 8003a80:	f8b3 a000 	ldrh.w	sl, [r3]
 8003a84:	f1ba 0f00 	cmp.w	sl, #0
 8003a88:	d023      	beq.n	8003ad2 <__multiply+0xee>
 8003a8a:	46a9      	mov	r9, r5
 8003a8c:	f04f 0c00 	mov.w	ip, #0
 8003a90:	f104 0e14 	add.w	lr, r4, #20
 8003a94:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003a98:	f8d9 1000 	ldr.w	r1, [r9]
 8003a9c:	fa1f fb82 	uxth.w	fp, r2
 8003aa0:	b289      	uxth	r1, r1
 8003aa2:	fb0a 110b 	mla	r1, sl, fp, r1
 8003aa6:	4461      	add	r1, ip
 8003aa8:	f8d9 c000 	ldr.w	ip, [r9]
 8003aac:	0c12      	lsrs	r2, r2, #16
 8003aae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003ab2:	fb0a c202 	mla	r2, sl, r2, ip
 8003ab6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003aba:	b289      	uxth	r1, r1
 8003abc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003ac0:	4577      	cmp	r7, lr
 8003ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003ac6:	f849 1b04 	str.w	r1, [r9], #4
 8003aca:	d8e3      	bhi.n	8003a94 <__multiply+0xb0>
 8003acc:	9a01      	ldr	r2, [sp, #4]
 8003ace:	f845 c002 	str.w	ip, [r5, r2]
 8003ad2:	9a03      	ldr	r2, [sp, #12]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003ada:	f1b9 0f00 	cmp.w	r9, #0
 8003ade:	d020      	beq.n	8003b22 <__multiply+0x13e>
 8003ae0:	46ae      	mov	lr, r5
 8003ae2:	f04f 0a00 	mov.w	sl, #0
 8003ae6:	6829      	ldr	r1, [r5, #0]
 8003ae8:	f104 0c14 	add.w	ip, r4, #20
 8003aec:	f8bc b000 	ldrh.w	fp, [ip]
 8003af0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003af4:	b289      	uxth	r1, r1
 8003af6:	fb09 220b 	mla	r2, r9, fp, r2
 8003afa:	4492      	add	sl, r2
 8003afc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003b00:	f84e 1b04 	str.w	r1, [lr], #4
 8003b04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003b08:	f8be 1000 	ldrh.w	r1, [lr]
 8003b0c:	0c12      	lsrs	r2, r2, #16
 8003b0e:	fb09 1102 	mla	r1, r9, r2, r1
 8003b12:	4567      	cmp	r7, ip
 8003b14:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003b18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003b1c:	d8e6      	bhi.n	8003aec <__multiply+0x108>
 8003b1e:	9a01      	ldr	r2, [sp, #4]
 8003b20:	50a9      	str	r1, [r5, r2]
 8003b22:	3504      	adds	r5, #4
 8003b24:	e79b      	b.n	8003a5e <__multiply+0x7a>
 8003b26:	3e01      	subs	r6, #1
 8003b28:	e79d      	b.n	8003a66 <__multiply+0x82>
 8003b2a:	bf00      	nop
 8003b2c:	08004d67 	.word	0x08004d67
 8003b30:	08004d78 	.word	0x08004d78

08003b34 <__pow5mult>:
 8003b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b38:	4615      	mov	r5, r2
 8003b3a:	f012 0203 	ands.w	r2, r2, #3
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460f      	mov	r7, r1
 8003b42:	d007      	beq.n	8003b54 <__pow5mult+0x20>
 8003b44:	4c25      	ldr	r4, [pc, #148]	; (8003bdc <__pow5mult+0xa8>)
 8003b46:	3a01      	subs	r2, #1
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003b4e:	f7ff fe9f 	bl	8003890 <__multadd>
 8003b52:	4607      	mov	r7, r0
 8003b54:	10ad      	asrs	r5, r5, #2
 8003b56:	d03d      	beq.n	8003bd4 <__pow5mult+0xa0>
 8003b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003b5a:	b97c      	cbnz	r4, 8003b7c <__pow5mult+0x48>
 8003b5c:	2010      	movs	r0, #16
 8003b5e:	f7ff fe11 	bl	8003784 <malloc>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6270      	str	r0, [r6, #36]	; 0x24
 8003b66:	b928      	cbnz	r0, 8003b74 <__pow5mult+0x40>
 8003b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <__pow5mult+0xac>)
 8003b6e:	481d      	ldr	r0, [pc, #116]	; (8003be4 <__pow5mult+0xb0>)
 8003b70:	f000 faae 	bl	80040d0 <__assert_func>
 8003b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003b78:	6004      	str	r4, [r0, #0]
 8003b7a:	60c4      	str	r4, [r0, #12]
 8003b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003b84:	b94c      	cbnz	r4, 8003b9a <__pow5mult+0x66>
 8003b86:	f240 2171 	movw	r1, #625	; 0x271
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7ff ff14 	bl	80039b8 <__i2b>
 8003b90:	2300      	movs	r3, #0
 8003b92:	4604      	mov	r4, r0
 8003b94:	f8c8 0008 	str.w	r0, [r8, #8]
 8003b98:	6003      	str	r3, [r0, #0]
 8003b9a:	f04f 0900 	mov.w	r9, #0
 8003b9e:	07eb      	lsls	r3, r5, #31
 8003ba0:	d50a      	bpl.n	8003bb8 <__pow5mult+0x84>
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7ff ff1c 	bl	80039e4 <__multiply>
 8003bac:	4680      	mov	r8, r0
 8003bae:	4639      	mov	r1, r7
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7ff fe4b 	bl	800384c <_Bfree>
 8003bb6:	4647      	mov	r7, r8
 8003bb8:	106d      	asrs	r5, r5, #1
 8003bba:	d00b      	beq.n	8003bd4 <__pow5mult+0xa0>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	b938      	cbnz	r0, 8003bd0 <__pow5mult+0x9c>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ff0d 	bl	80039e4 <__multiply>
 8003bca:	6020      	str	r0, [r4, #0]
 8003bcc:	f8c0 9000 	str.w	r9, [r0]
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	e7e4      	b.n	8003b9e <__pow5mult+0x6a>
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bda:	bf00      	nop
 8003bdc:	08004ec8 	.word	0x08004ec8
 8003be0:	08004cf5 	.word	0x08004cf5
 8003be4:	08004d78 	.word	0x08004d78

08003be8 <__lshift>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	460c      	mov	r4, r1
 8003bee:	4607      	mov	r7, r0
 8003bf0:	4691      	mov	r9, r2
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	6849      	ldr	r1, [r1, #4]
 8003bf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003bfa:	68a3      	ldr	r3, [r4, #8]
 8003bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003c00:	f108 0601 	add.w	r6, r8, #1
 8003c04:	42b3      	cmp	r3, r6
 8003c06:	db0b      	blt.n	8003c20 <__lshift+0x38>
 8003c08:	4638      	mov	r0, r7
 8003c0a:	f7ff fddf 	bl	80037cc <_Balloc>
 8003c0e:	4605      	mov	r5, r0
 8003c10:	b948      	cbnz	r0, 8003c26 <__lshift+0x3e>
 8003c12:	4602      	mov	r2, r0
 8003c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <__lshift+0xd8>)
 8003c1a:	482a      	ldr	r0, [pc, #168]	; (8003cc4 <__lshift+0xdc>)
 8003c1c:	f000 fa58 	bl	80040d0 <__assert_func>
 8003c20:	3101      	adds	r1, #1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	e7ee      	b.n	8003c04 <__lshift+0x1c>
 8003c26:	2300      	movs	r3, #0
 8003c28:	f100 0114 	add.w	r1, r0, #20
 8003c2c:	f100 0210 	add.w	r2, r0, #16
 8003c30:	4618      	mov	r0, r3
 8003c32:	4553      	cmp	r3, sl
 8003c34:	db37      	blt.n	8003ca6 <__lshift+0xbe>
 8003c36:	6920      	ldr	r0, [r4, #16]
 8003c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003c3c:	f104 0314 	add.w	r3, r4, #20
 8003c40:	f019 091f 	ands.w	r9, r9, #31
 8003c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003c48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003c4c:	d02f      	beq.n	8003cae <__lshift+0xc6>
 8003c4e:	468a      	mov	sl, r1
 8003c50:	f04f 0c00 	mov.w	ip, #0
 8003c54:	f1c9 0e20 	rsb	lr, r9, #32
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	fa02 f209 	lsl.w	r2, r2, r9
 8003c5e:	ea42 020c 	orr.w	r2, r2, ip
 8003c62:	f84a 2b04 	str.w	r2, [sl], #4
 8003c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c6a:	4298      	cmp	r0, r3
 8003c6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003c70:	d8f2      	bhi.n	8003c58 <__lshift+0x70>
 8003c72:	1b03      	subs	r3, r0, r4
 8003c74:	3b15      	subs	r3, #21
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	f104 0215 	add.w	r2, r4, #21
 8003c80:	4290      	cmp	r0, r2
 8003c82:	bf38      	it	cc
 8003c84:	2304      	movcc	r3, #4
 8003c86:	f841 c003 	str.w	ip, [r1, r3]
 8003c8a:	f1bc 0f00 	cmp.w	ip, #0
 8003c8e:	d001      	beq.n	8003c94 <__lshift+0xac>
 8003c90:	f108 0602 	add.w	r6, r8, #2
 8003c94:	3e01      	subs	r6, #1
 8003c96:	4638      	mov	r0, r7
 8003c98:	4621      	mov	r1, r4
 8003c9a:	612e      	str	r6, [r5, #16]
 8003c9c:	f7ff fdd6 	bl	800384c <_Bfree>
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca6:	f842 0f04 	str.w	r0, [r2, #4]!
 8003caa:	3301      	adds	r3, #1
 8003cac:	e7c1      	b.n	8003c32 <__lshift+0x4a>
 8003cae:	3904      	subs	r1, #4
 8003cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8003cba:	d8f9      	bhi.n	8003cb0 <__lshift+0xc8>
 8003cbc:	e7ea      	b.n	8003c94 <__lshift+0xac>
 8003cbe:	bf00      	nop
 8003cc0:	08004d67 	.word	0x08004d67
 8003cc4:	08004d78 	.word	0x08004d78

08003cc8 <__mcmp>:
 8003cc8:	4603      	mov	r3, r0
 8003cca:	690a      	ldr	r2, [r1, #16]
 8003ccc:	6900      	ldr	r0, [r0, #16]
 8003cce:	b530      	push	{r4, r5, lr}
 8003cd0:	1a80      	subs	r0, r0, r2
 8003cd2:	d10d      	bne.n	8003cf0 <__mcmp+0x28>
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	3114      	adds	r1, #20
 8003cd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003cdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003ce0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003ce4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003ce8:	4295      	cmp	r5, r2
 8003cea:	d002      	beq.n	8003cf2 <__mcmp+0x2a>
 8003cec:	d304      	bcc.n	8003cf8 <__mcmp+0x30>
 8003cee:	2001      	movs	r0, #1
 8003cf0:	bd30      	pop	{r4, r5, pc}
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	d3f4      	bcc.n	8003ce0 <__mcmp+0x18>
 8003cf6:	e7fb      	b.n	8003cf0 <__mcmp+0x28>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	e7f8      	b.n	8003cf0 <__mcmp+0x28>
	...

08003d00 <__mdiff>:
 8003d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	460d      	mov	r5, r1
 8003d06:	4607      	mov	r7, r0
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	f7ff ffdb 	bl	8003cc8 <__mcmp>
 8003d12:	1e06      	subs	r6, r0, #0
 8003d14:	d111      	bne.n	8003d3a <__mdiff+0x3a>
 8003d16:	4631      	mov	r1, r6
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f7ff fd57 	bl	80037cc <_Balloc>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	b928      	cbnz	r0, 8003d2e <__mdiff+0x2e>
 8003d22:	f240 2132 	movw	r1, #562	; 0x232
 8003d26:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <__mdiff+0x110>)
 8003d28:	483a      	ldr	r0, [pc, #232]	; (8003e14 <__mdiff+0x114>)
 8003d2a:	f000 f9d1 	bl	80040d0 <__assert_func>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003d34:	4610      	mov	r0, r2
 8003d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	bfa4      	itt	ge
 8003d3c:	4623      	movge	r3, r4
 8003d3e:	462c      	movge	r4, r5
 8003d40:	4638      	mov	r0, r7
 8003d42:	6861      	ldr	r1, [r4, #4]
 8003d44:	bfa6      	itte	ge
 8003d46:	461d      	movge	r5, r3
 8003d48:	2600      	movge	r6, #0
 8003d4a:	2601      	movlt	r6, #1
 8003d4c:	f7ff fd3e 	bl	80037cc <_Balloc>
 8003d50:	4602      	mov	r2, r0
 8003d52:	b918      	cbnz	r0, 8003d5c <__mdiff+0x5c>
 8003d54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003d58:	4b2d      	ldr	r3, [pc, #180]	; (8003e10 <__mdiff+0x110>)
 8003d5a:	e7e5      	b.n	8003d28 <__mdiff+0x28>
 8003d5c:	f102 0814 	add.w	r8, r2, #20
 8003d60:	46c2      	mov	sl, r8
 8003d62:	f04f 0c00 	mov.w	ip, #0
 8003d66:	6927      	ldr	r7, [r4, #16]
 8003d68:	60c6      	str	r6, [r0, #12]
 8003d6a:	692e      	ldr	r6, [r5, #16]
 8003d6c:	f104 0014 	add.w	r0, r4, #20
 8003d70:	f105 0914 	add.w	r9, r5, #20
 8003d74:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8003d78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003d7c:	3410      	adds	r4, #16
 8003d7e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8003d82:	f859 3b04 	ldr.w	r3, [r9], #4
 8003d86:	fa1f f18b 	uxth.w	r1, fp
 8003d8a:	448c      	add	ip, r1
 8003d8c:	b299      	uxth	r1, r3
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	ebac 0101 	sub.w	r1, ip, r1
 8003d94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003d98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003d9c:	b289      	uxth	r1, r1
 8003d9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003da2:	454e      	cmp	r6, r9
 8003da4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003da8:	f84a 3b04 	str.w	r3, [sl], #4
 8003dac:	d8e7      	bhi.n	8003d7e <__mdiff+0x7e>
 8003dae:	1b73      	subs	r3, r6, r5
 8003db0:	3b15      	subs	r3, #21
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	3515      	adds	r5, #21
 8003db8:	3304      	adds	r3, #4
 8003dba:	42ae      	cmp	r6, r5
 8003dbc:	bf38      	it	cc
 8003dbe:	2304      	movcc	r3, #4
 8003dc0:	4418      	add	r0, r3
 8003dc2:	4443      	add	r3, r8
 8003dc4:	461e      	mov	r6, r3
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	4575      	cmp	r5, lr
 8003dca:	d30e      	bcc.n	8003dea <__mdiff+0xea>
 8003dcc:	f10e 0103 	add.w	r1, lr, #3
 8003dd0:	1a09      	subs	r1, r1, r0
 8003dd2:	f021 0103 	bic.w	r1, r1, #3
 8003dd6:	3803      	subs	r0, #3
 8003dd8:	4586      	cmp	lr, r0
 8003dda:	bf38      	it	cc
 8003ddc:	2100      	movcc	r1, #0
 8003dde:	4419      	add	r1, r3
 8003de0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003de4:	b18b      	cbz	r3, 8003e0a <__mdiff+0x10a>
 8003de6:	6117      	str	r7, [r2, #16]
 8003de8:	e7a4      	b.n	8003d34 <__mdiff+0x34>
 8003dea:	f855 8b04 	ldr.w	r8, [r5], #4
 8003dee:	fa1f f188 	uxth.w	r1, r8
 8003df2:	4461      	add	r1, ip
 8003df4:	140c      	asrs	r4, r1, #16
 8003df6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003dfa:	b289      	uxth	r1, r1
 8003dfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003e00:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003e04:	f846 1b04 	str.w	r1, [r6], #4
 8003e08:	e7de      	b.n	8003dc8 <__mdiff+0xc8>
 8003e0a:	3f01      	subs	r7, #1
 8003e0c:	e7e8      	b.n	8003de0 <__mdiff+0xe0>
 8003e0e:	bf00      	nop
 8003e10:	08004d67 	.word	0x08004d67
 8003e14:	08004d78 	.word	0x08004d78

08003e18 <__d2b>:
 8003e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003e22:	4690      	mov	r8, r2
 8003e24:	461d      	mov	r5, r3
 8003e26:	f7ff fcd1 	bl	80037cc <_Balloc>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	b930      	cbnz	r0, 8003e3c <__d2b+0x24>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	f240 310a 	movw	r1, #778	; 0x30a
 8003e34:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <__d2b+0xb0>)
 8003e36:	4825      	ldr	r0, [pc, #148]	; (8003ecc <__d2b+0xb4>)
 8003e38:	f000 f94a 	bl	80040d0 <__assert_func>
 8003e3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003e40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003e44:	bb2d      	cbnz	r5, 8003e92 <__d2b+0x7a>
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	f1b8 0300 	subs.w	r3, r8, #0
 8003e4c:	d026      	beq.n	8003e9c <__d2b+0x84>
 8003e4e:	4668      	mov	r0, sp
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	f7ff fd83 	bl	800395c <__lo0bits>
 8003e56:	9900      	ldr	r1, [sp, #0]
 8003e58:	b1f0      	cbz	r0, 8003e98 <__d2b+0x80>
 8003e5a:	9a01      	ldr	r2, [sp, #4]
 8003e5c:	f1c0 0320 	rsb	r3, r0, #32
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	430b      	orrs	r3, r1
 8003e66:	40c2      	lsrs	r2, r0
 8003e68:	6163      	str	r3, [r4, #20]
 8003e6a:	9201      	str	r2, [sp, #4]
 8003e6c:	9b01      	ldr	r3, [sp, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf14      	ite	ne
 8003e72:	2102      	movne	r1, #2
 8003e74:	2101      	moveq	r1, #1
 8003e76:	61a3      	str	r3, [r4, #24]
 8003e78:	6121      	str	r1, [r4, #16]
 8003e7a:	b1c5      	cbz	r5, 8003eae <__d2b+0x96>
 8003e7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003e80:	4405      	add	r5, r0
 8003e82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003e86:	603d      	str	r5, [r7, #0]
 8003e88:	6030      	str	r0, [r6, #0]
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	b002      	add	sp, #8
 8003e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e96:	e7d6      	b.n	8003e46 <__d2b+0x2e>
 8003e98:	6161      	str	r1, [r4, #20]
 8003e9a:	e7e7      	b.n	8003e6c <__d2b+0x54>
 8003e9c:	a801      	add	r0, sp, #4
 8003e9e:	f7ff fd5d 	bl	800395c <__lo0bits>
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	9b01      	ldr	r3, [sp, #4]
 8003ea6:	6121      	str	r1, [r4, #16]
 8003ea8:	6163      	str	r3, [r4, #20]
 8003eaa:	3020      	adds	r0, #32
 8003eac:	e7e5      	b.n	8003e7a <__d2b+0x62>
 8003eae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8003eb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003eb6:	6038      	str	r0, [r7, #0]
 8003eb8:	6918      	ldr	r0, [r3, #16]
 8003eba:	f7ff fd2f 	bl	800391c <__hi0bits>
 8003ebe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8003ec2:	6031      	str	r1, [r6, #0]
 8003ec4:	e7e1      	b.n	8003e8a <__d2b+0x72>
 8003ec6:	bf00      	nop
 8003ec8:	08004d67 	.word	0x08004d67
 8003ecc:	08004d78 	.word	0x08004d78

08003ed0 <_calloc_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	fba1 5402 	umull	r5, r4, r1, r2
 8003ed6:	b934      	cbnz	r4, 8003ee6 <_calloc_r+0x16>
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f000 f875 	bl	8003fc8 <_malloc_r>
 8003ede:	4606      	mov	r6, r0
 8003ee0:	b928      	cbnz	r0, 8003eee <_calloc_r+0x1e>
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	220c      	movs	r2, #12
 8003ee8:	2600      	movs	r6, #0
 8003eea:	6002      	str	r2, [r0, #0]
 8003eec:	e7f9      	b.n	8003ee2 <_calloc_r+0x12>
 8003eee:	462a      	mov	r2, r5
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	f7fe f95f 	bl	80021b4 <memset>
 8003ef6:	e7f4      	b.n	8003ee2 <_calloc_r+0x12>

08003ef8 <_free_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d040      	beq.n	8003f82 <_free_r+0x8a>
 8003f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f04:	1f0c      	subs	r4, r1, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bfb8      	it	lt
 8003f0a:	18e4      	addlt	r4, r4, r3
 8003f0c:	f000 f922 	bl	8004154 <__malloc_lock>
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <_free_r+0x8c>)
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	b933      	cbnz	r3, 8003f24 <_free_r+0x2c>
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	6014      	str	r4, [r2, #0]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f20:	f000 b91e 	b.w	8004160 <__malloc_unlock>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d908      	bls.n	8003f3a <_free_r+0x42>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	1821      	adds	r1, r4, r0
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	bf01      	itttt	eq
 8003f30:	6819      	ldreq	r1, [r3, #0]
 8003f32:	685b      	ldreq	r3, [r3, #4]
 8003f34:	1809      	addeq	r1, r1, r0
 8003f36:	6021      	streq	r1, [r4, #0]
 8003f38:	e7ed      	b.n	8003f16 <_free_r+0x1e>
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b10b      	cbz	r3, 8003f44 <_free_r+0x4c>
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	d9fa      	bls.n	8003f3a <_free_r+0x42>
 8003f44:	6811      	ldr	r1, [r2, #0]
 8003f46:	1850      	adds	r0, r2, r1
 8003f48:	42a0      	cmp	r0, r4
 8003f4a:	d10b      	bne.n	8003f64 <_free_r+0x6c>
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	4401      	add	r1, r0
 8003f50:	1850      	adds	r0, r2, r1
 8003f52:	4283      	cmp	r3, r0
 8003f54:	6011      	str	r1, [r2, #0]
 8003f56:	d1e0      	bne.n	8003f1a <_free_r+0x22>
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4401      	add	r1, r0
 8003f5e:	6011      	str	r1, [r2, #0]
 8003f60:	6053      	str	r3, [r2, #4]
 8003f62:	e7da      	b.n	8003f1a <_free_r+0x22>
 8003f64:	d902      	bls.n	8003f6c <_free_r+0x74>
 8003f66:	230c      	movs	r3, #12
 8003f68:	602b      	str	r3, [r5, #0]
 8003f6a:	e7d6      	b.n	8003f1a <_free_r+0x22>
 8003f6c:	6820      	ldr	r0, [r4, #0]
 8003f6e:	1821      	adds	r1, r4, r0
 8003f70:	428b      	cmp	r3, r1
 8003f72:	bf01      	itttt	eq
 8003f74:	6819      	ldreq	r1, [r3, #0]
 8003f76:	685b      	ldreq	r3, [r3, #4]
 8003f78:	1809      	addeq	r1, r1, r0
 8003f7a:	6021      	streq	r1, [r4, #0]
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	6054      	str	r4, [r2, #4]
 8003f80:	e7cb      	b.n	8003f1a <_free_r+0x22>
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	20000244 	.word	0x20000244

08003f88 <sbrk_aligned>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4e0e      	ldr	r6, [pc, #56]	; (8003fc4 <sbrk_aligned+0x3c>)
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	6831      	ldr	r1, [r6, #0]
 8003f90:	4605      	mov	r5, r0
 8003f92:	b911      	cbnz	r1, 8003f9a <sbrk_aligned+0x12>
 8003f94:	f000 f88c 	bl	80040b0 <_sbrk_r>
 8003f98:	6030      	str	r0, [r6, #0]
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 f887 	bl	80040b0 <_sbrk_r>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	d00a      	beq.n	8003fbc <sbrk_aligned+0x34>
 8003fa6:	1cc4      	adds	r4, r0, #3
 8003fa8:	f024 0403 	bic.w	r4, r4, #3
 8003fac:	42a0      	cmp	r0, r4
 8003fae:	d007      	beq.n	8003fc0 <sbrk_aligned+0x38>
 8003fb0:	1a21      	subs	r1, r4, r0
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 f87c 	bl	80040b0 <_sbrk_r>
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d101      	bne.n	8003fc0 <sbrk_aligned+0x38>
 8003fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	20000248 	.word	0x20000248

08003fc8 <_malloc_r>:
 8003fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	1ccd      	adds	r5, r1, #3
 8003fce:	f025 0503 	bic.w	r5, r5, #3
 8003fd2:	3508      	adds	r5, #8
 8003fd4:	2d0c      	cmp	r5, #12
 8003fd6:	bf38      	it	cc
 8003fd8:	250c      	movcc	r5, #12
 8003fda:	2d00      	cmp	r5, #0
 8003fdc:	4607      	mov	r7, r0
 8003fde:	db01      	blt.n	8003fe4 <_malloc_r+0x1c>
 8003fe0:	42a9      	cmp	r1, r5
 8003fe2:	d905      	bls.n	8003ff0 <_malloc_r+0x28>
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4630      	mov	r0, r6
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	4e2e      	ldr	r6, [pc, #184]	; (80040ac <_malloc_r+0xe4>)
 8003ff2:	f000 f8af 	bl	8004154 <__malloc_lock>
 8003ff6:	6833      	ldr	r3, [r6, #0]
 8003ff8:	461c      	mov	r4, r3
 8003ffa:	bb34      	cbnz	r4, 800404a <_malloc_r+0x82>
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4638      	mov	r0, r7
 8004000:	f7ff ffc2 	bl	8003f88 <sbrk_aligned>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	4604      	mov	r4, r0
 8004008:	d14d      	bne.n	80040a6 <_malloc_r+0xde>
 800400a:	6834      	ldr	r4, [r6, #0]
 800400c:	4626      	mov	r6, r4
 800400e:	2e00      	cmp	r6, #0
 8004010:	d140      	bne.n	8004094 <_malloc_r+0xcc>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	4631      	mov	r1, r6
 8004016:	4638      	mov	r0, r7
 8004018:	eb04 0803 	add.w	r8, r4, r3
 800401c:	f000 f848 	bl	80040b0 <_sbrk_r>
 8004020:	4580      	cmp	r8, r0
 8004022:	d13a      	bne.n	800409a <_malloc_r+0xd2>
 8004024:	6821      	ldr	r1, [r4, #0]
 8004026:	3503      	adds	r5, #3
 8004028:	1a6d      	subs	r5, r5, r1
 800402a:	f025 0503 	bic.w	r5, r5, #3
 800402e:	3508      	adds	r5, #8
 8004030:	2d0c      	cmp	r5, #12
 8004032:	bf38      	it	cc
 8004034:	250c      	movcc	r5, #12
 8004036:	4638      	mov	r0, r7
 8004038:	4629      	mov	r1, r5
 800403a:	f7ff ffa5 	bl	8003f88 <sbrk_aligned>
 800403e:	3001      	adds	r0, #1
 8004040:	d02b      	beq.n	800409a <_malloc_r+0xd2>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	442b      	add	r3, r5
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	e00e      	b.n	8004068 <_malloc_r+0xa0>
 800404a:	6822      	ldr	r2, [r4, #0]
 800404c:	1b52      	subs	r2, r2, r5
 800404e:	d41e      	bmi.n	800408e <_malloc_r+0xc6>
 8004050:	2a0b      	cmp	r2, #11
 8004052:	d916      	bls.n	8004082 <_malloc_r+0xba>
 8004054:	1961      	adds	r1, r4, r5
 8004056:	42a3      	cmp	r3, r4
 8004058:	6025      	str	r5, [r4, #0]
 800405a:	bf18      	it	ne
 800405c:	6059      	strne	r1, [r3, #4]
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	bf08      	it	eq
 8004062:	6031      	streq	r1, [r6, #0]
 8004064:	5162      	str	r2, [r4, r5]
 8004066:	604b      	str	r3, [r1, #4]
 8004068:	4638      	mov	r0, r7
 800406a:	f104 060b 	add.w	r6, r4, #11
 800406e:	f000 f877 	bl	8004160 <__malloc_unlock>
 8004072:	f026 0607 	bic.w	r6, r6, #7
 8004076:	1d23      	adds	r3, r4, #4
 8004078:	1af2      	subs	r2, r6, r3
 800407a:	d0b6      	beq.n	8003fea <_malloc_r+0x22>
 800407c:	1b9b      	subs	r3, r3, r6
 800407e:	50a3      	str	r3, [r4, r2]
 8004080:	e7b3      	b.n	8003fea <_malloc_r+0x22>
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	42a3      	cmp	r3, r4
 8004086:	bf0c      	ite	eq
 8004088:	6032      	streq	r2, [r6, #0]
 800408a:	605a      	strne	r2, [r3, #4]
 800408c:	e7ec      	b.n	8004068 <_malloc_r+0xa0>
 800408e:	4623      	mov	r3, r4
 8004090:	6864      	ldr	r4, [r4, #4]
 8004092:	e7b2      	b.n	8003ffa <_malloc_r+0x32>
 8004094:	4634      	mov	r4, r6
 8004096:	6876      	ldr	r6, [r6, #4]
 8004098:	e7b9      	b.n	800400e <_malloc_r+0x46>
 800409a:	230c      	movs	r3, #12
 800409c:	4638      	mov	r0, r7
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	f000 f85e 	bl	8004160 <__malloc_unlock>
 80040a4:	e7a1      	b.n	8003fea <_malloc_r+0x22>
 80040a6:	6025      	str	r5, [r4, #0]
 80040a8:	e7de      	b.n	8004068 <_malloc_r+0xa0>
 80040aa:	bf00      	nop
 80040ac:	20000244 	.word	0x20000244

080040b0 <_sbrk_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	2300      	movs	r3, #0
 80040b4:	4d05      	ldr	r5, [pc, #20]	; (80040cc <_sbrk_r+0x1c>)
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f000 fdc8 	bl	8004c50 <_sbrk>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_sbrk_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_sbrk_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	2000024c 	.word	0x2000024c

080040d0 <__assert_func>:
 80040d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040d2:	4614      	mov	r4, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <__assert_func+0x2c>)
 80040d8:	4605      	mov	r5, r0
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d8      	ldr	r0, [r3, #12]
 80040de:	b14c      	cbz	r4, 80040f4 <__assert_func+0x24>
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <__assert_func+0x30>)
 80040e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040e6:	9100      	str	r1, [sp, #0]
 80040e8:	462b      	mov	r3, r5
 80040ea:	4906      	ldr	r1, [pc, #24]	; (8004104 <__assert_func+0x34>)
 80040ec:	f000 f80e 	bl	800410c <fiprintf>
 80040f0:	f000 fa62 	bl	80045b8 <abort>
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <__assert_func+0x38>)
 80040f6:	461c      	mov	r4, r3
 80040f8:	e7f3      	b.n	80040e2 <__assert_func+0x12>
 80040fa:	bf00      	nop
 80040fc:	2000000c 	.word	0x2000000c
 8004100:	08004ed4 	.word	0x08004ed4
 8004104:	08004ee1 	.word	0x08004ee1
 8004108:	08004f0f 	.word	0x08004f0f

0800410c <fiprintf>:
 800410c:	b40e      	push	{r1, r2, r3}
 800410e:	b503      	push	{r0, r1, lr}
 8004110:	4601      	mov	r1, r0
 8004112:	ab03      	add	r3, sp, #12
 8004114:	4805      	ldr	r0, [pc, #20]	; (800412c <fiprintf+0x20>)
 8004116:	f853 2b04 	ldr.w	r2, [r3], #4
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	f000 f84d 	bl	80041bc <_vfiprintf_r>
 8004122:	b002      	add	sp, #8
 8004124:	f85d eb04 	ldr.w	lr, [sp], #4
 8004128:	b003      	add	sp, #12
 800412a:	4770      	bx	lr
 800412c:	2000000c 	.word	0x2000000c

08004130 <__ascii_mbtowc>:
 8004130:	b082      	sub	sp, #8
 8004132:	b901      	cbnz	r1, 8004136 <__ascii_mbtowc+0x6>
 8004134:	a901      	add	r1, sp, #4
 8004136:	b142      	cbz	r2, 800414a <__ascii_mbtowc+0x1a>
 8004138:	b14b      	cbz	r3, 800414e <__ascii_mbtowc+0x1e>
 800413a:	7813      	ldrb	r3, [r2, #0]
 800413c:	600b      	str	r3, [r1, #0]
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	1e10      	subs	r0, r2, #0
 8004142:	bf18      	it	ne
 8004144:	2001      	movne	r0, #1
 8004146:	b002      	add	sp, #8
 8004148:	4770      	bx	lr
 800414a:	4610      	mov	r0, r2
 800414c:	e7fb      	b.n	8004146 <__ascii_mbtowc+0x16>
 800414e:	f06f 0001 	mvn.w	r0, #1
 8004152:	e7f8      	b.n	8004146 <__ascii_mbtowc+0x16>

08004154 <__malloc_lock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_lock+0x8>)
 8004156:	f000 bbeb 	b.w	8004930 <__retarget_lock_acquire_recursive>
 800415a:	bf00      	nop
 800415c:	20000250 	.word	0x20000250

08004160 <__malloc_unlock>:
 8004160:	4801      	ldr	r0, [pc, #4]	; (8004168 <__malloc_unlock+0x8>)
 8004162:	f000 bbe6 	b.w	8004932 <__retarget_lock_release_recursive>
 8004166:	bf00      	nop
 8004168:	20000250 	.word	0x20000250

0800416c <__sfputc_r>:
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	b410      	push	{r4}
 8004170:	3b01      	subs	r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	da07      	bge.n	8004188 <__sfputc_r+0x1c>
 8004178:	6994      	ldr	r4, [r2, #24]
 800417a:	42a3      	cmp	r3, r4
 800417c:	db01      	blt.n	8004182 <__sfputc_r+0x16>
 800417e:	290a      	cmp	r1, #10
 8004180:	d102      	bne.n	8004188 <__sfputc_r+0x1c>
 8004182:	bc10      	pop	{r4}
 8004184:	f000 b94a 	b.w	800441c <__swbuf_r>
 8004188:	6813      	ldr	r3, [r2, #0]
 800418a:	1c58      	adds	r0, r3, #1
 800418c:	6010      	str	r0, [r2, #0]
 800418e:	7019      	strb	r1, [r3, #0]
 8004190:	4608      	mov	r0, r1
 8004192:	bc10      	pop	{r4}
 8004194:	4770      	bx	lr

08004196 <__sfputs_r>:
 8004196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004198:	4606      	mov	r6, r0
 800419a:	460f      	mov	r7, r1
 800419c:	4614      	mov	r4, r2
 800419e:	18d5      	adds	r5, r2, r3
 80041a0:	42ac      	cmp	r4, r5
 80041a2:	d101      	bne.n	80041a8 <__sfputs_r+0x12>
 80041a4:	2000      	movs	r0, #0
 80041a6:	e007      	b.n	80041b8 <__sfputs_r+0x22>
 80041a8:	463a      	mov	r2, r7
 80041aa:	4630      	mov	r0, r6
 80041ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b0:	f7ff ffdc 	bl	800416c <__sfputc_r>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d1f3      	bne.n	80041a0 <__sfputs_r+0xa>
 80041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041bc <_vfiprintf_r>:
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	460d      	mov	r5, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	4698      	mov	r8, r3
 80041c6:	4606      	mov	r6, r0
 80041c8:	b09d      	sub	sp, #116	; 0x74
 80041ca:	b118      	cbz	r0, 80041d4 <_vfiprintf_r+0x18>
 80041cc:	6983      	ldr	r3, [r0, #24]
 80041ce:	b90b      	cbnz	r3, 80041d4 <_vfiprintf_r+0x18>
 80041d0:	f000 fb10 	bl	80047f4 <__sinit>
 80041d4:	4b89      	ldr	r3, [pc, #548]	; (80043fc <_vfiprintf_r+0x240>)
 80041d6:	429d      	cmp	r5, r3
 80041d8:	d11b      	bne.n	8004212 <_vfiprintf_r+0x56>
 80041da:	6875      	ldr	r5, [r6, #4]
 80041dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041de:	07d9      	lsls	r1, r3, #31
 80041e0:	d405      	bmi.n	80041ee <_vfiprintf_r+0x32>
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	059a      	lsls	r2, r3, #22
 80041e6:	d402      	bmi.n	80041ee <_vfiprintf_r+0x32>
 80041e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ea:	f000 fba1 	bl	8004930 <__retarget_lock_acquire_recursive>
 80041ee:	89ab      	ldrh	r3, [r5, #12]
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	d501      	bpl.n	80041f8 <_vfiprintf_r+0x3c>
 80041f4:	692b      	ldr	r3, [r5, #16]
 80041f6:	b9eb      	cbnz	r3, 8004234 <_vfiprintf_r+0x78>
 80041f8:	4629      	mov	r1, r5
 80041fa:	4630      	mov	r0, r6
 80041fc:	f000 f96e 	bl	80044dc <__swsetup_r>
 8004200:	b1c0      	cbz	r0, 8004234 <_vfiprintf_r+0x78>
 8004202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004204:	07dc      	lsls	r4, r3, #31
 8004206:	d50e      	bpl.n	8004226 <_vfiprintf_r+0x6a>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	b01d      	add	sp, #116	; 0x74
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004212:	4b7b      	ldr	r3, [pc, #492]	; (8004400 <_vfiprintf_r+0x244>)
 8004214:	429d      	cmp	r5, r3
 8004216:	d101      	bne.n	800421c <_vfiprintf_r+0x60>
 8004218:	68b5      	ldr	r5, [r6, #8]
 800421a:	e7df      	b.n	80041dc <_vfiprintf_r+0x20>
 800421c:	4b79      	ldr	r3, [pc, #484]	; (8004404 <_vfiprintf_r+0x248>)
 800421e:	429d      	cmp	r5, r3
 8004220:	bf08      	it	eq
 8004222:	68f5      	ldreq	r5, [r6, #12]
 8004224:	e7da      	b.n	80041dc <_vfiprintf_r+0x20>
 8004226:	89ab      	ldrh	r3, [r5, #12]
 8004228:	0598      	lsls	r0, r3, #22
 800422a:	d4ed      	bmi.n	8004208 <_vfiprintf_r+0x4c>
 800422c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800422e:	f000 fb80 	bl	8004932 <__retarget_lock_release_recursive>
 8004232:	e7e9      	b.n	8004208 <_vfiprintf_r+0x4c>
 8004234:	2300      	movs	r3, #0
 8004236:	9309      	str	r3, [sp, #36]	; 0x24
 8004238:	2320      	movs	r3, #32
 800423a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800423e:	2330      	movs	r3, #48	; 0x30
 8004240:	f04f 0901 	mov.w	r9, #1
 8004244:	f8cd 800c 	str.w	r8, [sp, #12]
 8004248:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004408 <_vfiprintf_r+0x24c>
 800424c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004250:	4623      	mov	r3, r4
 8004252:	469a      	mov	sl, r3
 8004254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004258:	b10a      	cbz	r2, 800425e <_vfiprintf_r+0xa2>
 800425a:	2a25      	cmp	r2, #37	; 0x25
 800425c:	d1f9      	bne.n	8004252 <_vfiprintf_r+0x96>
 800425e:	ebba 0b04 	subs.w	fp, sl, r4
 8004262:	d00b      	beq.n	800427c <_vfiprintf_r+0xc0>
 8004264:	465b      	mov	r3, fp
 8004266:	4622      	mov	r2, r4
 8004268:	4629      	mov	r1, r5
 800426a:	4630      	mov	r0, r6
 800426c:	f7ff ff93 	bl	8004196 <__sfputs_r>
 8004270:	3001      	adds	r0, #1
 8004272:	f000 80aa 	beq.w	80043ca <_vfiprintf_r+0x20e>
 8004276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004278:	445a      	add	r2, fp
 800427a:	9209      	str	r2, [sp, #36]	; 0x24
 800427c:	f89a 3000 	ldrb.w	r3, [sl]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a2 	beq.w	80043ca <_vfiprintf_r+0x20e>
 8004286:	2300      	movs	r3, #0
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004290:	f10a 0a01 	add.w	sl, sl, #1
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	9307      	str	r3, [sp, #28]
 8004298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800429c:	931a      	str	r3, [sp, #104]	; 0x68
 800429e:	4654      	mov	r4, sl
 80042a0:	2205      	movs	r2, #5
 80042a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a6:	4858      	ldr	r0, [pc, #352]	; (8004408 <_vfiprintf_r+0x24c>)
 80042a8:	f7ff fa74 	bl	8003794 <memchr>
 80042ac:	9a04      	ldr	r2, [sp, #16]
 80042ae:	b9d8      	cbnz	r0, 80042e8 <_vfiprintf_r+0x12c>
 80042b0:	06d1      	lsls	r1, r2, #27
 80042b2:	bf44      	itt	mi
 80042b4:	2320      	movmi	r3, #32
 80042b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ba:	0713      	lsls	r3, r2, #28
 80042bc:	bf44      	itt	mi
 80042be:	232b      	movmi	r3, #43	; 0x2b
 80042c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c4:	f89a 3000 	ldrb.w	r3, [sl]
 80042c8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ca:	d015      	beq.n	80042f8 <_vfiprintf_r+0x13c>
 80042cc:	4654      	mov	r4, sl
 80042ce:	2000      	movs	r0, #0
 80042d0:	f04f 0c0a 	mov.w	ip, #10
 80042d4:	9a07      	ldr	r2, [sp, #28]
 80042d6:	4621      	mov	r1, r4
 80042d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042dc:	3b30      	subs	r3, #48	; 0x30
 80042de:	2b09      	cmp	r3, #9
 80042e0:	d94e      	bls.n	8004380 <_vfiprintf_r+0x1c4>
 80042e2:	b1b0      	cbz	r0, 8004312 <_vfiprintf_r+0x156>
 80042e4:	9207      	str	r2, [sp, #28]
 80042e6:	e014      	b.n	8004312 <_vfiprintf_r+0x156>
 80042e8:	eba0 0308 	sub.w	r3, r0, r8
 80042ec:	fa09 f303 	lsl.w	r3, r9, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	46a2      	mov	sl, r4
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	e7d2      	b.n	800429e <_vfiprintf_r+0xe2>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d19      	adds	r1, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9103      	str	r1, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfbb      	ittet	lt
 8004304:	425b      	neglt	r3, r3
 8004306:	f042 0202 	orrlt.w	r2, r2, #2
 800430a:	9307      	strge	r3, [sp, #28]
 800430c:	9307      	strlt	r3, [sp, #28]
 800430e:	bfb8      	it	lt
 8004310:	9204      	strlt	r2, [sp, #16]
 8004312:	7823      	ldrb	r3, [r4, #0]
 8004314:	2b2e      	cmp	r3, #46	; 0x2e
 8004316:	d10c      	bne.n	8004332 <_vfiprintf_r+0x176>
 8004318:	7863      	ldrb	r3, [r4, #1]
 800431a:	2b2a      	cmp	r3, #42	; 0x2a
 800431c:	d135      	bne.n	800438a <_vfiprintf_r+0x1ce>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	3402      	adds	r4, #2
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	9203      	str	r2, [sp, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	bfb8      	it	lt
 800432c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004330:	9305      	str	r3, [sp, #20]
 8004332:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800440c <_vfiprintf_r+0x250>
 8004336:	2203      	movs	r2, #3
 8004338:	4650      	mov	r0, sl
 800433a:	7821      	ldrb	r1, [r4, #0]
 800433c:	f7ff fa2a 	bl	8003794 <memchr>
 8004340:	b140      	cbz	r0, 8004354 <_vfiprintf_r+0x198>
 8004342:	2340      	movs	r3, #64	; 0x40
 8004344:	eba0 000a 	sub.w	r0, r0, sl
 8004348:	fa03 f000 	lsl.w	r0, r3, r0
 800434c:	9b04      	ldr	r3, [sp, #16]
 800434e:	3401      	adds	r4, #1
 8004350:	4303      	orrs	r3, r0
 8004352:	9304      	str	r3, [sp, #16]
 8004354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004358:	2206      	movs	r2, #6
 800435a:	482d      	ldr	r0, [pc, #180]	; (8004410 <_vfiprintf_r+0x254>)
 800435c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004360:	f7ff fa18 	bl	8003794 <memchr>
 8004364:	2800      	cmp	r0, #0
 8004366:	d03f      	beq.n	80043e8 <_vfiprintf_r+0x22c>
 8004368:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <_vfiprintf_r+0x258>)
 800436a:	bb1b      	cbnz	r3, 80043b4 <_vfiprintf_r+0x1f8>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	3307      	adds	r3, #7
 8004370:	f023 0307 	bic.w	r3, r3, #7
 8004374:	3308      	adds	r3, #8
 8004376:	9303      	str	r3, [sp, #12]
 8004378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437a:	443b      	add	r3, r7
 800437c:	9309      	str	r3, [sp, #36]	; 0x24
 800437e:	e767      	b.n	8004250 <_vfiprintf_r+0x94>
 8004380:	460c      	mov	r4, r1
 8004382:	2001      	movs	r0, #1
 8004384:	fb0c 3202 	mla	r2, ip, r2, r3
 8004388:	e7a5      	b.n	80042d6 <_vfiprintf_r+0x11a>
 800438a:	2300      	movs	r3, #0
 800438c:	f04f 0c0a 	mov.w	ip, #10
 8004390:	4619      	mov	r1, r3
 8004392:	3401      	adds	r4, #1
 8004394:	9305      	str	r3, [sp, #20]
 8004396:	4620      	mov	r0, r4
 8004398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800439c:	3a30      	subs	r2, #48	; 0x30
 800439e:	2a09      	cmp	r2, #9
 80043a0:	d903      	bls.n	80043aa <_vfiprintf_r+0x1ee>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0c5      	beq.n	8004332 <_vfiprintf_r+0x176>
 80043a6:	9105      	str	r1, [sp, #20]
 80043a8:	e7c3      	b.n	8004332 <_vfiprintf_r+0x176>
 80043aa:	4604      	mov	r4, r0
 80043ac:	2301      	movs	r3, #1
 80043ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80043b2:	e7f0      	b.n	8004396 <_vfiprintf_r+0x1da>
 80043b4:	ab03      	add	r3, sp, #12
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	462a      	mov	r2, r5
 80043ba:	4630      	mov	r0, r6
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <_vfiprintf_r+0x25c>)
 80043be:	a904      	add	r1, sp, #16
 80043c0:	f7fd ff9e 	bl	8002300 <_printf_float>
 80043c4:	4607      	mov	r7, r0
 80043c6:	1c78      	adds	r0, r7, #1
 80043c8:	d1d6      	bne.n	8004378 <_vfiprintf_r+0x1bc>
 80043ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043cc:	07d9      	lsls	r1, r3, #31
 80043ce:	d405      	bmi.n	80043dc <_vfiprintf_r+0x220>
 80043d0:	89ab      	ldrh	r3, [r5, #12]
 80043d2:	059a      	lsls	r2, r3, #22
 80043d4:	d402      	bmi.n	80043dc <_vfiprintf_r+0x220>
 80043d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043d8:	f000 faab 	bl	8004932 <__retarget_lock_release_recursive>
 80043dc:	89ab      	ldrh	r3, [r5, #12]
 80043de:	065b      	lsls	r3, r3, #25
 80043e0:	f53f af12 	bmi.w	8004208 <_vfiprintf_r+0x4c>
 80043e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e6:	e711      	b.n	800420c <_vfiprintf_r+0x50>
 80043e8:	ab03      	add	r3, sp, #12
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	462a      	mov	r2, r5
 80043ee:	4630      	mov	r0, r6
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <_vfiprintf_r+0x25c>)
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	f7fe fa20 	bl	8002838 <_printf_i>
 80043f8:	e7e4      	b.n	80043c4 <_vfiprintf_r+0x208>
 80043fa:	bf00      	nop
 80043fc:	0800504c 	.word	0x0800504c
 8004400:	0800506c 	.word	0x0800506c
 8004404:	0800502c 	.word	0x0800502c
 8004408:	08004f1a 	.word	0x08004f1a
 800440c:	08004f20 	.word	0x08004f20
 8004410:	08004f24 	.word	0x08004f24
 8004414:	08002301 	.word	0x08002301
 8004418:	08004197 	.word	0x08004197

0800441c <__swbuf_r>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	460e      	mov	r6, r1
 8004420:	4614      	mov	r4, r2
 8004422:	4605      	mov	r5, r0
 8004424:	b118      	cbz	r0, 800442e <__swbuf_r+0x12>
 8004426:	6983      	ldr	r3, [r0, #24]
 8004428:	b90b      	cbnz	r3, 800442e <__swbuf_r+0x12>
 800442a:	f000 f9e3 	bl	80047f4 <__sinit>
 800442e:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <__swbuf_r+0x98>)
 8004430:	429c      	cmp	r4, r3
 8004432:	d12b      	bne.n	800448c <__swbuf_r+0x70>
 8004434:	686c      	ldr	r4, [r5, #4]
 8004436:	69a3      	ldr	r3, [r4, #24]
 8004438:	60a3      	str	r3, [r4, #8]
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	071a      	lsls	r2, r3, #28
 800443e:	d52f      	bpl.n	80044a0 <__swbuf_r+0x84>
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	b36b      	cbz	r3, 80044a0 <__swbuf_r+0x84>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	6820      	ldr	r0, [r4, #0]
 8004448:	b2f6      	uxtb	r6, r6
 800444a:	1ac0      	subs	r0, r0, r3
 800444c:	6963      	ldr	r3, [r4, #20]
 800444e:	4637      	mov	r7, r6
 8004450:	4283      	cmp	r3, r0
 8004452:	dc04      	bgt.n	800445e <__swbuf_r+0x42>
 8004454:	4621      	mov	r1, r4
 8004456:	4628      	mov	r0, r5
 8004458:	f000 f938 	bl	80046cc <_fflush_r>
 800445c:	bb30      	cbnz	r0, 80044ac <__swbuf_r+0x90>
 800445e:	68a3      	ldr	r3, [r4, #8]
 8004460:	3001      	adds	r0, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	701e      	strb	r6, [r3, #0]
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	4283      	cmp	r3, r0
 8004472:	d004      	beq.n	800447e <__swbuf_r+0x62>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	07db      	lsls	r3, r3, #31
 8004478:	d506      	bpl.n	8004488 <__swbuf_r+0x6c>
 800447a:	2e0a      	cmp	r6, #10
 800447c:	d104      	bne.n	8004488 <__swbuf_r+0x6c>
 800447e:	4621      	mov	r1, r4
 8004480:	4628      	mov	r0, r5
 8004482:	f000 f923 	bl	80046cc <_fflush_r>
 8004486:	b988      	cbnz	r0, 80044ac <__swbuf_r+0x90>
 8004488:	4638      	mov	r0, r7
 800448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <__swbuf_r+0x9c>)
 800448e:	429c      	cmp	r4, r3
 8004490:	d101      	bne.n	8004496 <__swbuf_r+0x7a>
 8004492:	68ac      	ldr	r4, [r5, #8]
 8004494:	e7cf      	b.n	8004436 <__swbuf_r+0x1a>
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <__swbuf_r+0xa0>)
 8004498:	429c      	cmp	r4, r3
 800449a:	bf08      	it	eq
 800449c:	68ec      	ldreq	r4, [r5, #12]
 800449e:	e7ca      	b.n	8004436 <__swbuf_r+0x1a>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 f81a 	bl	80044dc <__swsetup_r>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d0cb      	beq.n	8004444 <__swbuf_r+0x28>
 80044ac:	f04f 37ff 	mov.w	r7, #4294967295
 80044b0:	e7ea      	b.n	8004488 <__swbuf_r+0x6c>
 80044b2:	bf00      	nop
 80044b4:	0800504c 	.word	0x0800504c
 80044b8:	0800506c 	.word	0x0800506c
 80044bc:	0800502c 	.word	0x0800502c

080044c0 <__ascii_wctomb>:
 80044c0:	4603      	mov	r3, r0
 80044c2:	4608      	mov	r0, r1
 80044c4:	b141      	cbz	r1, 80044d8 <__ascii_wctomb+0x18>
 80044c6:	2aff      	cmp	r2, #255	; 0xff
 80044c8:	d904      	bls.n	80044d4 <__ascii_wctomb+0x14>
 80044ca:	228a      	movs	r2, #138	; 0x8a
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	4770      	bx	lr
 80044d4:	2001      	movs	r0, #1
 80044d6:	700a      	strb	r2, [r1, #0]
 80044d8:	4770      	bx	lr
	...

080044dc <__swsetup_r>:
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <__swsetup_r+0xcc>)
 80044de:	b570      	push	{r4, r5, r6, lr}
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	4606      	mov	r6, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	b125      	cbz	r5, 80044f2 <__swsetup_r+0x16>
 80044e8:	69ab      	ldr	r3, [r5, #24]
 80044ea:	b913      	cbnz	r3, 80044f2 <__swsetup_r+0x16>
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f981 	bl	80047f4 <__sinit>
 80044f2:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <__swsetup_r+0xd0>)
 80044f4:	429c      	cmp	r4, r3
 80044f6:	d10f      	bne.n	8004518 <__swsetup_r+0x3c>
 80044f8:	686c      	ldr	r4, [r5, #4]
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004500:	0719      	lsls	r1, r3, #28
 8004502:	d42c      	bmi.n	800455e <__swsetup_r+0x82>
 8004504:	06dd      	lsls	r5, r3, #27
 8004506:	d411      	bmi.n	800452c <__swsetup_r+0x50>
 8004508:	2309      	movs	r3, #9
 800450a:	6033      	str	r3, [r6, #0]
 800450c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	e03e      	b.n	8004596 <__swsetup_r+0xba>
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <__swsetup_r+0xd4>)
 800451a:	429c      	cmp	r4, r3
 800451c:	d101      	bne.n	8004522 <__swsetup_r+0x46>
 800451e:	68ac      	ldr	r4, [r5, #8]
 8004520:	e7eb      	b.n	80044fa <__swsetup_r+0x1e>
 8004522:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <__swsetup_r+0xd8>)
 8004524:	429c      	cmp	r4, r3
 8004526:	bf08      	it	eq
 8004528:	68ec      	ldreq	r4, [r5, #12]
 800452a:	e7e6      	b.n	80044fa <__swsetup_r+0x1e>
 800452c:	0758      	lsls	r0, r3, #29
 800452e:	d512      	bpl.n	8004556 <__swsetup_r+0x7a>
 8004530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004532:	b141      	cbz	r1, 8004546 <__swsetup_r+0x6a>
 8004534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004538:	4299      	cmp	r1, r3
 800453a:	d002      	beq.n	8004542 <__swsetup_r+0x66>
 800453c:	4630      	mov	r0, r6
 800453e:	f7ff fcdb 	bl	8003ef8 <_free_r>
 8004542:	2300      	movs	r3, #0
 8004544:	6363      	str	r3, [r4, #52]	; 0x34
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	2300      	movs	r3, #0
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	6923      	ldr	r3, [r4, #16]
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0308 	orr.w	r3, r3, #8
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	b94b      	cbnz	r3, 8004576 <__swsetup_r+0x9a>
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456c:	d003      	beq.n	8004576 <__swsetup_r+0x9a>
 800456e:	4621      	mov	r1, r4
 8004570:	4630      	mov	r0, r6
 8004572:	f000 fa05 	bl	8004980 <__smakebuf_r>
 8004576:	89a0      	ldrh	r0, [r4, #12]
 8004578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800457c:	f010 0301 	ands.w	r3, r0, #1
 8004580:	d00a      	beq.n	8004598 <__swsetup_r+0xbc>
 8004582:	2300      	movs	r3, #0
 8004584:	60a3      	str	r3, [r4, #8]
 8004586:	6963      	ldr	r3, [r4, #20]
 8004588:	425b      	negs	r3, r3
 800458a:	61a3      	str	r3, [r4, #24]
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	b943      	cbnz	r3, 80045a2 <__swsetup_r+0xc6>
 8004590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004594:	d1ba      	bne.n	800450c <__swsetup_r+0x30>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	0781      	lsls	r1, r0, #30
 800459a:	bf58      	it	pl
 800459c:	6963      	ldrpl	r3, [r4, #20]
 800459e:	60a3      	str	r3, [r4, #8]
 80045a0:	e7f4      	b.n	800458c <__swsetup_r+0xb0>
 80045a2:	2000      	movs	r0, #0
 80045a4:	e7f7      	b.n	8004596 <__swsetup_r+0xba>
 80045a6:	bf00      	nop
 80045a8:	2000000c 	.word	0x2000000c
 80045ac:	0800504c 	.word	0x0800504c
 80045b0:	0800506c 	.word	0x0800506c
 80045b4:	0800502c 	.word	0x0800502c

080045b8 <abort>:
 80045b8:	2006      	movs	r0, #6
 80045ba:	b508      	push	{r3, lr}
 80045bc:	f000 fa48 	bl	8004a50 <raise>
 80045c0:	2001      	movs	r0, #1
 80045c2:	f000 fb53 	bl	8004c6c <_exit>
	...

080045c8 <__sflush_r>:
 80045c8:	898a      	ldrh	r2, [r1, #12]
 80045ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045cc:	4605      	mov	r5, r0
 80045ce:	0710      	lsls	r0, r2, #28
 80045d0:	460c      	mov	r4, r1
 80045d2:	d457      	bmi.n	8004684 <__sflush_r+0xbc>
 80045d4:	684b      	ldr	r3, [r1, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc04      	bgt.n	80045e4 <__sflush_r+0x1c>
 80045da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dc01      	bgt.n	80045e4 <__sflush_r+0x1c>
 80045e0:	2000      	movs	r0, #0
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d0fa      	beq.n	80045e0 <__sflush_r+0x18>
 80045ea:	2300      	movs	r3, #0
 80045ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045f0:	682f      	ldr	r7, [r5, #0]
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	d032      	beq.n	800465c <__sflush_r+0x94>
 80045f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	075a      	lsls	r2, r3, #29
 80045fc:	d505      	bpl.n	800460a <__sflush_r+0x42>
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	1ac0      	subs	r0, r0, r3
 8004602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004604:	b10b      	cbz	r3, 800460a <__sflush_r+0x42>
 8004606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004608:	1ac0      	subs	r0, r0, r3
 800460a:	2300      	movs	r3, #0
 800460c:	4602      	mov	r2, r0
 800460e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004610:	4628      	mov	r0, r5
 8004612:	6a21      	ldr	r1, [r4, #32]
 8004614:	47b0      	blx	r6
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	d106      	bne.n	800462a <__sflush_r+0x62>
 800461c:	6829      	ldr	r1, [r5, #0]
 800461e:	291d      	cmp	r1, #29
 8004620:	d82c      	bhi.n	800467c <__sflush_r+0xb4>
 8004622:	4a29      	ldr	r2, [pc, #164]	; (80046c8 <__sflush_r+0x100>)
 8004624:	40ca      	lsrs	r2, r1
 8004626:	07d6      	lsls	r6, r2, #31
 8004628:	d528      	bpl.n	800467c <__sflush_r+0xb4>
 800462a:	2200      	movs	r2, #0
 800462c:	6062      	str	r2, [r4, #4]
 800462e:	6922      	ldr	r2, [r4, #16]
 8004630:	04d9      	lsls	r1, r3, #19
 8004632:	6022      	str	r2, [r4, #0]
 8004634:	d504      	bpl.n	8004640 <__sflush_r+0x78>
 8004636:	1c42      	adds	r2, r0, #1
 8004638:	d101      	bne.n	800463e <__sflush_r+0x76>
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	b903      	cbnz	r3, 8004640 <__sflush_r+0x78>
 800463e:	6560      	str	r0, [r4, #84]	; 0x54
 8004640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004642:	602f      	str	r7, [r5, #0]
 8004644:	2900      	cmp	r1, #0
 8004646:	d0cb      	beq.n	80045e0 <__sflush_r+0x18>
 8004648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800464c:	4299      	cmp	r1, r3
 800464e:	d002      	beq.n	8004656 <__sflush_r+0x8e>
 8004650:	4628      	mov	r0, r5
 8004652:	f7ff fc51 	bl	8003ef8 <_free_r>
 8004656:	2000      	movs	r0, #0
 8004658:	6360      	str	r0, [r4, #52]	; 0x34
 800465a:	e7c2      	b.n	80045e2 <__sflush_r+0x1a>
 800465c:	6a21      	ldr	r1, [r4, #32]
 800465e:	2301      	movs	r3, #1
 8004660:	4628      	mov	r0, r5
 8004662:	47b0      	blx	r6
 8004664:	1c41      	adds	r1, r0, #1
 8004666:	d1c7      	bne.n	80045f8 <__sflush_r+0x30>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0c4      	beq.n	80045f8 <__sflush_r+0x30>
 800466e:	2b1d      	cmp	r3, #29
 8004670:	d001      	beq.n	8004676 <__sflush_r+0xae>
 8004672:	2b16      	cmp	r3, #22
 8004674:	d101      	bne.n	800467a <__sflush_r+0xb2>
 8004676:	602f      	str	r7, [r5, #0]
 8004678:	e7b2      	b.n	80045e0 <__sflush_r+0x18>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	e7ae      	b.n	80045e2 <__sflush_r+0x1a>
 8004684:	690f      	ldr	r7, [r1, #16]
 8004686:	2f00      	cmp	r7, #0
 8004688:	d0aa      	beq.n	80045e0 <__sflush_r+0x18>
 800468a:	0793      	lsls	r3, r2, #30
 800468c:	bf18      	it	ne
 800468e:	2300      	movne	r3, #0
 8004690:	680e      	ldr	r6, [r1, #0]
 8004692:	bf08      	it	eq
 8004694:	694b      	ldreq	r3, [r1, #20]
 8004696:	1bf6      	subs	r6, r6, r7
 8004698:	600f      	str	r7, [r1, #0]
 800469a:	608b      	str	r3, [r1, #8]
 800469c:	2e00      	cmp	r6, #0
 800469e:	dd9f      	ble.n	80045e0 <__sflush_r+0x18>
 80046a0:	4633      	mov	r3, r6
 80046a2:	463a      	mov	r2, r7
 80046a4:	4628      	mov	r0, r5
 80046a6:	6a21      	ldr	r1, [r4, #32]
 80046a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80046ac:	47e0      	blx	ip
 80046ae:	2800      	cmp	r0, #0
 80046b0:	dc06      	bgt.n	80046c0 <__sflush_r+0xf8>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	e790      	b.n	80045e2 <__sflush_r+0x1a>
 80046c0:	4407      	add	r7, r0
 80046c2:	1a36      	subs	r6, r6, r0
 80046c4:	e7ea      	b.n	800469c <__sflush_r+0xd4>
 80046c6:	bf00      	nop
 80046c8:	20400001 	.word	0x20400001

080046cc <_fflush_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	4605      	mov	r5, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	b913      	cbnz	r3, 80046dc <_fflush_r+0x10>
 80046d6:	2500      	movs	r5, #0
 80046d8:	4628      	mov	r0, r5
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	b118      	cbz	r0, 80046e6 <_fflush_r+0x1a>
 80046de:	6983      	ldr	r3, [r0, #24]
 80046e0:	b90b      	cbnz	r3, 80046e6 <_fflush_r+0x1a>
 80046e2:	f000 f887 	bl	80047f4 <__sinit>
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <_fflush_r+0x6c>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d11b      	bne.n	8004724 <_fflush_r+0x58>
 80046ec:	686c      	ldr	r4, [r5, #4]
 80046ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ef      	beq.n	80046d6 <_fflush_r+0xa>
 80046f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046f8:	07d0      	lsls	r0, r2, #31
 80046fa:	d404      	bmi.n	8004706 <_fflush_r+0x3a>
 80046fc:	0599      	lsls	r1, r3, #22
 80046fe:	d402      	bmi.n	8004706 <_fflush_r+0x3a>
 8004700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004702:	f000 f915 	bl	8004930 <__retarget_lock_acquire_recursive>
 8004706:	4628      	mov	r0, r5
 8004708:	4621      	mov	r1, r4
 800470a:	f7ff ff5d 	bl	80045c8 <__sflush_r>
 800470e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004710:	4605      	mov	r5, r0
 8004712:	07da      	lsls	r2, r3, #31
 8004714:	d4e0      	bmi.n	80046d8 <_fflush_r+0xc>
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	059b      	lsls	r3, r3, #22
 800471a:	d4dd      	bmi.n	80046d8 <_fflush_r+0xc>
 800471c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471e:	f000 f908 	bl	8004932 <__retarget_lock_release_recursive>
 8004722:	e7d9      	b.n	80046d8 <_fflush_r+0xc>
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <_fflush_r+0x70>)
 8004726:	429c      	cmp	r4, r3
 8004728:	d101      	bne.n	800472e <_fflush_r+0x62>
 800472a:	68ac      	ldr	r4, [r5, #8]
 800472c:	e7df      	b.n	80046ee <_fflush_r+0x22>
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <_fflush_r+0x74>)
 8004730:	429c      	cmp	r4, r3
 8004732:	bf08      	it	eq
 8004734:	68ec      	ldreq	r4, [r5, #12]
 8004736:	e7da      	b.n	80046ee <_fflush_r+0x22>
 8004738:	0800504c 	.word	0x0800504c
 800473c:	0800506c 	.word	0x0800506c
 8004740:	0800502c 	.word	0x0800502c

08004744 <std>:
 8004744:	2300      	movs	r3, #0
 8004746:	b510      	push	{r4, lr}
 8004748:	4604      	mov	r4, r0
 800474a:	e9c0 3300 	strd	r3, r3, [r0]
 800474e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004752:	6083      	str	r3, [r0, #8]
 8004754:	8181      	strh	r1, [r0, #12]
 8004756:	6643      	str	r3, [r0, #100]	; 0x64
 8004758:	81c2      	strh	r2, [r0, #14]
 800475a:	6183      	str	r3, [r0, #24]
 800475c:	4619      	mov	r1, r3
 800475e:	2208      	movs	r2, #8
 8004760:	305c      	adds	r0, #92	; 0x5c
 8004762:	f7fd fd27 	bl	80021b4 <memset>
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <std+0x38>)
 8004768:	6224      	str	r4, [r4, #32]
 800476a:	6263      	str	r3, [r4, #36]	; 0x24
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <std+0x3c>)
 800476e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <std+0x40>)
 8004772:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <std+0x44>)
 8004776:	6323      	str	r3, [r4, #48]	; 0x30
 8004778:	bd10      	pop	{r4, pc}
 800477a:	bf00      	nop
 800477c:	08004a89 	.word	0x08004a89
 8004780:	08004aab 	.word	0x08004aab
 8004784:	08004ae3 	.word	0x08004ae3
 8004788:	08004b07 	.word	0x08004b07

0800478c <_cleanup_r>:
 800478c:	4901      	ldr	r1, [pc, #4]	; (8004794 <_cleanup_r+0x8>)
 800478e:	f000 b8af 	b.w	80048f0 <_fwalk_reent>
 8004792:	bf00      	nop
 8004794:	080046cd 	.word	0x080046cd

08004798 <__sfmoreglue>:
 8004798:	2268      	movs	r2, #104	; 0x68
 800479a:	b570      	push	{r4, r5, r6, lr}
 800479c:	1e4d      	subs	r5, r1, #1
 800479e:	4355      	muls	r5, r2
 80047a0:	460e      	mov	r6, r1
 80047a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047a6:	f7ff fc0f 	bl	8003fc8 <_malloc_r>
 80047aa:	4604      	mov	r4, r0
 80047ac:	b140      	cbz	r0, 80047c0 <__sfmoreglue+0x28>
 80047ae:	2100      	movs	r1, #0
 80047b0:	e9c0 1600 	strd	r1, r6, [r0]
 80047b4:	300c      	adds	r0, #12
 80047b6:	60a0      	str	r0, [r4, #8]
 80047b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047bc:	f7fd fcfa 	bl	80021b4 <memset>
 80047c0:	4620      	mov	r0, r4
 80047c2:	bd70      	pop	{r4, r5, r6, pc}

080047c4 <__sfp_lock_acquire>:
 80047c4:	4801      	ldr	r0, [pc, #4]	; (80047cc <__sfp_lock_acquire+0x8>)
 80047c6:	f000 b8b3 	b.w	8004930 <__retarget_lock_acquire_recursive>
 80047ca:	bf00      	nop
 80047cc:	20000251 	.word	0x20000251

080047d0 <__sfp_lock_release>:
 80047d0:	4801      	ldr	r0, [pc, #4]	; (80047d8 <__sfp_lock_release+0x8>)
 80047d2:	f000 b8ae 	b.w	8004932 <__retarget_lock_release_recursive>
 80047d6:	bf00      	nop
 80047d8:	20000251 	.word	0x20000251

080047dc <__sinit_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__sinit_lock_acquire+0x8>)
 80047de:	f000 b8a7 	b.w	8004930 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000252 	.word	0x20000252

080047e8 <__sinit_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sinit_lock_release+0x8>)
 80047ea:	f000 b8a2 	b.w	8004932 <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	20000252 	.word	0x20000252

080047f4 <__sinit>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4604      	mov	r4, r0
 80047f8:	f7ff fff0 	bl	80047dc <__sinit_lock_acquire>
 80047fc:	69a3      	ldr	r3, [r4, #24]
 80047fe:	b11b      	cbz	r3, 8004808 <__sinit+0x14>
 8004800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004804:	f7ff bff0 	b.w	80047e8 <__sinit_lock_release>
 8004808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800480c:	6523      	str	r3, [r4, #80]	; 0x50
 800480e:	4b13      	ldr	r3, [pc, #76]	; (800485c <__sinit+0x68>)
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <__sinit+0x6c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	62a2      	str	r2, [r4, #40]	; 0x28
 8004816:	42a3      	cmp	r3, r4
 8004818:	bf08      	it	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	4620      	mov	r0, r4
 800481e:	bf08      	it	eq
 8004820:	61a3      	streq	r3, [r4, #24]
 8004822:	f000 f81f 	bl	8004864 <__sfp>
 8004826:	6060      	str	r0, [r4, #4]
 8004828:	4620      	mov	r0, r4
 800482a:	f000 f81b 	bl	8004864 <__sfp>
 800482e:	60a0      	str	r0, [r4, #8]
 8004830:	4620      	mov	r0, r4
 8004832:	f000 f817 	bl	8004864 <__sfp>
 8004836:	2200      	movs	r2, #0
 8004838:	2104      	movs	r1, #4
 800483a:	60e0      	str	r0, [r4, #12]
 800483c:	6860      	ldr	r0, [r4, #4]
 800483e:	f7ff ff81 	bl	8004744 <std>
 8004842:	2201      	movs	r2, #1
 8004844:	2109      	movs	r1, #9
 8004846:	68a0      	ldr	r0, [r4, #8]
 8004848:	f7ff ff7c 	bl	8004744 <std>
 800484c:	2202      	movs	r2, #2
 800484e:	2112      	movs	r1, #18
 8004850:	68e0      	ldr	r0, [r4, #12]
 8004852:	f7ff ff77 	bl	8004744 <std>
 8004856:	2301      	movs	r3, #1
 8004858:	61a3      	str	r3, [r4, #24]
 800485a:	e7d1      	b.n	8004800 <__sinit+0xc>
 800485c:	08004cb0 	.word	0x08004cb0
 8004860:	0800478d 	.word	0x0800478d

08004864 <__sfp>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	4607      	mov	r7, r0
 8004868:	f7ff ffac 	bl	80047c4 <__sfp_lock_acquire>
 800486c:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <__sfp+0x84>)
 800486e:	681e      	ldr	r6, [r3, #0]
 8004870:	69b3      	ldr	r3, [r6, #24]
 8004872:	b913      	cbnz	r3, 800487a <__sfp+0x16>
 8004874:	4630      	mov	r0, r6
 8004876:	f7ff ffbd 	bl	80047f4 <__sinit>
 800487a:	3648      	adds	r6, #72	; 0x48
 800487c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004880:	3b01      	subs	r3, #1
 8004882:	d503      	bpl.n	800488c <__sfp+0x28>
 8004884:	6833      	ldr	r3, [r6, #0]
 8004886:	b30b      	cbz	r3, 80048cc <__sfp+0x68>
 8004888:	6836      	ldr	r6, [r6, #0]
 800488a:	e7f7      	b.n	800487c <__sfp+0x18>
 800488c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004890:	b9d5      	cbnz	r5, 80048c8 <__sfp+0x64>
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <__sfp+0x88>)
 8004894:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004898:	60e3      	str	r3, [r4, #12]
 800489a:	6665      	str	r5, [r4, #100]	; 0x64
 800489c:	f000 f847 	bl	800492e <__retarget_lock_init_recursive>
 80048a0:	f7ff ff96 	bl	80047d0 <__sfp_lock_release>
 80048a4:	2208      	movs	r2, #8
 80048a6:	4629      	mov	r1, r5
 80048a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048b0:	6025      	str	r5, [r4, #0]
 80048b2:	61a5      	str	r5, [r4, #24]
 80048b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048b8:	f7fd fc7c 	bl	80021b4 <memset>
 80048bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048c4:	4620      	mov	r0, r4
 80048c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c8:	3468      	adds	r4, #104	; 0x68
 80048ca:	e7d9      	b.n	8004880 <__sfp+0x1c>
 80048cc:	2104      	movs	r1, #4
 80048ce:	4638      	mov	r0, r7
 80048d0:	f7ff ff62 	bl	8004798 <__sfmoreglue>
 80048d4:	4604      	mov	r4, r0
 80048d6:	6030      	str	r0, [r6, #0]
 80048d8:	2800      	cmp	r0, #0
 80048da:	d1d5      	bne.n	8004888 <__sfp+0x24>
 80048dc:	f7ff ff78 	bl	80047d0 <__sfp_lock_release>
 80048e0:	230c      	movs	r3, #12
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	e7ee      	b.n	80048c4 <__sfp+0x60>
 80048e6:	bf00      	nop
 80048e8:	08004cb0 	.word	0x08004cb0
 80048ec:	ffff0001 	.word	0xffff0001

080048f0 <_fwalk_reent>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	4606      	mov	r6, r0
 80048f6:	4688      	mov	r8, r1
 80048f8:	2700      	movs	r7, #0
 80048fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004902:	f1b9 0901 	subs.w	r9, r9, #1
 8004906:	d505      	bpl.n	8004914 <_fwalk_reent+0x24>
 8004908:	6824      	ldr	r4, [r4, #0]
 800490a:	2c00      	cmp	r4, #0
 800490c:	d1f7      	bne.n	80048fe <_fwalk_reent+0xe>
 800490e:	4638      	mov	r0, r7
 8004910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004914:	89ab      	ldrh	r3, [r5, #12]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d907      	bls.n	800492a <_fwalk_reent+0x3a>
 800491a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491e:	3301      	adds	r3, #1
 8004920:	d003      	beq.n	800492a <_fwalk_reent+0x3a>
 8004922:	4629      	mov	r1, r5
 8004924:	4630      	mov	r0, r6
 8004926:	47c0      	blx	r8
 8004928:	4307      	orrs	r7, r0
 800492a:	3568      	adds	r5, #104	; 0x68
 800492c:	e7e9      	b.n	8004902 <_fwalk_reent+0x12>

0800492e <__retarget_lock_init_recursive>:
 800492e:	4770      	bx	lr

08004930 <__retarget_lock_acquire_recursive>:
 8004930:	4770      	bx	lr

08004932 <__retarget_lock_release_recursive>:
 8004932:	4770      	bx	lr

08004934 <__swhatbuf_r>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	460e      	mov	r6, r1
 8004938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493c:	4614      	mov	r4, r2
 800493e:	2900      	cmp	r1, #0
 8004940:	461d      	mov	r5, r3
 8004942:	b096      	sub	sp, #88	; 0x58
 8004944:	da08      	bge.n	8004958 <__swhatbuf_r+0x24>
 8004946:	2200      	movs	r2, #0
 8004948:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	061a      	lsls	r2, r3, #24
 8004950:	d410      	bmi.n	8004974 <__swhatbuf_r+0x40>
 8004952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004956:	e00e      	b.n	8004976 <__swhatbuf_r+0x42>
 8004958:	466a      	mov	r2, sp
 800495a:	f000 f8fb 	bl	8004b54 <_fstat_r>
 800495e:	2800      	cmp	r0, #0
 8004960:	dbf1      	blt.n	8004946 <__swhatbuf_r+0x12>
 8004962:	9a01      	ldr	r2, [sp, #4]
 8004964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800496c:	425a      	negs	r2, r3
 800496e:	415a      	adcs	r2, r3
 8004970:	602a      	str	r2, [r5, #0]
 8004972:	e7ee      	b.n	8004952 <__swhatbuf_r+0x1e>
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	2000      	movs	r0, #0
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	b016      	add	sp, #88	; 0x58
 800497c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004980 <__smakebuf_r>:
 8004980:	898b      	ldrh	r3, [r1, #12]
 8004982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004984:	079d      	lsls	r5, r3, #30
 8004986:	4606      	mov	r6, r0
 8004988:	460c      	mov	r4, r1
 800498a:	d507      	bpl.n	800499c <__smakebuf_r+0x1c>
 800498c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	6123      	str	r3, [r4, #16]
 8004994:	2301      	movs	r3, #1
 8004996:	6163      	str	r3, [r4, #20]
 8004998:	b002      	add	sp, #8
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	466a      	mov	r2, sp
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	f7ff ffc8 	bl	8004934 <__swhatbuf_r>
 80049a4:	9900      	ldr	r1, [sp, #0]
 80049a6:	4605      	mov	r5, r0
 80049a8:	4630      	mov	r0, r6
 80049aa:	f7ff fb0d 	bl	8003fc8 <_malloc_r>
 80049ae:	b948      	cbnz	r0, 80049c4 <__smakebuf_r+0x44>
 80049b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b4:	059a      	lsls	r2, r3, #22
 80049b6:	d4ef      	bmi.n	8004998 <__smakebuf_r+0x18>
 80049b8:	f023 0303 	bic.w	r3, r3, #3
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	e7e3      	b.n	800498c <__smakebuf_r+0xc>
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <__smakebuf_r+0x7c>)
 80049c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	6020      	str	r0, [r4, #0]
 80049cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	9b00      	ldr	r3, [sp, #0]
 80049d4:	6120      	str	r0, [r4, #16]
 80049d6:	6163      	str	r3, [r4, #20]
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	b15b      	cbz	r3, 80049f4 <__smakebuf_r+0x74>
 80049dc:	4630      	mov	r0, r6
 80049de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e2:	f000 f8c9 	bl	8004b78 <_isatty_r>
 80049e6:	b128      	cbz	r0, 80049f4 <__smakebuf_r+0x74>
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	81a3      	strh	r3, [r4, #12]
 80049f4:	89a0      	ldrh	r0, [r4, #12]
 80049f6:	4305      	orrs	r5, r0
 80049f8:	81a5      	strh	r5, [r4, #12]
 80049fa:	e7cd      	b.n	8004998 <__smakebuf_r+0x18>
 80049fc:	0800478d 	.word	0x0800478d

08004a00 <_raise_r>:
 8004a00:	291f      	cmp	r1, #31
 8004a02:	b538      	push	{r3, r4, r5, lr}
 8004a04:	4604      	mov	r4, r0
 8004a06:	460d      	mov	r5, r1
 8004a08:	d904      	bls.n	8004a14 <_raise_r+0x14>
 8004a0a:	2316      	movs	r3, #22
 8004a0c:	6003      	str	r3, [r0, #0]
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a16:	b112      	cbz	r2, 8004a1e <_raise_r+0x1e>
 8004a18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a1c:	b94b      	cbnz	r3, 8004a32 <_raise_r+0x32>
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 f830 	bl	8004a84 <_getpid_r>
 8004a24:	462a      	mov	r2, r5
 8004a26:	4601      	mov	r1, r0
 8004a28:	4620      	mov	r0, r4
 8004a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2e:	f000 b817 	b.w	8004a60 <_kill_r>
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d00a      	beq.n	8004a4c <_raise_r+0x4c>
 8004a36:	1c59      	adds	r1, r3, #1
 8004a38:	d103      	bne.n	8004a42 <_raise_r+0x42>
 8004a3a:	2316      	movs	r3, #22
 8004a3c:	6003      	str	r3, [r0, #0]
 8004a3e:	2001      	movs	r0, #1
 8004a40:	e7e7      	b.n	8004a12 <_raise_r+0x12>
 8004a42:	2400      	movs	r4, #0
 8004a44:	4628      	mov	r0, r5
 8004a46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a4a:	4798      	blx	r3
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	e7e0      	b.n	8004a12 <_raise_r+0x12>

08004a50 <raise>:
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <raise+0xc>)
 8004a52:	4601      	mov	r1, r0
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f7ff bfd3 	b.w	8004a00 <_raise_r>
 8004a5a:	bf00      	nop
 8004a5c:	2000000c 	.word	0x2000000c

08004a60 <_kill_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	2300      	movs	r3, #0
 8004a64:	4d06      	ldr	r5, [pc, #24]	; (8004a80 <_kill_r+0x20>)
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	f000 f8d7 	bl	8004c20 <_kill>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	d102      	bne.n	8004a7c <_kill_r+0x1c>
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	b103      	cbz	r3, 8004a7c <_kill_r+0x1c>
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	bd38      	pop	{r3, r4, r5, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000024c 	.word	0x2000024c

08004a84 <_getpid_r>:
 8004a84:	f000 b8bc 	b.w	8004c00 <_getpid>

08004a88 <__sread>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	f000 f894 	bl	8004bbc <_read_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	bfab      	itete	ge
 8004a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a9c:	181b      	addge	r3, r3, r0
 8004a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aa2:	bfac      	ite	ge
 8004aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aa6:	81a3      	strhlt	r3, [r4, #12]
 8004aa8:	bd10      	pop	{r4, pc}

08004aaa <__swrite>:
 8004aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aae:	461f      	mov	r7, r3
 8004ab0:	898b      	ldrh	r3, [r1, #12]
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4616      	mov	r6, r2
 8004aba:	d505      	bpl.n	8004ac8 <__swrite+0x1e>
 8004abc:	2302      	movs	r3, #2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac4:	f000 f868 	bl	8004b98 <_lseek_r>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	4632      	mov	r2, r6
 8004acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	463b      	mov	r3, r7
 8004ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	f000 b817 	b.w	8004b10 <_write_r>

08004ae2 <__sseek>:
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 f855 	bl	8004b98 <_lseek_r>
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	bf15      	itete	ne
 8004af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004afe:	81a3      	strheq	r3, [r4, #12]
 8004b00:	bf18      	it	ne
 8004b02:	81a3      	strhne	r3, [r4, #12]
 8004b04:	bd10      	pop	{r4, pc}

08004b06 <__sclose>:
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 b813 	b.w	8004b34 <_close_r>
	...

08004b10 <_write_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4d05      	ldr	r5, [pc, #20]	; (8004b30 <_write_r+0x20>)
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fc f80c 	bl	8000b3c <_write>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_write_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_write_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	2000024c 	.word	0x2000024c

08004b34 <_close_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	2300      	movs	r3, #0
 8004b38:	4d05      	ldr	r5, [pc, #20]	; (8004b50 <_close_r+0x1c>)
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f000 f84e 	bl	8004be0 <_close>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_close_r+0x1a>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_close_r+0x1a>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	2000024c 	.word	0x2000024c

08004b54 <_fstat_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	2300      	movs	r3, #0
 8004b58:	4d06      	ldr	r5, [pc, #24]	; (8004b74 <_fstat_r+0x20>)
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	f000 f845 	bl	8004bf0 <_fstat>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d102      	bne.n	8004b70 <_fstat_r+0x1c>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	b103      	cbz	r3, 8004b70 <_fstat_r+0x1c>
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	bd38      	pop	{r3, r4, r5, pc}
 8004b72:	bf00      	nop
 8004b74:	2000024c 	.word	0x2000024c

08004b78 <_isatty_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4d05      	ldr	r5, [pc, #20]	; (8004b94 <_isatty_r+0x1c>)
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f000 f844 	bl	8004c10 <_isatty>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_isatty_r+0x1a>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_isatty_r+0x1a>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	2000024c 	.word	0x2000024c

08004b98 <_lseek_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4d05      	ldr	r5, [pc, #20]	; (8004bb8 <_lseek_r+0x20>)
 8004ba4:	602a      	str	r2, [r5, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 f842 	bl	8004c30 <_lseek>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_lseek_r+0x1e>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_lseek_r+0x1e>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	2000024c 	.word	0x2000024c

08004bbc <_read_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4d05      	ldr	r5, [pc, #20]	; (8004bdc <_read_r+0x20>)
 8004bc8:	602a      	str	r2, [r5, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 f838 	bl	8004c40 <_read>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_read_r+0x1e>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_read_r+0x1e>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	2000024c 	.word	0x2000024c

08004be0 <_close>:
 8004be0:	2258      	movs	r2, #88	; 0x58
 8004be2:	4b02      	ldr	r3, [pc, #8]	; (8004bec <_close+0xc>)
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4770      	bx	lr
 8004bec:	2000024c 	.word	0x2000024c

08004bf0 <_fstat>:
 8004bf0:	2258      	movs	r2, #88	; 0x58
 8004bf2:	4b02      	ldr	r3, [pc, #8]	; (8004bfc <_fstat+0xc>)
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	4770      	bx	lr
 8004bfc:	2000024c 	.word	0x2000024c

08004c00 <_getpid>:
 8004c00:	2258      	movs	r2, #88	; 0x58
 8004c02:	4b02      	ldr	r3, [pc, #8]	; (8004c0c <_getpid+0xc>)
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	4770      	bx	lr
 8004c0c:	2000024c 	.word	0x2000024c

08004c10 <_isatty>:
 8004c10:	2258      	movs	r2, #88	; 0x58
 8004c12:	4b02      	ldr	r3, [pc, #8]	; (8004c1c <_isatty+0xc>)
 8004c14:	2000      	movs	r0, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000024c 	.word	0x2000024c

08004c20 <_kill>:
 8004c20:	2258      	movs	r2, #88	; 0x58
 8004c22:	4b02      	ldr	r3, [pc, #8]	; (8004c2c <_kill+0xc>)
 8004c24:	f04f 30ff 	mov.w	r0, #4294967295
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	4770      	bx	lr
 8004c2c:	2000024c 	.word	0x2000024c

08004c30 <_lseek>:
 8004c30:	2258      	movs	r2, #88	; 0x58
 8004c32:	4b02      	ldr	r3, [pc, #8]	; (8004c3c <_lseek+0xc>)
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	4770      	bx	lr
 8004c3c:	2000024c 	.word	0x2000024c

08004c40 <_read>:
 8004c40:	2258      	movs	r2, #88	; 0x58
 8004c42:	4b02      	ldr	r3, [pc, #8]	; (8004c4c <_read+0xc>)
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	4770      	bx	lr
 8004c4c:	2000024c 	.word	0x2000024c

08004c50 <_sbrk>:
 8004c50:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <_sbrk+0x14>)
 8004c52:	4603      	mov	r3, r0
 8004c54:	6811      	ldr	r1, [r2, #0]
 8004c56:	b909      	cbnz	r1, 8004c5c <_sbrk+0xc>
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <_sbrk+0x18>)
 8004c5a:	6011      	str	r1, [r2, #0]
 8004c5c:	6810      	ldr	r0, [r2, #0]
 8004c5e:	4403      	add	r3, r0
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4770      	bx	lr
 8004c64:	20000254 	.word	0x20000254
 8004c68:	20000258 	.word	0x20000258

08004c6c <_exit>:
 8004c6c:	e7fe      	b.n	8004c6c <_exit>
	...

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
