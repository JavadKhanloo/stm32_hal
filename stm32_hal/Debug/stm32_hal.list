
stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080063e8  080063e8  000163e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800683c  0800683c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800683c  0800683c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800683c  0800683c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001dc  08006a20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08006a20  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf7a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002542  00000000  00000000  0002d17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0002f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000304b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002da0  00000000  00000000  000311a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001196d  00000000  00000000  00033f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000793e2  00000000  00000000  000458ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bec8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  000bece0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000c37c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000c3878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080063cc 	.word	0x080063cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080063cc 	.word	0x080063cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:

//-----------------------------------------------------------------------//
// main function                                                         //
//-----------------------------------------------------------------------//
int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a8c:	f000 f8d4 	bl	8000c38 <HAL_Init>
  // clock
  rcc_system_clock_config();
 8000a90:	f002 fd54 	bl	800353c <rcc_system_clock_config>

  // uart
  uart_UART1_GPIO_config();
 8000a94:	f002 fdfa 	bl	800368c <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000a98:	f002 fe2a 	bl	80036f0 <uart_UART1_config>

  // led
  gpio_LED_config();
 8000a9c:	f002 fc92 	bl	80033c4 <gpio_LED_config>

  // pb
  gpio_PB_config();
 8000aa0:	f002 fcd6 	bl	8003450 <gpio_PB_config>

  //sw
  gpio_SW_config();
 8000aa4:	f002 fd00 	bl	80034a8 <gpio_SW_config>

  // ADC
  adc_GPIO_config();
 8000aa8:	f002 fb6e 	bl	8003188 <adc_GPIO_config>



  //ADC DMA
  adc_multi_channel_config();
 8000aac:	f002 fb96 	bl	80031dc <adc_multi_channel_config>
  adc_dma_config();
 8000ab0:	f002 fc02 	bl	80032b8 <adc_dma_config>

  tim_TIM3_config(50);
 8000ab4:	2032      	movs	r0, #50	; 0x32
 8000ab6:	f002 fd85 	bl	80035c4 <tim_TIM3_config>
  adc_AWDG_config(ADC_single_select_potentiometer);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f002 fc44 	bl	8003348 <adc_AWDG_config>

  HAL_ADC_Start_DMA(&adc_1_handle, (uint32_t *)adc_value, 3);
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	4915      	ldr	r1, [pc, #84]	; (8000b18 <main+0x90>)
 8000ac4:	4815      	ldr	r0, [pc, #84]	; (8000b1c <main+0x94>)
 8000ac6:	f000 fa01 	bl	8000ecc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <main+0x98>)
 8000acc:	f001 ff38 	bl	8002940 <HAL_TIM_Base_Start>

  while (1)
  {

	  if(adc_EoC_flag)
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <main+0x9c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0fb      	beq.n	8000ad0 <main+0x48>
	  {
		  adc_EoC_flag = false;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <main+0x9c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		  printf("adc values:\r\n");
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <main+0xa0>)
 8000ae0:	f003 fb7a 	bl	80041d8 <puts>
		  printf("PA1 : %d\tPA2 : %d\tPA3 : %d\r\n", adc_value[0], adc_value[1], adc_value[2]);
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <main+0x90>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <main+0x90>)
 8000aec:	885b      	ldrh	r3, [r3, #2]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <main+0x90>)
 8000af2:	889b      	ldrh	r3, [r3, #4]
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0xa4>)
 8000af6:	f003 fae9 	bl	80040cc <iprintf>
		  gpio_LED_toggle_green();
 8000afa:	f002 fc91 	bl	8003420 <gpio_LED_toggle_green>

		  if(adc_AWDG_flag)
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <main+0xa8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0e4      	beq.n	8000ad0 <main+0x48>
		  {
			  adc_AWDG_flag = false;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <main+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
			  printf("ADC Watchdog threshold triggered\r\n");
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <main+0xac>)
 8000b0e:	f003 fb63 	bl	80041d8 <puts>
			  gpio_LED_toggle_red();
 8000b12:	f002 fc91 	bl	8003438 <gpio_LED_toggle_red>
	  if(adc_EoC_flag)
 8000b16:	e7db      	b.n	8000ad0 <main+0x48>
 8000b18:	200001fc 	.word	0x200001fc
 8000b1c:	20000208 	.word	0x20000208
 8000b20:	2000027c 	.word	0x2000027c
 8000b24:	200001f8 	.word	0x200001f8
 8000b28:	080063e8 	.word	0x080063e8
 8000b2c:	080063f8 	.word	0x080063f8
 8000b30:	200001f9 	.word	0x200001f9
 8000b34:	08006418 	.word	0x08006418

08000b38 <HAL_ADC_ConvCpltCallback>:
//-----------------------------------------------------------------------//
/*
// @brief ADC Handler
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	adc_EoC_flag = true;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_ADC_ConvCpltCallback+0x18>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	200001f8 	.word	0x200001f8

08000b54 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d102      	bne.n	8000b6c <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_AWDG_flag = true;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_ADC_LevelOutOfWindowCallback+0x28>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40012400 	.word	0x40012400
 8000b7c:	200001f9 	.word	0x200001f9

08000b80 <__io_putchar>:
//-----------------------------------------------------------------------//
int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    uint8_t c[1];
    c[0] = ch & 0x00FF;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000b8e:	f107 010c 	add.w	r1, r7, #12
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2201      	movs	r2, #1
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <__io_putchar+0x28>)
 8000b98:	f002 f98c 	bl	8002eb4 <HAL_UART_Transmit>
    return ch;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200002c4 	.word	0x200002c4

08000bac <_write>:

int _write(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e009      	b.n	8000bd2 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	60ba      	str	r2, [r7, #8]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffda 	bl	8000b80 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	dbf1      	blt.n	8000bbe <_write+0x12>
    }
    return len;
 8000bda:	687b      	ldr	r3, [r7, #4]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SysTick_Handler>:

//-----------------------------------------------------------------------//
// function definition                                                   //
//-----------------------------------------------------------------------//
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000be8:	f000 f872 	bl	8000cd0 <HAL_IncTick>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f001 fa0f 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&adc_1_handle);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <ADC1_2_IRQHandler+0x10>)
 8000c06:	f000 fa3f 	bl	8001088 <HAL_ADC_IRQHandler>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000208 	.word	0x20000208

08000c14 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(adc_1_handle.DMA_Handle);
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <DMA1_Channel1_IRQHandler+0x14>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 ff29 	bl	8001a74 <HAL_DMA_IRQHandler>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000208 	.word	0x20000208

08000c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x28>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 fe17 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f80e 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f000 f806 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fe29 	bl	80018e6 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 fdf1 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000204 	.word	0x20000204

08000cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000204 	.word	0x20000204

08000d08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e0be      	b.n	8000ea8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d109      	bne.n	8000d4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f8b6 	bl	8000eb8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 fc19 	bl	8001584 <ADC_ConversionStop_Disable>
 8000d52:	4603      	mov	r3, r0
 8000d54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8099 	bne.w	8000e96 <HAL_ADC_Init+0x18e>
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f040 8095 	bne.w	8000e96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d74:	f023 0302 	bic.w	r3, r3, #2
 8000d78:	f043 0202 	orr.w	r2, r3, #2
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7b1b      	ldrb	r3, [r3, #12]
 8000d8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000da0:	d003      	beq.n	8000daa <HAL_ADC_Init+0xa2>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <HAL_ADC_Init+0xa8>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e000      	b.n	8000db2 <HAL_ADC_Init+0xaa>
 8000db0:	2300      	movs	r3, #0
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7d1b      	ldrb	r3, [r3, #20]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d119      	bne.n	8000df4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7b1b      	ldrb	r3, [r3, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d109      	bne.n	8000ddc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	035a      	lsls	r2, r3, #13
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e00b      	b.n	8000df4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	f043 0220 	orr.w	r2, r3, #32
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	f043 0201 	orr.w	r2, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_ADC_Init+0x1a8>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e24:	d003      	beq.n	8000e2e <HAL_ADC_Init+0x126>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d104      	bne.n	8000e38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	051b      	lsls	r3, r3, #20
 8000e36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_Init+0x1ac>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d10b      	bne.n	8000e74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f023 0303 	bic.w	r3, r3, #3
 8000e6a:	f043 0201 	orr.w	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e72:	e018      	b.n	8000ea6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	f023 0312 	bic.w	r3, r3, #18
 8000e7c:	f043 0210 	orr.w	r2, r3, #16
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	f043 0201 	orr.w	r2, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e94:	e007      	b.n	8000ea6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f043 0210 	orr.w	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	ffe1f7fd 	.word	0xffe1f7fd
 8000eb4:	ff1f0efe 	.word	0xff1f0efe

08000eb8 <HAL_ADC_MspInit>:
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a64      	ldr	r2, [pc, #400]	; (8001074 <HAL_ADC_Start_DMA+0x1a8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d004      	beq.n	8000ef0 <HAL_ADC_Start_DMA+0x24>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a63      	ldr	r2, [pc, #396]	; (8001078 <HAL_ADC_Start_DMA+0x1ac>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d106      	bne.n	8000efe <HAL_ADC_Start_DMA+0x32>
 8000ef0:	4b60      	ldr	r3, [pc, #384]	; (8001074 <HAL_ADC_Start_DMA+0x1a8>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 80b3 	bne.w	8001064 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_ADC_Start_DMA+0x40>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e0ae      	b.n	800106a <HAL_ADC_Start_DMA+0x19e>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 fadb 	bl	80014d0 <ADC_Enable>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 809a 	bne.w	800105a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f2e:	f023 0301 	bic.w	r3, r3, #1
 8000f32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_ADC_Start_DMA+0x1ac>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d105      	bne.n	8000f50 <HAL_ADC_Start_DMA+0x84>
 8000f44:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <HAL_ADC_Start_DMA+0x1a8>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d115      	bne.n	8000f7c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d026      	beq.n	8000fb8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f7a:	e01d      	b.n	8000fb8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_ADC_Start_DMA+0x1a8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d004      	beq.n	8000f9c <HAL_ADC_Start_DMA+0xd0>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a38      	ldr	r2, [pc, #224]	; (8001078 <HAL_ADC_Start_DMA+0x1ac>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d10d      	bne.n	8000fb8 <HAL_ADC_Start_DMA+0xec>
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_ADC_Start_DMA+0x1a8>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	f023 0206 	bic.w	r2, r3, #6
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a25      	ldr	r2, [pc, #148]	; (800107c <HAL_ADC_Start_DMA+0x1b0>)
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a24      	ldr	r2, [pc, #144]	; (8001080 <HAL_ADC_Start_DMA+0x1b4>)
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_ADC_Start_DMA+0x1b8>)
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f06f 0202 	mvn.w	r2, #2
 8001000:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001010:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a18      	ldr	r0, [r3, #32]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	334c      	adds	r3, #76	; 0x4c
 800101c:	4619      	mov	r1, r3
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f000 fcc7 	bl	80019b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001030:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001034:	d108      	bne.n	8001048 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001044:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001046:	e00f      	b.n	8001068 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001056:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001058:	e006      	b.n	8001068 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001062:	e001      	b.n	8001068 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001068:	7dfb      	ldrb	r3, [r7, #23]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012400 	.word	0x40012400
 8001078:	40012800 	.word	0x40012800
 800107c:	08001607 	.word	0x08001607
 8001080:	08001683 	.word	0x08001683
 8001084:	0800169f 	.word	0x0800169f

08001088 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	2b20      	cmp	r3, #32
 800109c:	d140      	bne.n	8001120 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d139      	bne.n	8001120 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010d2:	d11d      	bne.n	8001110 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d119      	bne.n	8001110 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0220 	bic.w	r2, r2, #32
 80010ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fd11 	bl	8000b38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f06f 0212 	mvn.w	r2, #18
 800111e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	2b80      	cmp	r3, #128	; 0x80
 800112c:	d14f      	bne.n	80011ce <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b04      	cmp	r3, #4
 800113a:	d148      	bne.n	80011ce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2b00      	cmp	r3, #0
 8001146:	d105      	bne.n	8001154 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800115e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001162:	d012      	beq.n	800118a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800116e:	2b00      	cmp	r3, #0
 8001170:	d125      	bne.n	80011be <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800117c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001180:	d11d      	bne.n	80011be <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001186:	2b00      	cmp	r3, #0
 8001188:	d119      	bne.n	80011be <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001198:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa87 	bl	80016d2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f06f 020c 	mvn.w	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d8:	2b40      	cmp	r3, #64	; 0x40
 80011da:	d114      	bne.n	8001206 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10d      	bne.n	8001206 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fcac 	bl	8000b54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f06f 0201 	mvn.w	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
	...

08001234 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x20>
 8001250:	2302      	movs	r3, #2
 8001252:	e0dc      	b.n	800140e <HAL_ADC_ConfigChannel+0x1da>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b06      	cmp	r3, #6
 8001262:	d81c      	bhi.n	800129e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	3b05      	subs	r3, #5
 8001276:	221f      	movs	r2, #31
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	4019      	ands	r1, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b05      	subs	r3, #5
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
 800129c:	e03c      	b.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d81c      	bhi.n	80012e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b23      	subs	r3, #35	; 0x23
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4019      	ands	r1, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b23      	subs	r3, #35	; 0x23
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
 80012de:	e01b      	b.n	8001318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	; 0x41
 80012f2:	221f      	movs	r2, #31
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b41      	subs	r3, #65	; 0x41
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d91c      	bls.n	800135a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	3b1e      	subs	r3, #30
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	3b1e      	subs	r3, #30
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	e019      	b.n	800138e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6919      	ldr	r1, [r3, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	2207      	movs	r2, #7
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	4019      	ands	r1, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6898      	ldr	r0, [r3, #8]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800139a:	2b11      	cmp	r3, #17
 800139c:	d132      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_ADC_ConfigChannel+0x1e4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d125      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d126      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d11a      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_ADC_ConfigChannel+0x1e8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_ADC_ConfigChannel+0x1ec>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9a      	lsrs	r2, r3, #18
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e4:	e002      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <HAL_ADC_ConfigChannel+0x1b2>
 80013f2:	e007      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40012400 	.word	0x40012400
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83

08001424 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <HAL_ADC_AnalogWDGConfig+0xa4>)
 800143e:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADC_AnalogWDGConfig+0x2a>
 800144a:	2302      	movs	r3, #2
 800144c:	e035      	b.n	80014ba <HAL_ADC_AnalogWDGConfig+0x96>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	7a1b      	ldrb	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	e007      	b.n	8001480 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800147e:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_ADC_AnalogWDGConfig+0xa8>)
 8001488:	4013      	ands	r3, r2
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	6811      	ldr	r1, [r2, #0]
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	6852      	ldr	r2, [r2, #4]
 8001492:	4311      	orrs	r1, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	430b      	orrs	r3, r1
 800149a:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	68d2      	ldr	r2, [r2, #12]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	6912      	ldr	r2, [r2, #16]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	00800200 	.word	0x00800200
 80014c8:	00400200 	.word	0x00400200
 80014cc:	ff3ffde0 	.word	0xff3ffde0

080014d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d040      	beq.n	8001570 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <ADC_Enable+0xac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <ADC_Enable+0xb0>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800150c:	e002      	b.n	8001514 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f9      	bne.n	800150e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800151a:	f7ff fbeb 	bl	8000cf4 <HAL_GetTick>
 800151e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001520:	e01f      	b.n	8001562 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001522:	f7ff fbe7 	bl	8000cf4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d918      	bls.n	8001562 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d011      	beq.n	8001562 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f043 0210 	orr.w	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e007      	b.n	8001572 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d1d8      	bne.n	8001522 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000000 	.word	0x20000000
 8001580:	431bde83 	.word	0x431bde83

08001584 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d12e      	bne.n	80015fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ae:	f7ff fba1 	bl	8000cf4 <HAL_GetTick>
 80015b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015b4:	e01b      	b.n	80015ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015b6:	f7ff fb9d 	bl	8000cf4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d914      	bls.n	80015ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10d      	bne.n	80015ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d0dc      	beq.n	80015b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800161c:	2b00      	cmp	r3, #0
 800161e:	d127      	bne.n	8001670 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001636:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800163a:	d115      	bne.n	8001668 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f7ff fa65 	bl	8000b38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800166e:	e004      	b.n	800167a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fdbc 	bl	800120e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fdab 	bl	8001220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4906      	ldr	r1, [pc, #24]	; (800177c <__NVIC_EnableIRQ+0x34>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff90 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff2d 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff42 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff35 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e043      	b.n	800199e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_DMA_Init+0xa8>)
 800191e:	4413      	add	r3, r2
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <HAL_DMA_Init+0xac>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	009a      	lsls	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_DMA_Init+0xb0>)
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800194a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800194e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	bffdfff8 	.word	0xbffdfff8
 80019ac:	cccccccd 	.word	0xcccccccd
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Start_IT+0x20>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e04b      	b.n	8001a6c <HAL_DMA_Start_IT+0xb8>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d13a      	bne.n	8001a5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f937 	bl	8001c80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 020e 	orr.w	r2, r2, #14
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e00f      	b.n	8001a4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0204 	bic.w	r2, r2, #4
 8001a3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 020a 	orr.w	r2, r2, #10
 8001a4a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e005      	b.n	8001a6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
 8001a68:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2204      	movs	r2, #4
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d04f      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xc8>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d04a      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_DMA_IRQHandler+0x1f0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d029      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xae>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_DMA_IRQHandler+0x1f4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d022      	beq.n	8001b1e <HAL_DMA_IRQHandler+0xaa>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a63      	ldr	r2, [pc, #396]	; (8001c6c <HAL_DMA_IRQHandler+0x1f8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01a      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xa4>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a62      	ldr	r2, [pc, #392]	; (8001c70 <HAL_DMA_IRQHandler+0x1fc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d012      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x9e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a60      	ldr	r2, [pc, #384]	; (8001c74 <HAL_DMA_IRQHandler+0x200>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00a      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x98>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a5f      	ldr	r2, [pc, #380]	; (8001c78 <HAL_DMA_IRQHandler+0x204>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d102      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x92>
 8001b00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b04:	e00e      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b0a:	e00b      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b10:	e008      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b16:	e005      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	e002      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b1e:	2340      	movs	r3, #64	; 0x40
 8001b20:	e000      	b.n	8001b24 <HAL_DMA_IRQHandler+0xb0>
 8001b22:	2304      	movs	r3, #4
 8001b24:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_DMA_IRQHandler+0x208>)
 8001b26:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8094 	beq.w	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b3a:	e08e      	b.n	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2202      	movs	r2, #2
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d056      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x186>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d051      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10b      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020a 	bic.w	r2, r2, #10
 8001b72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <HAL_DMA_IRQHandler+0x1f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d029      	beq.n	8001bda <HAL_DMA_IRQHandler+0x166>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a37      	ldr	r2, [pc, #220]	; (8001c68 <HAL_DMA_IRQHandler+0x1f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x162>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a35      	ldr	r2, [pc, #212]	; (8001c6c <HAL_DMA_IRQHandler+0x1f8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x15c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a34      	ldr	r2, [pc, #208]	; (8001c70 <HAL_DMA_IRQHandler+0x1fc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d012      	beq.n	8001bca <HAL_DMA_IRQHandler+0x156>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_DMA_IRQHandler+0x200>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x150>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a31      	ldr	r2, [pc, #196]	; (8001c78 <HAL_DMA_IRQHandler+0x204>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <HAL_DMA_IRQHandler+0x14a>
 8001bb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bbc:	e00e      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc2:	e00b      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc8:	e008      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bce:	e005      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	e002      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	e000      	b.n	8001bdc <HAL_DMA_IRQHandler+0x168>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_DMA_IRQHandler+0x208>)
 8001bde:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d034      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bf8:	e02f      	b.n	8001c5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2208      	movs	r2, #8
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d028      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x1e8>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d023      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 020e 	bic.w	r2, r2, #14
 8001c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
    }
  }
  return;
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
}
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020008 	.word	0x40020008
 8001c68:	4002001c 	.word	0x4002001c
 8001c6c:	40020030 	.word	0x40020030
 8001c70:	40020044 	.word	0x40020044
 8001c74:	40020058 	.word	0x40020058
 8001c78:	4002006c 	.word	0x4002006c
 8001c7c:	40020000 	.word	0x40020000

08001c80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d108      	bne.n	8001cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cbe:	e007      	b.n	8001cd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e169      	b.n	8001fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8158 	bne.w	8001fbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a9a      	ldr	r2, [pc, #616]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a98      	ldr	r2, [pc, #608]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d875      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d1e:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d058      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d24:	4a96      	ldr	r2, [pc, #600]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d86f      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d2a:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d052      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d30:	4a94      	ldr	r2, [pc, #592]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d869      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d36:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04c      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a92      	ldr	r2, [pc, #584]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d863      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d42:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d046      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d48:	4a90      	ldr	r2, [pc, #576]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d85d      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d82a      	bhi.n	8001da8 <HAL_GPIO_Init+0xcc>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d859      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_GPIO_Init+0x80>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001dc3 	.word	0x08001dc3
 8001d68:	08001e05 	.word	0x08001e05
 8001d6c:	08001e0b 	.word	0x08001e0b
 8001d70:	08001e0b 	.word	0x08001e0b
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e0b 	.word	0x08001e0b
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e0b 	.word	0x08001e0b
 8001d88:	08001e0b 	.word	0x08001e0b
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e0b 	.word	0x08001e0b
 8001d98:	08001e0b 	.word	0x08001e0b
 8001d9c:	08001e0b 	.word	0x08001e0b
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	4a79      	ldr	r2, [pc, #484]	; (8001f90 <HAL_GPIO_Init+0x2b4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e029      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e024      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01f      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e01a      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e013      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e009      	b.n	8001e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          break;
 8001e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d801      	bhi.n	8001e16 <HAL_GPIO_Init+0x13a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_Init+0x13e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d802      	bhi.n	8001e28 <HAL_GPIO_Init+0x14c>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x152>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	210f      	movs	r1, #15
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80b1 	beq.w	8001fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_GPIO_Init+0x2c0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <HAL_GPIO_Init+0x2cc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e006      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eda:	492f      	ldr	r1, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	492c      	ldr	r1, [pc, #176]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4928      	ldr	r1, [pc, #160]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	491e      	ldr	r1, [pc, #120]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4918      	ldr	r1, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4914      	ldr	r1, [pc, #80]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d021      	beq.n	8001fb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	490e      	ldr	r1, [pc, #56]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e021      	b.n	8001fbe <HAL_GPIO_Init+0x2e2>
 8001f7a:	bf00      	nop
 8001f7c:	10320000 	.word	0x10320000
 8001f80:	10310000 	.word	0x10310000
 8001f84:	10220000 	.word	0x10220000
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	10110000 	.word	0x10110000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40011400 	.word	0x40011400
 8001fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f47f ae8e 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	372c      	adds	r7, #44	; 0x2c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43d9      	mvns	r1, r3
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f806 	bl	8002048 <HAL_GPIO_EXTI_Callback>
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e272      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x12c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e24c      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x76>
 80020c4:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x98>
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xbc>
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6e      	ldr	r2, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6a      	ldr	r2, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fddc 	bl	8000cf4 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe fdd8 	bl	8000cf4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e200      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe4>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fdc8 	bl	8000cf4 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7fe fdc4 	bl	8000cf4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1ec      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x10c>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021a2:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1c0      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4939      	ldr	r1, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fd7d 	bl	8000cf4 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe fd79 	bl	8000cf4 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1a1      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fd5c 	bl	8000cf4 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe fd58 	bl	8000cf4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e180      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03a      	beq.n	80022e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d019      	beq.n	80022a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fd3c 	bl	8000cf4 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe fd38 	bl	8000cf4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e160      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229e:	2001      	movs	r0, #1
 80022a0:	f000 fad8 	bl	8002854 <RCC_Delay>
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fd22 	bl	8000cf4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fd1e 	bl	8000cf4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d908      	bls.n	80022d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e146      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	42420000 	.word	0x42420000
 80022d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e9      	bne.n	80022b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a6 	beq.w	800243a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a87      	ldr	r2, [pc, #540]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7fe fcdf 	bl	8000cf4 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7fe fcdb 	bl	8000cf4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e103      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b75      	ldr	r3, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x4c8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x312>
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e02d      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x334>
 8002376:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a69      	ldr	r2, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a66      	ldr	r2, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	e01c      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x356>
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d015      	beq.n	80023fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7fe fc8f 	bl	8000cf4 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fc8b 	bl	8000cf4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0b1      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ee      	beq.n	80023da <HAL_RCC_OscConfig+0x37e>
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fc79 	bl	8000cf4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe fc75 	bl	8000cf4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e09b      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ee      	bne.n	8002406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d061      	beq.n	8002514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d146      	bne.n	80024e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCC_OscConfig+0x4cc>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe fc49 	bl	8000cf4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe fc45 	bl	8000cf4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e06d      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4921      	ldr	r1, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a19      	ldr	r1, [r3, #32]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	430b      	orrs	r3, r1
 80024b2:	491b      	ldr	r1, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4cc>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe fc19 	bl	8000cf4 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fc15 	bl	8000cf4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e03d      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46a>
 80024e4:	e035      	b.n	8002552 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x4cc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fc02 	bl	8000cf4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fbfe 	bl	8000cf4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e026      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x498>
 8002512:	e01e      	b.n	8002552 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e019      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x500>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	429a      	cmp	r2, r3
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0d0      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4965      	ldr	r1, [pc, #404]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	494d      	ldr	r1, [pc, #308]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d040      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e07f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e073      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06b      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4936      	ldr	r1, [pc, #216]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe fb50 	bl	8000cf4 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fb4c 	bl	8000cf4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e053      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d210      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4922      	ldr	r1, [pc, #136]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e032      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4916      	ldr	r1, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ee:	f000 f821 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1cc>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe faae 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000
 8002724:	40021000 	.word	0x40021000
 8002728:	0800644c 	.word	0x0800644c
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b490      	push	{r4, r7}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800273c:	1d3c      	adds	r4, r7, #4
 800273e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002744:	f240 2301 	movw	r3, #513	; 0x201
 8002748:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d002      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x40>
 800276e:	2b08      	cmp	r3, #8
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x46>
 8002772:	e02b      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002776:	623b      	str	r3, [r7, #32]
      break;
 8002778:	e02b      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	0c9b      	lsrs	r3, r3, #18
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3328      	adds	r3, #40	; 0x28
 8002784:	443b      	add	r3, r7
 8002786:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800278a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0c5b      	lsrs	r3, r3, #17
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	3328      	adds	r3, #40	; 0x28
 80027a2:	443b      	add	r3, r7
 80027a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ae:	fb03 f202 	mul.w	r2, r3, r2
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e004      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	623b      	str	r3, [r7, #32]
      break;
 80027ca:	e002      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ce:	623b      	str	r3, [r7, #32]
      break;
 80027d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d2:	6a3b      	ldr	r3, [r7, #32]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc90      	pop	{r4, r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	0800643c 	.word	0x0800643c
 80027e4:	40021000 	.word	0x40021000
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	003d0900 	.word	0x003d0900

080027f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b02      	ldr	r3, [pc, #8]	; (8002800 <HAL_RCC_GetHCLKFreq+0x10>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000000 	.word	0x20000000

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002808:	f7ff fff2 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4903      	ldr	r1, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	0800645c 	.word	0x0800645c

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002830:	f7ff ffde 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0adb      	lsrs	r3, r3, #11
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	0800645c 	.word	0x0800645c

08002854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_Delay+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <RCC_Delay+0x38>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002870:	bf00      	nop
  }
  while (Delay --);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	60fa      	str	r2, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <RCC_Delay+0x1c>
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e041      	b.n	8002926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f839 	bl	800292e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f944 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_TIM_Base_Start+0x88>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_TIM_Base_Start+0x48>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d009      	beq.n	8002988 <HAL_TIM_Base_Start+0x48>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_TIM_Base_Start+0x8c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_TIM_Base_Start+0x48>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_TIM_Base_Start+0x90>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d010      	beq.n	80029bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e007      	b.n	80029bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800

080029d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_ConfigClockSource+0x18>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0b3      	b.n	8002b54 <HAL_TIM_ConfigClockSource+0x180>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a24:	d03e      	beq.n	8002aa4 <HAL_TIM_ConfigClockSource+0xd0>
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2a:	f200 8087 	bhi.w	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a32:	f000 8085 	beq.w	8002b40 <HAL_TIM_ConfigClockSource+0x16c>
 8002a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3a:	d87f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a3c:	2b70      	cmp	r3, #112	; 0x70
 8002a3e:	d01a      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xa2>
 8002a40:	2b70      	cmp	r3, #112	; 0x70
 8002a42:	d87b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a44:	2b60      	cmp	r3, #96	; 0x60
 8002a46:	d050      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0x116>
 8002a48:	2b60      	cmp	r3, #96	; 0x60
 8002a4a:	d877      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a4c:	2b50      	cmp	r3, #80	; 0x50
 8002a4e:	d03c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0xf6>
 8002a50:	2b50      	cmp	r3, #80	; 0x50
 8002a52:	d873      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d058      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x136>
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d86f      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a5c:	2b30      	cmp	r3, #48	; 0x30
 8002a5e:	d064      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x156>
 8002a60:	2b30      	cmp	r3, #48	; 0x30
 8002a62:	d86b      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d060      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x156>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d867      	bhi.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05c      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x156>
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d05a      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a74:	e062      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f000 f942 	bl	8002d0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	609a      	str	r2, [r3, #8]
      break;
 8002aa2:	e04e      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f000 f92b 	bl	8002d0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac6:	609a      	str	r2, [r3, #8]
      break;
 8002ac8:	e03b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 f8a2 	bl	8002c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2150      	movs	r1, #80	; 0x50
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f8f9 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002ae8:	e02b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f8c0 	bl	8002c7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2160      	movs	r1, #96	; 0x60
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f8e9 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002b08:	e01b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f882 	bl	8002c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f8d9 	bl	8002cda <TIM_ITRx_SetConfig>
      break;
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 f8d0 	bl	8002cda <TIM_ITRx_SetConfig>
        break;
 8002b3a:	e002      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <TIM_Base_SetConfig+0xb8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_Base_SetConfig+0x30>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x30>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <TIM_Base_SetConfig+0xbc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x30>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <TIM_Base_SetConfig+0xb8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <TIM_Base_SetConfig+0x62>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0x62>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <TIM_Base_SetConfig+0xbc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x62>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <TIM_Base_SetConfig+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <TIM_Base_SetConfig+0xb8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d103      	bne.n	8002c04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	615a      	str	r2, [r3, #20]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800

08002c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0201 	bic.w	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f023 030a 	bic.w	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f023 0210 	bic.w	r2, r3, #16
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	031b      	lsls	r3, r3, #12
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	621a      	str	r2, [r3, #32]
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f043 0307 	orr.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b087      	sub	sp, #28
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	021a      	lsls	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e046      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10c      	bne.n	8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800

08002e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e03f      	b.n	8002e9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f837 	bl	8002ea2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f90d 	bl	800306c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d17c      	bne.n	8002fce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_UART_Transmit+0x2c>
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e075      	b.n	8002fd0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_UART_Transmit+0x3e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e06e      	b.n	8002fd0 <HAL_UART_Transmit+0x11c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f08:	f7fd fef4 	bl	8000cf4 <HAL_GetTick>
 8002f0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f22:	d108      	bne.n	8002f36 <HAL_UART_Transmit+0x82>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e003      	b.n	8002f3e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f46:	e02a      	b.n	8002f9e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f840 	bl	8002fd8 <UART_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e036      	b.n	8002fd0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e007      	b.n	8002f90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1cf      	bne.n	8002f48 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f810 	bl	8002fd8 <UART_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e006      	b.n	8002fd0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe8:	e02c      	b.n	8003044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d028      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ff8:	f7fd fe7c 	bl	8000cf4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	429a      	cmp	r2, r3
 8003006:	d21d      	bcs.n	8003044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e00f      	b.n	8003064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	429a      	cmp	r2, r3
 8003060:	d0c3      	beq.n	8002fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030a6:	f023 030c 	bic.w	r3, r3, #12
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	430b      	orrs	r3, r1
 80030b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <UART_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d103      	bne.n	80030dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7ff fbaa 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	e002      	b.n	80030e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7ff fb92 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 80030e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	4a22      	ldr	r2, [pc, #136]	; (8003184 <UART_SetConfig+0x118>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	0119      	lsls	r1, r3, #4
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009a      	lsls	r2, r3, #2
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fbb2 f2f3 	udiv	r2, r2, r3
 8003118:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <UART_SetConfig+0x118>)
 800311a:	fba3 0302 	umull	r0, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2064      	movs	r0, #100	; 0x64
 8003122:	fb00 f303 	mul.w	r3, r0, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	3332      	adds	r3, #50	; 0x32
 800312c:	4a15      	ldr	r2, [pc, #84]	; (8003184 <UART_SetConfig+0x118>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003138:	4419      	add	r1, r3
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009a      	lsls	r2, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <UART_SetConfig+0x118>)
 8003152:	fba3 0302 	umull	r0, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2064      	movs	r0, #100	; 0x64
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	3332      	adds	r3, #50	; 0x32
 8003164:	4a07      	ldr	r2, [pc, #28]	; (8003184 <UART_SetConfig+0x118>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	440a      	add	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40013800 	.word	0x40013800
 8003184:	51eb851f 	.word	0x51eb851f

08003188 <adc_GPIO_config>:

/*
// @brief ADC Channels GPIO Configuration
*/
void adc_GPIO_config(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_init_struct = {0};
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <adc_GPIO_config+0x4c>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <adc_GPIO_config+0x4c>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6193      	str	r3, [r2, #24]
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <adc_GPIO_config+0x4c>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]

	GPIO_init_struct.Mode = GPIO_MODE_ANALOG;
 80031b4:	2303      	movs	r3, #3
 80031b6:	60fb      	str	r3, [r7, #12]
	GPIO_init_struct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 80031b8:	230e      	movs	r3, #14
 80031ba:	60bb      	str	r3, [r7, #8]
	GPIO_init_struct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_init_struct);
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	4619      	mov	r1, r3
 80031c6:	4804      	ldr	r0, [pc, #16]	; (80031d8 <adc_GPIO_config+0x50>)
 80031c8:	f7fe fd88 	bl	8001cdc <HAL_GPIO_Init>


}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010800 	.word	0x40010800

080031dc <adc_multi_channel_config>:

/*
// @brief ADC Multi-channel configuration
*/
bool adc_multi_channel_config(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <adc_multi_channel_config+0xd0>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4a31      	ldr	r2, [pc, #196]	; (80032ac <adc_multi_channel_config+0xd0>)
 80031e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ec:	6193      	str	r3, [r2, #24]
 80031ee:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <adc_multi_channel_config+0xd0>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]

	adc_1_handle.Instance = ADC1;
 80031fa:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <adc_multi_channel_config+0xd4>)
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <adc_multi_channel_config+0xd8>)
 80031fe:	601a      	str	r2, [r3, #0]
	adc_1_handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003200:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
	adc_1_handle.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320c:	609a      	str	r2, [r3, #8]
	adc_1_handle.Init.ContinuousConvMode = DISABLE;
 800320e:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003210:	2200      	movs	r2, #0
 8003212:	731a      	strb	r2, [r3, #12]
	adc_1_handle.Init.NbrOfConversion = 3;
 8003214:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003216:	2203      	movs	r2, #3
 8003218:	611a      	str	r2, [r3, #16]
	adc_1_handle.Init.DiscontinuousConvMode = DISABLE;
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <adc_multi_channel_config+0xd4>)
 800321c:	2200      	movs	r2, #0
 800321e:	751a      	strb	r2, [r3, #20]
	adc_1_handle.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003220:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003222:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003226:	61da      	str	r2, [r3, #28]
	if(HAL_ADC_Init(&adc_1_handle) != HAL_OK)
 8003228:	4821      	ldr	r0, [pc, #132]	; (80032b0 <adc_multi_channel_config+0xd4>)
 800322a:	f7fd fd6d 	bl	8000d08 <HAL_ADC_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <adc_multi_channel_config+0x5c>
	{
		return false;
 8003234:	2300      	movs	r3, #0
 8003236:	e035      	b.n	80032a4 <adc_multi_channel_config+0xc8>
	}
	// ADC channel configuration
	// channel-1 => PA1
	ADC_ChannelConfTypeDef channel_config = {0};
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]
	channel_config.Channel = ADC_CHANNEL_1;
 8003242:	2301      	movs	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
	channel_config.Rank = 1;
 8003246:	2301      	movs	r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
	channel_config.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800324a:	2303      	movs	r3, #3
 800324c:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(&adc_1_handle, &channel_config) != HAL_OK)
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4817      	ldr	r0, [pc, #92]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003254:	f7fd ffee 	bl	8001234 <HAL_ADC_ConfigChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <adc_multi_channel_config+0x86>
	{
		return false;
 800325e:	2300      	movs	r3, #0
 8003260:	e020      	b.n	80032a4 <adc_multi_channel_config+0xc8>
	}
	// channel-2 => PA2
	channel_config.Channel = ADC_CHANNEL_2;
 8003262:	2302      	movs	r3, #2
 8003264:	607b      	str	r3, [r7, #4]
	channel_config.Rank = 2;
 8003266:	2302      	movs	r3, #2
 8003268:	60bb      	str	r3, [r7, #8]
	channel_config.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800326a:	2303      	movs	r3, #3
 800326c:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(&adc_1_handle, &channel_config) != HAL_OK)
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	4619      	mov	r1, r3
 8003272:	480f      	ldr	r0, [pc, #60]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003274:	f7fd ffde 	bl	8001234 <HAL_ADC_ConfigChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <adc_multi_channel_config+0xa6>
	{
		return false;
 800327e:	2300      	movs	r3, #0
 8003280:	e010      	b.n	80032a4 <adc_multi_channel_config+0xc8>
	}
	// channel-3 => PA3
	channel_config.Channel = ADC_CHANNEL_3;
 8003282:	2303      	movs	r3, #3
 8003284:	607b      	str	r3, [r7, #4]
	channel_config.Rank = 3;
 8003286:	2303      	movs	r3, #3
 8003288:	60bb      	str	r3, [r7, #8]
	channel_config.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800328a:	2303      	movs	r3, #3
 800328c:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(&adc_1_handle, &channel_config) != HAL_OK)
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4807      	ldr	r0, [pc, #28]	; (80032b0 <adc_multi_channel_config+0xd4>)
 8003294:	f7fd ffce 	bl	8001234 <HAL_ADC_ConfigChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <adc_multi_channel_config+0xc6>
	{
		return false;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <adc_multi_channel_config+0xc8>
	}
	return true;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	20000208 	.word	0x20000208
 80032b4:	40012400 	.word	0x40012400

080032b8 <adc_dma_config>:

/*
// @brief ADC DMA configuration
*/
void adc_dma_config(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <adc_dma_config+0x80>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <adc_dma_config+0x80>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6153      	str	r3, [r2, #20]
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <adc_dma_config+0x80>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
	static DMA_HandleTypeDef dma_1_handle;
	dma_1_handle.Instance = DMA1_Channel1;
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <adc_dma_config+0x84>)
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <adc_dma_config+0x88>)
 80032da:	601a      	str	r2, [r3, #0]
	dma_1_handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <adc_dma_config+0x84>)
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]
	dma_1_handle.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <adc_dma_config+0x84>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
	dma_1_handle.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <adc_dma_config+0x84>)
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	60da      	str	r2, [r3, #12]
	dma_1_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16 bit
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <adc_dma_config+0x84>)
 80032f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f4:	611a      	str	r2, [r3, #16]
	dma_1_handle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <adc_dma_config+0x84>)
 80032f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032fc:	615a      	str	r2, [r3, #20]
	dma_1_handle.Init.Mode = DMA_CIRCULAR;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <adc_dma_config+0x84>)
 8003300:	2220      	movs	r2, #32
 8003302:	619a      	str	r2, [r3, #24]
	dma_1_handle.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <adc_dma_config+0x84>)
 8003306:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800330a:	61da      	str	r2, [r3, #28]
	HAL_DMA_Init(&dma_1_handle);
 800330c:	480b      	ldr	r0, [pc, #44]	; (800333c <adc_dma_config+0x84>)
 800330e:	f7fe faf7 	bl	8001900 <HAL_DMA_Init>
	__HAL_LINKDMA(&adc_1_handle, DMA_Handle, dma_1_handle);
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <adc_dma_config+0x8c>)
 8003314:	4a09      	ldr	r2, [pc, #36]	; (800333c <adc_dma_config+0x84>)
 8003316:	621a      	str	r2, [r3, #32]
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <adc_dma_config+0x84>)
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <adc_dma_config+0x8c>)
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
	// enable DMA interrupt
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2105      	movs	r1, #5
 8003322:	200b      	movs	r0, #11
 8003324:	f7fe fab5 	bl	8001892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003328:	200b      	movs	r0, #11
 800332a:	f7fe face 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	20000238 	.word	0x20000238
 8003340:	40020008 	.word	0x40020008
 8003344:	20000208 	.word	0x20000208

08003348 <adc_AWDG_config>:

/*
// @brief ADC AWDG configuration
*/
bool adc_AWDG_config(ADC_single_select_e channel)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
	ADC_AnalogWDGConfTypeDef analog_WDG_config = {0};
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	611a      	str	r2, [r3, #16]
 8003362:	615a      	str	r2, [r3, #20]
	analog_WDG_config.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <adc_AWDG_config+0x74>)
 8003366:	60bb      	str	r3, [r7, #8]
	analog_WDG_config.HighThreshold = 4000;
 8003368:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800336c:	617b      	str	r3, [r7, #20]
	analog_WDG_config.LowThreshold = 1000;
 800336e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003372:	61bb      	str	r3, [r7, #24]
	analog_WDG_config.Channel = channel;
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	60fb      	str	r3, [r7, #12]
	analog_WDG_config.ITMode = ENABLE;
 8003378:	2301      	movs	r3, #1
 800337a:	743b      	strb	r3, [r7, #16]
	if(HAL_ADC_AnalogWDGConfig(&adc_1_handle, &analog_WDG_config) != HAL_OK)
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	4619      	mov	r1, r3
 8003382:	480f      	ldr	r0, [pc, #60]	; (80033c0 <adc_AWDG_config+0x78>)
 8003384:	f7fe f84e 	bl	8001424 <HAL_ADC_AnalogWDGConfig>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <adc_AWDG_config+0x4a>
	{
		return false;
 800338e:	2300      	movs	r3, #0
 8003390:	e010      	b.n	80033b4 <adc_AWDG_config+0x6c>
	}
	__HAL_ADC_ENABLE_IT(&adc_1_handle, ADC_IT_AWD);
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <adc_AWDG_config+0x78>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <adc_AWDG_config+0x78>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a0:	605a      	str	r2, [r3, #4]
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2105      	movs	r1, #5
 80033a6:	2012      	movs	r0, #18
 80033a8:	f7fe fa73 	bl	8001892 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80033ac:	2012      	movs	r0, #18
 80033ae:	f7fe fa8c 	bl	80018ca <HAL_NVIC_EnableIRQ>

	return true;
 80033b2:	2301      	movs	r3, #1
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00800200 	.word	0x00800200
 80033c0:	20000208 	.word	0x20000208

080033c4 <gpio_LED_config>:

/*
// @brief LED GPIO Configuration
*/
void gpio_LED_config(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
	// green LED => PB13
	// red   LED => PB14

  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <gpio_LED_config+0x54>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <gpio_LED_config+0x54>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6193      	str	r3, [r2, #24]
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <gpio_LED_config+0x54>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef gpio_init_struct = {0};
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	60da      	str	r2, [r3, #12]
  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
  gpio_init_struct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80033f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80033f8:	60bb      	str	r3, [r7, #8]
  gpio_init_struct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2302      	movs	r3, #2
 8003400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_struct);
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	4619      	mov	r1, r3
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <gpio_LED_config+0x58>)
 800340a:	f7fe fc67 	bl	8001cdc <HAL_GPIO_Init>

}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40010c00 	.word	0x40010c00

08003420 <gpio_LED_toggle_green>:
void gpio_LED_write_red(bool state)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)state);
}
void gpio_LED_toggle_green(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8003424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <gpio_LED_toggle_green+0x14>)
 800342a:	f7fe fddb 	bl	8001fe4 <HAL_GPIO_TogglePin>
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40010c00 	.word	0x40010c00

08003438 <gpio_LED_toggle_red>:
void gpio_LED_toggle_red(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800343c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <gpio_LED_toggle_red+0x14>)
 8003442:	f7fe fdcf 	bl	8001fe4 <HAL_GPIO_TogglePin>
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40010c00 	.word	0x40010c00

08003450 <gpio_PB_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_PB_config(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
	// user button PA0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <gpio_PB_config+0x50>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <gpio_PB_config+0x50>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6193      	str	r3, [r2, #24]
 8003462:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <gpio_PB_config+0x50>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef gpio_init_struct = {0};
 800346e:	f107 0308 	add.w	r3, r7, #8
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pin = GPIO_PIN_0;
 8003480:	2301      	movs	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2302      	movs	r3, #2
 800348a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	4619      	mov	r1, r3
 8003492:	4804      	ldr	r0, [pc, #16]	; (80034a4 <gpio_PB_config+0x54>)
 8003494:	f7fe fc22 	bl	8001cdc <HAL_GPIO_Init>

}
 8003498:	bf00      	nop
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40010800 	.word	0x40010800

080034a8 <gpio_SW_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_SW_config(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
	// sw-1 PA8
	// sw-2 PA15

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <gpio_SW_config+0x88>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <gpio_SW_config+0x88>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6193      	str	r3, [r2, #24]
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <gpio_SW_config+0x88>)
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_init_struct = {0};
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pin = GPIO_PIN_8 | GPIO_PIN_15;
 80034d8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80034dc:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2302      	movs	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	4619      	mov	r1, r3
 80034ec:	4811      	ldr	r0, [pc, #68]	; (8003534 <gpio_SW_config+0x8c>)
 80034ee:	f7fe fbf5 	bl	8001cdc <HAL_GPIO_Init>

	// remap
	__HAL_RCC_AFIO_CLK_ENABLE();
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <gpio_SW_config+0x88>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <gpio_SW_config+0x88>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6193      	str	r3, [r2, #24]
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <gpio_SW_config+0x88>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <gpio_SW_config+0x90>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	4a05      	ldr	r2, [pc, #20]	; (8003538 <gpio_SW_config+0x90>)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	6053      	str	r3, [r2, #4]
}
 8003526:	bf00      	nop
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40010800 	.word	0x40010800
 8003538:	40010000 	.word	0x40010000

0800353c <rcc_system_clock_config>:
//-----------------------------------------------------------------------//
/*
// rcc clock configuration
*/
bool rcc_system_clock_config(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b090      	sub	sp, #64	; 0x40
 8003540:	af00      	add	r7, sp, #0

    // APB1 Prescaler = 2 => 36, 72 MHz
    // APB2 Prescaler = 1 => 72, 72 MHz
    // ADC Prescaler = 6 => 12 MHz

    RCC_OscInitTypeDef osc_init_struct = {0};
 8003542:	f107 0318 	add.w	r3, r7, #24
 8003546:	2228      	movs	r2, #40	; 0x28
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f956 	bl	80037fc <memset>
    RCC_ClkInitTypeDef clk_init_struct = {0};
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	611a      	str	r2, [r3, #16]

    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
    osc_init_struct.HSEState = RCC_HSE_ON;
 8003562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003566:	61fb      	str	r3, [r7, #28]
    osc_init_struct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
    osc_init_struct.PLL.PLLState = RCC_PLL_ON;
 800356c:	2302      	movs	r3, #2
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003576:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_RCC_OscConfig(&osc_init_struct) != HAL_OK)
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fd6b 	bl	800205c <HAL_RCC_OscConfig>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <rcc_system_clock_config+0x54>
    {
      return false;
 800358c:	2300      	movs	r3, #0
 800358e:	e014      	b.n	80035ba <rcc_system_clock_config+0x7e>
    }

    // clock initialization
    clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8003590:	230f      	movs	r3, #15
 8003592:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1  |
                                RCC_CLOCKTYPE_PCLK2  |
                                RCC_CLOCKTYPE_SYSCLK ;

    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003594:	2302      	movs	r3, #2
 8003596:	60bb      	str	r3, [r7, #8]
    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
    clk_init_struct.APB1CLKDivider = RCC_SYSCLK_DIV2;
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	613b      	str	r3, [r7, #16]
    clk_init_struct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
    // 00 - 24MHz => 0
    // 24 - 48MHz => 1
    // 48 - 72MHz => 2
    if(HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2) != HAL_OK)
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe ffd9 	bl	8002560 <HAL_RCC_ClockConfig>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <rcc_system_clock_config+0x7c>
    {
      return false;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <rcc_system_clock_config+0x7e>
    }

    return true;
 80035b8:	2301      	movs	r3, #1
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3740      	adds	r7, #64	; 0x40
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <tim_TIM3_config>:

/*
// @brief TIM3 Configuration
*/
bool tim_TIM3_config(uint32_t ms_period)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM3_CLK_ENABLE();
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <tim_TIM3_config+0xbc>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <tim_TIM3_config+0xbc>)
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	61d3      	str	r3, [r2, #28]
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <tim_TIM3_config+0xbc>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

	htim3.Instance = TIM3;
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <tim_TIM3_config+0xc0>)
 80035e6:	4a28      	ldr	r2, [pc, #160]	; (8003688 <tim_TIM3_config+0xc4>)
 80035e8:	601a      	str	r2, [r3, #0]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ea:	4b26      	ldr	r3, [pc, #152]	; (8003684 <tim_TIM3_config+0xc0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 7200 - 1; // 10KHz
 80035f0:	4b24      	ldr	r3, [pc, #144]	; (8003684 <tim_TIM3_config+0xc0>)
 80035f2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80035f6:	60da      	str	r2, [r3, #12]
	htim3.Init.Prescaler = (ms_period * 10) - 1;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <tim_TIM3_config+0xc0>)
 8003606:	6053      	str	r3, [r2, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <tim_TIM3_config+0xc0>)
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <tim_TIM3_config+0xc0>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003614:	481b      	ldr	r0, [pc, #108]	; (8003684 <tim_TIM3_config+0xc0>)
 8003616:	f7ff f93b 	bl	8002890 <HAL_TIM_Base_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <tim_TIM3_config+0x60>
	{
		return false;
 8003620:	2300      	movs	r3, #0
 8003622:	e029      	b.n	8003678 <tim_TIM3_config+0xb4>
	}


	// clock source configuration
	TIM_ClockConfigTypeDef clock_src_config = {0};
 8003624:	f107 0318 	add.w	r3, r7, #24
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
	clock_src_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003636:	61bb      	str	r3, [r7, #24]
	if(HAL_TIM_ConfigClockSource(&htim3, &clock_src_config) != HAL_OK)
 8003638:	f107 0318 	add.w	r3, r7, #24
 800363c:	4619      	mov	r1, r3
 800363e:	4811      	ldr	r0, [pc, #68]	; (8003684 <tim_TIM3_config+0xc0>)
 8003640:	f7ff f9c8 	bl	80029d4 <HAL_TIM_ConfigClockSource>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <tim_TIM3_config+0x8a>
	{
		return false;
 800364a:	2300      	movs	r3, #0
 800364c:	e014      	b.n	8003678 <tim_TIM3_config+0xb4>
	}

	// Master Output Trigger
	TIM_MasterConfigTypeDef master_clock_config = {0};
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
	master_clock_config.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003658:	2320      	movs	r3, #32
 800365a:	613b      	str	r3, [r7, #16]
	master_clock_config.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
	if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &master_clock_config) != HAL_OK)
 8003660:	f107 0310 	add.w	r3, r7, #16
 8003664:	4619      	mov	r1, r3
 8003666:	4807      	ldr	r0, [pc, #28]	; (8003684 <tim_TIM3_config+0xc0>)
 8003668:	f7ff fb70 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <tim_TIM3_config+0xb2>
	{
		return false;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <tim_TIM3_config+0xb4>
	}

	return true;
 8003676:	2301      	movs	r3, #1

}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	2000027c 	.word	0x2000027c
 8003688:	40000400 	.word	0x40000400

0800368c <uart_UART1_GPIO_config>:
//-----------------------------------------------------------------------//
/*
// @brief UART1 GPIO configuration
*/
void uart_UART1_GPIO_config(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
    // PA9  => TX
    // PA10 => RX
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <uart_UART1_GPIO_config+0x5c>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <uart_UART1_GPIO_config+0x5c>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6193      	str	r3, [r2, #24]
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <uart_UART1_GPIO_config+0x5c>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    // PA9  => TX
    gpio_init_struct.Pin = GPIO_PIN_9;
 80036aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ae:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036b4:	2303      	movs	r3, #3
 80036b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4619      	mov	r1, r3
 80036be:	480b      	ldr	r0, [pc, #44]	; (80036ec <uart_UART1_GPIO_config+0x60>)
 80036c0:	f7fe fb0c 	bl	8001cdc <HAL_GPIO_Init>

    // PA10 => RX
    gpio_init_struct.Pin = GPIO_PIN_10;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	4619      	mov	r1, r3
 80036d8:	4804      	ldr	r0, [pc, #16]	; (80036ec <uart_UART1_GPIO_config+0x60>)
 80036da:	f7fe faff 	bl	8001cdc <HAL_GPIO_Init>




}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40010800 	.word	0x40010800

080036f0 <uart_UART1_config>:
/*
// @brief UART1 Peripheral configuration
*/
bool uart_UART1_config(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
  __HAL_RCC_USART1_CLK_ENABLE();
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <uart_UART1_config+0x6c>)
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	4a18      	ldr	r2, [pc, #96]	; (800375c <uart_UART1_config+0x6c>)
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003700:	6193      	str	r3, [r2, #24]
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <uart_UART1_config+0x6c>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]

  huart1.Instance = USART1;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <uart_UART1_config+0x70>)
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <uart_UART1_config+0x74>)
 8003712:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <uart_UART1_config+0x70>)
 8003716:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800371a:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800371c:	4b10      	ldr	r3, [pc, #64]	; (8003760 <uart_UART1_config+0x70>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <uart_UART1_config+0x70>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003728:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <uart_UART1_config+0x70>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <uart_UART1_config+0x70>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <uart_UART1_config+0x70>)
 8003736:	220c      	movs	r2, #12
 8003738:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <uart_UART1_config+0x70>)
 800373c:	2200      	movs	r2, #0
 800373e:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 8003740:	4807      	ldr	r0, [pc, #28]	; (8003760 <uart_UART1_config+0x70>)
 8003742:	f7ff fb61 	bl	8002e08 <HAL_UART_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <uart_UART1_config+0x60>
  {
    return false;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <uart_UART1_config+0x62>
  }

  return true;
 8003750:	2301      	movs	r3, #1
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	200002c4 	.word	0x200002c4
 8003764:	40013800 	.word	0x40013800

08003768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003780:	4c0a      	ldr	r4, [pc, #40]	; (80037ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800378e:	f7fd fa4d 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003792:	f000 f80f 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003796:	f7fd f977 	bl	8000a88 <main>
  bx lr
 800379a:	4770      	bx	lr
  ldr r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80037a4:	08006844 	.word	0x08006844
  ldr r2, =_sbss
 80037a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80037ac:	2000031c 	.word	0x2000031c

080037b0 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <BusFault_Handler>
	...

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2600      	movs	r6, #0
 80037b8:	4d0c      	ldr	r5, [pc, #48]	; (80037ec <__libc_init_array+0x38>)
 80037ba:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	f002 fe02 	bl	80063cc <_init>
 80037c8:	2600      	movs	r6, #0
 80037ca:	4d0a      	ldr	r5, [pc, #40]	; (80037f4 <__libc_init_array+0x40>)
 80037cc:	4c0a      	ldr	r4, [pc, #40]	; (80037f8 <__libc_init_array+0x44>)
 80037ce:	1b64      	subs	r4, r4, r5
 80037d0:	10a4      	asrs	r4, r4, #2
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	0800683c 	.word	0x0800683c
 80037f0:	0800683c 	.word	0x0800683c
 80037f4:	0800683c 	.word	0x0800683c
 80037f8:	08006840 	.word	0x08006840

080037fc <memset>:
 80037fc:	4603      	mov	r3, r0
 80037fe:	4402      	add	r2, r0
 8003800:	4293      	cmp	r3, r2
 8003802:	d100      	bne.n	8003806 <memset+0xa>
 8003804:	4770      	bx	lr
 8003806:	f803 1b01 	strb.w	r1, [r3], #1
 800380a:	e7f9      	b.n	8003800 <memset+0x4>

0800380c <__cvt>:
 800380c:	2b00      	cmp	r3, #0
 800380e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003812:	461f      	mov	r7, r3
 8003814:	bfbb      	ittet	lt
 8003816:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800381a:	461f      	movlt	r7, r3
 800381c:	2300      	movge	r3, #0
 800381e:	232d      	movlt	r3, #45	; 0x2d
 8003820:	b088      	sub	sp, #32
 8003822:	4614      	mov	r4, r2
 8003824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003826:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003828:	7013      	strb	r3, [r2, #0]
 800382a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800382c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003830:	f023 0820 	bic.w	r8, r3, #32
 8003834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003838:	d005      	beq.n	8003846 <__cvt+0x3a>
 800383a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800383e:	d100      	bne.n	8003842 <__cvt+0x36>
 8003840:	3501      	adds	r5, #1
 8003842:	2302      	movs	r3, #2
 8003844:	e000      	b.n	8003848 <__cvt+0x3c>
 8003846:	2303      	movs	r3, #3
 8003848:	aa07      	add	r2, sp, #28
 800384a:	9204      	str	r2, [sp, #16]
 800384c:	aa06      	add	r2, sp, #24
 800384e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003852:	e9cd 3500 	strd	r3, r5, [sp]
 8003856:	4622      	mov	r2, r4
 8003858:	463b      	mov	r3, r7
 800385a:	f000 fe11 	bl	8004480 <_dtoa_r>
 800385e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003862:	4606      	mov	r6, r0
 8003864:	d102      	bne.n	800386c <__cvt+0x60>
 8003866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003868:	07db      	lsls	r3, r3, #31
 800386a:	d522      	bpl.n	80038b2 <__cvt+0xa6>
 800386c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003870:	eb06 0905 	add.w	r9, r6, r5
 8003874:	d110      	bne.n	8003898 <__cvt+0x8c>
 8003876:	7833      	ldrb	r3, [r6, #0]
 8003878:	2b30      	cmp	r3, #48	; 0x30
 800387a:	d10a      	bne.n	8003892 <__cvt+0x86>
 800387c:	2200      	movs	r2, #0
 800387e:	2300      	movs	r3, #0
 8003880:	4620      	mov	r0, r4
 8003882:	4639      	mov	r1, r7
 8003884:	f7fd f890 	bl	80009a8 <__aeabi_dcmpeq>
 8003888:	b918      	cbnz	r0, 8003892 <__cvt+0x86>
 800388a:	f1c5 0501 	rsb	r5, r5, #1
 800388e:	f8ca 5000 	str.w	r5, [sl]
 8003892:	f8da 3000 	ldr.w	r3, [sl]
 8003896:	4499      	add	r9, r3
 8003898:	2200      	movs	r2, #0
 800389a:	2300      	movs	r3, #0
 800389c:	4620      	mov	r0, r4
 800389e:	4639      	mov	r1, r7
 80038a0:	f7fd f882 	bl	80009a8 <__aeabi_dcmpeq>
 80038a4:	b108      	cbz	r0, 80038aa <__cvt+0x9e>
 80038a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80038aa:	2230      	movs	r2, #48	; 0x30
 80038ac:	9b07      	ldr	r3, [sp, #28]
 80038ae:	454b      	cmp	r3, r9
 80038b0:	d307      	bcc.n	80038c2 <__cvt+0xb6>
 80038b2:	4630      	mov	r0, r6
 80038b4:	9b07      	ldr	r3, [sp, #28]
 80038b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038b8:	1b9b      	subs	r3, r3, r6
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	b008      	add	sp, #32
 80038be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	9107      	str	r1, [sp, #28]
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	e7f0      	b.n	80038ac <__cvt+0xa0>

080038ca <__exponent>:
 80038ca:	4603      	mov	r3, r0
 80038cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ce:	2900      	cmp	r1, #0
 80038d0:	f803 2b02 	strb.w	r2, [r3], #2
 80038d4:	bfb6      	itet	lt
 80038d6:	222d      	movlt	r2, #45	; 0x2d
 80038d8:	222b      	movge	r2, #43	; 0x2b
 80038da:	4249      	neglt	r1, r1
 80038dc:	2909      	cmp	r1, #9
 80038de:	7042      	strb	r2, [r0, #1]
 80038e0:	dd2b      	ble.n	800393a <__exponent+0x70>
 80038e2:	f10d 0407 	add.w	r4, sp, #7
 80038e6:	46a4      	mov	ip, r4
 80038e8:	270a      	movs	r7, #10
 80038ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80038ee:	460a      	mov	r2, r1
 80038f0:	46a6      	mov	lr, r4
 80038f2:	fb07 1516 	mls	r5, r7, r6, r1
 80038f6:	2a63      	cmp	r2, #99	; 0x63
 80038f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80038fc:	4631      	mov	r1, r6
 80038fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003906:	dcf0      	bgt.n	80038ea <__exponent+0x20>
 8003908:	3130      	adds	r1, #48	; 0x30
 800390a:	f1ae 0502 	sub.w	r5, lr, #2
 800390e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003912:	4629      	mov	r1, r5
 8003914:	1c44      	adds	r4, r0, #1
 8003916:	4561      	cmp	r1, ip
 8003918:	d30a      	bcc.n	8003930 <__exponent+0x66>
 800391a:	f10d 0209 	add.w	r2, sp, #9
 800391e:	eba2 020e 	sub.w	r2, r2, lr
 8003922:	4565      	cmp	r5, ip
 8003924:	bf88      	it	hi
 8003926:	2200      	movhi	r2, #0
 8003928:	4413      	add	r3, r2
 800392a:	1a18      	subs	r0, r3, r0
 800392c:	b003      	add	sp, #12
 800392e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003934:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003938:	e7ed      	b.n	8003916 <__exponent+0x4c>
 800393a:	2330      	movs	r3, #48	; 0x30
 800393c:	3130      	adds	r1, #48	; 0x30
 800393e:	7083      	strb	r3, [r0, #2]
 8003940:	70c1      	strb	r1, [r0, #3]
 8003942:	1d03      	adds	r3, r0, #4
 8003944:	e7f1      	b.n	800392a <__exponent+0x60>
	...

08003948 <_printf_float>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	b091      	sub	sp, #68	; 0x44
 800394e:	460c      	mov	r4, r1
 8003950:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003954:	4616      	mov	r6, r2
 8003956:	461f      	mov	r7, r3
 8003958:	4605      	mov	r5, r0
 800395a:	f001 fd33 	bl	80053c4 <_localeconv_r>
 800395e:	6803      	ldr	r3, [r0, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	9309      	str	r3, [sp, #36]	; 0x24
 8003964:	f7fc fbf4 	bl	8000150 <strlen>
 8003968:	2300      	movs	r3, #0
 800396a:	930e      	str	r3, [sp, #56]	; 0x38
 800396c:	f8d8 3000 	ldr.w	r3, [r8]
 8003970:	900a      	str	r0, [sp, #40]	; 0x28
 8003972:	3307      	adds	r3, #7
 8003974:	f023 0307 	bic.w	r3, r3, #7
 8003978:	f103 0208 	add.w	r2, r3, #8
 800397c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003980:	f8d4 b000 	ldr.w	fp, [r4]
 8003984:	f8c8 2000 	str.w	r2, [r8]
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003990:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003994:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003998:	930b      	str	r3, [sp, #44]	; 0x2c
 800399a:	f04f 32ff 	mov.w	r2, #4294967295
 800399e:	4640      	mov	r0, r8
 80039a0:	4b9c      	ldr	r3, [pc, #624]	; (8003c14 <_printf_float+0x2cc>)
 80039a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039a4:	f7fd f832 	bl	8000a0c <__aeabi_dcmpun>
 80039a8:	bb70      	cbnz	r0, 8003a08 <_printf_float+0xc0>
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	4640      	mov	r0, r8
 80039b0:	4b98      	ldr	r3, [pc, #608]	; (8003c14 <_printf_float+0x2cc>)
 80039b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039b4:	f7fd f80c 	bl	80009d0 <__aeabi_dcmple>
 80039b8:	bb30      	cbnz	r0, 8003a08 <_printf_float+0xc0>
 80039ba:	2200      	movs	r2, #0
 80039bc:	2300      	movs	r3, #0
 80039be:	4640      	mov	r0, r8
 80039c0:	4651      	mov	r1, sl
 80039c2:	f7fc fffb 	bl	80009bc <__aeabi_dcmplt>
 80039c6:	b110      	cbz	r0, 80039ce <_printf_float+0x86>
 80039c8:	232d      	movs	r3, #45	; 0x2d
 80039ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ce:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <_printf_float+0x2d0>)
 80039d0:	4892      	ldr	r0, [pc, #584]	; (8003c1c <_printf_float+0x2d4>)
 80039d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80039d6:	bf94      	ite	ls
 80039d8:	4698      	movls	r8, r3
 80039da:	4680      	movhi	r8, r0
 80039dc:	2303      	movs	r3, #3
 80039de:	f04f 0a00 	mov.w	sl, #0
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	f02b 0304 	bic.w	r3, fp, #4
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	4633      	mov	r3, r6
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	9700      	str	r7, [sp, #0]
 80039f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80039f4:	f000 f9d4 	bl	8003da0 <_printf_common>
 80039f8:	3001      	adds	r0, #1
 80039fa:	f040 8090 	bne.w	8003b1e <_printf_float+0x1d6>
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003a02:	b011      	add	sp, #68	; 0x44
 8003a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a08:	4642      	mov	r2, r8
 8003a0a:	4653      	mov	r3, sl
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4651      	mov	r1, sl
 8003a10:	f7fc fffc 	bl	8000a0c <__aeabi_dcmpun>
 8003a14:	b148      	cbz	r0, 8003a2a <_printf_float+0xe2>
 8003a16:	f1ba 0f00 	cmp.w	sl, #0
 8003a1a:	bfb8      	it	lt
 8003a1c:	232d      	movlt	r3, #45	; 0x2d
 8003a1e:	4880      	ldr	r0, [pc, #512]	; (8003c20 <_printf_float+0x2d8>)
 8003a20:	bfb8      	it	lt
 8003a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a26:	4b7f      	ldr	r3, [pc, #508]	; (8003c24 <_printf_float+0x2dc>)
 8003a28:	e7d3      	b.n	80039d2 <_printf_float+0x8a>
 8003a2a:	6863      	ldr	r3, [r4, #4]
 8003a2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	d142      	bne.n	8003aba <_printf_float+0x172>
 8003a34:	2306      	movs	r3, #6
 8003a36:	6063      	str	r3, [r4, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	9206      	str	r2, [sp, #24]
 8003a3c:	aa0e      	add	r2, sp, #56	; 0x38
 8003a3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a42:	aa0d      	add	r2, sp, #52	; 0x34
 8003a44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a48:	9203      	str	r2, [sp, #12]
 8003a4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a52:	6023      	str	r3, [r4, #0]
 8003a54:	6863      	ldr	r3, [r4, #4]
 8003a56:	4642      	mov	r2, r8
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	4653      	mov	r3, sl
 8003a5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a60:	f7ff fed4 	bl	800380c <__cvt>
 8003a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a66:	4680      	mov	r8, r0
 8003a68:	2947      	cmp	r1, #71	; 0x47
 8003a6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a6c:	d108      	bne.n	8003a80 <_printf_float+0x138>
 8003a6e:	1cc8      	adds	r0, r1, #3
 8003a70:	db02      	blt.n	8003a78 <_printf_float+0x130>
 8003a72:	6863      	ldr	r3, [r4, #4]
 8003a74:	4299      	cmp	r1, r3
 8003a76:	dd40      	ble.n	8003afa <_printf_float+0x1b2>
 8003a78:	f1a9 0902 	sub.w	r9, r9, #2
 8003a7c:	fa5f f989 	uxtb.w	r9, r9
 8003a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a84:	d81f      	bhi.n	8003ac6 <_printf_float+0x17e>
 8003a86:	464a      	mov	r2, r9
 8003a88:	3901      	subs	r1, #1
 8003a8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a8e:	910d      	str	r1, [sp, #52]	; 0x34
 8003a90:	f7ff ff1b 	bl	80038ca <__exponent>
 8003a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a96:	4682      	mov	sl, r0
 8003a98:	1813      	adds	r3, r2, r0
 8003a9a:	2a01      	cmp	r2, #1
 8003a9c:	6123      	str	r3, [r4, #16]
 8003a9e:	dc02      	bgt.n	8003aa6 <_printf_float+0x15e>
 8003aa0:	6822      	ldr	r2, [r4, #0]
 8003aa2:	07d2      	lsls	r2, r2, #31
 8003aa4:	d501      	bpl.n	8003aaa <_printf_float+0x162>
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	6123      	str	r3, [r4, #16]
 8003aaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d09b      	beq.n	80039ea <_printf_float+0xa2>
 8003ab2:	232d      	movs	r3, #45	; 0x2d
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	e797      	b.n	80039ea <_printf_float+0xa2>
 8003aba:	2947      	cmp	r1, #71	; 0x47
 8003abc:	d1bc      	bne.n	8003a38 <_printf_float+0xf0>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ba      	bne.n	8003a38 <_printf_float+0xf0>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e7b7      	b.n	8003a36 <_printf_float+0xee>
 8003ac6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003aca:	d118      	bne.n	8003afe <_printf_float+0x1b6>
 8003acc:	2900      	cmp	r1, #0
 8003ace:	6863      	ldr	r3, [r4, #4]
 8003ad0:	dd0b      	ble.n	8003aea <_printf_float+0x1a2>
 8003ad2:	6121      	str	r1, [r4, #16]
 8003ad4:	b913      	cbnz	r3, 8003adc <_printf_float+0x194>
 8003ad6:	6822      	ldr	r2, [r4, #0]
 8003ad8:	07d0      	lsls	r0, r2, #31
 8003ada:	d502      	bpl.n	8003ae2 <_printf_float+0x19a>
 8003adc:	3301      	adds	r3, #1
 8003ade:	440b      	add	r3, r1
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	f04f 0a00 	mov.w	sl, #0
 8003ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ae8:	e7df      	b.n	8003aaa <_printf_float+0x162>
 8003aea:	b913      	cbnz	r3, 8003af2 <_printf_float+0x1aa>
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	07d2      	lsls	r2, r2, #31
 8003af0:	d501      	bpl.n	8003af6 <_printf_float+0x1ae>
 8003af2:	3302      	adds	r3, #2
 8003af4:	e7f4      	b.n	8003ae0 <_printf_float+0x198>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e7f2      	b.n	8003ae0 <_printf_float+0x198>
 8003afa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b00:	4299      	cmp	r1, r3
 8003b02:	db05      	blt.n	8003b10 <_printf_float+0x1c8>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	6121      	str	r1, [r4, #16]
 8003b08:	07d8      	lsls	r0, r3, #31
 8003b0a:	d5ea      	bpl.n	8003ae2 <_printf_float+0x19a>
 8003b0c:	1c4b      	adds	r3, r1, #1
 8003b0e:	e7e7      	b.n	8003ae0 <_printf_float+0x198>
 8003b10:	2900      	cmp	r1, #0
 8003b12:	bfcc      	ite	gt
 8003b14:	2201      	movgt	r2, #1
 8003b16:	f1c1 0202 	rsble	r2, r1, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	e7e0      	b.n	8003ae0 <_printf_float+0x198>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	055a      	lsls	r2, r3, #21
 8003b22:	d407      	bmi.n	8003b34 <_printf_float+0x1ec>
 8003b24:	6923      	ldr	r3, [r4, #16]
 8003b26:	4642      	mov	r2, r8
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	47b8      	blx	r7
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d12b      	bne.n	8003b8a <_printf_float+0x242>
 8003b32:	e764      	b.n	80039fe <_printf_float+0xb6>
 8003b34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b38:	f240 80dd 	bls.w	8003cf6 <_printf_float+0x3ae>
 8003b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b40:	2200      	movs	r2, #0
 8003b42:	2300      	movs	r3, #0
 8003b44:	f7fc ff30 	bl	80009a8 <__aeabi_dcmpeq>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d033      	beq.n	8003bb4 <_printf_float+0x26c>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4628      	mov	r0, r5
 8003b52:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <_printf_float+0x2e0>)
 8003b54:	47b8      	blx	r7
 8003b56:	3001      	adds	r0, #1
 8003b58:	f43f af51 	beq.w	80039fe <_printf_float+0xb6>
 8003b5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b60:	429a      	cmp	r2, r3
 8003b62:	db02      	blt.n	8003b6a <_printf_float+0x222>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	07d8      	lsls	r0, r3, #31
 8003b68:	d50f      	bpl.n	8003b8a <_printf_float+0x242>
 8003b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b8      	blx	r7
 8003b74:	3001      	adds	r0, #1
 8003b76:	f43f af42 	beq.w	80039fe <_printf_float+0xb6>
 8003b7a:	f04f 0800 	mov.w	r8, #0
 8003b7e:	f104 091a 	add.w	r9, r4, #26
 8003b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b84:	3b01      	subs	r3, #1
 8003b86:	4543      	cmp	r3, r8
 8003b88:	dc09      	bgt.n	8003b9e <_printf_float+0x256>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	079b      	lsls	r3, r3, #30
 8003b8e:	f100 8102 	bmi.w	8003d96 <_printf_float+0x44e>
 8003b92:	68e0      	ldr	r0, [r4, #12]
 8003b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b96:	4298      	cmp	r0, r3
 8003b98:	bfb8      	it	lt
 8003b9a:	4618      	movlt	r0, r3
 8003b9c:	e731      	b.n	8003a02 <_printf_float+0xba>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	464a      	mov	r2, r9
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	47b8      	blx	r7
 8003ba8:	3001      	adds	r0, #1
 8003baa:	f43f af28 	beq.w	80039fe <_printf_float+0xb6>
 8003bae:	f108 0801 	add.w	r8, r8, #1
 8003bb2:	e7e6      	b.n	8003b82 <_printf_float+0x23a>
 8003bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dc38      	bgt.n	8003c2c <_printf_float+0x2e4>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <_printf_float+0x2e0>)
 8003bc2:	47b8      	blx	r7
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	f43f af1a 	beq.w	80039fe <_printf_float+0xb6>
 8003bca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d102      	bne.n	8003bd8 <_printf_float+0x290>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	07d9      	lsls	r1, r3, #31
 8003bd6:	d5d8      	bpl.n	8003b8a <_printf_float+0x242>
 8003bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4628      	mov	r0, r5
 8003be0:	47b8      	blx	r7
 8003be2:	3001      	adds	r0, #1
 8003be4:	f43f af0b 	beq.w	80039fe <_printf_float+0xb6>
 8003be8:	f04f 0900 	mov.w	r9, #0
 8003bec:	f104 0a1a 	add.w	sl, r4, #26
 8003bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bf2:	425b      	negs	r3, r3
 8003bf4:	454b      	cmp	r3, r9
 8003bf6:	dc01      	bgt.n	8003bfc <_printf_float+0x2b4>
 8003bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bfa:	e794      	b.n	8003b26 <_printf_float+0x1de>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4652      	mov	r2, sl
 8003c00:	4631      	mov	r1, r6
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	f43f aef9 	beq.w	80039fe <_printf_float+0xb6>
 8003c0c:	f109 0901 	add.w	r9, r9, #1
 8003c10:	e7ee      	b.n	8003bf0 <_printf_float+0x2a8>
 8003c12:	bf00      	nop
 8003c14:	7fefffff 	.word	0x7fefffff
 8003c18:	08006468 	.word	0x08006468
 8003c1c:	0800646c 	.word	0x0800646c
 8003c20:	08006474 	.word	0x08006474
 8003c24:	08006470 	.word	0x08006470
 8003c28:	08006478 	.word	0x08006478
 8003c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c30:	429a      	cmp	r2, r3
 8003c32:	bfa8      	it	ge
 8003c34:	461a      	movge	r2, r3
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	4691      	mov	r9, r2
 8003c3a:	dc37      	bgt.n	8003cac <_printf_float+0x364>
 8003c3c:	f04f 0b00 	mov.w	fp, #0
 8003c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c44:	f104 021a 	add.w	r2, r4, #26
 8003c48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c4c:	ebaa 0309 	sub.w	r3, sl, r9
 8003c50:	455b      	cmp	r3, fp
 8003c52:	dc33      	bgt.n	8003cbc <_printf_float+0x374>
 8003c54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	db3b      	blt.n	8003cd4 <_printf_float+0x38c>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	07da      	lsls	r2, r3, #31
 8003c60:	d438      	bmi.n	8003cd4 <_printf_float+0x38c>
 8003c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c66:	eba3 020a 	sub.w	r2, r3, sl
 8003c6a:	eba3 0901 	sub.w	r9, r3, r1
 8003c6e:	4591      	cmp	r9, r2
 8003c70:	bfa8      	it	ge
 8003c72:	4691      	movge	r9, r2
 8003c74:	f1b9 0f00 	cmp.w	r9, #0
 8003c78:	dc34      	bgt.n	8003ce4 <_printf_float+0x39c>
 8003c7a:	f04f 0800 	mov.w	r8, #0
 8003c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c82:	f104 0a1a 	add.w	sl, r4, #26
 8003c86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	eba3 0309 	sub.w	r3, r3, r9
 8003c90:	4543      	cmp	r3, r8
 8003c92:	f77f af7a 	ble.w	8003b8a <_printf_float+0x242>
 8003c96:	2301      	movs	r3, #1
 8003c98:	4652      	mov	r2, sl
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b8      	blx	r7
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	f43f aeac 	beq.w	80039fe <_printf_float+0xb6>
 8003ca6:	f108 0801 	add.w	r8, r8, #1
 8003caa:	e7ec      	b.n	8003c86 <_printf_float+0x33e>
 8003cac:	4613      	mov	r3, r2
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d1c0      	bne.n	8003c3c <_printf_float+0x2f4>
 8003cba:	e6a0      	b.n	80039fe <_printf_float+0xb6>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f ae99 	beq.w	80039fe <_printf_float+0xb6>
 8003ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cce:	f10b 0b01 	add.w	fp, fp, #1
 8003cd2:	e7b9      	b.n	8003c48 <_printf_float+0x300>
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cda:	4628      	mov	r0, r5
 8003cdc:	47b8      	blx	r7
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d1bf      	bne.n	8003c62 <_printf_float+0x31a>
 8003ce2:	e68c      	b.n	80039fe <_printf_float+0xb6>
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4628      	mov	r0, r5
 8003cea:	eb08 020a 	add.w	r2, r8, sl
 8003cee:	47b8      	blx	r7
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d1c2      	bne.n	8003c7a <_printf_float+0x332>
 8003cf4:	e683      	b.n	80039fe <_printf_float+0xb6>
 8003cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cf8:	2a01      	cmp	r2, #1
 8003cfa:	dc01      	bgt.n	8003d00 <_printf_float+0x3b8>
 8003cfc:	07db      	lsls	r3, r3, #31
 8003cfe:	d537      	bpl.n	8003d70 <_printf_float+0x428>
 8003d00:	2301      	movs	r3, #1
 8003d02:	4642      	mov	r2, r8
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f ae77 	beq.w	80039fe <_printf_float+0xb6>
 8003d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d14:	4631      	mov	r1, r6
 8003d16:	4628      	mov	r0, r5
 8003d18:	47b8      	blx	r7
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	f43f ae6f 	beq.w	80039fe <_printf_float+0xb6>
 8003d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d24:	2200      	movs	r2, #0
 8003d26:	2300      	movs	r3, #0
 8003d28:	f7fc fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8003d2c:	b9d8      	cbnz	r0, 8003d66 <_printf_float+0x41e>
 8003d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d30:	f108 0201 	add.w	r2, r8, #1
 8003d34:	3b01      	subs	r3, #1
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d10e      	bne.n	8003d5e <_printf_float+0x416>
 8003d40:	e65d      	b.n	80039fe <_printf_float+0xb6>
 8003d42:	2301      	movs	r3, #1
 8003d44:	464a      	mov	r2, r9
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b8      	blx	r7
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f43f ae56 	beq.w	80039fe <_printf_float+0xb6>
 8003d52:	f108 0801 	add.w	r8, r8, #1
 8003d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	4543      	cmp	r3, r8
 8003d5c:	dcf1      	bgt.n	8003d42 <_printf_float+0x3fa>
 8003d5e:	4653      	mov	r3, sl
 8003d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d64:	e6e0      	b.n	8003b28 <_printf_float+0x1e0>
 8003d66:	f04f 0800 	mov.w	r8, #0
 8003d6a:	f104 091a 	add.w	r9, r4, #26
 8003d6e:	e7f2      	b.n	8003d56 <_printf_float+0x40e>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4642      	mov	r2, r8
 8003d74:	e7df      	b.n	8003d36 <_printf_float+0x3ee>
 8003d76:	2301      	movs	r3, #1
 8003d78:	464a      	mov	r2, r9
 8003d7a:	4631      	mov	r1, r6
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	47b8      	blx	r7
 8003d80:	3001      	adds	r0, #1
 8003d82:	f43f ae3c 	beq.w	80039fe <_printf_float+0xb6>
 8003d86:	f108 0801 	add.w	r8, r8, #1
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d8e:	1a5b      	subs	r3, r3, r1
 8003d90:	4543      	cmp	r3, r8
 8003d92:	dcf0      	bgt.n	8003d76 <_printf_float+0x42e>
 8003d94:	e6fd      	b.n	8003b92 <_printf_float+0x24a>
 8003d96:	f04f 0800 	mov.w	r8, #0
 8003d9a:	f104 0919 	add.w	r9, r4, #25
 8003d9e:	e7f4      	b.n	8003d8a <_printf_float+0x442>

08003da0 <_printf_common>:
 8003da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	4616      	mov	r6, r2
 8003da6:	4699      	mov	r9, r3
 8003da8:	688a      	ldr	r2, [r1, #8]
 8003daa:	690b      	ldr	r3, [r1, #16]
 8003dac:	4607      	mov	r7, r0
 8003dae:	4293      	cmp	r3, r2
 8003db0:	bfb8      	it	lt
 8003db2:	4613      	movlt	r3, r2
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dba:	460c      	mov	r4, r1
 8003dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dc0:	b10a      	cbz	r2, 8003dc6 <_printf_common+0x26>
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	0699      	lsls	r1, r3, #26
 8003dca:	bf42      	ittt	mi
 8003dcc:	6833      	ldrmi	r3, [r6, #0]
 8003dce:	3302      	addmi	r3, #2
 8003dd0:	6033      	strmi	r3, [r6, #0]
 8003dd2:	6825      	ldr	r5, [r4, #0]
 8003dd4:	f015 0506 	ands.w	r5, r5, #6
 8003dd8:	d106      	bne.n	8003de8 <_printf_common+0x48>
 8003dda:	f104 0a19 	add.w	sl, r4, #25
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	6832      	ldr	r2, [r6, #0]
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	dc28      	bgt.n	8003e3a <_printf_common+0x9a>
 8003de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dec:	1e13      	subs	r3, r2, #0
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	bf18      	it	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	0692      	lsls	r2, r2, #26
 8003df6:	d42d      	bmi.n	8003e54 <_printf_common+0xb4>
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e00:	47c0      	blx	r8
 8003e02:	3001      	adds	r0, #1
 8003e04:	d020      	beq.n	8003e48 <_printf_common+0xa8>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	68e5      	ldr	r5, [r4, #12]
 8003e0a:	f003 0306 	and.w	r3, r3, #6
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	bf18      	it	ne
 8003e12:	2500      	movne	r5, #0
 8003e14:	6832      	ldr	r2, [r6, #0]
 8003e16:	f04f 0600 	mov.w	r6, #0
 8003e1a:	68a3      	ldr	r3, [r4, #8]
 8003e1c:	bf08      	it	eq
 8003e1e:	1aad      	subeq	r5, r5, r2
 8003e20:	6922      	ldr	r2, [r4, #16]
 8003e22:	bf08      	it	eq
 8003e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bfc4      	itt	gt
 8003e2c:	1a9b      	subgt	r3, r3, r2
 8003e2e:	18ed      	addgt	r5, r5, r3
 8003e30:	341a      	adds	r4, #26
 8003e32:	42b5      	cmp	r5, r6
 8003e34:	d11a      	bne.n	8003e6c <_printf_common+0xcc>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e008      	b.n	8003e4c <_printf_common+0xac>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	4649      	mov	r1, r9
 8003e40:	4638      	mov	r0, r7
 8003e42:	47c0      	blx	r8
 8003e44:	3001      	adds	r0, #1
 8003e46:	d103      	bne.n	8003e50 <_printf_common+0xb0>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	3501      	adds	r5, #1
 8003e52:	e7c4      	b.n	8003dde <_printf_common+0x3e>
 8003e54:	2030      	movs	r0, #48	; 0x30
 8003e56:	18e1      	adds	r1, r4, r3
 8003e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e62:	4422      	add	r2, r4
 8003e64:	3302      	adds	r3, #2
 8003e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e6a:	e7c5      	b.n	8003df8 <_printf_common+0x58>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	4622      	mov	r2, r4
 8003e70:	4649      	mov	r1, r9
 8003e72:	4638      	mov	r0, r7
 8003e74:	47c0      	blx	r8
 8003e76:	3001      	adds	r0, #1
 8003e78:	d0e6      	beq.n	8003e48 <_printf_common+0xa8>
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7d9      	b.n	8003e32 <_printf_common+0x92>
	...

08003e80 <_printf_i>:
 8003e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	7e0f      	ldrb	r7, [r1, #24]
 8003e86:	4691      	mov	r9, r2
 8003e88:	2f78      	cmp	r7, #120	; 0x78
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	469a      	mov	sl, r3
 8003e90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e96:	d807      	bhi.n	8003ea8 <_printf_i+0x28>
 8003e98:	2f62      	cmp	r7, #98	; 0x62
 8003e9a:	d80a      	bhi.n	8003eb2 <_printf_i+0x32>
 8003e9c:	2f00      	cmp	r7, #0
 8003e9e:	f000 80d9 	beq.w	8004054 <_printf_i+0x1d4>
 8003ea2:	2f58      	cmp	r7, #88	; 0x58
 8003ea4:	f000 80a4 	beq.w	8003ff0 <_printf_i+0x170>
 8003ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb0:	e03a      	b.n	8003f28 <_printf_i+0xa8>
 8003eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eb6:	2b15      	cmp	r3, #21
 8003eb8:	d8f6      	bhi.n	8003ea8 <_printf_i+0x28>
 8003eba:	a101      	add	r1, pc, #4	; (adr r1, 8003ec0 <_printf_i+0x40>)
 8003ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec0:	08003f19 	.word	0x08003f19
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003ea9 	.word	0x08003ea9
 8003ecc:	08003ea9 	.word	0x08003ea9
 8003ed0:	08003ea9 	.word	0x08003ea9
 8003ed4:	08003ea9 	.word	0x08003ea9
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003ea9 	.word	0x08003ea9
 8003ee0:	08003ea9 	.word	0x08003ea9
 8003ee4:	08003ea9 	.word	0x08003ea9
 8003ee8:	08003ea9 	.word	0x08003ea9
 8003eec:	0800403b 	.word	0x0800403b
 8003ef0:	08003f5d 	.word	0x08003f5d
 8003ef4:	0800401d 	.word	0x0800401d
 8003ef8:	08003ea9 	.word	0x08003ea9
 8003efc:	08003ea9 	.word	0x08003ea9
 8003f00:	0800405d 	.word	0x0800405d
 8003f04:	08003ea9 	.word	0x08003ea9
 8003f08:	08003f5d 	.word	0x08003f5d
 8003f0c:	08003ea9 	.word	0x08003ea9
 8003f10:	08003ea9 	.word	0x08003ea9
 8003f14:	08004025 	.word	0x08004025
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	1d1a      	adds	r2, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	602a      	str	r2, [r5, #0]
 8003f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0a4      	b.n	8004076 <_printf_i+0x1f6>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	6829      	ldr	r1, [r5, #0]
 8003f30:	0606      	lsls	r6, r0, #24
 8003f32:	f101 0304 	add.w	r3, r1, #4
 8003f36:	d50a      	bpl.n	8003f4e <_printf_i+0xce>
 8003f38:	680e      	ldr	r6, [r1, #0]
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	2e00      	cmp	r6, #0
 8003f3e:	da03      	bge.n	8003f48 <_printf_i+0xc8>
 8003f40:	232d      	movs	r3, #45	; 0x2d
 8003f42:	4276      	negs	r6, r6
 8003f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f48:	230a      	movs	r3, #10
 8003f4a:	485e      	ldr	r0, [pc, #376]	; (80040c4 <_printf_i+0x244>)
 8003f4c:	e019      	b.n	8003f82 <_printf_i+0x102>
 8003f4e:	680e      	ldr	r6, [r1, #0]
 8003f50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f54:	602b      	str	r3, [r5, #0]
 8003f56:	bf18      	it	ne
 8003f58:	b236      	sxthne	r6, r6
 8003f5a:	e7ef      	b.n	8003f3c <_printf_i+0xbc>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	1d19      	adds	r1, r3, #4
 8003f62:	6029      	str	r1, [r5, #0]
 8003f64:	0601      	lsls	r1, r0, #24
 8003f66:	d501      	bpl.n	8003f6c <_printf_i+0xec>
 8003f68:	681e      	ldr	r6, [r3, #0]
 8003f6a:	e002      	b.n	8003f72 <_printf_i+0xf2>
 8003f6c:	0646      	lsls	r6, r0, #25
 8003f6e:	d5fb      	bpl.n	8003f68 <_printf_i+0xe8>
 8003f70:	881e      	ldrh	r6, [r3, #0]
 8003f72:	2f6f      	cmp	r7, #111	; 0x6f
 8003f74:	bf0c      	ite	eq
 8003f76:	2308      	moveq	r3, #8
 8003f78:	230a      	movne	r3, #10
 8003f7a:	4852      	ldr	r0, [pc, #328]	; (80040c4 <_printf_i+0x244>)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f82:	6865      	ldr	r5, [r4, #4]
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	bfa8      	it	ge
 8003f88:	6821      	ldrge	r1, [r4, #0]
 8003f8a:	60a5      	str	r5, [r4, #8]
 8003f8c:	bfa4      	itt	ge
 8003f8e:	f021 0104 	bicge.w	r1, r1, #4
 8003f92:	6021      	strge	r1, [r4, #0]
 8003f94:	b90e      	cbnz	r6, 8003f9a <_printf_i+0x11a>
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	d04d      	beq.n	8004036 <_printf_i+0x1b6>
 8003f9a:	4615      	mov	r5, r2
 8003f9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003fa0:	fb03 6711 	mls	r7, r3, r1, r6
 8003fa4:	5dc7      	ldrb	r7, [r0, r7]
 8003fa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003faa:	4637      	mov	r7, r6
 8003fac:	42bb      	cmp	r3, r7
 8003fae:	460e      	mov	r6, r1
 8003fb0:	d9f4      	bls.n	8003f9c <_printf_i+0x11c>
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d10b      	bne.n	8003fce <_printf_i+0x14e>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	07de      	lsls	r6, r3, #31
 8003fba:	d508      	bpl.n	8003fce <_printf_i+0x14e>
 8003fbc:	6923      	ldr	r3, [r4, #16]
 8003fbe:	6861      	ldr	r1, [r4, #4]
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	bfde      	ittt	le
 8003fc4:	2330      	movle	r3, #48	; 0x30
 8003fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fce:	1b52      	subs	r2, r2, r5
 8003fd0:	6122      	str	r2, [r4, #16]
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	f8cd a000 	str.w	sl, [sp]
 8003fdc:	aa03      	add	r2, sp, #12
 8003fde:	f7ff fedf 	bl	8003da0 <_printf_common>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d14c      	bne.n	8004080 <_printf_i+0x200>
 8003fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fea:	b004      	add	sp, #16
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff0:	4834      	ldr	r0, [pc, #208]	; (80040c4 <_printf_i+0x244>)
 8003ff2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ff6:	6829      	ldr	r1, [r5, #0]
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ffe:	6029      	str	r1, [r5, #0]
 8004000:	061d      	lsls	r5, r3, #24
 8004002:	d514      	bpl.n	800402e <_printf_i+0x1ae>
 8004004:	07df      	lsls	r7, r3, #31
 8004006:	bf44      	itt	mi
 8004008:	f043 0320 	orrmi.w	r3, r3, #32
 800400c:	6023      	strmi	r3, [r4, #0]
 800400e:	b91e      	cbnz	r6, 8004018 <_printf_i+0x198>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f023 0320 	bic.w	r3, r3, #32
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	2310      	movs	r3, #16
 800401a:	e7af      	b.n	8003f7c <_printf_i+0xfc>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	f043 0320 	orr.w	r3, r3, #32
 8004022:	6023      	str	r3, [r4, #0]
 8004024:	2378      	movs	r3, #120	; 0x78
 8004026:	4828      	ldr	r0, [pc, #160]	; (80040c8 <_printf_i+0x248>)
 8004028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800402c:	e7e3      	b.n	8003ff6 <_printf_i+0x176>
 800402e:	0659      	lsls	r1, r3, #25
 8004030:	bf48      	it	mi
 8004032:	b2b6      	uxthmi	r6, r6
 8004034:	e7e6      	b.n	8004004 <_printf_i+0x184>
 8004036:	4615      	mov	r5, r2
 8004038:	e7bb      	b.n	8003fb2 <_printf_i+0x132>
 800403a:	682b      	ldr	r3, [r5, #0]
 800403c:	6826      	ldr	r6, [r4, #0]
 800403e:	1d18      	adds	r0, r3, #4
 8004040:	6961      	ldr	r1, [r4, #20]
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	0635      	lsls	r5, r6, #24
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	d501      	bpl.n	800404e <_printf_i+0x1ce>
 800404a:	6019      	str	r1, [r3, #0]
 800404c:	e002      	b.n	8004054 <_printf_i+0x1d4>
 800404e:	0670      	lsls	r0, r6, #25
 8004050:	d5fb      	bpl.n	800404a <_printf_i+0x1ca>
 8004052:	8019      	strh	r1, [r3, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	4615      	mov	r5, r2
 8004058:	6123      	str	r3, [r4, #16]
 800405a:	e7ba      	b.n	8003fd2 <_printf_i+0x152>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	2100      	movs	r1, #0
 8004060:	1d1a      	adds	r2, r3, #4
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	681d      	ldr	r5, [r3, #0]
 8004066:	6862      	ldr	r2, [r4, #4]
 8004068:	4628      	mov	r0, r5
 800406a:	f001 fa1f 	bl	80054ac <memchr>
 800406e:	b108      	cbz	r0, 8004074 <_printf_i+0x1f4>
 8004070:	1b40      	subs	r0, r0, r5
 8004072:	6060      	str	r0, [r4, #4]
 8004074:	6863      	ldr	r3, [r4, #4]
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	2300      	movs	r3, #0
 800407a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800407e:	e7a8      	b.n	8003fd2 <_printf_i+0x152>
 8004080:	462a      	mov	r2, r5
 8004082:	4649      	mov	r1, r9
 8004084:	4640      	mov	r0, r8
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	47d0      	blx	sl
 800408a:	3001      	adds	r0, #1
 800408c:	d0ab      	beq.n	8003fe6 <_printf_i+0x166>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	079b      	lsls	r3, r3, #30
 8004092:	d413      	bmi.n	80040bc <_printf_i+0x23c>
 8004094:	68e0      	ldr	r0, [r4, #12]
 8004096:	9b03      	ldr	r3, [sp, #12]
 8004098:	4298      	cmp	r0, r3
 800409a:	bfb8      	it	lt
 800409c:	4618      	movlt	r0, r3
 800409e:	e7a4      	b.n	8003fea <_printf_i+0x16a>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4632      	mov	r2, r6
 80040a4:	4649      	mov	r1, r9
 80040a6:	4640      	mov	r0, r8
 80040a8:	47d0      	blx	sl
 80040aa:	3001      	adds	r0, #1
 80040ac:	d09b      	beq.n	8003fe6 <_printf_i+0x166>
 80040ae:	3501      	adds	r5, #1
 80040b0:	68e3      	ldr	r3, [r4, #12]
 80040b2:	9903      	ldr	r1, [sp, #12]
 80040b4:	1a5b      	subs	r3, r3, r1
 80040b6:	42ab      	cmp	r3, r5
 80040b8:	dcf2      	bgt.n	80040a0 <_printf_i+0x220>
 80040ba:	e7eb      	b.n	8004094 <_printf_i+0x214>
 80040bc:	2500      	movs	r5, #0
 80040be:	f104 0619 	add.w	r6, r4, #25
 80040c2:	e7f5      	b.n	80040b0 <_printf_i+0x230>
 80040c4:	0800647a 	.word	0x0800647a
 80040c8:	0800648b 	.word	0x0800648b

080040cc <iprintf>:
 80040cc:	b40f      	push	{r0, r1, r2, r3}
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <iprintf+0x2c>)
 80040d0:	b513      	push	{r0, r1, r4, lr}
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	b124      	cbz	r4, 80040e0 <iprintf+0x14>
 80040d6:	69a3      	ldr	r3, [r4, #24]
 80040d8:	b913      	cbnz	r3, 80040e0 <iprintf+0x14>
 80040da:	4620      	mov	r0, r4
 80040dc:	f001 f8d4 	bl	8005288 <__sinit>
 80040e0:	ab05      	add	r3, sp, #20
 80040e2:	4620      	mov	r0, r4
 80040e4:	9a04      	ldr	r2, [sp, #16]
 80040e6:	68a1      	ldr	r1, [r4, #8]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	f001 fe95 	bl	8005e18 <_vfiprintf_r>
 80040ee:	b002      	add	sp, #8
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f4:	b004      	add	sp, #16
 80040f6:	4770      	bx	lr
 80040f8:	2000000c 	.word	0x2000000c

080040fc <_puts_r>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	460e      	mov	r6, r1
 8004100:	4605      	mov	r5, r0
 8004102:	b118      	cbz	r0, 800410c <_puts_r+0x10>
 8004104:	6983      	ldr	r3, [r0, #24]
 8004106:	b90b      	cbnz	r3, 800410c <_puts_r+0x10>
 8004108:	f001 f8be 	bl	8005288 <__sinit>
 800410c:	69ab      	ldr	r3, [r5, #24]
 800410e:	68ac      	ldr	r4, [r5, #8]
 8004110:	b913      	cbnz	r3, 8004118 <_puts_r+0x1c>
 8004112:	4628      	mov	r0, r5
 8004114:	f001 f8b8 	bl	8005288 <__sinit>
 8004118:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <_puts_r+0xd0>)
 800411a:	429c      	cmp	r4, r3
 800411c:	d120      	bne.n	8004160 <_puts_r+0x64>
 800411e:	686c      	ldr	r4, [r5, #4]
 8004120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004122:	07db      	lsls	r3, r3, #31
 8004124:	d405      	bmi.n	8004132 <_puts_r+0x36>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	0598      	lsls	r0, r3, #22
 800412a:	d402      	bmi.n	8004132 <_puts_r+0x36>
 800412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412e:	f001 f94e 	bl	80053ce <__retarget_lock_acquire_recursive>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	0719      	lsls	r1, r3, #28
 8004136:	d51d      	bpl.n	8004174 <_puts_r+0x78>
 8004138:	6923      	ldr	r3, [r4, #16]
 800413a:	b1db      	cbz	r3, 8004174 <_puts_r+0x78>
 800413c:	3e01      	subs	r6, #1
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004144:	3b01      	subs	r3, #1
 8004146:	60a3      	str	r3, [r4, #8]
 8004148:	bb39      	cbnz	r1, 800419a <_puts_r+0x9e>
 800414a:	2b00      	cmp	r3, #0
 800414c:	da38      	bge.n	80041c0 <_puts_r+0xc4>
 800414e:	4622      	mov	r2, r4
 8004150:	210a      	movs	r1, #10
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f848 	bl	80041e8 <__swbuf_r>
 8004158:	3001      	adds	r0, #1
 800415a:	d011      	beq.n	8004180 <_puts_r+0x84>
 800415c:	250a      	movs	r5, #10
 800415e:	e011      	b.n	8004184 <_puts_r+0x88>
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <_puts_r+0xd4>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d101      	bne.n	800416a <_puts_r+0x6e>
 8004166:	68ac      	ldr	r4, [r5, #8]
 8004168:	e7da      	b.n	8004120 <_puts_r+0x24>
 800416a:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <_puts_r+0xd8>)
 800416c:	429c      	cmp	r4, r3
 800416e:	bf08      	it	eq
 8004170:	68ec      	ldreq	r4, [r5, #12]
 8004172:	e7d5      	b.n	8004120 <_puts_r+0x24>
 8004174:	4621      	mov	r1, r4
 8004176:	4628      	mov	r0, r5
 8004178:	f000 f888 	bl	800428c <__swsetup_r>
 800417c:	2800      	cmp	r0, #0
 800417e:	d0dd      	beq.n	800413c <_puts_r+0x40>
 8004180:	f04f 35ff 	mov.w	r5, #4294967295
 8004184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004186:	07da      	lsls	r2, r3, #31
 8004188:	d405      	bmi.n	8004196 <_puts_r+0x9a>
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	059b      	lsls	r3, r3, #22
 800418e:	d402      	bmi.n	8004196 <_puts_r+0x9a>
 8004190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004192:	f001 f91d 	bl	80053d0 <__retarget_lock_release_recursive>
 8004196:	4628      	mov	r0, r5
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	2b00      	cmp	r3, #0
 800419c:	da04      	bge.n	80041a8 <_puts_r+0xac>
 800419e:	69a2      	ldr	r2, [r4, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	dc06      	bgt.n	80041b2 <_puts_r+0xb6>
 80041a4:	290a      	cmp	r1, #10
 80041a6:	d004      	beq.n	80041b2 <_puts_r+0xb6>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	6022      	str	r2, [r4, #0]
 80041ae:	7019      	strb	r1, [r3, #0]
 80041b0:	e7c5      	b.n	800413e <_puts_r+0x42>
 80041b2:	4622      	mov	r2, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 f817 	bl	80041e8 <__swbuf_r>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d1bf      	bne.n	800413e <_puts_r+0x42>
 80041be:	e7df      	b.n	8004180 <_puts_r+0x84>
 80041c0:	250a      	movs	r5, #10
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	6022      	str	r2, [r4, #0]
 80041c8:	701d      	strb	r5, [r3, #0]
 80041ca:	e7db      	b.n	8004184 <_puts_r+0x88>
 80041cc:	0800654c 	.word	0x0800654c
 80041d0:	0800656c 	.word	0x0800656c
 80041d4:	0800652c 	.word	0x0800652c

080041d8 <puts>:
 80041d8:	4b02      	ldr	r3, [pc, #8]	; (80041e4 <puts+0xc>)
 80041da:	4601      	mov	r1, r0
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f7ff bf8d 	b.w	80040fc <_puts_r>
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c

080041e8 <__swbuf_r>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	460e      	mov	r6, r1
 80041ec:	4614      	mov	r4, r2
 80041ee:	4605      	mov	r5, r0
 80041f0:	b118      	cbz	r0, 80041fa <__swbuf_r+0x12>
 80041f2:	6983      	ldr	r3, [r0, #24]
 80041f4:	b90b      	cbnz	r3, 80041fa <__swbuf_r+0x12>
 80041f6:	f001 f847 	bl	8005288 <__sinit>
 80041fa:	4b21      	ldr	r3, [pc, #132]	; (8004280 <__swbuf_r+0x98>)
 80041fc:	429c      	cmp	r4, r3
 80041fe:	d12b      	bne.n	8004258 <__swbuf_r+0x70>
 8004200:	686c      	ldr	r4, [r5, #4]
 8004202:	69a3      	ldr	r3, [r4, #24]
 8004204:	60a3      	str	r3, [r4, #8]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	071a      	lsls	r2, r3, #28
 800420a:	d52f      	bpl.n	800426c <__swbuf_r+0x84>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	b36b      	cbz	r3, 800426c <__swbuf_r+0x84>
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	b2f6      	uxtb	r6, r6
 8004216:	1ac0      	subs	r0, r0, r3
 8004218:	6963      	ldr	r3, [r4, #20]
 800421a:	4637      	mov	r7, r6
 800421c:	4283      	cmp	r3, r0
 800421e:	dc04      	bgt.n	800422a <__swbuf_r+0x42>
 8004220:	4621      	mov	r1, r4
 8004222:	4628      	mov	r0, r5
 8004224:	f000 ff9c 	bl	8005160 <_fflush_r>
 8004228:	bb30      	cbnz	r0, 8004278 <__swbuf_r+0x90>
 800422a:	68a3      	ldr	r3, [r4, #8]
 800422c:	3001      	adds	r0, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	60a3      	str	r3, [r4, #8]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	6022      	str	r2, [r4, #0]
 8004238:	701e      	strb	r6, [r3, #0]
 800423a:	6963      	ldr	r3, [r4, #20]
 800423c:	4283      	cmp	r3, r0
 800423e:	d004      	beq.n	800424a <__swbuf_r+0x62>
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	07db      	lsls	r3, r3, #31
 8004244:	d506      	bpl.n	8004254 <__swbuf_r+0x6c>
 8004246:	2e0a      	cmp	r6, #10
 8004248:	d104      	bne.n	8004254 <__swbuf_r+0x6c>
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 ff87 	bl	8005160 <_fflush_r>
 8004252:	b988      	cbnz	r0, 8004278 <__swbuf_r+0x90>
 8004254:	4638      	mov	r0, r7
 8004256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <__swbuf_r+0x9c>)
 800425a:	429c      	cmp	r4, r3
 800425c:	d101      	bne.n	8004262 <__swbuf_r+0x7a>
 800425e:	68ac      	ldr	r4, [r5, #8]
 8004260:	e7cf      	b.n	8004202 <__swbuf_r+0x1a>
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <__swbuf_r+0xa0>)
 8004264:	429c      	cmp	r4, r3
 8004266:	bf08      	it	eq
 8004268:	68ec      	ldreq	r4, [r5, #12]
 800426a:	e7ca      	b.n	8004202 <__swbuf_r+0x1a>
 800426c:	4621      	mov	r1, r4
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f80c 	bl	800428c <__swsetup_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	d0cb      	beq.n	8004210 <__swbuf_r+0x28>
 8004278:	f04f 37ff 	mov.w	r7, #4294967295
 800427c:	e7ea      	b.n	8004254 <__swbuf_r+0x6c>
 800427e:	bf00      	nop
 8004280:	0800654c 	.word	0x0800654c
 8004284:	0800656c 	.word	0x0800656c
 8004288:	0800652c 	.word	0x0800652c

0800428c <__swsetup_r>:
 800428c:	4b32      	ldr	r3, [pc, #200]	; (8004358 <__swsetup_r+0xcc>)
 800428e:	b570      	push	{r4, r5, r6, lr}
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	4606      	mov	r6, r0
 8004294:	460c      	mov	r4, r1
 8004296:	b125      	cbz	r5, 80042a2 <__swsetup_r+0x16>
 8004298:	69ab      	ldr	r3, [r5, #24]
 800429a:	b913      	cbnz	r3, 80042a2 <__swsetup_r+0x16>
 800429c:	4628      	mov	r0, r5
 800429e:	f000 fff3 	bl	8005288 <__sinit>
 80042a2:	4b2e      	ldr	r3, [pc, #184]	; (800435c <__swsetup_r+0xd0>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d10f      	bne.n	80042c8 <__swsetup_r+0x3c>
 80042a8:	686c      	ldr	r4, [r5, #4]
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042b0:	0719      	lsls	r1, r3, #28
 80042b2:	d42c      	bmi.n	800430e <__swsetup_r+0x82>
 80042b4:	06dd      	lsls	r5, r3, #27
 80042b6:	d411      	bmi.n	80042dc <__swsetup_r+0x50>
 80042b8:	2309      	movs	r3, #9
 80042ba:	6033      	str	r3, [r6, #0]
 80042bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295
 80042c4:	81a3      	strh	r3, [r4, #12]
 80042c6:	e03e      	b.n	8004346 <__swsetup_r+0xba>
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <__swsetup_r+0xd4>)
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d101      	bne.n	80042d2 <__swsetup_r+0x46>
 80042ce:	68ac      	ldr	r4, [r5, #8]
 80042d0:	e7eb      	b.n	80042aa <__swsetup_r+0x1e>
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <__swsetup_r+0xd8>)
 80042d4:	429c      	cmp	r4, r3
 80042d6:	bf08      	it	eq
 80042d8:	68ec      	ldreq	r4, [r5, #12]
 80042da:	e7e6      	b.n	80042aa <__swsetup_r+0x1e>
 80042dc:	0758      	lsls	r0, r3, #29
 80042de:	d512      	bpl.n	8004306 <__swsetup_r+0x7a>
 80042e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042e2:	b141      	cbz	r1, 80042f6 <__swsetup_r+0x6a>
 80042e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e8:	4299      	cmp	r1, r3
 80042ea:	d002      	beq.n	80042f2 <__swsetup_r+0x66>
 80042ec:	4630      	mov	r0, r6
 80042ee:	f001 fc8f 	bl	8005c10 <_free_r>
 80042f2:	2300      	movs	r3, #0
 80042f4:	6363      	str	r3, [r4, #52]	; 0x34
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	2300      	movs	r3, #0
 8004300:	6063      	str	r3, [r4, #4]
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	81a3      	strh	r3, [r4, #12]
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	b94b      	cbnz	r3, 8004326 <__swsetup_r+0x9a>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d003      	beq.n	8004326 <__swsetup_r+0x9a>
 800431e:	4621      	mov	r1, r4
 8004320:	4630      	mov	r0, r6
 8004322:	f001 f87b 	bl	800541c <__smakebuf_r>
 8004326:	89a0      	ldrh	r0, [r4, #12]
 8004328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800432c:	f010 0301 	ands.w	r3, r0, #1
 8004330:	d00a      	beq.n	8004348 <__swsetup_r+0xbc>
 8004332:	2300      	movs	r3, #0
 8004334:	60a3      	str	r3, [r4, #8]
 8004336:	6963      	ldr	r3, [r4, #20]
 8004338:	425b      	negs	r3, r3
 800433a:	61a3      	str	r3, [r4, #24]
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	b943      	cbnz	r3, 8004352 <__swsetup_r+0xc6>
 8004340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004344:	d1ba      	bne.n	80042bc <__swsetup_r+0x30>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	0781      	lsls	r1, r0, #30
 800434a:	bf58      	it	pl
 800434c:	6963      	ldrpl	r3, [r4, #20]
 800434e:	60a3      	str	r3, [r4, #8]
 8004350:	e7f4      	b.n	800433c <__swsetup_r+0xb0>
 8004352:	2000      	movs	r0, #0
 8004354:	e7f7      	b.n	8004346 <__swsetup_r+0xba>
 8004356:	bf00      	nop
 8004358:	2000000c 	.word	0x2000000c
 800435c:	0800654c 	.word	0x0800654c
 8004360:	0800656c 	.word	0x0800656c
 8004364:	0800652c 	.word	0x0800652c

08004368 <quorem>:
 8004368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	6903      	ldr	r3, [r0, #16]
 800436e:	690c      	ldr	r4, [r1, #16]
 8004370:	4607      	mov	r7, r0
 8004372:	42a3      	cmp	r3, r4
 8004374:	f2c0 8082 	blt.w	800447c <quorem+0x114>
 8004378:	3c01      	subs	r4, #1
 800437a:	f100 0514 	add.w	r5, r0, #20
 800437e:	f101 0814 	add.w	r8, r1, #20
 8004382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800438c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004390:	3301      	adds	r3, #1
 8004392:	429a      	cmp	r2, r3
 8004394:	fbb2 f6f3 	udiv	r6, r2, r3
 8004398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800439c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043a0:	d331      	bcc.n	8004406 <quorem+0x9e>
 80043a2:	f04f 0e00 	mov.w	lr, #0
 80043a6:	4640      	mov	r0, r8
 80043a8:	46ac      	mov	ip, r5
 80043aa:	46f2      	mov	sl, lr
 80043ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80043b0:	b293      	uxth	r3, r2
 80043b2:	fb06 e303 	mla	r3, r6, r3, lr
 80043b6:	0c12      	lsrs	r2, r2, #16
 80043b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80043bc:	b29b      	uxth	r3, r3
 80043be:	fb06 e202 	mla	r2, r6, r2, lr
 80043c2:	ebaa 0303 	sub.w	r3, sl, r3
 80043c6:	f8dc a000 	ldr.w	sl, [ip]
 80043ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80043ce:	fa1f fa8a 	uxth.w	sl, sl
 80043d2:	4453      	add	r3, sl
 80043d4:	f8dc a000 	ldr.w	sl, [ip]
 80043d8:	b292      	uxth	r2, r2
 80043da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80043de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e8:	4581      	cmp	r9, r0
 80043ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80043ee:	f84c 3b04 	str.w	r3, [ip], #4
 80043f2:	d2db      	bcs.n	80043ac <quorem+0x44>
 80043f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80043f8:	b92b      	cbnz	r3, 8004406 <quorem+0x9e>
 80043fa:	9b01      	ldr	r3, [sp, #4]
 80043fc:	3b04      	subs	r3, #4
 80043fe:	429d      	cmp	r5, r3
 8004400:	461a      	mov	r2, r3
 8004402:	d32f      	bcc.n	8004464 <quorem+0xfc>
 8004404:	613c      	str	r4, [r7, #16]
 8004406:	4638      	mov	r0, r7
 8004408:	f001 faea 	bl	80059e0 <__mcmp>
 800440c:	2800      	cmp	r0, #0
 800440e:	db25      	blt.n	800445c <quorem+0xf4>
 8004410:	4628      	mov	r0, r5
 8004412:	f04f 0c00 	mov.w	ip, #0
 8004416:	3601      	adds	r6, #1
 8004418:	f858 1b04 	ldr.w	r1, [r8], #4
 800441c:	f8d0 e000 	ldr.w	lr, [r0]
 8004420:	b28b      	uxth	r3, r1
 8004422:	ebac 0303 	sub.w	r3, ip, r3
 8004426:	fa1f f28e 	uxth.w	r2, lr
 800442a:	4413      	add	r3, r2
 800442c:	0c0a      	lsrs	r2, r1, #16
 800442e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004432:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800443c:	45c1      	cmp	r9, r8
 800443e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004442:	f840 3b04 	str.w	r3, [r0], #4
 8004446:	d2e7      	bcs.n	8004418 <quorem+0xb0>
 8004448:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800444c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004450:	b922      	cbnz	r2, 800445c <quorem+0xf4>
 8004452:	3b04      	subs	r3, #4
 8004454:	429d      	cmp	r5, r3
 8004456:	461a      	mov	r2, r3
 8004458:	d30a      	bcc.n	8004470 <quorem+0x108>
 800445a:	613c      	str	r4, [r7, #16]
 800445c:	4630      	mov	r0, r6
 800445e:	b003      	add	sp, #12
 8004460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	3b04      	subs	r3, #4
 8004468:	2a00      	cmp	r2, #0
 800446a:	d1cb      	bne.n	8004404 <quorem+0x9c>
 800446c:	3c01      	subs	r4, #1
 800446e:	e7c6      	b.n	80043fe <quorem+0x96>
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	3b04      	subs	r3, #4
 8004474:	2a00      	cmp	r2, #0
 8004476:	d1f0      	bne.n	800445a <quorem+0xf2>
 8004478:	3c01      	subs	r4, #1
 800447a:	e7eb      	b.n	8004454 <quorem+0xec>
 800447c:	2000      	movs	r0, #0
 800447e:	e7ee      	b.n	800445e <quorem+0xf6>

08004480 <_dtoa_r>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	4616      	mov	r6, r2
 8004486:	461f      	mov	r7, r3
 8004488:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800448a:	b099      	sub	sp, #100	; 0x64
 800448c:	4605      	mov	r5, r0
 800448e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004492:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004496:	b974      	cbnz	r4, 80044b6 <_dtoa_r+0x36>
 8004498:	2010      	movs	r0, #16
 800449a:	f000 ffff 	bl	800549c <malloc>
 800449e:	4602      	mov	r2, r0
 80044a0:	6268      	str	r0, [r5, #36]	; 0x24
 80044a2:	b920      	cbnz	r0, 80044ae <_dtoa_r+0x2e>
 80044a4:	21ea      	movs	r1, #234	; 0xea
 80044a6:	4ba8      	ldr	r3, [pc, #672]	; (8004748 <_dtoa_r+0x2c8>)
 80044a8:	48a8      	ldr	r0, [pc, #672]	; (800474c <_dtoa_r+0x2cc>)
 80044aa:	f001 fe4b 	bl	8006144 <__assert_func>
 80044ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044b2:	6004      	str	r4, [r0, #0]
 80044b4:	60c4      	str	r4, [r0, #12]
 80044b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	b151      	cbz	r1, 80044d2 <_dtoa_r+0x52>
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	2301      	movs	r3, #1
 80044c0:	4093      	lsls	r3, r2
 80044c2:	604a      	str	r2, [r1, #4]
 80044c4:	608b      	str	r3, [r1, #8]
 80044c6:	4628      	mov	r0, r5
 80044c8:	f001 f84c 	bl	8005564 <_Bfree>
 80044cc:	2200      	movs	r2, #0
 80044ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	1e3b      	subs	r3, r7, #0
 80044d4:	bfaf      	iteee	ge
 80044d6:	2300      	movge	r3, #0
 80044d8:	2201      	movlt	r2, #1
 80044da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80044de:	9305      	strlt	r3, [sp, #20]
 80044e0:	bfa8      	it	ge
 80044e2:	f8c8 3000 	strge.w	r3, [r8]
 80044e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80044ea:	4b99      	ldr	r3, [pc, #612]	; (8004750 <_dtoa_r+0x2d0>)
 80044ec:	bfb8      	it	lt
 80044ee:	f8c8 2000 	strlt.w	r2, [r8]
 80044f2:	ea33 0309 	bics.w	r3, r3, r9
 80044f6:	d119      	bne.n	800452c <_dtoa_r+0xac>
 80044f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80044fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004504:	4333      	orrs	r3, r6
 8004506:	f000 857f 	beq.w	8005008 <_dtoa_r+0xb88>
 800450a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800450c:	b953      	cbnz	r3, 8004524 <_dtoa_r+0xa4>
 800450e:	4b91      	ldr	r3, [pc, #580]	; (8004754 <_dtoa_r+0x2d4>)
 8004510:	e022      	b.n	8004558 <_dtoa_r+0xd8>
 8004512:	4b91      	ldr	r3, [pc, #580]	; (8004758 <_dtoa_r+0x2d8>)
 8004514:	9303      	str	r3, [sp, #12]
 8004516:	3308      	adds	r3, #8
 8004518:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	9803      	ldr	r0, [sp, #12]
 800451e:	b019      	add	sp, #100	; 0x64
 8004520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004524:	4b8b      	ldr	r3, [pc, #556]	; (8004754 <_dtoa_r+0x2d4>)
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	3303      	adds	r3, #3
 800452a:	e7f5      	b.n	8004518 <_dtoa_r+0x98>
 800452c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004530:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	f7fc fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8004540:	4680      	mov	r8, r0
 8004542:	b158      	cbz	r0, 800455c <_dtoa_r+0xdc>
 8004544:	2301      	movs	r3, #1
 8004546:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8558 	beq.w	8005002 <_dtoa_r+0xb82>
 8004552:	4882      	ldr	r0, [pc, #520]	; (800475c <_dtoa_r+0x2dc>)
 8004554:	6018      	str	r0, [r3, #0]
 8004556:	1e43      	subs	r3, r0, #1
 8004558:	9303      	str	r3, [sp, #12]
 800455a:	e7df      	b.n	800451c <_dtoa_r+0x9c>
 800455c:	ab16      	add	r3, sp, #88	; 0x58
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	ab17      	add	r3, sp, #92	; 0x5c
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4628      	mov	r0, r5
 8004566:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800456a:	f001 fae1 	bl	8005b30 <__d2b>
 800456e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004572:	4683      	mov	fp, r0
 8004574:	2c00      	cmp	r4, #0
 8004576:	d07f      	beq.n	8004678 <_dtoa_r+0x1f8>
 8004578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800457c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800457e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004586:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800458a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800458e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004592:	2200      	movs	r2, #0
 8004594:	4b72      	ldr	r3, [pc, #456]	; (8004760 <_dtoa_r+0x2e0>)
 8004596:	f7fb fde7 	bl	8000168 <__aeabi_dsub>
 800459a:	a365      	add	r3, pc, #404	; (adr r3, 8004730 <_dtoa_r+0x2b0>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fb ff9a 	bl	80004d8 <__aeabi_dmul>
 80045a4:	a364      	add	r3, pc, #400	; (adr r3, 8004738 <_dtoa_r+0x2b8>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f7fb fddf 	bl	800016c <__adddf3>
 80045ae:	4606      	mov	r6, r0
 80045b0:	4620      	mov	r0, r4
 80045b2:	460f      	mov	r7, r1
 80045b4:	f7fb ff26 	bl	8000404 <__aeabi_i2d>
 80045b8:	a361      	add	r3, pc, #388	; (adr r3, 8004740 <_dtoa_r+0x2c0>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fb ff8b 	bl	80004d8 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4630      	mov	r0, r6
 80045c8:	4639      	mov	r1, r7
 80045ca:	f7fb fdcf 	bl	800016c <__adddf3>
 80045ce:	4606      	mov	r6, r0
 80045d0:	460f      	mov	r7, r1
 80045d2:	f7fc fa31 	bl	8000a38 <__aeabi_d2iz>
 80045d6:	2200      	movs	r2, #0
 80045d8:	4682      	mov	sl, r0
 80045da:	2300      	movs	r3, #0
 80045dc:	4630      	mov	r0, r6
 80045de:	4639      	mov	r1, r7
 80045e0:	f7fc f9ec 	bl	80009bc <__aeabi_dcmplt>
 80045e4:	b148      	cbz	r0, 80045fa <_dtoa_r+0x17a>
 80045e6:	4650      	mov	r0, sl
 80045e8:	f7fb ff0c 	bl	8000404 <__aeabi_i2d>
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
 80045f0:	f7fc f9da 	bl	80009a8 <__aeabi_dcmpeq>
 80045f4:	b908      	cbnz	r0, 80045fa <_dtoa_r+0x17a>
 80045f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045fa:	f1ba 0f16 	cmp.w	sl, #22
 80045fe:	d858      	bhi.n	80046b2 <_dtoa_r+0x232>
 8004600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004604:	4b57      	ldr	r3, [pc, #348]	; (8004764 <_dtoa_r+0x2e4>)
 8004606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fc f9d5 	bl	80009bc <__aeabi_dcmplt>
 8004612:	2800      	cmp	r0, #0
 8004614:	d04f      	beq.n	80046b6 <_dtoa_r+0x236>
 8004616:	2300      	movs	r3, #0
 8004618:	f10a 3aff 	add.w	sl, sl, #4294967295
 800461c:	930f      	str	r3, [sp, #60]	; 0x3c
 800461e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004620:	1b1c      	subs	r4, r3, r4
 8004622:	1e63      	subs	r3, r4, #1
 8004624:	9309      	str	r3, [sp, #36]	; 0x24
 8004626:	bf49      	itett	mi
 8004628:	f1c4 0301 	rsbmi	r3, r4, #1
 800462c:	2300      	movpl	r3, #0
 800462e:	9306      	strmi	r3, [sp, #24]
 8004630:	2300      	movmi	r3, #0
 8004632:	bf54      	ite	pl
 8004634:	9306      	strpl	r3, [sp, #24]
 8004636:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004638:	f1ba 0f00 	cmp.w	sl, #0
 800463c:	db3d      	blt.n	80046ba <_dtoa_r+0x23a>
 800463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004640:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004644:	4453      	add	r3, sl
 8004646:	9309      	str	r3, [sp, #36]	; 0x24
 8004648:	2300      	movs	r3, #0
 800464a:	930a      	str	r3, [sp, #40]	; 0x28
 800464c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800464e:	2b09      	cmp	r3, #9
 8004650:	f200 808c 	bhi.w	800476c <_dtoa_r+0x2ec>
 8004654:	2b05      	cmp	r3, #5
 8004656:	bfc4      	itt	gt
 8004658:	3b04      	subgt	r3, #4
 800465a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800465c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800465e:	bfc8      	it	gt
 8004660:	2400      	movgt	r4, #0
 8004662:	f1a3 0302 	sub.w	r3, r3, #2
 8004666:	bfd8      	it	le
 8004668:	2401      	movle	r4, #1
 800466a:	2b03      	cmp	r3, #3
 800466c:	f200 808a 	bhi.w	8004784 <_dtoa_r+0x304>
 8004670:	e8df f003 	tbb	[pc, r3]
 8004674:	5b4d4f2d 	.word	0x5b4d4f2d
 8004678:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800467c:	441c      	add	r4, r3
 800467e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004682:	2b20      	cmp	r3, #32
 8004684:	bfc3      	ittte	gt
 8004686:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800468a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800468e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004692:	f1c3 0320 	rsble	r3, r3, #32
 8004696:	bfc6      	itte	gt
 8004698:	fa26 f000 	lsrgt.w	r0, r6, r0
 800469c:	4318      	orrgt	r0, r3
 800469e:	fa06 f003 	lslle.w	r0, r6, r3
 80046a2:	f7fb fe9f 	bl	80003e4 <__aeabi_ui2d>
 80046a6:	2301      	movs	r3, #1
 80046a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80046ac:	3c01      	subs	r4, #1
 80046ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80046b0:	e76f      	b.n	8004592 <_dtoa_r+0x112>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e7b2      	b.n	800461c <_dtoa_r+0x19c>
 80046b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80046b8:	e7b1      	b.n	800461e <_dtoa_r+0x19e>
 80046ba:	9b06      	ldr	r3, [sp, #24]
 80046bc:	eba3 030a 	sub.w	r3, r3, sl
 80046c0:	9306      	str	r3, [sp, #24]
 80046c2:	f1ca 0300 	rsb	r3, sl, #0
 80046c6:	930a      	str	r3, [sp, #40]	; 0x28
 80046c8:	2300      	movs	r3, #0
 80046ca:	930e      	str	r3, [sp, #56]	; 0x38
 80046cc:	e7be      	b.n	800464c <_dtoa_r+0x1cc>
 80046ce:	2300      	movs	r3, #0
 80046d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	dc58      	bgt.n	800478a <_dtoa_r+0x30a>
 80046d8:	f04f 0901 	mov.w	r9, #1
 80046dc:	464b      	mov	r3, r9
 80046de:	f8cd 9020 	str.w	r9, [sp, #32]
 80046e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80046e6:	2200      	movs	r2, #0
 80046e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80046ea:	6042      	str	r2, [r0, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	f102 0614 	add.w	r6, r2, #20
 80046f2:	429e      	cmp	r6, r3
 80046f4:	6841      	ldr	r1, [r0, #4]
 80046f6:	d94e      	bls.n	8004796 <_dtoa_r+0x316>
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fef3 	bl	80054e4 <_Balloc>
 80046fe:	9003      	str	r0, [sp, #12]
 8004700:	2800      	cmp	r0, #0
 8004702:	d14c      	bne.n	800479e <_dtoa_r+0x31e>
 8004704:	4602      	mov	r2, r0
 8004706:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <_dtoa_r+0x2e8>)
 800470c:	e6cc      	b.n	80044a8 <_dtoa_r+0x28>
 800470e:	2301      	movs	r3, #1
 8004710:	e7de      	b.n	80046d0 <_dtoa_r+0x250>
 8004712:	2300      	movs	r3, #0
 8004714:	930b      	str	r3, [sp, #44]	; 0x2c
 8004716:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004718:	eb0a 0903 	add.w	r9, sl, r3
 800471c:	f109 0301 	add.w	r3, r9, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	9308      	str	r3, [sp, #32]
 8004724:	bfb8      	it	lt
 8004726:	2301      	movlt	r3, #1
 8004728:	e7dd      	b.n	80046e6 <_dtoa_r+0x266>
 800472a:	2301      	movs	r3, #1
 800472c:	e7f2      	b.n	8004714 <_dtoa_r+0x294>
 800472e:	bf00      	nop
 8004730:	636f4361 	.word	0x636f4361
 8004734:	3fd287a7 	.word	0x3fd287a7
 8004738:	8b60c8b3 	.word	0x8b60c8b3
 800473c:	3fc68a28 	.word	0x3fc68a28
 8004740:	509f79fb 	.word	0x509f79fb
 8004744:	3fd34413 	.word	0x3fd34413
 8004748:	080064a9 	.word	0x080064a9
 800474c:	080064c0 	.word	0x080064c0
 8004750:	7ff00000 	.word	0x7ff00000
 8004754:	080064a5 	.word	0x080064a5
 8004758:	0800649c 	.word	0x0800649c
 800475c:	08006479 	.word	0x08006479
 8004760:	3ff80000 	.word	0x3ff80000
 8004764:	08006610 	.word	0x08006610
 8004768:	0800651b 	.word	0x0800651b
 800476c:	2401      	movs	r4, #1
 800476e:	2300      	movs	r3, #0
 8004770:	940b      	str	r4, [sp, #44]	; 0x2c
 8004772:	9322      	str	r3, [sp, #136]	; 0x88
 8004774:	f04f 39ff 	mov.w	r9, #4294967295
 8004778:	2200      	movs	r2, #0
 800477a:	2312      	movs	r3, #18
 800477c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004780:	9223      	str	r2, [sp, #140]	; 0x8c
 8004782:	e7b0      	b.n	80046e6 <_dtoa_r+0x266>
 8004784:	2301      	movs	r3, #1
 8004786:	930b      	str	r3, [sp, #44]	; 0x2c
 8004788:	e7f4      	b.n	8004774 <_dtoa_r+0x2f4>
 800478a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800478e:	464b      	mov	r3, r9
 8004790:	f8cd 9020 	str.w	r9, [sp, #32]
 8004794:	e7a7      	b.n	80046e6 <_dtoa_r+0x266>
 8004796:	3101      	adds	r1, #1
 8004798:	6041      	str	r1, [r0, #4]
 800479a:	0052      	lsls	r2, r2, #1
 800479c:	e7a7      	b.n	80046ee <_dtoa_r+0x26e>
 800479e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047a0:	9a03      	ldr	r2, [sp, #12]
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	9b08      	ldr	r3, [sp, #32]
 80047a6:	2b0e      	cmp	r3, #14
 80047a8:	f200 80a8 	bhi.w	80048fc <_dtoa_r+0x47c>
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	f000 80a5 	beq.w	80048fc <_dtoa_r+0x47c>
 80047b2:	f1ba 0f00 	cmp.w	sl, #0
 80047b6:	dd34      	ble.n	8004822 <_dtoa_r+0x3a2>
 80047b8:	4a9a      	ldr	r2, [pc, #616]	; (8004a24 <_dtoa_r+0x5a4>)
 80047ba:	f00a 030f 	and.w	r3, sl, #15
 80047be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80047c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80047ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80047d2:	d016      	beq.n	8004802 <_dtoa_r+0x382>
 80047d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047d8:	4b93      	ldr	r3, [pc, #588]	; (8004a28 <_dtoa_r+0x5a8>)
 80047da:	2703      	movs	r7, #3
 80047dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047e0:	f7fb ffa4 	bl	800072c <__aeabi_ddiv>
 80047e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047e8:	f004 040f 	and.w	r4, r4, #15
 80047ec:	4e8e      	ldr	r6, [pc, #568]	; (8004a28 <_dtoa_r+0x5a8>)
 80047ee:	b954      	cbnz	r4, 8004806 <_dtoa_r+0x386>
 80047f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047f8:	f7fb ff98 	bl	800072c <__aeabi_ddiv>
 80047fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004800:	e029      	b.n	8004856 <_dtoa_r+0x3d6>
 8004802:	2702      	movs	r7, #2
 8004804:	e7f2      	b.n	80047ec <_dtoa_r+0x36c>
 8004806:	07e1      	lsls	r1, r4, #31
 8004808:	d508      	bpl.n	800481c <_dtoa_r+0x39c>
 800480a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800480e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004812:	f7fb fe61 	bl	80004d8 <__aeabi_dmul>
 8004816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800481a:	3701      	adds	r7, #1
 800481c:	1064      	asrs	r4, r4, #1
 800481e:	3608      	adds	r6, #8
 8004820:	e7e5      	b.n	80047ee <_dtoa_r+0x36e>
 8004822:	f000 80a5 	beq.w	8004970 <_dtoa_r+0x4f0>
 8004826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800482a:	f1ca 0400 	rsb	r4, sl, #0
 800482e:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <_dtoa_r+0x5a4>)
 8004830:	f004 020f 	and.w	r2, r4, #15
 8004834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb fe4c 	bl	80004d8 <__aeabi_dmul>
 8004840:	2702      	movs	r7, #2
 8004842:	2300      	movs	r3, #0
 8004844:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004848:	4e77      	ldr	r6, [pc, #476]	; (8004a28 <_dtoa_r+0x5a8>)
 800484a:	1124      	asrs	r4, r4, #4
 800484c:	2c00      	cmp	r4, #0
 800484e:	f040 8084 	bne.w	800495a <_dtoa_r+0x4da>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1d2      	bne.n	80047fc <_dtoa_r+0x37c>
 8004856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 808b 	beq.w	8004974 <_dtoa_r+0x4f4>
 800485e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004862:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004866:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800486a:	2200      	movs	r2, #0
 800486c:	4b6f      	ldr	r3, [pc, #444]	; (8004a2c <_dtoa_r+0x5ac>)
 800486e:	f7fc f8a5 	bl	80009bc <__aeabi_dcmplt>
 8004872:	2800      	cmp	r0, #0
 8004874:	d07e      	beq.n	8004974 <_dtoa_r+0x4f4>
 8004876:	9b08      	ldr	r3, [sp, #32]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d07b      	beq.n	8004974 <_dtoa_r+0x4f4>
 800487c:	f1b9 0f00 	cmp.w	r9, #0
 8004880:	dd38      	ble.n	80048f4 <_dtoa_r+0x474>
 8004882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004886:	2200      	movs	r2, #0
 8004888:	4b69      	ldr	r3, [pc, #420]	; (8004a30 <_dtoa_r+0x5b0>)
 800488a:	f7fb fe25 	bl	80004d8 <__aeabi_dmul>
 800488e:	464c      	mov	r4, r9
 8004890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004894:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004898:	3701      	adds	r7, #1
 800489a:	4638      	mov	r0, r7
 800489c:	f7fb fdb2 	bl	8000404 <__aeabi_i2d>
 80048a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048a4:	f7fb fe18 	bl	80004d8 <__aeabi_dmul>
 80048a8:	2200      	movs	r2, #0
 80048aa:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <_dtoa_r+0x5b4>)
 80048ac:	f7fb fc5e 	bl	800016c <__adddf3>
 80048b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80048b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048b8:	9611      	str	r6, [sp, #68]	; 0x44
 80048ba:	2c00      	cmp	r4, #0
 80048bc:	d15d      	bne.n	800497a <_dtoa_r+0x4fa>
 80048be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048c2:	2200      	movs	r2, #0
 80048c4:	4b5c      	ldr	r3, [pc, #368]	; (8004a38 <_dtoa_r+0x5b8>)
 80048c6:	f7fb fc4f 	bl	8000168 <__aeabi_dsub>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048d2:	4633      	mov	r3, r6
 80048d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048d6:	f7fc f88f 	bl	80009f8 <__aeabi_dcmpgt>
 80048da:	2800      	cmp	r0, #0
 80048dc:	f040 829c 	bne.w	8004e18 <_dtoa_r+0x998>
 80048e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80048ea:	f7fc f867 	bl	80009bc <__aeabi_dcmplt>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f040 8290 	bne.w	8004e14 <_dtoa_r+0x994>
 80048f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80048f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80048fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f2c0 8152 	blt.w	8004ba8 <_dtoa_r+0x728>
 8004904:	f1ba 0f0e 	cmp.w	sl, #14
 8004908:	f300 814e 	bgt.w	8004ba8 <_dtoa_r+0x728>
 800490c:	4b45      	ldr	r3, [pc, #276]	; (8004a24 <_dtoa_r+0x5a4>)
 800490e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004912:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004916:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800491a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800491c:	2b00      	cmp	r3, #0
 800491e:	f280 80db 	bge.w	8004ad8 <_dtoa_r+0x658>
 8004922:	9b08      	ldr	r3, [sp, #32]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f300 80d7 	bgt.w	8004ad8 <_dtoa_r+0x658>
 800492a:	f040 8272 	bne.w	8004e12 <_dtoa_r+0x992>
 800492e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004932:	2200      	movs	r2, #0
 8004934:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <_dtoa_r+0x5b8>)
 8004936:	f7fb fdcf 	bl	80004d8 <__aeabi_dmul>
 800493a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800493e:	f7fc f851 	bl	80009e4 <__aeabi_dcmpge>
 8004942:	9c08      	ldr	r4, [sp, #32]
 8004944:	4626      	mov	r6, r4
 8004946:	2800      	cmp	r0, #0
 8004948:	f040 8248 	bne.w	8004ddc <_dtoa_r+0x95c>
 800494c:	2331      	movs	r3, #49	; 0x31
 800494e:	9f03      	ldr	r7, [sp, #12]
 8004950:	f10a 0a01 	add.w	sl, sl, #1
 8004954:	f807 3b01 	strb.w	r3, [r7], #1
 8004958:	e244      	b.n	8004de4 <_dtoa_r+0x964>
 800495a:	07e2      	lsls	r2, r4, #31
 800495c:	d505      	bpl.n	800496a <_dtoa_r+0x4ea>
 800495e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004962:	f7fb fdb9 	bl	80004d8 <__aeabi_dmul>
 8004966:	2301      	movs	r3, #1
 8004968:	3701      	adds	r7, #1
 800496a:	1064      	asrs	r4, r4, #1
 800496c:	3608      	adds	r6, #8
 800496e:	e76d      	b.n	800484c <_dtoa_r+0x3cc>
 8004970:	2702      	movs	r7, #2
 8004972:	e770      	b.n	8004856 <_dtoa_r+0x3d6>
 8004974:	46d0      	mov	r8, sl
 8004976:	9c08      	ldr	r4, [sp, #32]
 8004978:	e78f      	b.n	800489a <_dtoa_r+0x41a>
 800497a:	9903      	ldr	r1, [sp, #12]
 800497c:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <_dtoa_r+0x5a4>)
 800497e:	4421      	add	r1, r4
 8004980:	9112      	str	r1, [sp, #72]	; 0x48
 8004982:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004984:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004988:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800498c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004990:	2900      	cmp	r1, #0
 8004992:	d055      	beq.n	8004a40 <_dtoa_r+0x5c0>
 8004994:	2000      	movs	r0, #0
 8004996:	4929      	ldr	r1, [pc, #164]	; (8004a3c <_dtoa_r+0x5bc>)
 8004998:	f7fb fec8 	bl	800072c <__aeabi_ddiv>
 800499c:	463b      	mov	r3, r7
 800499e:	4632      	mov	r2, r6
 80049a0:	f7fb fbe2 	bl	8000168 <__aeabi_dsub>
 80049a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049a8:	9f03      	ldr	r7, [sp, #12]
 80049aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ae:	f7fc f843 	bl	8000a38 <__aeabi_d2iz>
 80049b2:	4604      	mov	r4, r0
 80049b4:	f7fb fd26 	bl	8000404 <__aeabi_i2d>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049c0:	f7fb fbd2 	bl	8000168 <__aeabi_dsub>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	3430      	adds	r4, #48	; 0x30
 80049ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049d2:	f807 4b01 	strb.w	r4, [r7], #1
 80049d6:	f7fb fff1 	bl	80009bc <__aeabi_dcmplt>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d174      	bne.n	8004ac8 <_dtoa_r+0x648>
 80049de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049e2:	2000      	movs	r0, #0
 80049e4:	4911      	ldr	r1, [pc, #68]	; (8004a2c <_dtoa_r+0x5ac>)
 80049e6:	f7fb fbbf 	bl	8000168 <__aeabi_dsub>
 80049ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049ee:	f7fb ffe5 	bl	80009bc <__aeabi_dcmplt>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	f040 80b7 	bne.w	8004b66 <_dtoa_r+0x6e6>
 80049f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049fa:	429f      	cmp	r7, r3
 80049fc:	f43f af7a 	beq.w	80048f4 <_dtoa_r+0x474>
 8004a00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a04:	2200      	movs	r2, #0
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <_dtoa_r+0x5b0>)
 8004a08:	f7fb fd66 	bl	80004d8 <__aeabi_dmul>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <_dtoa_r+0x5b0>)
 8004a18:	f7fb fd5e 	bl	80004d8 <__aeabi_dmul>
 8004a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a20:	e7c3      	b.n	80049aa <_dtoa_r+0x52a>
 8004a22:	bf00      	nop
 8004a24:	08006610 	.word	0x08006610
 8004a28:	080065e8 	.word	0x080065e8
 8004a2c:	3ff00000 	.word	0x3ff00000
 8004a30:	40240000 	.word	0x40240000
 8004a34:	401c0000 	.word	0x401c0000
 8004a38:	40140000 	.word	0x40140000
 8004a3c:	3fe00000 	.word	0x3fe00000
 8004a40:	4630      	mov	r0, r6
 8004a42:	4639      	mov	r1, r7
 8004a44:	f7fb fd48 	bl	80004d8 <__aeabi_dmul>
 8004a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a4e:	9c03      	ldr	r4, [sp, #12]
 8004a50:	9314      	str	r3, [sp, #80]	; 0x50
 8004a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a56:	f7fb ffef 	bl	8000a38 <__aeabi_d2iz>
 8004a5a:	9015      	str	r0, [sp, #84]	; 0x54
 8004a5c:	f7fb fcd2 	bl	8000404 <__aeabi_i2d>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a68:	f7fb fb7e 	bl	8000168 <__aeabi_dsub>
 8004a6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a6e:	4606      	mov	r6, r0
 8004a70:	3330      	adds	r3, #48	; 0x30
 8004a72:	f804 3b01 	strb.w	r3, [r4], #1
 8004a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a78:	460f      	mov	r7, r1
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	d124      	bne.n	8004acc <_dtoa_r+0x64c>
 8004a82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a86:	4bb0      	ldr	r3, [pc, #704]	; (8004d48 <_dtoa_r+0x8c8>)
 8004a88:	f7fb fb70 	bl	800016c <__adddf3>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4630      	mov	r0, r6
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fb ffb0 	bl	80009f8 <__aeabi_dcmpgt>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d163      	bne.n	8004b64 <_dtoa_r+0x6e4>
 8004a9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	49a9      	ldr	r1, [pc, #676]	; (8004d48 <_dtoa_r+0x8c8>)
 8004aa4:	f7fb fb60 	bl	8000168 <__aeabi_dsub>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4630      	mov	r0, r6
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f7fb ff84 	bl	80009bc <__aeabi_dcmplt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f43f af1d 	beq.w	80048f4 <_dtoa_r+0x474>
 8004aba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004abc:	1e7b      	subs	r3, r7, #1
 8004abe:	9314      	str	r3, [sp, #80]	; 0x50
 8004ac0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d0f8      	beq.n	8004aba <_dtoa_r+0x63a>
 8004ac8:	46c2      	mov	sl, r8
 8004aca:	e03b      	b.n	8004b44 <_dtoa_r+0x6c4>
 8004acc:	4b9f      	ldr	r3, [pc, #636]	; (8004d4c <_dtoa_r+0x8cc>)
 8004ace:	f7fb fd03 	bl	80004d8 <__aeabi_dmul>
 8004ad2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ad6:	e7bc      	b.n	8004a52 <_dtoa_r+0x5d2>
 8004ad8:	9f03      	ldr	r7, [sp, #12]
 8004ada:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004ade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	f7fb fe21 	bl	800072c <__aeabi_ddiv>
 8004aea:	f7fb ffa5 	bl	8000a38 <__aeabi_d2iz>
 8004aee:	4604      	mov	r4, r0
 8004af0:	f7fb fc88 	bl	8000404 <__aeabi_i2d>
 8004af4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004af8:	f7fb fcee 	bl	80004d8 <__aeabi_dmul>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4640      	mov	r0, r8
 8004b02:	4649      	mov	r1, r9
 8004b04:	f7fb fb30 	bl	8000168 <__aeabi_dsub>
 8004b08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004b0c:	f807 6b01 	strb.w	r6, [r7], #1
 8004b10:	9e03      	ldr	r6, [sp, #12]
 8004b12:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004b16:	1bbe      	subs	r6, r7, r6
 8004b18:	45b4      	cmp	ip, r6
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	d136      	bne.n	8004b8e <_dtoa_r+0x70e>
 8004b20:	f7fb fb24 	bl	800016c <__adddf3>
 8004b24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b28:	4680      	mov	r8, r0
 8004b2a:	4689      	mov	r9, r1
 8004b2c:	f7fb ff64 	bl	80009f8 <__aeabi_dcmpgt>
 8004b30:	bb58      	cbnz	r0, 8004b8a <_dtoa_r+0x70a>
 8004b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b36:	4640      	mov	r0, r8
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb ff35 	bl	80009a8 <__aeabi_dcmpeq>
 8004b3e:	b108      	cbz	r0, 8004b44 <_dtoa_r+0x6c4>
 8004b40:	07e1      	lsls	r1, r4, #31
 8004b42:	d422      	bmi.n	8004b8a <_dtoa_r+0x70a>
 8004b44:	4628      	mov	r0, r5
 8004b46:	4659      	mov	r1, fp
 8004b48:	f000 fd0c 	bl	8005564 <_Bfree>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	703b      	strb	r3, [r7, #0]
 8004b50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004b52:	f10a 0001 	add.w	r0, sl, #1
 8004b56:	6018      	str	r0, [r3, #0]
 8004b58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f43f acde 	beq.w	800451c <_dtoa_r+0x9c>
 8004b60:	601f      	str	r7, [r3, #0]
 8004b62:	e4db      	b.n	800451c <_dtoa_r+0x9c>
 8004b64:	4627      	mov	r7, r4
 8004b66:	463b      	mov	r3, r7
 8004b68:	461f      	mov	r7, r3
 8004b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b6e:	2a39      	cmp	r2, #57	; 0x39
 8004b70:	d107      	bne.n	8004b82 <_dtoa_r+0x702>
 8004b72:	9a03      	ldr	r2, [sp, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d1f7      	bne.n	8004b68 <_dtoa_r+0x6e8>
 8004b78:	2230      	movs	r2, #48	; 0x30
 8004b7a:	9903      	ldr	r1, [sp, #12]
 8004b7c:	f108 0801 	add.w	r8, r8, #1
 8004b80:	700a      	strb	r2, [r1, #0]
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	3201      	adds	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e79e      	b.n	8004ac8 <_dtoa_r+0x648>
 8004b8a:	46d0      	mov	r8, sl
 8004b8c:	e7eb      	b.n	8004b66 <_dtoa_r+0x6e6>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4b6e      	ldr	r3, [pc, #440]	; (8004d4c <_dtoa_r+0x8cc>)
 8004b92:	f7fb fca1 	bl	80004d8 <__aeabi_dmul>
 8004b96:	2200      	movs	r2, #0
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	4689      	mov	r9, r1
 8004b9e:	f7fb ff03 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d09b      	beq.n	8004ade <_dtoa_r+0x65e>
 8004ba6:	e7cd      	b.n	8004b44 <_dtoa_r+0x6c4>
 8004ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	f000 80d0 	beq.w	8004d50 <_dtoa_r+0x8d0>
 8004bb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bb2:	2a01      	cmp	r2, #1
 8004bb4:	f300 80ae 	bgt.w	8004d14 <_dtoa_r+0x894>
 8004bb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	f000 80a6 	beq.w	8004d0c <_dtoa_r+0x88c>
 8004bc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004bc6:	9f06      	ldr	r7, [sp, #24]
 8004bc8:	9a06      	ldr	r2, [sp, #24]
 8004bca:	2101      	movs	r1, #1
 8004bcc:	441a      	add	r2, r3
 8004bce:	9206      	str	r2, [sp, #24]
 8004bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	441a      	add	r2, r3
 8004bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004bd8:	f000 fd7a 	bl	80056d0 <__i2b>
 8004bdc:	4606      	mov	r6, r0
 8004bde:	2f00      	cmp	r7, #0
 8004be0:	dd0c      	ble.n	8004bfc <_dtoa_r+0x77c>
 8004be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dd09      	ble.n	8004bfc <_dtoa_r+0x77c>
 8004be8:	42bb      	cmp	r3, r7
 8004bea:	bfa8      	it	ge
 8004bec:	463b      	movge	r3, r7
 8004bee:	9a06      	ldr	r2, [sp, #24]
 8004bf0:	1aff      	subs	r7, r7, r3
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	9206      	str	r2, [sp, #24]
 8004bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bfe:	b1f3      	cbz	r3, 8004c3e <_dtoa_r+0x7be>
 8004c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 80a8 	beq.w	8004d58 <_dtoa_r+0x8d8>
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	dd10      	ble.n	8004c2e <_dtoa_r+0x7ae>
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4622      	mov	r2, r4
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 fe1b 	bl	800584c <__pow5mult>
 8004c16:	465a      	mov	r2, fp
 8004c18:	4601      	mov	r1, r0
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 fd6d 	bl	80056fc <__multiply>
 8004c22:	4680      	mov	r8, r0
 8004c24:	4659      	mov	r1, fp
 8004c26:	4628      	mov	r0, r5
 8004c28:	f000 fc9c 	bl	8005564 <_Bfree>
 8004c2c:	46c3      	mov	fp, r8
 8004c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c30:	1b1a      	subs	r2, r3, r4
 8004c32:	d004      	beq.n	8004c3e <_dtoa_r+0x7be>
 8004c34:	4659      	mov	r1, fp
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 fe08 	bl	800584c <__pow5mult>
 8004c3c:	4683      	mov	fp, r0
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fd45 	bl	80056d0 <__i2b>
 8004c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c48:	4604      	mov	r4, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f340 8086 	ble.w	8004d5c <_dtoa_r+0x8dc>
 8004c50:	461a      	mov	r2, r3
 8004c52:	4601      	mov	r1, r0
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 fdf9 	bl	800584c <__pow5mult>
 8004c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	dd7f      	ble.n	8004d62 <_dtoa_r+0x8e2>
 8004c62:	f04f 0800 	mov.w	r8, #0
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c6c:	6918      	ldr	r0, [r3, #16]
 8004c6e:	f000 fce1 	bl	8005634 <__hi0bits>
 8004c72:	f1c0 0020 	rsb	r0, r0, #32
 8004c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c78:	4418      	add	r0, r3
 8004c7a:	f010 001f 	ands.w	r0, r0, #31
 8004c7e:	f000 8092 	beq.w	8004da6 <_dtoa_r+0x926>
 8004c82:	f1c0 0320 	rsb	r3, r0, #32
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	f340 808a 	ble.w	8004da0 <_dtoa_r+0x920>
 8004c8c:	f1c0 001c 	rsb	r0, r0, #28
 8004c90:	9b06      	ldr	r3, [sp, #24]
 8004c92:	4407      	add	r7, r0
 8004c94:	4403      	add	r3, r0
 8004c96:	9306      	str	r3, [sp, #24]
 8004c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9a:	4403      	add	r3, r0
 8004c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9e:	9b06      	ldr	r3, [sp, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dd05      	ble.n	8004cb0 <_dtoa_r+0x830>
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 fe29 	bl	8005900 <__lshift>
 8004cae:	4683      	mov	fp, r0
 8004cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dd05      	ble.n	8004cc2 <_dtoa_r+0x842>
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 fe20 	bl	8005900 <__lshift>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d070      	beq.n	8004daa <_dtoa_r+0x92a>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4658      	mov	r0, fp
 8004ccc:	f000 fe88 	bl	80059e0 <__mcmp>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	da6a      	bge.n	8004daa <_dtoa_r+0x92a>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4659      	mov	r1, fp
 8004cd8:	220a      	movs	r2, #10
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 fc64 	bl	80055a8 <__multadd>
 8004ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce2:	4683      	mov	fp, r0
 8004ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8194 	beq.w	8005016 <_dtoa_r+0xb96>
 8004cee:	4631      	mov	r1, r6
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	220a      	movs	r2, #10
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 fc57 	bl	80055a8 <__multadd>
 8004cfa:	f1b9 0f00 	cmp.w	r9, #0
 8004cfe:	4606      	mov	r6, r0
 8004d00:	f300 8093 	bgt.w	8004e2a <_dtoa_r+0x9aa>
 8004d04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	dc57      	bgt.n	8004dba <_dtoa_r+0x93a>
 8004d0a:	e08e      	b.n	8004e2a <_dtoa_r+0x9aa>
 8004d0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d12:	e757      	b.n	8004bc4 <_dtoa_r+0x744>
 8004d14:	9b08      	ldr	r3, [sp, #32]
 8004d16:	1e5c      	subs	r4, r3, #1
 8004d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d1a:	42a3      	cmp	r3, r4
 8004d1c:	bfb7      	itett	lt
 8004d1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d20:	1b1c      	subge	r4, r3, r4
 8004d22:	1ae2      	sublt	r2, r4, r3
 8004d24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d26:	bfbe      	ittt	lt
 8004d28:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004d2a:	189b      	addlt	r3, r3, r2
 8004d2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	bfb8      	it	lt
 8004d32:	2400      	movlt	r4, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfbb      	ittet	lt
 8004d38:	9b06      	ldrlt	r3, [sp, #24]
 8004d3a:	9a08      	ldrlt	r2, [sp, #32]
 8004d3c:	9f06      	ldrge	r7, [sp, #24]
 8004d3e:	1a9f      	sublt	r7, r3, r2
 8004d40:	bfac      	ite	ge
 8004d42:	9b08      	ldrge	r3, [sp, #32]
 8004d44:	2300      	movlt	r3, #0
 8004d46:	e73f      	b.n	8004bc8 <_dtoa_r+0x748>
 8004d48:	3fe00000 	.word	0x3fe00000
 8004d4c:	40240000 	.word	0x40240000
 8004d50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d52:	9f06      	ldr	r7, [sp, #24]
 8004d54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004d56:	e742      	b.n	8004bde <_dtoa_r+0x75e>
 8004d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d5a:	e76b      	b.n	8004c34 <_dtoa_r+0x7b4>
 8004d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	dc19      	bgt.n	8004d96 <_dtoa_r+0x916>
 8004d62:	9b04      	ldr	r3, [sp, #16]
 8004d64:	b9bb      	cbnz	r3, 8004d96 <_dtoa_r+0x916>
 8004d66:	9b05      	ldr	r3, [sp, #20]
 8004d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6c:	b99b      	cbnz	r3, 8004d96 <_dtoa_r+0x916>
 8004d6e:	9b05      	ldr	r3, [sp, #20]
 8004d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d74:	0d1b      	lsrs	r3, r3, #20
 8004d76:	051b      	lsls	r3, r3, #20
 8004d78:	b183      	cbz	r3, 8004d9c <_dtoa_r+0x91c>
 8004d7a:	f04f 0801 	mov.w	r8, #1
 8004d7e:	9b06      	ldr	r3, [sp, #24]
 8004d80:	3301      	adds	r3, #1
 8004d82:	9306      	str	r3, [sp, #24]
 8004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d86:	3301      	adds	r3, #1
 8004d88:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f47f af6a 	bne.w	8004c66 <_dtoa_r+0x7e6>
 8004d92:	2001      	movs	r0, #1
 8004d94:	e76f      	b.n	8004c76 <_dtoa_r+0x7f6>
 8004d96:	f04f 0800 	mov.w	r8, #0
 8004d9a:	e7f6      	b.n	8004d8a <_dtoa_r+0x90a>
 8004d9c:	4698      	mov	r8, r3
 8004d9e:	e7f4      	b.n	8004d8a <_dtoa_r+0x90a>
 8004da0:	f43f af7d 	beq.w	8004c9e <_dtoa_r+0x81e>
 8004da4:	4618      	mov	r0, r3
 8004da6:	301c      	adds	r0, #28
 8004da8:	e772      	b.n	8004c90 <_dtoa_r+0x810>
 8004daa:	9b08      	ldr	r3, [sp, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dc36      	bgt.n	8004e1e <_dtoa_r+0x99e>
 8004db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	dd33      	ble.n	8004e1e <_dtoa_r+0x99e>
 8004db6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dba:	f1b9 0f00 	cmp.w	r9, #0
 8004dbe:	d10d      	bne.n	8004ddc <_dtoa_r+0x95c>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fbee 	bl	80055a8 <__multadd>
 8004dcc:	4601      	mov	r1, r0
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4658      	mov	r0, fp
 8004dd2:	f000 fe05 	bl	80059e0 <__mcmp>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f73f adb8 	bgt.w	800494c <_dtoa_r+0x4cc>
 8004ddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dde:	9f03      	ldr	r7, [sp, #12]
 8004de0:	ea6f 0a03 	mvn.w	sl, r3
 8004de4:	f04f 0800 	mov.w	r8, #0
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 fbba 	bl	8005564 <_Bfree>
 8004df0:	2e00      	cmp	r6, #0
 8004df2:	f43f aea7 	beq.w	8004b44 <_dtoa_r+0x6c4>
 8004df6:	f1b8 0f00 	cmp.w	r8, #0
 8004dfa:	d005      	beq.n	8004e08 <_dtoa_r+0x988>
 8004dfc:	45b0      	cmp	r8, r6
 8004dfe:	d003      	beq.n	8004e08 <_dtoa_r+0x988>
 8004e00:	4641      	mov	r1, r8
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 fbae 	bl	8005564 <_Bfree>
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 fbaa 	bl	8005564 <_Bfree>
 8004e10:	e698      	b.n	8004b44 <_dtoa_r+0x6c4>
 8004e12:	2400      	movs	r4, #0
 8004e14:	4626      	mov	r6, r4
 8004e16:	e7e1      	b.n	8004ddc <_dtoa_r+0x95c>
 8004e18:	46c2      	mov	sl, r8
 8004e1a:	4626      	mov	r6, r4
 8004e1c:	e596      	b.n	800494c <_dtoa_r+0x4cc>
 8004e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80fd 	beq.w	8005024 <_dtoa_r+0xba4>
 8004e2a:	2f00      	cmp	r7, #0
 8004e2c:	dd05      	ble.n	8004e3a <_dtoa_r+0x9ba>
 8004e2e:	4631      	mov	r1, r6
 8004e30:	463a      	mov	r2, r7
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 fd64 	bl	8005900 <__lshift>
 8004e38:	4606      	mov	r6, r0
 8004e3a:	f1b8 0f00 	cmp.w	r8, #0
 8004e3e:	d05c      	beq.n	8004efa <_dtoa_r+0xa7a>
 8004e40:	4628      	mov	r0, r5
 8004e42:	6871      	ldr	r1, [r6, #4]
 8004e44:	f000 fb4e 	bl	80054e4 <_Balloc>
 8004e48:	4607      	mov	r7, r0
 8004e4a:	b928      	cbnz	r0, 8004e58 <_dtoa_r+0x9d8>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e52:	4b7f      	ldr	r3, [pc, #508]	; (8005050 <_dtoa_r+0xbd0>)
 8004e54:	f7ff bb28 	b.w	80044a8 <_dtoa_r+0x28>
 8004e58:	6932      	ldr	r2, [r6, #16]
 8004e5a:	f106 010c 	add.w	r1, r6, #12
 8004e5e:	3202      	adds	r2, #2
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	300c      	adds	r0, #12
 8004e64:	f000 fb30 	bl	80054c8 <memcpy>
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4639      	mov	r1, r7
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 fd47 	bl	8005900 <__lshift>
 8004e72:	46b0      	mov	r8, r6
 8004e74:	4606      	mov	r6, r0
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	9308      	str	r3, [sp, #32]
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	444b      	add	r3, r9
 8004e80:	930a      	str	r3, [sp, #40]	; 0x28
 8004e82:	9b04      	ldr	r3, [sp, #16]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8a:	9b08      	ldr	r3, [sp, #32]
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	4658      	mov	r0, fp
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	f7ff fa68 	bl	8004368 <quorem>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	3330      	adds	r3, #48	; 0x30
 8004e9e:	9006      	str	r0, [sp, #24]
 8004ea0:	4658      	mov	r0, fp
 8004ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ea4:	f000 fd9c 	bl	80059e0 <__mcmp>
 8004ea8:	4632      	mov	r2, r6
 8004eaa:	4681      	mov	r9, r0
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 fdb2 	bl	8005a18 <__mdiff>
 8004eb4:	68c2      	ldr	r2, [r0, #12]
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eba:	bb02      	cbnz	r2, 8004efe <_dtoa_r+0xa7e>
 8004ebc:	4601      	mov	r1, r0
 8004ebe:	4658      	mov	r0, fp
 8004ec0:	f000 fd8e 	bl	80059e0 <__mcmp>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ec8:	4639      	mov	r1, r7
 8004eca:	4628      	mov	r0, r5
 8004ecc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004ed0:	f000 fb48 	bl	8005564 <_Bfree>
 8004ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ed8:	9f08      	ldr	r7, [sp, #32]
 8004eda:	ea43 0102 	orr.w	r1, r3, r2
 8004ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee4:	d10d      	bne.n	8004f02 <_dtoa_r+0xa82>
 8004ee6:	2b39      	cmp	r3, #57	; 0x39
 8004ee8:	d029      	beq.n	8004f3e <_dtoa_r+0xabe>
 8004eea:	f1b9 0f00 	cmp.w	r9, #0
 8004eee:	dd01      	ble.n	8004ef4 <_dtoa_r+0xa74>
 8004ef0:	9b06      	ldr	r3, [sp, #24]
 8004ef2:	3331      	adds	r3, #49	; 0x31
 8004ef4:	9a04      	ldr	r2, [sp, #16]
 8004ef6:	7013      	strb	r3, [r2, #0]
 8004ef8:	e776      	b.n	8004de8 <_dtoa_r+0x968>
 8004efa:	4630      	mov	r0, r6
 8004efc:	e7b9      	b.n	8004e72 <_dtoa_r+0x9f2>
 8004efe:	2201      	movs	r2, #1
 8004f00:	e7e2      	b.n	8004ec8 <_dtoa_r+0xa48>
 8004f02:	f1b9 0f00 	cmp.w	r9, #0
 8004f06:	db06      	blt.n	8004f16 <_dtoa_r+0xa96>
 8004f08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004f0a:	ea41 0909 	orr.w	r9, r1, r9
 8004f0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f10:	ea59 0101 	orrs.w	r1, r9, r1
 8004f14:	d120      	bne.n	8004f58 <_dtoa_r+0xad8>
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	ddec      	ble.n	8004ef4 <_dtoa_r+0xa74>
 8004f1a:	4659      	mov	r1, fp
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	4628      	mov	r0, r5
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	f000 fced 	bl	8005900 <__lshift>
 8004f26:	4621      	mov	r1, r4
 8004f28:	4683      	mov	fp, r0
 8004f2a:	f000 fd59 	bl	80059e0 <__mcmp>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	9b08      	ldr	r3, [sp, #32]
 8004f32:	dc02      	bgt.n	8004f3a <_dtoa_r+0xaba>
 8004f34:	d1de      	bne.n	8004ef4 <_dtoa_r+0xa74>
 8004f36:	07da      	lsls	r2, r3, #31
 8004f38:	d5dc      	bpl.n	8004ef4 <_dtoa_r+0xa74>
 8004f3a:	2b39      	cmp	r3, #57	; 0x39
 8004f3c:	d1d8      	bne.n	8004ef0 <_dtoa_r+0xa70>
 8004f3e:	2339      	movs	r3, #57	; 0x39
 8004f40:	9a04      	ldr	r2, [sp, #16]
 8004f42:	7013      	strb	r3, [r2, #0]
 8004f44:	463b      	mov	r3, r7
 8004f46:	461f      	mov	r7, r3
 8004f48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	2a39      	cmp	r2, #57	; 0x39
 8004f50:	d050      	beq.n	8004ff4 <_dtoa_r+0xb74>
 8004f52:	3201      	adds	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e747      	b.n	8004de8 <_dtoa_r+0x968>
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	dd03      	ble.n	8004f64 <_dtoa_r+0xae4>
 8004f5c:	2b39      	cmp	r3, #57	; 0x39
 8004f5e:	d0ee      	beq.n	8004f3e <_dtoa_r+0xabe>
 8004f60:	3301      	adds	r3, #1
 8004f62:	e7c7      	b.n	8004ef4 <_dtoa_r+0xa74>
 8004f64:	9a08      	ldr	r2, [sp, #32]
 8004f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f6c:	428a      	cmp	r2, r1
 8004f6e:	d02a      	beq.n	8004fc6 <_dtoa_r+0xb46>
 8004f70:	4659      	mov	r1, fp
 8004f72:	2300      	movs	r3, #0
 8004f74:	220a      	movs	r2, #10
 8004f76:	4628      	mov	r0, r5
 8004f78:	f000 fb16 	bl	80055a8 <__multadd>
 8004f7c:	45b0      	cmp	r8, r6
 8004f7e:	4683      	mov	fp, r0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f04f 020a 	mov.w	r2, #10
 8004f88:	4641      	mov	r1, r8
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	d107      	bne.n	8004f9e <_dtoa_r+0xb1e>
 8004f8e:	f000 fb0b 	bl	80055a8 <__multadd>
 8004f92:	4680      	mov	r8, r0
 8004f94:	4606      	mov	r6, r0
 8004f96:	9b08      	ldr	r3, [sp, #32]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	9308      	str	r3, [sp, #32]
 8004f9c:	e775      	b.n	8004e8a <_dtoa_r+0xa0a>
 8004f9e:	f000 fb03 	bl	80055a8 <__multadd>
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	220a      	movs	r2, #10
 8004faa:	4628      	mov	r0, r5
 8004fac:	f000 fafc 	bl	80055a8 <__multadd>
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	e7f0      	b.n	8004f96 <_dtoa_r+0xb16>
 8004fb4:	f1b9 0f00 	cmp.w	r9, #0
 8004fb8:	bfcc      	ite	gt
 8004fba:	464f      	movgt	r7, r9
 8004fbc:	2701      	movle	r7, #1
 8004fbe:	f04f 0800 	mov.w	r8, #0
 8004fc2:	9a03      	ldr	r2, [sp, #12]
 8004fc4:	4417      	add	r7, r2
 8004fc6:	4659      	mov	r1, fp
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4628      	mov	r0, r5
 8004fcc:	9308      	str	r3, [sp, #32]
 8004fce:	f000 fc97 	bl	8005900 <__lshift>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4683      	mov	fp, r0
 8004fd6:	f000 fd03 	bl	80059e0 <__mcmp>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	dcb2      	bgt.n	8004f44 <_dtoa_r+0xac4>
 8004fde:	d102      	bne.n	8004fe6 <_dtoa_r+0xb66>
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	07db      	lsls	r3, r3, #31
 8004fe4:	d4ae      	bmi.n	8004f44 <_dtoa_r+0xac4>
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	461f      	mov	r7, r3
 8004fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fee:	2a30      	cmp	r2, #48	; 0x30
 8004ff0:	d0fa      	beq.n	8004fe8 <_dtoa_r+0xb68>
 8004ff2:	e6f9      	b.n	8004de8 <_dtoa_r+0x968>
 8004ff4:	9a03      	ldr	r2, [sp, #12]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d1a5      	bne.n	8004f46 <_dtoa_r+0xac6>
 8004ffa:	2331      	movs	r3, #49	; 0x31
 8004ffc:	f10a 0a01 	add.w	sl, sl, #1
 8005000:	e779      	b.n	8004ef6 <_dtoa_r+0xa76>
 8005002:	4b14      	ldr	r3, [pc, #80]	; (8005054 <_dtoa_r+0xbd4>)
 8005004:	f7ff baa8 	b.w	8004558 <_dtoa_r+0xd8>
 8005008:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800500a:	2b00      	cmp	r3, #0
 800500c:	f47f aa81 	bne.w	8004512 <_dtoa_r+0x92>
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <_dtoa_r+0xbd8>)
 8005012:	f7ff baa1 	b.w	8004558 <_dtoa_r+0xd8>
 8005016:	f1b9 0f00 	cmp.w	r9, #0
 800501a:	dc03      	bgt.n	8005024 <_dtoa_r+0xba4>
 800501c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800501e:	2b02      	cmp	r3, #2
 8005020:	f73f aecb 	bgt.w	8004dba <_dtoa_r+0x93a>
 8005024:	9f03      	ldr	r7, [sp, #12]
 8005026:	4621      	mov	r1, r4
 8005028:	4658      	mov	r0, fp
 800502a:	f7ff f99d 	bl	8004368 <quorem>
 800502e:	9a03      	ldr	r2, [sp, #12]
 8005030:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005034:	f807 3b01 	strb.w	r3, [r7], #1
 8005038:	1aba      	subs	r2, r7, r2
 800503a:	4591      	cmp	r9, r2
 800503c:	ddba      	ble.n	8004fb4 <_dtoa_r+0xb34>
 800503e:	4659      	mov	r1, fp
 8005040:	2300      	movs	r3, #0
 8005042:	220a      	movs	r2, #10
 8005044:	4628      	mov	r0, r5
 8005046:	f000 faaf 	bl	80055a8 <__multadd>
 800504a:	4683      	mov	fp, r0
 800504c:	e7eb      	b.n	8005026 <_dtoa_r+0xba6>
 800504e:	bf00      	nop
 8005050:	0800651b 	.word	0x0800651b
 8005054:	08006478 	.word	0x08006478
 8005058:	0800649c 	.word	0x0800649c

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005060:	4605      	mov	r5, r0
 8005062:	0710      	lsls	r0, r2, #28
 8005064:	460c      	mov	r4, r1
 8005066:	d457      	bmi.n	8005118 <__sflush_r+0xbc>
 8005068:	684b      	ldr	r3, [r1, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc04      	bgt.n	8005078 <__sflush_r+0x1c>
 800506e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc01      	bgt.n	8005078 <__sflush_r+0x1c>
 8005074:	2000      	movs	r0, #0
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507a:	2e00      	cmp	r6, #0
 800507c:	d0fa      	beq.n	8005074 <__sflush_r+0x18>
 800507e:	2300      	movs	r3, #0
 8005080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005084:	682f      	ldr	r7, [r5, #0]
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	d032      	beq.n	80050f0 <__sflush_r+0x94>
 800508a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	075a      	lsls	r2, r3, #29
 8005090:	d505      	bpl.n	800509e <__sflush_r+0x42>
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	1ac0      	subs	r0, r0, r3
 8005096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005098:	b10b      	cbz	r3, 800509e <__sflush_r+0x42>
 800509a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800509c:	1ac0      	subs	r0, r0, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	4602      	mov	r2, r0
 80050a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a4:	4628      	mov	r0, r5
 80050a6:	6a21      	ldr	r1, [r4, #32]
 80050a8:	47b0      	blx	r6
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	d106      	bne.n	80050be <__sflush_r+0x62>
 80050b0:	6829      	ldr	r1, [r5, #0]
 80050b2:	291d      	cmp	r1, #29
 80050b4:	d82c      	bhi.n	8005110 <__sflush_r+0xb4>
 80050b6:	4a29      	ldr	r2, [pc, #164]	; (800515c <__sflush_r+0x100>)
 80050b8:	40ca      	lsrs	r2, r1
 80050ba:	07d6      	lsls	r6, r2, #31
 80050bc:	d528      	bpl.n	8005110 <__sflush_r+0xb4>
 80050be:	2200      	movs	r2, #0
 80050c0:	6062      	str	r2, [r4, #4]
 80050c2:	6922      	ldr	r2, [r4, #16]
 80050c4:	04d9      	lsls	r1, r3, #19
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	d504      	bpl.n	80050d4 <__sflush_r+0x78>
 80050ca:	1c42      	adds	r2, r0, #1
 80050cc:	d101      	bne.n	80050d2 <__sflush_r+0x76>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	b903      	cbnz	r3, 80050d4 <__sflush_r+0x78>
 80050d2:	6560      	str	r0, [r4, #84]	; 0x54
 80050d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d6:	602f      	str	r7, [r5, #0]
 80050d8:	2900      	cmp	r1, #0
 80050da:	d0cb      	beq.n	8005074 <__sflush_r+0x18>
 80050dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e0:	4299      	cmp	r1, r3
 80050e2:	d002      	beq.n	80050ea <__sflush_r+0x8e>
 80050e4:	4628      	mov	r0, r5
 80050e6:	f000 fd93 	bl	8005c10 <_free_r>
 80050ea:	2000      	movs	r0, #0
 80050ec:	6360      	str	r0, [r4, #52]	; 0x34
 80050ee:	e7c2      	b.n	8005076 <__sflush_r+0x1a>
 80050f0:	6a21      	ldr	r1, [r4, #32]
 80050f2:	2301      	movs	r3, #1
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b0      	blx	r6
 80050f8:	1c41      	adds	r1, r0, #1
 80050fa:	d1c7      	bne.n	800508c <__sflush_r+0x30>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0c4      	beq.n	800508c <__sflush_r+0x30>
 8005102:	2b1d      	cmp	r3, #29
 8005104:	d001      	beq.n	800510a <__sflush_r+0xae>
 8005106:	2b16      	cmp	r3, #22
 8005108:	d101      	bne.n	800510e <__sflush_r+0xb2>
 800510a:	602f      	str	r7, [r5, #0]
 800510c:	e7b2      	b.n	8005074 <__sflush_r+0x18>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	e7ae      	b.n	8005076 <__sflush_r+0x1a>
 8005118:	690f      	ldr	r7, [r1, #16]
 800511a:	2f00      	cmp	r7, #0
 800511c:	d0aa      	beq.n	8005074 <__sflush_r+0x18>
 800511e:	0793      	lsls	r3, r2, #30
 8005120:	bf18      	it	ne
 8005122:	2300      	movne	r3, #0
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	1bf6      	subs	r6, r6, r7
 800512c:	600f      	str	r7, [r1, #0]
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	2e00      	cmp	r6, #0
 8005132:	dd9f      	ble.n	8005074 <__sflush_r+0x18>
 8005134:	4633      	mov	r3, r6
 8005136:	463a      	mov	r2, r7
 8005138:	4628      	mov	r0, r5
 800513a:	6a21      	ldr	r1, [r4, #32]
 800513c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005140:	47e0      	blx	ip
 8005142:	2800      	cmp	r0, #0
 8005144:	dc06      	bgt.n	8005154 <__sflush_r+0xf8>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005150:	81a3      	strh	r3, [r4, #12]
 8005152:	e790      	b.n	8005076 <__sflush_r+0x1a>
 8005154:	4407      	add	r7, r0
 8005156:	1a36      	subs	r6, r6, r0
 8005158:	e7ea      	b.n	8005130 <__sflush_r+0xd4>
 800515a:	bf00      	nop
 800515c:	20400001 	.word	0x20400001

08005160 <_fflush_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b913      	cbnz	r3, 8005170 <_fflush_r+0x10>
 800516a:	2500      	movs	r5, #0
 800516c:	4628      	mov	r0, r5
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	b118      	cbz	r0, 800517a <_fflush_r+0x1a>
 8005172:	6983      	ldr	r3, [r0, #24]
 8005174:	b90b      	cbnz	r3, 800517a <_fflush_r+0x1a>
 8005176:	f000 f887 	bl	8005288 <__sinit>
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <_fflush_r+0x6c>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d11b      	bne.n	80051b8 <_fflush_r+0x58>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <_fflush_r+0xa>
 800518a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518c:	07d0      	lsls	r0, r2, #31
 800518e:	d404      	bmi.n	800519a <_fflush_r+0x3a>
 8005190:	0599      	lsls	r1, r3, #22
 8005192:	d402      	bmi.n	800519a <_fflush_r+0x3a>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f000 f91a 	bl	80053ce <__retarget_lock_acquire_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	4621      	mov	r1, r4
 800519e:	f7ff ff5d 	bl	800505c <__sflush_r>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	4605      	mov	r5, r0
 80051a6:	07da      	lsls	r2, r3, #31
 80051a8:	d4e0      	bmi.n	800516c <_fflush_r+0xc>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d4dd      	bmi.n	800516c <_fflush_r+0xc>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f000 f90d 	bl	80053d0 <__retarget_lock_release_recursive>
 80051b6:	e7d9      	b.n	800516c <_fflush_r+0xc>
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <_fflush_r+0x70>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <_fflush_r+0x62>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7df      	b.n	8005182 <_fflush_r+0x22>
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <_fflush_r+0x74>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	bf08      	it	eq
 80051c8:	68ec      	ldreq	r4, [r5, #12]
 80051ca:	e7da      	b.n	8005182 <_fflush_r+0x22>
 80051cc:	0800654c 	.word	0x0800654c
 80051d0:	0800656c 	.word	0x0800656c
 80051d4:	0800652c 	.word	0x0800652c

080051d8 <std>:
 80051d8:	2300      	movs	r3, #0
 80051da:	b510      	push	{r4, lr}
 80051dc:	4604      	mov	r4, r0
 80051de:	e9c0 3300 	strd	r3, r3, [r0]
 80051e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e6:	6083      	str	r3, [r0, #8]
 80051e8:	8181      	strh	r1, [r0, #12]
 80051ea:	6643      	str	r3, [r0, #100]	; 0x64
 80051ec:	81c2      	strh	r2, [r0, #14]
 80051ee:	6183      	str	r3, [r0, #24]
 80051f0:	4619      	mov	r1, r3
 80051f2:	2208      	movs	r2, #8
 80051f4:	305c      	adds	r0, #92	; 0x5c
 80051f6:	f7fe fb01 	bl	80037fc <memset>
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x38>)
 80051fc:	6224      	str	r4, [r4, #32]
 80051fe:	6263      	str	r3, [r4, #36]	; 0x24
 8005200:	4b04      	ldr	r3, [pc, #16]	; (8005214 <std+0x3c>)
 8005202:	62a3      	str	r3, [r4, #40]	; 0x28
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <std+0x40>)
 8005206:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <std+0x44>)
 800520a:	6323      	str	r3, [r4, #48]	; 0x30
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	08006099 	.word	0x08006099
 8005214:	080060bb 	.word	0x080060bb
 8005218:	080060f3 	.word	0x080060f3
 800521c:	08006117 	.word	0x08006117

08005220 <_cleanup_r>:
 8005220:	4901      	ldr	r1, [pc, #4]	; (8005228 <_cleanup_r+0x8>)
 8005222:	f000 b8af 	b.w	8005384 <_fwalk_reent>
 8005226:	bf00      	nop
 8005228:	08005161 	.word	0x08005161

0800522c <__sfmoreglue>:
 800522c:	2268      	movs	r2, #104	; 0x68
 800522e:	b570      	push	{r4, r5, r6, lr}
 8005230:	1e4d      	subs	r5, r1, #1
 8005232:	4355      	muls	r5, r2
 8005234:	460e      	mov	r6, r1
 8005236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800523a:	f000 fd51 	bl	8005ce0 <_malloc_r>
 800523e:	4604      	mov	r4, r0
 8005240:	b140      	cbz	r0, 8005254 <__sfmoreglue+0x28>
 8005242:	2100      	movs	r1, #0
 8005244:	e9c0 1600 	strd	r1, r6, [r0]
 8005248:	300c      	adds	r0, #12
 800524a:	60a0      	str	r0, [r4, #8]
 800524c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005250:	f7fe fad4 	bl	80037fc <memset>
 8005254:	4620      	mov	r0, r4
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <__sfp_lock_acquire>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__sfp_lock_acquire+0x8>)
 800525a:	f000 b8b8 	b.w	80053ce <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	20000309 	.word	0x20000309

08005264 <__sfp_lock_release>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__sfp_lock_release+0x8>)
 8005266:	f000 b8b3 	b.w	80053d0 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	20000309 	.word	0x20000309

08005270 <__sinit_lock_acquire>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__sinit_lock_acquire+0x8>)
 8005272:	f000 b8ac 	b.w	80053ce <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	2000030a 	.word	0x2000030a

0800527c <__sinit_lock_release>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__sinit_lock_release+0x8>)
 800527e:	f000 b8a7 	b.w	80053d0 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	2000030a 	.word	0x2000030a

08005288 <__sinit>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4604      	mov	r4, r0
 800528c:	f7ff fff0 	bl	8005270 <__sinit_lock_acquire>
 8005290:	69a3      	ldr	r3, [r4, #24]
 8005292:	b11b      	cbz	r3, 800529c <__sinit+0x14>
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f7ff bff0 	b.w	800527c <__sinit_lock_release>
 800529c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052a0:	6523      	str	r3, [r4, #80]	; 0x50
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <__sinit+0x68>)
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <__sinit+0x6c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	bf08      	it	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	4620      	mov	r0, r4
 80052b2:	bf08      	it	eq
 80052b4:	61a3      	streq	r3, [r4, #24]
 80052b6:	f000 f81f 	bl	80052f8 <__sfp>
 80052ba:	6060      	str	r0, [r4, #4]
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 f81b 	bl	80052f8 <__sfp>
 80052c2:	60a0      	str	r0, [r4, #8]
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 f817 	bl	80052f8 <__sfp>
 80052ca:	2200      	movs	r2, #0
 80052cc:	2104      	movs	r1, #4
 80052ce:	60e0      	str	r0, [r4, #12]
 80052d0:	6860      	ldr	r0, [r4, #4]
 80052d2:	f7ff ff81 	bl	80051d8 <std>
 80052d6:	2201      	movs	r2, #1
 80052d8:	2109      	movs	r1, #9
 80052da:	68a0      	ldr	r0, [r4, #8]
 80052dc:	f7ff ff7c 	bl	80051d8 <std>
 80052e0:	2202      	movs	r2, #2
 80052e2:	2112      	movs	r1, #18
 80052e4:	68e0      	ldr	r0, [r4, #12]
 80052e6:	f7ff ff77 	bl	80051d8 <std>
 80052ea:	2301      	movs	r3, #1
 80052ec:	61a3      	str	r3, [r4, #24]
 80052ee:	e7d1      	b.n	8005294 <__sinit+0xc>
 80052f0:	08006464 	.word	0x08006464
 80052f4:	08005221 	.word	0x08005221

080052f8 <__sfp>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	4607      	mov	r7, r0
 80052fc:	f7ff ffac 	bl	8005258 <__sfp_lock_acquire>
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <__sfp+0x84>)
 8005302:	681e      	ldr	r6, [r3, #0]
 8005304:	69b3      	ldr	r3, [r6, #24]
 8005306:	b913      	cbnz	r3, 800530e <__sfp+0x16>
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff ffbd 	bl	8005288 <__sinit>
 800530e:	3648      	adds	r6, #72	; 0x48
 8005310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	d503      	bpl.n	8005320 <__sfp+0x28>
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	b30b      	cbz	r3, 8005360 <__sfp+0x68>
 800531c:	6836      	ldr	r6, [r6, #0]
 800531e:	e7f7      	b.n	8005310 <__sfp+0x18>
 8005320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005324:	b9d5      	cbnz	r5, 800535c <__sfp+0x64>
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <__sfp+0x88>)
 8005328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800532c:	60e3      	str	r3, [r4, #12]
 800532e:	6665      	str	r5, [r4, #100]	; 0x64
 8005330:	f000 f84c 	bl	80053cc <__retarget_lock_init_recursive>
 8005334:	f7ff ff96 	bl	8005264 <__sfp_lock_release>
 8005338:	2208      	movs	r2, #8
 800533a:	4629      	mov	r1, r5
 800533c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005340:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005344:	6025      	str	r5, [r4, #0]
 8005346:	61a5      	str	r5, [r4, #24]
 8005348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800534c:	f7fe fa56 	bl	80037fc <memset>
 8005350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005358:	4620      	mov	r0, r4
 800535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535c:	3468      	adds	r4, #104	; 0x68
 800535e:	e7d9      	b.n	8005314 <__sfp+0x1c>
 8005360:	2104      	movs	r1, #4
 8005362:	4638      	mov	r0, r7
 8005364:	f7ff ff62 	bl	800522c <__sfmoreglue>
 8005368:	4604      	mov	r4, r0
 800536a:	6030      	str	r0, [r6, #0]
 800536c:	2800      	cmp	r0, #0
 800536e:	d1d5      	bne.n	800531c <__sfp+0x24>
 8005370:	f7ff ff78 	bl	8005264 <__sfp_lock_release>
 8005374:	230c      	movs	r3, #12
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	e7ee      	b.n	8005358 <__sfp+0x60>
 800537a:	bf00      	nop
 800537c:	08006464 	.word	0x08006464
 8005380:	ffff0001 	.word	0xffff0001

08005384 <_fwalk_reent>:
 8005384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005388:	4606      	mov	r6, r0
 800538a:	4688      	mov	r8, r1
 800538c:	2700      	movs	r7, #0
 800538e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005396:	f1b9 0901 	subs.w	r9, r9, #1
 800539a:	d505      	bpl.n	80053a8 <_fwalk_reent+0x24>
 800539c:	6824      	ldr	r4, [r4, #0]
 800539e:	2c00      	cmp	r4, #0
 80053a0:	d1f7      	bne.n	8005392 <_fwalk_reent+0xe>
 80053a2:	4638      	mov	r0, r7
 80053a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a8:	89ab      	ldrh	r3, [r5, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d907      	bls.n	80053be <_fwalk_reent+0x3a>
 80053ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053b2:	3301      	adds	r3, #1
 80053b4:	d003      	beq.n	80053be <_fwalk_reent+0x3a>
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	47c0      	blx	r8
 80053bc:	4307      	orrs	r7, r0
 80053be:	3568      	adds	r5, #104	; 0x68
 80053c0:	e7e9      	b.n	8005396 <_fwalk_reent+0x12>
	...

080053c4 <_localeconv_r>:
 80053c4:	4800      	ldr	r0, [pc, #0]	; (80053c8 <_localeconv_r+0x4>)
 80053c6:	4770      	bx	lr
 80053c8:	20000160 	.word	0x20000160

080053cc <__retarget_lock_init_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_acquire_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <__retarget_lock_release_recursive>:
 80053d0:	4770      	bx	lr

080053d2 <__swhatbuf_r>:
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	460e      	mov	r6, r1
 80053d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053da:	4614      	mov	r4, r2
 80053dc:	2900      	cmp	r1, #0
 80053de:	461d      	mov	r5, r3
 80053e0:	b096      	sub	sp, #88	; 0x58
 80053e2:	da08      	bge.n	80053f6 <__swhatbuf_r+0x24>
 80053e4:	2200      	movs	r2, #0
 80053e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053ea:	602a      	str	r2, [r5, #0]
 80053ec:	061a      	lsls	r2, r3, #24
 80053ee:	d410      	bmi.n	8005412 <__swhatbuf_r+0x40>
 80053f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f4:	e00e      	b.n	8005414 <__swhatbuf_r+0x42>
 80053f6:	466a      	mov	r2, sp
 80053f8:	f000 fee4 	bl	80061c4 <_fstat_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	dbf1      	blt.n	80053e4 <__swhatbuf_r+0x12>
 8005400:	9a01      	ldr	r2, [sp, #4]
 8005402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800540a:	425a      	negs	r2, r3
 800540c:	415a      	adcs	r2, r3
 800540e:	602a      	str	r2, [r5, #0]
 8005410:	e7ee      	b.n	80053f0 <__swhatbuf_r+0x1e>
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	2000      	movs	r0, #0
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	b016      	add	sp, #88	; 0x58
 800541a:	bd70      	pop	{r4, r5, r6, pc}

0800541c <__smakebuf_r>:
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005420:	079d      	lsls	r5, r3, #30
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	d507      	bpl.n	8005438 <__smakebuf_r+0x1c>
 8005428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	2301      	movs	r3, #1
 8005432:	6163      	str	r3, [r4, #20]
 8005434:	b002      	add	sp, #8
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	466a      	mov	r2, sp
 800543a:	ab01      	add	r3, sp, #4
 800543c:	f7ff ffc9 	bl	80053d2 <__swhatbuf_r>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	4605      	mov	r5, r0
 8005444:	4630      	mov	r0, r6
 8005446:	f000 fc4b 	bl	8005ce0 <_malloc_r>
 800544a:	b948      	cbnz	r0, 8005460 <__smakebuf_r+0x44>
 800544c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d4ef      	bmi.n	8005434 <__smakebuf_r+0x18>
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e7e3      	b.n	8005428 <__smakebuf_r+0xc>
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <__smakebuf_r+0x7c>)
 8005462:	62b3      	str	r3, [r6, #40]	; 0x28
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	81a3      	strh	r3, [r4, #12]
 800546e:	9b00      	ldr	r3, [sp, #0]
 8005470:	6120      	str	r0, [r4, #16]
 8005472:	6163      	str	r3, [r4, #20]
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	b15b      	cbz	r3, 8005490 <__smakebuf_r+0x74>
 8005478:	4630      	mov	r0, r6
 800547a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547e:	f000 feb3 	bl	80061e8 <_isatty_r>
 8005482:	b128      	cbz	r0, 8005490 <__smakebuf_r+0x74>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	89a0      	ldrh	r0, [r4, #12]
 8005492:	4305      	orrs	r5, r0
 8005494:	81a5      	strh	r5, [r4, #12]
 8005496:	e7cd      	b.n	8005434 <__smakebuf_r+0x18>
 8005498:	08005221 	.word	0x08005221

0800549c <malloc>:
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <malloc+0xc>)
 800549e:	4601      	mov	r1, r0
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f000 bc1d 	b.w	8005ce0 <_malloc_r>
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c

080054ac <memchr>:
 80054ac:	4603      	mov	r3, r0
 80054ae:	b510      	push	{r4, lr}
 80054b0:	b2c9      	uxtb	r1, r1
 80054b2:	4402      	add	r2, r0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	d101      	bne.n	80054be <memchr+0x12>
 80054ba:	2000      	movs	r0, #0
 80054bc:	e003      	b.n	80054c6 <memchr+0x1a>
 80054be:	7804      	ldrb	r4, [r0, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	428c      	cmp	r4, r1
 80054c4:	d1f6      	bne.n	80054b4 <memchr+0x8>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <memcpy>:
 80054c8:	440a      	add	r2, r1
 80054ca:	4291      	cmp	r1, r2
 80054cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d0:	d100      	bne.n	80054d4 <memcpy+0xc>
 80054d2:	4770      	bx	lr
 80054d4:	b510      	push	{r4, lr}
 80054d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054da:	4291      	cmp	r1, r2
 80054dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e0:	d1f9      	bne.n	80054d6 <memcpy+0xe>
 80054e2:	bd10      	pop	{r4, pc}

080054e4 <_Balloc>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054e8:	4604      	mov	r4, r0
 80054ea:	460d      	mov	r5, r1
 80054ec:	b976      	cbnz	r6, 800550c <_Balloc+0x28>
 80054ee:	2010      	movs	r0, #16
 80054f0:	f7ff ffd4 	bl	800549c <malloc>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6260      	str	r0, [r4, #36]	; 0x24
 80054f8:	b920      	cbnz	r0, 8005504 <_Balloc+0x20>
 80054fa:	2166      	movs	r1, #102	; 0x66
 80054fc:	4b17      	ldr	r3, [pc, #92]	; (800555c <_Balloc+0x78>)
 80054fe:	4818      	ldr	r0, [pc, #96]	; (8005560 <_Balloc+0x7c>)
 8005500:	f000 fe20 	bl	8006144 <__assert_func>
 8005504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005508:	6006      	str	r6, [r0, #0]
 800550a:	60c6      	str	r6, [r0, #12]
 800550c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800550e:	68f3      	ldr	r3, [r6, #12]
 8005510:	b183      	cbz	r3, 8005534 <_Balloc+0x50>
 8005512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800551a:	b9b8      	cbnz	r0, 800554c <_Balloc+0x68>
 800551c:	2101      	movs	r1, #1
 800551e:	fa01 f605 	lsl.w	r6, r1, r5
 8005522:	1d72      	adds	r2, r6, #5
 8005524:	4620      	mov	r0, r4
 8005526:	0092      	lsls	r2, r2, #2
 8005528:	f000 fb5e 	bl	8005be8 <_calloc_r>
 800552c:	b160      	cbz	r0, 8005548 <_Balloc+0x64>
 800552e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005532:	e00e      	b.n	8005552 <_Balloc+0x6e>
 8005534:	2221      	movs	r2, #33	; 0x21
 8005536:	2104      	movs	r1, #4
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fb55 	bl	8005be8 <_calloc_r>
 800553e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005540:	60f0      	str	r0, [r6, #12]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e4      	bne.n	8005512 <_Balloc+0x2e>
 8005548:	2000      	movs	r0, #0
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	6802      	ldr	r2, [r0, #0]
 800554e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005552:	2300      	movs	r3, #0
 8005554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005558:	e7f7      	b.n	800554a <_Balloc+0x66>
 800555a:	bf00      	nop
 800555c:	080064a9 	.word	0x080064a9
 8005560:	0800658c 	.word	0x0800658c

08005564 <_Bfree>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005568:	4605      	mov	r5, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b976      	cbnz	r6, 800558c <_Bfree+0x28>
 800556e:	2010      	movs	r0, #16
 8005570:	f7ff ff94 	bl	800549c <malloc>
 8005574:	4602      	mov	r2, r0
 8005576:	6268      	str	r0, [r5, #36]	; 0x24
 8005578:	b920      	cbnz	r0, 8005584 <_Bfree+0x20>
 800557a:	218a      	movs	r1, #138	; 0x8a
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <_Bfree+0x3c>)
 800557e:	4809      	ldr	r0, [pc, #36]	; (80055a4 <_Bfree+0x40>)
 8005580:	f000 fde0 	bl	8006144 <__assert_func>
 8005584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005588:	6006      	str	r6, [r0, #0]
 800558a:	60c6      	str	r6, [r0, #12]
 800558c:	b13c      	cbz	r4, 800559e <_Bfree+0x3a>
 800558e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005590:	6862      	ldr	r2, [r4, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005598:	6021      	str	r1, [r4, #0]
 800559a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	080064a9 	.word	0x080064a9
 80055a4:	0800658c 	.word	0x0800658c

080055a8 <__multadd>:
 80055a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	4607      	mov	r7, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	461e      	mov	r6, r3
 80055b2:	2000      	movs	r0, #0
 80055b4:	690d      	ldr	r5, [r1, #16]
 80055b6:	f101 0c14 	add.w	ip, r1, #20
 80055ba:	f8dc 3000 	ldr.w	r3, [ip]
 80055be:	3001      	adds	r0, #1
 80055c0:	b299      	uxth	r1, r3
 80055c2:	fb02 6101 	mla	r1, r2, r1, r6
 80055c6:	0c1e      	lsrs	r6, r3, #16
 80055c8:	0c0b      	lsrs	r3, r1, #16
 80055ca:	fb02 3306 	mla	r3, r2, r6, r3
 80055ce:	b289      	uxth	r1, r1
 80055d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055d4:	4285      	cmp	r5, r0
 80055d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055da:	f84c 1b04 	str.w	r1, [ip], #4
 80055de:	dcec      	bgt.n	80055ba <__multadd+0x12>
 80055e0:	b30e      	cbz	r6, 8005626 <__multadd+0x7e>
 80055e2:	68a3      	ldr	r3, [r4, #8]
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dc19      	bgt.n	800561c <__multadd+0x74>
 80055e8:	6861      	ldr	r1, [r4, #4]
 80055ea:	4638      	mov	r0, r7
 80055ec:	3101      	adds	r1, #1
 80055ee:	f7ff ff79 	bl	80054e4 <_Balloc>
 80055f2:	4680      	mov	r8, r0
 80055f4:	b928      	cbnz	r0, 8005602 <__multadd+0x5a>
 80055f6:	4602      	mov	r2, r0
 80055f8:	21b5      	movs	r1, #181	; 0xb5
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <__multadd+0x84>)
 80055fc:	480c      	ldr	r0, [pc, #48]	; (8005630 <__multadd+0x88>)
 80055fe:	f000 fda1 	bl	8006144 <__assert_func>
 8005602:	6922      	ldr	r2, [r4, #16]
 8005604:	f104 010c 	add.w	r1, r4, #12
 8005608:	3202      	adds	r2, #2
 800560a:	0092      	lsls	r2, r2, #2
 800560c:	300c      	adds	r0, #12
 800560e:	f7ff ff5b 	bl	80054c8 <memcpy>
 8005612:	4621      	mov	r1, r4
 8005614:	4638      	mov	r0, r7
 8005616:	f7ff ffa5 	bl	8005564 <_Bfree>
 800561a:	4644      	mov	r4, r8
 800561c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005620:	3501      	adds	r5, #1
 8005622:	615e      	str	r6, [r3, #20]
 8005624:	6125      	str	r5, [r4, #16]
 8005626:	4620      	mov	r0, r4
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	0800651b 	.word	0x0800651b
 8005630:	0800658c 	.word	0x0800658c

08005634 <__hi0bits>:
 8005634:	0c02      	lsrs	r2, r0, #16
 8005636:	0412      	lsls	r2, r2, #16
 8005638:	4603      	mov	r3, r0
 800563a:	b9ca      	cbnz	r2, 8005670 <__hi0bits+0x3c>
 800563c:	0403      	lsls	r3, r0, #16
 800563e:	2010      	movs	r0, #16
 8005640:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005644:	bf04      	itt	eq
 8005646:	021b      	lsleq	r3, r3, #8
 8005648:	3008      	addeq	r0, #8
 800564a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800564e:	bf04      	itt	eq
 8005650:	011b      	lsleq	r3, r3, #4
 8005652:	3004      	addeq	r0, #4
 8005654:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005658:	bf04      	itt	eq
 800565a:	009b      	lsleq	r3, r3, #2
 800565c:	3002      	addeq	r0, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	db05      	blt.n	800566e <__hi0bits+0x3a>
 8005662:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005666:	f100 0001 	add.w	r0, r0, #1
 800566a:	bf08      	it	eq
 800566c:	2020      	moveq	r0, #32
 800566e:	4770      	bx	lr
 8005670:	2000      	movs	r0, #0
 8005672:	e7e5      	b.n	8005640 <__hi0bits+0xc>

08005674 <__lo0bits>:
 8005674:	6803      	ldr	r3, [r0, #0]
 8005676:	4602      	mov	r2, r0
 8005678:	f013 0007 	ands.w	r0, r3, #7
 800567c:	d00b      	beq.n	8005696 <__lo0bits+0x22>
 800567e:	07d9      	lsls	r1, r3, #31
 8005680:	d421      	bmi.n	80056c6 <__lo0bits+0x52>
 8005682:	0798      	lsls	r0, r3, #30
 8005684:	bf49      	itett	mi
 8005686:	085b      	lsrmi	r3, r3, #1
 8005688:	089b      	lsrpl	r3, r3, #2
 800568a:	2001      	movmi	r0, #1
 800568c:	6013      	strmi	r3, [r2, #0]
 800568e:	bf5c      	itt	pl
 8005690:	2002      	movpl	r0, #2
 8005692:	6013      	strpl	r3, [r2, #0]
 8005694:	4770      	bx	lr
 8005696:	b299      	uxth	r1, r3
 8005698:	b909      	cbnz	r1, 800569e <__lo0bits+0x2a>
 800569a:	2010      	movs	r0, #16
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	b2d9      	uxtb	r1, r3
 80056a0:	b909      	cbnz	r1, 80056a6 <__lo0bits+0x32>
 80056a2:	3008      	adds	r0, #8
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	0719      	lsls	r1, r3, #28
 80056a8:	bf04      	itt	eq
 80056aa:	091b      	lsreq	r3, r3, #4
 80056ac:	3004      	addeq	r0, #4
 80056ae:	0799      	lsls	r1, r3, #30
 80056b0:	bf04      	itt	eq
 80056b2:	089b      	lsreq	r3, r3, #2
 80056b4:	3002      	addeq	r0, #2
 80056b6:	07d9      	lsls	r1, r3, #31
 80056b8:	d403      	bmi.n	80056c2 <__lo0bits+0x4e>
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	f100 0001 	add.w	r0, r0, #1
 80056c0:	d003      	beq.n	80056ca <__lo0bits+0x56>
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4770      	bx	lr
 80056c6:	2000      	movs	r0, #0
 80056c8:	4770      	bx	lr
 80056ca:	2020      	movs	r0, #32
 80056cc:	4770      	bx	lr
	...

080056d0 <__i2b>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	460c      	mov	r4, r1
 80056d4:	2101      	movs	r1, #1
 80056d6:	f7ff ff05 	bl	80054e4 <_Balloc>
 80056da:	4602      	mov	r2, r0
 80056dc:	b928      	cbnz	r0, 80056ea <__i2b+0x1a>
 80056de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056e2:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <__i2b+0x24>)
 80056e4:	4804      	ldr	r0, [pc, #16]	; (80056f8 <__i2b+0x28>)
 80056e6:	f000 fd2d 	bl	8006144 <__assert_func>
 80056ea:	2301      	movs	r3, #1
 80056ec:	6144      	str	r4, [r0, #20]
 80056ee:	6103      	str	r3, [r0, #16]
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	0800651b 	.word	0x0800651b
 80056f8:	0800658c 	.word	0x0800658c

080056fc <__multiply>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	4691      	mov	r9, r2
 8005702:	690a      	ldr	r2, [r1, #16]
 8005704:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005708:	460c      	mov	r4, r1
 800570a:	429a      	cmp	r2, r3
 800570c:	bfbe      	ittt	lt
 800570e:	460b      	movlt	r3, r1
 8005710:	464c      	movlt	r4, r9
 8005712:	4699      	movlt	r9, r3
 8005714:	6927      	ldr	r7, [r4, #16]
 8005716:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800571a:	68a3      	ldr	r3, [r4, #8]
 800571c:	6861      	ldr	r1, [r4, #4]
 800571e:	eb07 060a 	add.w	r6, r7, sl
 8005722:	42b3      	cmp	r3, r6
 8005724:	b085      	sub	sp, #20
 8005726:	bfb8      	it	lt
 8005728:	3101      	addlt	r1, #1
 800572a:	f7ff fedb 	bl	80054e4 <_Balloc>
 800572e:	b930      	cbnz	r0, 800573e <__multiply+0x42>
 8005730:	4602      	mov	r2, r0
 8005732:	f240 115d 	movw	r1, #349	; 0x15d
 8005736:	4b43      	ldr	r3, [pc, #268]	; (8005844 <__multiply+0x148>)
 8005738:	4843      	ldr	r0, [pc, #268]	; (8005848 <__multiply+0x14c>)
 800573a:	f000 fd03 	bl	8006144 <__assert_func>
 800573e:	f100 0514 	add.w	r5, r0, #20
 8005742:	462b      	mov	r3, r5
 8005744:	2200      	movs	r2, #0
 8005746:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800574a:	4543      	cmp	r3, r8
 800574c:	d321      	bcc.n	8005792 <__multiply+0x96>
 800574e:	f104 0314 	add.w	r3, r4, #20
 8005752:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005756:	f109 0314 	add.w	r3, r9, #20
 800575a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	1b3a      	subs	r2, r7, r4
 8005762:	3a15      	subs	r2, #21
 8005764:	f022 0203 	bic.w	r2, r2, #3
 8005768:	3204      	adds	r2, #4
 800576a:	f104 0115 	add.w	r1, r4, #21
 800576e:	428f      	cmp	r7, r1
 8005770:	bf38      	it	cc
 8005772:	2204      	movcc	r2, #4
 8005774:	9201      	str	r2, [sp, #4]
 8005776:	9a02      	ldr	r2, [sp, #8]
 8005778:	9303      	str	r3, [sp, #12]
 800577a:	429a      	cmp	r2, r3
 800577c:	d80c      	bhi.n	8005798 <__multiply+0x9c>
 800577e:	2e00      	cmp	r6, #0
 8005780:	dd03      	ble.n	800578a <__multiply+0x8e>
 8005782:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005786:	2b00      	cmp	r3, #0
 8005788:	d059      	beq.n	800583e <__multiply+0x142>
 800578a:	6106      	str	r6, [r0, #16]
 800578c:	b005      	add	sp, #20
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	f843 2b04 	str.w	r2, [r3], #4
 8005796:	e7d8      	b.n	800574a <__multiply+0x4e>
 8005798:	f8b3 a000 	ldrh.w	sl, [r3]
 800579c:	f1ba 0f00 	cmp.w	sl, #0
 80057a0:	d023      	beq.n	80057ea <__multiply+0xee>
 80057a2:	46a9      	mov	r9, r5
 80057a4:	f04f 0c00 	mov.w	ip, #0
 80057a8:	f104 0e14 	add.w	lr, r4, #20
 80057ac:	f85e 2b04 	ldr.w	r2, [lr], #4
 80057b0:	f8d9 1000 	ldr.w	r1, [r9]
 80057b4:	fa1f fb82 	uxth.w	fp, r2
 80057b8:	b289      	uxth	r1, r1
 80057ba:	fb0a 110b 	mla	r1, sl, fp, r1
 80057be:	4461      	add	r1, ip
 80057c0:	f8d9 c000 	ldr.w	ip, [r9]
 80057c4:	0c12      	lsrs	r2, r2, #16
 80057c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80057ca:	fb0a c202 	mla	r2, sl, r2, ip
 80057ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057d2:	b289      	uxth	r1, r1
 80057d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057d8:	4577      	cmp	r7, lr
 80057da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057de:	f849 1b04 	str.w	r1, [r9], #4
 80057e2:	d8e3      	bhi.n	80057ac <__multiply+0xb0>
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	f845 c002 	str.w	ip, [r5, r2]
 80057ea:	9a03      	ldr	r2, [sp, #12]
 80057ec:	3304      	adds	r3, #4
 80057ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057f2:	f1b9 0f00 	cmp.w	r9, #0
 80057f6:	d020      	beq.n	800583a <__multiply+0x13e>
 80057f8:	46ae      	mov	lr, r5
 80057fa:	f04f 0a00 	mov.w	sl, #0
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	f104 0c14 	add.w	ip, r4, #20
 8005804:	f8bc b000 	ldrh.w	fp, [ip]
 8005808:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800580c:	b289      	uxth	r1, r1
 800580e:	fb09 220b 	mla	r2, r9, fp, r2
 8005812:	4492      	add	sl, r2
 8005814:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005818:	f84e 1b04 	str.w	r1, [lr], #4
 800581c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005820:	f8be 1000 	ldrh.w	r1, [lr]
 8005824:	0c12      	lsrs	r2, r2, #16
 8005826:	fb09 1102 	mla	r1, r9, r2, r1
 800582a:	4567      	cmp	r7, ip
 800582c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005830:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005834:	d8e6      	bhi.n	8005804 <__multiply+0x108>
 8005836:	9a01      	ldr	r2, [sp, #4]
 8005838:	50a9      	str	r1, [r5, r2]
 800583a:	3504      	adds	r5, #4
 800583c:	e79b      	b.n	8005776 <__multiply+0x7a>
 800583e:	3e01      	subs	r6, #1
 8005840:	e79d      	b.n	800577e <__multiply+0x82>
 8005842:	bf00      	nop
 8005844:	0800651b 	.word	0x0800651b
 8005848:	0800658c 	.word	0x0800658c

0800584c <__pow5mult>:
 800584c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005850:	4615      	mov	r5, r2
 8005852:	f012 0203 	ands.w	r2, r2, #3
 8005856:	4606      	mov	r6, r0
 8005858:	460f      	mov	r7, r1
 800585a:	d007      	beq.n	800586c <__pow5mult+0x20>
 800585c:	4c25      	ldr	r4, [pc, #148]	; (80058f4 <__pow5mult+0xa8>)
 800585e:	3a01      	subs	r2, #1
 8005860:	2300      	movs	r3, #0
 8005862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005866:	f7ff fe9f 	bl	80055a8 <__multadd>
 800586a:	4607      	mov	r7, r0
 800586c:	10ad      	asrs	r5, r5, #2
 800586e:	d03d      	beq.n	80058ec <__pow5mult+0xa0>
 8005870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005872:	b97c      	cbnz	r4, 8005894 <__pow5mult+0x48>
 8005874:	2010      	movs	r0, #16
 8005876:	f7ff fe11 	bl	800549c <malloc>
 800587a:	4602      	mov	r2, r0
 800587c:	6270      	str	r0, [r6, #36]	; 0x24
 800587e:	b928      	cbnz	r0, 800588c <__pow5mult+0x40>
 8005880:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005884:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <__pow5mult+0xac>)
 8005886:	481d      	ldr	r0, [pc, #116]	; (80058fc <__pow5mult+0xb0>)
 8005888:	f000 fc5c 	bl	8006144 <__assert_func>
 800588c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005890:	6004      	str	r4, [r0, #0]
 8005892:	60c4      	str	r4, [r0, #12]
 8005894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800589c:	b94c      	cbnz	r4, 80058b2 <__pow5mult+0x66>
 800589e:	f240 2171 	movw	r1, #625	; 0x271
 80058a2:	4630      	mov	r0, r6
 80058a4:	f7ff ff14 	bl	80056d0 <__i2b>
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	f04f 0900 	mov.w	r9, #0
 80058b6:	07eb      	lsls	r3, r5, #31
 80058b8:	d50a      	bpl.n	80058d0 <__pow5mult+0x84>
 80058ba:	4639      	mov	r1, r7
 80058bc:	4622      	mov	r2, r4
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ff1c 	bl	80056fc <__multiply>
 80058c4:	4680      	mov	r8, r0
 80058c6:	4639      	mov	r1, r7
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff fe4b 	bl	8005564 <_Bfree>
 80058ce:	4647      	mov	r7, r8
 80058d0:	106d      	asrs	r5, r5, #1
 80058d2:	d00b      	beq.n	80058ec <__pow5mult+0xa0>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	b938      	cbnz	r0, 80058e8 <__pow5mult+0x9c>
 80058d8:	4622      	mov	r2, r4
 80058da:	4621      	mov	r1, r4
 80058dc:	4630      	mov	r0, r6
 80058de:	f7ff ff0d 	bl	80056fc <__multiply>
 80058e2:	6020      	str	r0, [r4, #0]
 80058e4:	f8c0 9000 	str.w	r9, [r0]
 80058e8:	4604      	mov	r4, r0
 80058ea:	e7e4      	b.n	80058b6 <__pow5mult+0x6a>
 80058ec:	4638      	mov	r0, r7
 80058ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058f2:	bf00      	nop
 80058f4:	080066d8 	.word	0x080066d8
 80058f8:	080064a9 	.word	0x080064a9
 80058fc:	0800658c 	.word	0x0800658c

08005900 <__lshift>:
 8005900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005904:	460c      	mov	r4, r1
 8005906:	4607      	mov	r7, r0
 8005908:	4691      	mov	r9, r2
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	6849      	ldr	r1, [r1, #4]
 800590e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005912:	68a3      	ldr	r3, [r4, #8]
 8005914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005918:	f108 0601 	add.w	r6, r8, #1
 800591c:	42b3      	cmp	r3, r6
 800591e:	db0b      	blt.n	8005938 <__lshift+0x38>
 8005920:	4638      	mov	r0, r7
 8005922:	f7ff fddf 	bl	80054e4 <_Balloc>
 8005926:	4605      	mov	r5, r0
 8005928:	b948      	cbnz	r0, 800593e <__lshift+0x3e>
 800592a:	4602      	mov	r2, r0
 800592c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <__lshift+0xd8>)
 8005932:	482a      	ldr	r0, [pc, #168]	; (80059dc <__lshift+0xdc>)
 8005934:	f000 fc06 	bl	8006144 <__assert_func>
 8005938:	3101      	adds	r1, #1
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	e7ee      	b.n	800591c <__lshift+0x1c>
 800593e:	2300      	movs	r3, #0
 8005940:	f100 0114 	add.w	r1, r0, #20
 8005944:	f100 0210 	add.w	r2, r0, #16
 8005948:	4618      	mov	r0, r3
 800594a:	4553      	cmp	r3, sl
 800594c:	db37      	blt.n	80059be <__lshift+0xbe>
 800594e:	6920      	ldr	r0, [r4, #16]
 8005950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005954:	f104 0314 	add.w	r3, r4, #20
 8005958:	f019 091f 	ands.w	r9, r9, #31
 800595c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005960:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005964:	d02f      	beq.n	80059c6 <__lshift+0xc6>
 8005966:	468a      	mov	sl, r1
 8005968:	f04f 0c00 	mov.w	ip, #0
 800596c:	f1c9 0e20 	rsb	lr, r9, #32
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	fa02 f209 	lsl.w	r2, r2, r9
 8005976:	ea42 020c 	orr.w	r2, r2, ip
 800597a:	f84a 2b04 	str.w	r2, [sl], #4
 800597e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005982:	4298      	cmp	r0, r3
 8005984:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005988:	d8f2      	bhi.n	8005970 <__lshift+0x70>
 800598a:	1b03      	subs	r3, r0, r4
 800598c:	3b15      	subs	r3, #21
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	3304      	adds	r3, #4
 8005994:	f104 0215 	add.w	r2, r4, #21
 8005998:	4290      	cmp	r0, r2
 800599a:	bf38      	it	cc
 800599c:	2304      	movcc	r3, #4
 800599e:	f841 c003 	str.w	ip, [r1, r3]
 80059a2:	f1bc 0f00 	cmp.w	ip, #0
 80059a6:	d001      	beq.n	80059ac <__lshift+0xac>
 80059a8:	f108 0602 	add.w	r6, r8, #2
 80059ac:	3e01      	subs	r6, #1
 80059ae:	4638      	mov	r0, r7
 80059b0:	4621      	mov	r1, r4
 80059b2:	612e      	str	r6, [r5, #16]
 80059b4:	f7ff fdd6 	bl	8005564 <_Bfree>
 80059b8:	4628      	mov	r0, r5
 80059ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059be:	f842 0f04 	str.w	r0, [r2, #4]!
 80059c2:	3301      	adds	r3, #1
 80059c4:	e7c1      	b.n	800594a <__lshift+0x4a>
 80059c6:	3904      	subs	r1, #4
 80059c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059cc:	4298      	cmp	r0, r3
 80059ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80059d2:	d8f9      	bhi.n	80059c8 <__lshift+0xc8>
 80059d4:	e7ea      	b.n	80059ac <__lshift+0xac>
 80059d6:	bf00      	nop
 80059d8:	0800651b 	.word	0x0800651b
 80059dc:	0800658c 	.word	0x0800658c

080059e0 <__mcmp>:
 80059e0:	4603      	mov	r3, r0
 80059e2:	690a      	ldr	r2, [r1, #16]
 80059e4:	6900      	ldr	r0, [r0, #16]
 80059e6:	b530      	push	{r4, r5, lr}
 80059e8:	1a80      	subs	r0, r0, r2
 80059ea:	d10d      	bne.n	8005a08 <__mcmp+0x28>
 80059ec:	3314      	adds	r3, #20
 80059ee:	3114      	adds	r1, #20
 80059f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a00:	4295      	cmp	r5, r2
 8005a02:	d002      	beq.n	8005a0a <__mcmp+0x2a>
 8005a04:	d304      	bcc.n	8005a10 <__mcmp+0x30>
 8005a06:	2001      	movs	r0, #1
 8005a08:	bd30      	pop	{r4, r5, pc}
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	d3f4      	bcc.n	80059f8 <__mcmp+0x18>
 8005a0e:	e7fb      	b.n	8005a08 <__mcmp+0x28>
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	e7f8      	b.n	8005a08 <__mcmp+0x28>
	...

08005a18 <__mdiff>:
 8005a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4607      	mov	r7, r0
 8005a20:	4611      	mov	r1, r2
 8005a22:	4628      	mov	r0, r5
 8005a24:	4614      	mov	r4, r2
 8005a26:	f7ff ffdb 	bl	80059e0 <__mcmp>
 8005a2a:	1e06      	subs	r6, r0, #0
 8005a2c:	d111      	bne.n	8005a52 <__mdiff+0x3a>
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff fd57 	bl	80054e4 <_Balloc>
 8005a36:	4602      	mov	r2, r0
 8005a38:	b928      	cbnz	r0, 8005a46 <__mdiff+0x2e>
 8005a3a:	f240 2132 	movw	r1, #562	; 0x232
 8005a3e:	4b3a      	ldr	r3, [pc, #232]	; (8005b28 <__mdiff+0x110>)
 8005a40:	483a      	ldr	r0, [pc, #232]	; (8005b2c <__mdiff+0x114>)
 8005a42:	f000 fb7f 	bl	8006144 <__assert_func>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	bfa4      	itt	ge
 8005a54:	4623      	movge	r3, r4
 8005a56:	462c      	movge	r4, r5
 8005a58:	4638      	mov	r0, r7
 8005a5a:	6861      	ldr	r1, [r4, #4]
 8005a5c:	bfa6      	itte	ge
 8005a5e:	461d      	movge	r5, r3
 8005a60:	2600      	movge	r6, #0
 8005a62:	2601      	movlt	r6, #1
 8005a64:	f7ff fd3e 	bl	80054e4 <_Balloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	b918      	cbnz	r0, 8005a74 <__mdiff+0x5c>
 8005a6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <__mdiff+0x110>)
 8005a72:	e7e5      	b.n	8005a40 <__mdiff+0x28>
 8005a74:	f102 0814 	add.w	r8, r2, #20
 8005a78:	46c2      	mov	sl, r8
 8005a7a:	f04f 0c00 	mov.w	ip, #0
 8005a7e:	6927      	ldr	r7, [r4, #16]
 8005a80:	60c6      	str	r6, [r0, #12]
 8005a82:	692e      	ldr	r6, [r5, #16]
 8005a84:	f104 0014 	add.w	r0, r4, #20
 8005a88:	f105 0914 	add.w	r9, r5, #20
 8005a8c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005a90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a94:	3410      	adds	r4, #16
 8005a96:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005a9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a9e:	fa1f f18b 	uxth.w	r1, fp
 8005aa2:	448c      	add	ip, r1
 8005aa4:	b299      	uxth	r1, r3
 8005aa6:	0c1b      	lsrs	r3, r3, #16
 8005aa8:	ebac 0101 	sub.w	r1, ip, r1
 8005aac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ab0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ab4:	b289      	uxth	r1, r1
 8005ab6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005aba:	454e      	cmp	r6, r9
 8005abc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ac0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ac4:	d8e7      	bhi.n	8005a96 <__mdiff+0x7e>
 8005ac6:	1b73      	subs	r3, r6, r5
 8005ac8:	3b15      	subs	r3, #21
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	3515      	adds	r5, #21
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	42ae      	cmp	r6, r5
 8005ad4:	bf38      	it	cc
 8005ad6:	2304      	movcc	r3, #4
 8005ad8:	4418      	add	r0, r3
 8005ada:	4443      	add	r3, r8
 8005adc:	461e      	mov	r6, r3
 8005ade:	4605      	mov	r5, r0
 8005ae0:	4575      	cmp	r5, lr
 8005ae2:	d30e      	bcc.n	8005b02 <__mdiff+0xea>
 8005ae4:	f10e 0103 	add.w	r1, lr, #3
 8005ae8:	1a09      	subs	r1, r1, r0
 8005aea:	f021 0103 	bic.w	r1, r1, #3
 8005aee:	3803      	subs	r0, #3
 8005af0:	4586      	cmp	lr, r0
 8005af2:	bf38      	it	cc
 8005af4:	2100      	movcc	r1, #0
 8005af6:	4419      	add	r1, r3
 8005af8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005afc:	b18b      	cbz	r3, 8005b22 <__mdiff+0x10a>
 8005afe:	6117      	str	r7, [r2, #16]
 8005b00:	e7a4      	b.n	8005a4c <__mdiff+0x34>
 8005b02:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b06:	fa1f f188 	uxth.w	r1, r8
 8005b0a:	4461      	add	r1, ip
 8005b0c:	140c      	asrs	r4, r1, #16
 8005b0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b12:	b289      	uxth	r1, r1
 8005b14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b18:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005b1c:	f846 1b04 	str.w	r1, [r6], #4
 8005b20:	e7de      	b.n	8005ae0 <__mdiff+0xc8>
 8005b22:	3f01      	subs	r7, #1
 8005b24:	e7e8      	b.n	8005af8 <__mdiff+0xe0>
 8005b26:	bf00      	nop
 8005b28:	0800651b 	.word	0x0800651b
 8005b2c:	0800658c 	.word	0x0800658c

08005b30 <__d2b>:
 8005b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005b34:	2101      	movs	r1, #1
 8005b36:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005b3a:	4690      	mov	r8, r2
 8005b3c:	461d      	mov	r5, r3
 8005b3e:	f7ff fcd1 	bl	80054e4 <_Balloc>
 8005b42:	4604      	mov	r4, r0
 8005b44:	b930      	cbnz	r0, 8005b54 <__d2b+0x24>
 8005b46:	4602      	mov	r2, r0
 8005b48:	f240 310a 	movw	r1, #778	; 0x30a
 8005b4c:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <__d2b+0xb0>)
 8005b4e:	4825      	ldr	r0, [pc, #148]	; (8005be4 <__d2b+0xb4>)
 8005b50:	f000 faf8 	bl	8006144 <__assert_func>
 8005b54:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005b58:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005b5c:	bb2d      	cbnz	r5, 8005baa <__d2b+0x7a>
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	f1b8 0300 	subs.w	r3, r8, #0
 8005b64:	d026      	beq.n	8005bb4 <__d2b+0x84>
 8005b66:	4668      	mov	r0, sp
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	f7ff fd83 	bl	8005674 <__lo0bits>
 8005b6e:	9900      	ldr	r1, [sp, #0]
 8005b70:	b1f0      	cbz	r0, 8005bb0 <__d2b+0x80>
 8005b72:	9a01      	ldr	r2, [sp, #4]
 8005b74:	f1c0 0320 	rsb	r3, r0, #32
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	40c2      	lsrs	r2, r0
 8005b80:	6163      	str	r3, [r4, #20]
 8005b82:	9201      	str	r2, [sp, #4]
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf14      	ite	ne
 8005b8a:	2102      	movne	r1, #2
 8005b8c:	2101      	moveq	r1, #1
 8005b8e:	61a3      	str	r3, [r4, #24]
 8005b90:	6121      	str	r1, [r4, #16]
 8005b92:	b1c5      	cbz	r5, 8005bc6 <__d2b+0x96>
 8005b94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b98:	4405      	add	r5, r0
 8005b9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b9e:	603d      	str	r5, [r7, #0]
 8005ba0:	6030      	str	r0, [r6, #0]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	b002      	add	sp, #8
 8005ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bae:	e7d6      	b.n	8005b5e <__d2b+0x2e>
 8005bb0:	6161      	str	r1, [r4, #20]
 8005bb2:	e7e7      	b.n	8005b84 <__d2b+0x54>
 8005bb4:	a801      	add	r0, sp, #4
 8005bb6:	f7ff fd5d 	bl	8005674 <__lo0bits>
 8005bba:	2101      	movs	r1, #1
 8005bbc:	9b01      	ldr	r3, [sp, #4]
 8005bbe:	6121      	str	r1, [r4, #16]
 8005bc0:	6163      	str	r3, [r4, #20]
 8005bc2:	3020      	adds	r0, #32
 8005bc4:	e7e5      	b.n	8005b92 <__d2b+0x62>
 8005bc6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005bca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bce:	6038      	str	r0, [r7, #0]
 8005bd0:	6918      	ldr	r0, [r3, #16]
 8005bd2:	f7ff fd2f 	bl	8005634 <__hi0bits>
 8005bd6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005bda:	6031      	str	r1, [r6, #0]
 8005bdc:	e7e1      	b.n	8005ba2 <__d2b+0x72>
 8005bde:	bf00      	nop
 8005be0:	0800651b 	.word	0x0800651b
 8005be4:	0800658c 	.word	0x0800658c

08005be8 <_calloc_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	fba1 5402 	umull	r5, r4, r1, r2
 8005bee:	b934      	cbnz	r4, 8005bfe <_calloc_r+0x16>
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f000 f875 	bl	8005ce0 <_malloc_r>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	b928      	cbnz	r0, 8005c06 <_calloc_r+0x1e>
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	220c      	movs	r2, #12
 8005c00:	2600      	movs	r6, #0
 8005c02:	6002      	str	r2, [r0, #0]
 8005c04:	e7f9      	b.n	8005bfa <_calloc_r+0x12>
 8005c06:	462a      	mov	r2, r5
 8005c08:	4621      	mov	r1, r4
 8005c0a:	f7fd fdf7 	bl	80037fc <memset>
 8005c0e:	e7f4      	b.n	8005bfa <_calloc_r+0x12>

08005c10 <_free_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4605      	mov	r5, r0
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d040      	beq.n	8005c9a <_free_r+0x8a>
 8005c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c1c:	1f0c      	subs	r4, r1, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bfb8      	it	lt
 8005c22:	18e4      	addlt	r4, r4, r3
 8005c24:	f000 fb14 	bl	8006250 <__malloc_lock>
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <_free_r+0x8c>)
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	b933      	cbnz	r3, 8005c3c <_free_r+0x2c>
 8005c2e:	6063      	str	r3, [r4, #4]
 8005c30:	6014      	str	r4, [r2, #0]
 8005c32:	4628      	mov	r0, r5
 8005c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c38:	f000 bb10 	b.w	800625c <__malloc_unlock>
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d908      	bls.n	8005c52 <_free_r+0x42>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	1821      	adds	r1, r4, r0
 8005c44:	428b      	cmp	r3, r1
 8005c46:	bf01      	itttt	eq
 8005c48:	6819      	ldreq	r1, [r3, #0]
 8005c4a:	685b      	ldreq	r3, [r3, #4]
 8005c4c:	1809      	addeq	r1, r1, r0
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	e7ed      	b.n	8005c2e <_free_r+0x1e>
 8005c52:	461a      	mov	r2, r3
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	b10b      	cbz	r3, 8005c5c <_free_r+0x4c>
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	d9fa      	bls.n	8005c52 <_free_r+0x42>
 8005c5c:	6811      	ldr	r1, [r2, #0]
 8005c5e:	1850      	adds	r0, r2, r1
 8005c60:	42a0      	cmp	r0, r4
 8005c62:	d10b      	bne.n	8005c7c <_free_r+0x6c>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	4401      	add	r1, r0
 8005c68:	1850      	adds	r0, r2, r1
 8005c6a:	4283      	cmp	r3, r0
 8005c6c:	6011      	str	r1, [r2, #0]
 8005c6e:	d1e0      	bne.n	8005c32 <_free_r+0x22>
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4401      	add	r1, r0
 8005c76:	6011      	str	r1, [r2, #0]
 8005c78:	6053      	str	r3, [r2, #4]
 8005c7a:	e7da      	b.n	8005c32 <_free_r+0x22>
 8005c7c:	d902      	bls.n	8005c84 <_free_r+0x74>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	602b      	str	r3, [r5, #0]
 8005c82:	e7d6      	b.n	8005c32 <_free_r+0x22>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	1821      	adds	r1, r4, r0
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf01      	itttt	eq
 8005c8c:	6819      	ldreq	r1, [r3, #0]
 8005c8e:	685b      	ldreq	r3, [r3, #4]
 8005c90:	1809      	addeq	r1, r1, r0
 8005c92:	6021      	streq	r1, [r4, #0]
 8005c94:	6063      	str	r3, [r4, #4]
 8005c96:	6054      	str	r4, [r2, #4]
 8005c98:	e7cb      	b.n	8005c32 <_free_r+0x22>
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	2000030c 	.word	0x2000030c

08005ca0 <sbrk_aligned>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	4e0e      	ldr	r6, [pc, #56]	; (8005cdc <sbrk_aligned+0x3c>)
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	6831      	ldr	r1, [r6, #0]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	b911      	cbnz	r1, 8005cb2 <sbrk_aligned+0x12>
 8005cac:	f000 f9e4 	bl	8006078 <_sbrk_r>
 8005cb0:	6030      	str	r0, [r6, #0]
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 f9df 	bl	8006078 <_sbrk_r>
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	d00a      	beq.n	8005cd4 <sbrk_aligned+0x34>
 8005cbe:	1cc4      	adds	r4, r0, #3
 8005cc0:	f024 0403 	bic.w	r4, r4, #3
 8005cc4:	42a0      	cmp	r0, r4
 8005cc6:	d007      	beq.n	8005cd8 <sbrk_aligned+0x38>
 8005cc8:	1a21      	subs	r1, r4, r0
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 f9d4 	bl	8006078 <_sbrk_r>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d101      	bne.n	8005cd8 <sbrk_aligned+0x38>
 8005cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8005cd8:	4620      	mov	r0, r4
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	20000310 	.word	0x20000310

08005ce0 <_malloc_r>:
 8005ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce4:	1ccd      	adds	r5, r1, #3
 8005ce6:	f025 0503 	bic.w	r5, r5, #3
 8005cea:	3508      	adds	r5, #8
 8005cec:	2d0c      	cmp	r5, #12
 8005cee:	bf38      	it	cc
 8005cf0:	250c      	movcc	r5, #12
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	db01      	blt.n	8005cfc <_malloc_r+0x1c>
 8005cf8:	42a9      	cmp	r1, r5
 8005cfa:	d905      	bls.n	8005d08 <_malloc_r+0x28>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	2600      	movs	r6, #0
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	4630      	mov	r0, r6
 8005d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d08:	4e2e      	ldr	r6, [pc, #184]	; (8005dc4 <_malloc_r+0xe4>)
 8005d0a:	f000 faa1 	bl	8006250 <__malloc_lock>
 8005d0e:	6833      	ldr	r3, [r6, #0]
 8005d10:	461c      	mov	r4, r3
 8005d12:	bb34      	cbnz	r4, 8005d62 <_malloc_r+0x82>
 8005d14:	4629      	mov	r1, r5
 8005d16:	4638      	mov	r0, r7
 8005d18:	f7ff ffc2 	bl	8005ca0 <sbrk_aligned>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	4604      	mov	r4, r0
 8005d20:	d14d      	bne.n	8005dbe <_malloc_r+0xde>
 8005d22:	6834      	ldr	r4, [r6, #0]
 8005d24:	4626      	mov	r6, r4
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	d140      	bne.n	8005dac <_malloc_r+0xcc>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4638      	mov	r0, r7
 8005d30:	eb04 0803 	add.w	r8, r4, r3
 8005d34:	f000 f9a0 	bl	8006078 <_sbrk_r>
 8005d38:	4580      	cmp	r8, r0
 8005d3a:	d13a      	bne.n	8005db2 <_malloc_r+0xd2>
 8005d3c:	6821      	ldr	r1, [r4, #0]
 8005d3e:	3503      	adds	r5, #3
 8005d40:	1a6d      	subs	r5, r5, r1
 8005d42:	f025 0503 	bic.w	r5, r5, #3
 8005d46:	3508      	adds	r5, #8
 8005d48:	2d0c      	cmp	r5, #12
 8005d4a:	bf38      	it	cc
 8005d4c:	250c      	movcc	r5, #12
 8005d4e:	4638      	mov	r0, r7
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7ff ffa5 	bl	8005ca0 <sbrk_aligned>
 8005d56:	3001      	adds	r0, #1
 8005d58:	d02b      	beq.n	8005db2 <_malloc_r+0xd2>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	442b      	add	r3, r5
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	e00e      	b.n	8005d80 <_malloc_r+0xa0>
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	1b52      	subs	r2, r2, r5
 8005d66:	d41e      	bmi.n	8005da6 <_malloc_r+0xc6>
 8005d68:	2a0b      	cmp	r2, #11
 8005d6a:	d916      	bls.n	8005d9a <_malloc_r+0xba>
 8005d6c:	1961      	adds	r1, r4, r5
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	6025      	str	r5, [r4, #0]
 8005d72:	bf18      	it	ne
 8005d74:	6059      	strne	r1, [r3, #4]
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	bf08      	it	eq
 8005d7a:	6031      	streq	r1, [r6, #0]
 8005d7c:	5162      	str	r2, [r4, r5]
 8005d7e:	604b      	str	r3, [r1, #4]
 8005d80:	4638      	mov	r0, r7
 8005d82:	f104 060b 	add.w	r6, r4, #11
 8005d86:	f000 fa69 	bl	800625c <__malloc_unlock>
 8005d8a:	f026 0607 	bic.w	r6, r6, #7
 8005d8e:	1d23      	adds	r3, r4, #4
 8005d90:	1af2      	subs	r2, r6, r3
 8005d92:	d0b6      	beq.n	8005d02 <_malloc_r+0x22>
 8005d94:	1b9b      	subs	r3, r3, r6
 8005d96:	50a3      	str	r3, [r4, r2]
 8005d98:	e7b3      	b.n	8005d02 <_malloc_r+0x22>
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	bf0c      	ite	eq
 8005da0:	6032      	streq	r2, [r6, #0]
 8005da2:	605a      	strne	r2, [r3, #4]
 8005da4:	e7ec      	b.n	8005d80 <_malloc_r+0xa0>
 8005da6:	4623      	mov	r3, r4
 8005da8:	6864      	ldr	r4, [r4, #4]
 8005daa:	e7b2      	b.n	8005d12 <_malloc_r+0x32>
 8005dac:	4634      	mov	r4, r6
 8005dae:	6876      	ldr	r6, [r6, #4]
 8005db0:	e7b9      	b.n	8005d26 <_malloc_r+0x46>
 8005db2:	230c      	movs	r3, #12
 8005db4:	4638      	mov	r0, r7
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	f000 fa50 	bl	800625c <__malloc_unlock>
 8005dbc:	e7a1      	b.n	8005d02 <_malloc_r+0x22>
 8005dbe:	6025      	str	r5, [r4, #0]
 8005dc0:	e7de      	b.n	8005d80 <_malloc_r+0xa0>
 8005dc2:	bf00      	nop
 8005dc4:	2000030c 	.word	0x2000030c

08005dc8 <__sfputc_r>:
 8005dc8:	6893      	ldr	r3, [r2, #8]
 8005dca:	b410      	push	{r4}
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	6093      	str	r3, [r2, #8]
 8005dd2:	da07      	bge.n	8005de4 <__sfputc_r+0x1c>
 8005dd4:	6994      	ldr	r4, [r2, #24]
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	db01      	blt.n	8005dde <__sfputc_r+0x16>
 8005dda:	290a      	cmp	r1, #10
 8005ddc:	d102      	bne.n	8005de4 <__sfputc_r+0x1c>
 8005dde:	bc10      	pop	{r4}
 8005de0:	f7fe ba02 	b.w	80041e8 <__swbuf_r>
 8005de4:	6813      	ldr	r3, [r2, #0]
 8005de6:	1c58      	adds	r0, r3, #1
 8005de8:	6010      	str	r0, [r2, #0]
 8005dea:	7019      	strb	r1, [r3, #0]
 8005dec:	4608      	mov	r0, r1
 8005dee:	bc10      	pop	{r4}
 8005df0:	4770      	bx	lr

08005df2 <__sfputs_r>:
 8005df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	4614      	mov	r4, r2
 8005dfa:	18d5      	adds	r5, r2, r3
 8005dfc:	42ac      	cmp	r4, r5
 8005dfe:	d101      	bne.n	8005e04 <__sfputs_r+0x12>
 8005e00:	2000      	movs	r0, #0
 8005e02:	e007      	b.n	8005e14 <__sfputs_r+0x22>
 8005e04:	463a      	mov	r2, r7
 8005e06:	4630      	mov	r0, r6
 8005e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e0c:	f7ff ffdc 	bl	8005dc8 <__sfputc_r>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d1f3      	bne.n	8005dfc <__sfputs_r+0xa>
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e18 <_vfiprintf_r>:
 8005e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	4614      	mov	r4, r2
 8005e20:	4698      	mov	r8, r3
 8005e22:	4606      	mov	r6, r0
 8005e24:	b09d      	sub	sp, #116	; 0x74
 8005e26:	b118      	cbz	r0, 8005e30 <_vfiprintf_r+0x18>
 8005e28:	6983      	ldr	r3, [r0, #24]
 8005e2a:	b90b      	cbnz	r3, 8005e30 <_vfiprintf_r+0x18>
 8005e2c:	f7ff fa2c 	bl	8005288 <__sinit>
 8005e30:	4b89      	ldr	r3, [pc, #548]	; (8006058 <_vfiprintf_r+0x240>)
 8005e32:	429d      	cmp	r5, r3
 8005e34:	d11b      	bne.n	8005e6e <_vfiprintf_r+0x56>
 8005e36:	6875      	ldr	r5, [r6, #4]
 8005e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3a:	07d9      	lsls	r1, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_vfiprintf_r+0x32>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_vfiprintf_r+0x32>
 8005e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e46:	f7ff fac2 	bl	80053ce <__retarget_lock_acquire_recursive>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	d501      	bpl.n	8005e54 <_vfiprintf_r+0x3c>
 8005e50:	692b      	ldr	r3, [r5, #16]
 8005e52:	b9eb      	cbnz	r3, 8005e90 <_vfiprintf_r+0x78>
 8005e54:	4629      	mov	r1, r5
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7fe fa18 	bl	800428c <__swsetup_r>
 8005e5c:	b1c0      	cbz	r0, 8005e90 <_vfiprintf_r+0x78>
 8005e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e60:	07dc      	lsls	r4, r3, #31
 8005e62:	d50e      	bpl.n	8005e82 <_vfiprintf_r+0x6a>
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	b01d      	add	sp, #116	; 0x74
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	4b7b      	ldr	r3, [pc, #492]	; (800605c <_vfiprintf_r+0x244>)
 8005e70:	429d      	cmp	r5, r3
 8005e72:	d101      	bne.n	8005e78 <_vfiprintf_r+0x60>
 8005e74:	68b5      	ldr	r5, [r6, #8]
 8005e76:	e7df      	b.n	8005e38 <_vfiprintf_r+0x20>
 8005e78:	4b79      	ldr	r3, [pc, #484]	; (8006060 <_vfiprintf_r+0x248>)
 8005e7a:	429d      	cmp	r5, r3
 8005e7c:	bf08      	it	eq
 8005e7e:	68f5      	ldreq	r5, [r6, #12]
 8005e80:	e7da      	b.n	8005e38 <_vfiprintf_r+0x20>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	0598      	lsls	r0, r3, #22
 8005e86:	d4ed      	bmi.n	8005e64 <_vfiprintf_r+0x4c>
 8005e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8a:	f7ff faa1 	bl	80053d0 <__retarget_lock_release_recursive>
 8005e8e:	e7e9      	b.n	8005e64 <_vfiprintf_r+0x4c>
 8005e90:	2300      	movs	r3, #0
 8005e92:	9309      	str	r3, [sp, #36]	; 0x24
 8005e94:	2320      	movs	r3, #32
 8005e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e9a:	2330      	movs	r3, #48	; 0x30
 8005e9c:	f04f 0901 	mov.w	r9, #1
 8005ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006064 <_vfiprintf_r+0x24c>
 8005ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eac:	4623      	mov	r3, r4
 8005eae:	469a      	mov	sl, r3
 8005eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb4:	b10a      	cbz	r2, 8005eba <_vfiprintf_r+0xa2>
 8005eb6:	2a25      	cmp	r2, #37	; 0x25
 8005eb8:	d1f9      	bne.n	8005eae <_vfiprintf_r+0x96>
 8005eba:	ebba 0b04 	subs.w	fp, sl, r4
 8005ebe:	d00b      	beq.n	8005ed8 <_vfiprintf_r+0xc0>
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ff93 	bl	8005df2 <__sfputs_r>
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f000 80aa 	beq.w	8006026 <_vfiprintf_r+0x20e>
 8005ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed4:	445a      	add	r2, fp
 8005ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80a2 	beq.w	8006026 <_vfiprintf_r+0x20e>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eec:	f10a 0a01 	add.w	sl, sl, #1
 8005ef0:	9304      	str	r3, [sp, #16]
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8005efa:	4654      	mov	r4, sl
 8005efc:	2205      	movs	r2, #5
 8005efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f02:	4858      	ldr	r0, [pc, #352]	; (8006064 <_vfiprintf_r+0x24c>)
 8005f04:	f7ff fad2 	bl	80054ac <memchr>
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	b9d8      	cbnz	r0, 8005f44 <_vfiprintf_r+0x12c>
 8005f0c:	06d1      	lsls	r1, r2, #27
 8005f0e:	bf44      	itt	mi
 8005f10:	2320      	movmi	r3, #32
 8005f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f16:	0713      	lsls	r3, r2, #28
 8005f18:	bf44      	itt	mi
 8005f1a:	232b      	movmi	r3, #43	; 0x2b
 8005f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f20:	f89a 3000 	ldrb.w	r3, [sl]
 8005f24:	2b2a      	cmp	r3, #42	; 0x2a
 8005f26:	d015      	beq.n	8005f54 <_vfiprintf_r+0x13c>
 8005f28:	4654      	mov	r4, sl
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f04f 0c0a 	mov.w	ip, #10
 8005f30:	9a07      	ldr	r2, [sp, #28]
 8005f32:	4621      	mov	r1, r4
 8005f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f38:	3b30      	subs	r3, #48	; 0x30
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d94e      	bls.n	8005fdc <_vfiprintf_r+0x1c4>
 8005f3e:	b1b0      	cbz	r0, 8005f6e <_vfiprintf_r+0x156>
 8005f40:	9207      	str	r2, [sp, #28]
 8005f42:	e014      	b.n	8005f6e <_vfiprintf_r+0x156>
 8005f44:	eba0 0308 	sub.w	r3, r0, r8
 8005f48:	fa09 f303 	lsl.w	r3, r9, r3
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	46a2      	mov	sl, r4
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	e7d2      	b.n	8005efa <_vfiprintf_r+0xe2>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d19      	adds	r1, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9103      	str	r1, [sp, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfbb      	ittet	lt
 8005f60:	425b      	neglt	r3, r3
 8005f62:	f042 0202 	orrlt.w	r2, r2, #2
 8005f66:	9307      	strge	r3, [sp, #28]
 8005f68:	9307      	strlt	r3, [sp, #28]
 8005f6a:	bfb8      	it	lt
 8005f6c:	9204      	strlt	r2, [sp, #16]
 8005f6e:	7823      	ldrb	r3, [r4, #0]
 8005f70:	2b2e      	cmp	r3, #46	; 0x2e
 8005f72:	d10c      	bne.n	8005f8e <_vfiprintf_r+0x176>
 8005f74:	7863      	ldrb	r3, [r4, #1]
 8005f76:	2b2a      	cmp	r3, #42	; 0x2a
 8005f78:	d135      	bne.n	8005fe6 <_vfiprintf_r+0x1ce>
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	3402      	adds	r4, #2
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	9203      	str	r2, [sp, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bfb8      	it	lt
 8005f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006068 <_vfiprintf_r+0x250>
 8005f92:	2203      	movs	r2, #3
 8005f94:	4650      	mov	r0, sl
 8005f96:	7821      	ldrb	r1, [r4, #0]
 8005f98:	f7ff fa88 	bl	80054ac <memchr>
 8005f9c:	b140      	cbz	r0, 8005fb0 <_vfiprintf_r+0x198>
 8005f9e:	2340      	movs	r3, #64	; 0x40
 8005fa0:	eba0 000a 	sub.w	r0, r0, sl
 8005fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	3401      	adds	r4, #1
 8005fac:	4303      	orrs	r3, r0
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb4:	2206      	movs	r2, #6
 8005fb6:	482d      	ldr	r0, [pc, #180]	; (800606c <_vfiprintf_r+0x254>)
 8005fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fbc:	f7ff fa76 	bl	80054ac <memchr>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d03f      	beq.n	8006044 <_vfiprintf_r+0x22c>
 8005fc4:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <_vfiprintf_r+0x258>)
 8005fc6:	bb1b      	cbnz	r3, 8006010 <_vfiprintf_r+0x1f8>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	3307      	adds	r3, #7
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd6:	443b      	add	r3, r7
 8005fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fda:	e767      	b.n	8005eac <_vfiprintf_r+0x94>
 8005fdc:	460c      	mov	r4, r1
 8005fde:	2001      	movs	r0, #1
 8005fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe4:	e7a5      	b.n	8005f32 <_vfiprintf_r+0x11a>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f04f 0c0a 	mov.w	ip, #10
 8005fec:	4619      	mov	r1, r3
 8005fee:	3401      	adds	r4, #1
 8005ff0:	9305      	str	r3, [sp, #20]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff8:	3a30      	subs	r2, #48	; 0x30
 8005ffa:	2a09      	cmp	r2, #9
 8005ffc:	d903      	bls.n	8006006 <_vfiprintf_r+0x1ee>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0c5      	beq.n	8005f8e <_vfiprintf_r+0x176>
 8006002:	9105      	str	r1, [sp, #20]
 8006004:	e7c3      	b.n	8005f8e <_vfiprintf_r+0x176>
 8006006:	4604      	mov	r4, r0
 8006008:	2301      	movs	r3, #1
 800600a:	fb0c 2101 	mla	r1, ip, r1, r2
 800600e:	e7f0      	b.n	8005ff2 <_vfiprintf_r+0x1da>
 8006010:	ab03      	add	r3, sp, #12
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	462a      	mov	r2, r5
 8006016:	4630      	mov	r0, r6
 8006018:	4b16      	ldr	r3, [pc, #88]	; (8006074 <_vfiprintf_r+0x25c>)
 800601a:	a904      	add	r1, sp, #16
 800601c:	f7fd fc94 	bl	8003948 <_printf_float>
 8006020:	4607      	mov	r7, r0
 8006022:	1c78      	adds	r0, r7, #1
 8006024:	d1d6      	bne.n	8005fd4 <_vfiprintf_r+0x1bc>
 8006026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006028:	07d9      	lsls	r1, r3, #31
 800602a:	d405      	bmi.n	8006038 <_vfiprintf_r+0x220>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	059a      	lsls	r2, r3, #22
 8006030:	d402      	bmi.n	8006038 <_vfiprintf_r+0x220>
 8006032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006034:	f7ff f9cc 	bl	80053d0 <__retarget_lock_release_recursive>
 8006038:	89ab      	ldrh	r3, [r5, #12]
 800603a:	065b      	lsls	r3, r3, #25
 800603c:	f53f af12 	bmi.w	8005e64 <_vfiprintf_r+0x4c>
 8006040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006042:	e711      	b.n	8005e68 <_vfiprintf_r+0x50>
 8006044:	ab03      	add	r3, sp, #12
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	462a      	mov	r2, r5
 800604a:	4630      	mov	r0, r6
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <_vfiprintf_r+0x25c>)
 800604e:	a904      	add	r1, sp, #16
 8006050:	f7fd ff16 	bl	8003e80 <_printf_i>
 8006054:	e7e4      	b.n	8006020 <_vfiprintf_r+0x208>
 8006056:	bf00      	nop
 8006058:	0800654c 	.word	0x0800654c
 800605c:	0800656c 	.word	0x0800656c
 8006060:	0800652c 	.word	0x0800652c
 8006064:	080066e4 	.word	0x080066e4
 8006068:	080066ea 	.word	0x080066ea
 800606c:	080066ee 	.word	0x080066ee
 8006070:	08003949 	.word	0x08003949
 8006074:	08005df3 	.word	0x08005df3

08006078 <_sbrk_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	2300      	movs	r3, #0
 800607c:	4d05      	ldr	r5, [pc, #20]	; (8006094 <_sbrk_r+0x1c>)
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f000 f992 	bl	80063ac <_sbrk>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_sbrk_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_sbrk_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20000314 	.word	0x20000314

08006098 <__sread>:
 8006098:	b510      	push	{r4, lr}
 800609a:	460c      	mov	r4, r1
 800609c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a0:	f000 f8e2 	bl	8006268 <_read_r>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	bfab      	itete	ge
 80060a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060aa:	89a3      	ldrhlt	r3, [r4, #12]
 80060ac:	181b      	addge	r3, r3, r0
 80060ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060b2:	bfac      	ite	ge
 80060b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060b6:	81a3      	strhlt	r3, [r4, #12]
 80060b8:	bd10      	pop	{r4, pc}

080060ba <__swrite>:
 80060ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060be:	461f      	mov	r7, r3
 80060c0:	898b      	ldrh	r3, [r1, #12]
 80060c2:	4605      	mov	r5, r0
 80060c4:	05db      	lsls	r3, r3, #23
 80060c6:	460c      	mov	r4, r1
 80060c8:	4616      	mov	r6, r2
 80060ca:	d505      	bpl.n	80060d8 <__swrite+0x1e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	2200      	movs	r2, #0
 80060d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d4:	f000 f898 	bl	8006208 <_lseek_r>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	4632      	mov	r2, r6
 80060dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060e0:	81a3      	strh	r3, [r4, #12]
 80060e2:	4628      	mov	r0, r5
 80060e4:	463b      	mov	r3, r7
 80060e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ee:	f000 b817 	b.w	8006120 <_write_r>

080060f2 <__sseek>:
 80060f2:	b510      	push	{r4, lr}
 80060f4:	460c      	mov	r4, r1
 80060f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fa:	f000 f885 	bl	8006208 <_lseek_r>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	bf15      	itete	ne
 8006104:	6560      	strne	r0, [r4, #84]	; 0x54
 8006106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800610a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800610e:	81a3      	strheq	r3, [r4, #12]
 8006110:	bf18      	it	ne
 8006112:	81a3      	strhne	r3, [r4, #12]
 8006114:	bd10      	pop	{r4, pc}

08006116 <__sclose>:
 8006116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611a:	f000 b831 	b.w	8006180 <_close_r>
	...

08006120 <_write_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4604      	mov	r4, r0
 8006124:	4608      	mov	r0, r1
 8006126:	4611      	mov	r1, r2
 8006128:	2200      	movs	r2, #0
 800612a:	4d05      	ldr	r5, [pc, #20]	; (8006140 <_write_r+0x20>)
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f7fa fd3c 	bl	8000bac <_write>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_write_r+0x1e>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_write_r+0x1e>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	20000314 	.word	0x20000314

08006144 <__assert_func>:
 8006144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006146:	4614      	mov	r4, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <__assert_func+0x2c>)
 800614c:	4605      	mov	r5, r0
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68d8      	ldr	r0, [r3, #12]
 8006152:	b14c      	cbz	r4, 8006168 <__assert_func+0x24>
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <__assert_func+0x30>)
 8006156:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800615a:	9100      	str	r1, [sp, #0]
 800615c:	462b      	mov	r3, r5
 800615e:	4906      	ldr	r1, [pc, #24]	; (8006178 <__assert_func+0x34>)
 8006160:	f000 f81e 	bl	80061a0 <fiprintf>
 8006164:	f000 f89f 	bl	80062a6 <abort>
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__assert_func+0x38>)
 800616a:	461c      	mov	r4, r3
 800616c:	e7f3      	b.n	8006156 <__assert_func+0x12>
 800616e:	bf00      	nop
 8006170:	2000000c 	.word	0x2000000c
 8006174:	080066f5 	.word	0x080066f5
 8006178:	08006702 	.word	0x08006702
 800617c:	08006730 	.word	0x08006730

08006180 <_close_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	2300      	movs	r3, #0
 8006184:	4d05      	ldr	r5, [pc, #20]	; (800619c <_close_r+0x1c>)
 8006186:	4604      	mov	r4, r0
 8006188:	4608      	mov	r0, r1
 800618a:	602b      	str	r3, [r5, #0]
 800618c:	f000 f8d6 	bl	800633c <_close>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_close_r+0x1a>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	b103      	cbz	r3, 800619a <_close_r+0x1a>
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	20000314 	.word	0x20000314

080061a0 <fiprintf>:
 80061a0:	b40e      	push	{r1, r2, r3}
 80061a2:	b503      	push	{r0, r1, lr}
 80061a4:	4601      	mov	r1, r0
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	4805      	ldr	r0, [pc, #20]	; (80061c0 <fiprintf+0x20>)
 80061aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f7ff fe31 	bl	8005e18 <_vfiprintf_r>
 80061b6:	b002      	add	sp, #8
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	2000000c 	.word	0x2000000c

080061c4 <_fstat_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	2300      	movs	r3, #0
 80061c8:	4d06      	ldr	r5, [pc, #24]	; (80061e4 <_fstat_r+0x20>)
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	f000 f8bb 	bl	800634c <_fstat>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	d102      	bne.n	80061e0 <_fstat_r+0x1c>
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	b103      	cbz	r3, 80061e0 <_fstat_r+0x1c>
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	bd38      	pop	{r3, r4, r5, pc}
 80061e2:	bf00      	nop
 80061e4:	20000314 	.word	0x20000314

080061e8 <_isatty_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	2300      	movs	r3, #0
 80061ec:	4d05      	ldr	r5, [pc, #20]	; (8006204 <_isatty_r+0x1c>)
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f000 f8ba 	bl	800636c <_isatty>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_isatty_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_isatty_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000314 	.word	0x20000314

08006208 <_lseek_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	2200      	movs	r2, #0
 8006212:	4d05      	ldr	r5, [pc, #20]	; (8006228 <_lseek_r+0x20>)
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f000 f8b8 	bl	800638c <_lseek>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_lseek_r+0x1e>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_lseek_r+0x1e>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20000314 	.word	0x20000314

0800622c <__ascii_mbtowc>:
 800622c:	b082      	sub	sp, #8
 800622e:	b901      	cbnz	r1, 8006232 <__ascii_mbtowc+0x6>
 8006230:	a901      	add	r1, sp, #4
 8006232:	b142      	cbz	r2, 8006246 <__ascii_mbtowc+0x1a>
 8006234:	b14b      	cbz	r3, 800624a <__ascii_mbtowc+0x1e>
 8006236:	7813      	ldrb	r3, [r2, #0]
 8006238:	600b      	str	r3, [r1, #0]
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	1e10      	subs	r0, r2, #0
 800623e:	bf18      	it	ne
 8006240:	2001      	movne	r0, #1
 8006242:	b002      	add	sp, #8
 8006244:	4770      	bx	lr
 8006246:	4610      	mov	r0, r2
 8006248:	e7fb      	b.n	8006242 <__ascii_mbtowc+0x16>
 800624a:	f06f 0001 	mvn.w	r0, #1
 800624e:	e7f8      	b.n	8006242 <__ascii_mbtowc+0x16>

08006250 <__malloc_lock>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__malloc_lock+0x8>)
 8006252:	f7ff b8bc 	b.w	80053ce <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	20000308 	.word	0x20000308

0800625c <__malloc_unlock>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__malloc_unlock+0x8>)
 800625e:	f7ff b8b7 	b.w	80053d0 <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	20000308 	.word	0x20000308

08006268 <_read_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	2200      	movs	r2, #0
 8006272:	4d05      	ldr	r5, [pc, #20]	; (8006288 <_read_r+0x20>)
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 f890 	bl	800639c <_read>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d102      	bne.n	8006286 <_read_r+0x1e>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	b103      	cbz	r3, 8006286 <_read_r+0x1e>
 8006284:	6023      	str	r3, [r4, #0]
 8006286:	bd38      	pop	{r3, r4, r5, pc}
 8006288:	20000314 	.word	0x20000314

0800628c <__ascii_wctomb>:
 800628c:	4603      	mov	r3, r0
 800628e:	4608      	mov	r0, r1
 8006290:	b141      	cbz	r1, 80062a4 <__ascii_wctomb+0x18>
 8006292:	2aff      	cmp	r2, #255	; 0xff
 8006294:	d904      	bls.n	80062a0 <__ascii_wctomb+0x14>
 8006296:	228a      	movs	r2, #138	; 0x8a
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	4770      	bx	lr
 80062a0:	2001      	movs	r0, #1
 80062a2:	700a      	strb	r2, [r1, #0]
 80062a4:	4770      	bx	lr

080062a6 <abort>:
 80062a6:	2006      	movs	r0, #6
 80062a8:	b508      	push	{r3, lr}
 80062aa:	f000 f82b 	bl	8006304 <raise>
 80062ae:	2001      	movs	r0, #1
 80062b0:	f000 f88a 	bl	80063c8 <_exit>

080062b4 <_raise_r>:
 80062b4:	291f      	cmp	r1, #31
 80062b6:	b538      	push	{r3, r4, r5, lr}
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	d904      	bls.n	80062c8 <_raise_r+0x14>
 80062be:	2316      	movs	r3, #22
 80062c0:	6003      	str	r3, [r0, #0]
 80062c2:	f04f 30ff 	mov.w	r0, #4294967295
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062ca:	b112      	cbz	r2, 80062d2 <_raise_r+0x1e>
 80062cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062d0:	b94b      	cbnz	r3, 80062e6 <_raise_r+0x32>
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 f830 	bl	8006338 <_getpid_r>
 80062d8:	462a      	mov	r2, r5
 80062da:	4601      	mov	r1, r0
 80062dc:	4620      	mov	r0, r4
 80062de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062e2:	f000 b817 	b.w	8006314 <_kill_r>
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d00a      	beq.n	8006300 <_raise_r+0x4c>
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	d103      	bne.n	80062f6 <_raise_r+0x42>
 80062ee:	2316      	movs	r3, #22
 80062f0:	6003      	str	r3, [r0, #0]
 80062f2:	2001      	movs	r0, #1
 80062f4:	e7e7      	b.n	80062c6 <_raise_r+0x12>
 80062f6:	2400      	movs	r4, #0
 80062f8:	4628      	mov	r0, r5
 80062fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062fe:	4798      	blx	r3
 8006300:	2000      	movs	r0, #0
 8006302:	e7e0      	b.n	80062c6 <_raise_r+0x12>

08006304 <raise>:
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <raise+0xc>)
 8006306:	4601      	mov	r1, r0
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f7ff bfd3 	b.w	80062b4 <_raise_r>
 800630e:	bf00      	nop
 8006310:	2000000c 	.word	0x2000000c

08006314 <_kill_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	2300      	movs	r3, #0
 8006318:	4d06      	ldr	r5, [pc, #24]	; (8006334 <_kill_r+0x20>)
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	4611      	mov	r1, r2
 8006320:	602b      	str	r3, [r5, #0]
 8006322:	f000 f82b 	bl	800637c <_kill>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	d102      	bne.n	8006330 <_kill_r+0x1c>
 800632a:	682b      	ldr	r3, [r5, #0]
 800632c:	b103      	cbz	r3, 8006330 <_kill_r+0x1c>
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	bd38      	pop	{r3, r4, r5, pc}
 8006332:	bf00      	nop
 8006334:	20000314 	.word	0x20000314

08006338 <_getpid_r>:
 8006338:	f000 b810 	b.w	800635c <_getpid>

0800633c <_close>:
 800633c:	2258      	movs	r2, #88	; 0x58
 800633e:	4b02      	ldr	r3, [pc, #8]	; (8006348 <_close+0xc>)
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	4770      	bx	lr
 8006348:	20000314 	.word	0x20000314

0800634c <_fstat>:
 800634c:	2258      	movs	r2, #88	; 0x58
 800634e:	4b02      	ldr	r3, [pc, #8]	; (8006358 <_fstat+0xc>)
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	4770      	bx	lr
 8006358:	20000314 	.word	0x20000314

0800635c <_getpid>:
 800635c:	2258      	movs	r2, #88	; 0x58
 800635e:	4b02      	ldr	r3, [pc, #8]	; (8006368 <_getpid+0xc>)
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	4770      	bx	lr
 8006368:	20000314 	.word	0x20000314

0800636c <_isatty>:
 800636c:	2258      	movs	r2, #88	; 0x58
 800636e:	4b02      	ldr	r3, [pc, #8]	; (8006378 <_isatty+0xc>)
 8006370:	2000      	movs	r0, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000314 	.word	0x20000314

0800637c <_kill>:
 800637c:	2258      	movs	r2, #88	; 0x58
 800637e:	4b02      	ldr	r3, [pc, #8]	; (8006388 <_kill+0xc>)
 8006380:	f04f 30ff 	mov.w	r0, #4294967295
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	4770      	bx	lr
 8006388:	20000314 	.word	0x20000314

0800638c <_lseek>:
 800638c:	2258      	movs	r2, #88	; 0x58
 800638e:	4b02      	ldr	r3, [pc, #8]	; (8006398 <_lseek+0xc>)
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	4770      	bx	lr
 8006398:	20000314 	.word	0x20000314

0800639c <_read>:
 800639c:	2258      	movs	r2, #88	; 0x58
 800639e:	4b02      	ldr	r3, [pc, #8]	; (80063a8 <_read+0xc>)
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	4770      	bx	lr
 80063a8:	20000314 	.word	0x20000314

080063ac <_sbrk>:
 80063ac:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <_sbrk+0x14>)
 80063ae:	4603      	mov	r3, r0
 80063b0:	6811      	ldr	r1, [r2, #0]
 80063b2:	b909      	cbnz	r1, 80063b8 <_sbrk+0xc>
 80063b4:	4903      	ldr	r1, [pc, #12]	; (80063c4 <_sbrk+0x18>)
 80063b6:	6011      	str	r1, [r2, #0]
 80063b8:	6810      	ldr	r0, [r2, #0]
 80063ba:	4403      	add	r3, r0
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4770      	bx	lr
 80063c0:	20000318 	.word	0x20000318
 80063c4:	20000320 	.word	0x20000320

080063c8 <_exit>:
 80063c8:	e7fe      	b.n	80063c8 <_exit>
	...

080063cc <_init>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	bf00      	nop
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr

080063d8 <_fini>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr
