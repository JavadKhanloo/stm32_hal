
stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004c20  08004c20  00014c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800504c  0800504c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800504c  0800504c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200001dc  08005230  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005230  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ebc  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001412  00000000  00000000  000250c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  000264d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  00026ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d10  00000000  00000000  00027050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008838  00000000  00000000  0003bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000726d6  00000000  00000000  00044598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000286c  00000000  00000000  000b6cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000b952c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000b95e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c04 	.word	0x08004c04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004c04 	.word	0x08004c04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:

//-----------------------------------------------------------------------//
// main function                                                         //
//-----------------------------------------------------------------------//
int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a8e:	f000 f86b 	bl	8000b68 <HAL_Init>
  // clock
  rcc_system_clock_config();
 8000a92:	f001 f9d3 	bl	8001e3c <rcc_system_clock_config>

  // uart
  uart_UART1_GPIO_config();
 8000a96:	f001 fa15 	bl	8001ec4 <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000a9a:	f001 fa45 	bl	8001f28 <uart_UART1_config>

  // led
  gpio_LED_config();
 8000a9e:	f001 f963 	bl	8001d68 <gpio_LED_config>
  gpio_LED_write_green(true);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f001 f98e 	bl	8001dc4 <gpio_LED_write_green>
  gpio_LED_write_red(true);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f001 f99d 	bl	8001de8 <gpio_LED_write_red>
  HAL_Delay(2000);
 8000aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab2:	f000 f8c1 	bl	8000c38 <HAL_Delay>
  printf("program is starting...\r\n");
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <main+0x5c>)
 8000ab8:	f001 ffaa 	bl	8002a10 <puts>
  int counter = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]

  while (1)
  {
    printf("counter : %d\r\n", counter++);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <main+0x60>)
 8000aca:	f001 ff1b 	bl	8002904 <iprintf>
    gpio_LED_toggle_green();
 8000ace:	f001 f99d 	bl	8001e0c <gpio_LED_toggle_green>
    HAL_Delay(250);
 8000ad2:	20fa      	movs	r0, #250	; 0xfa
 8000ad4:	f000 f8b0 	bl	8000c38 <HAL_Delay>
    gpio_LED_toggle_red();
 8000ad8:	f001 f9a4 	bl	8001e24 <gpio_LED_toggle_red>
    HAL_Delay(250);
 8000adc:	20fa      	movs	r0, #250	; 0xfa
 8000ade:	f000 f8ab 	bl	8000c38 <HAL_Delay>
    printf("counter : %d\r\n", counter++);
 8000ae2:	e7ed      	b.n	8000ac0 <main+0x38>
 8000ae4:	08004c20 	.word	0x08004c20
 8000ae8:	08004c38 	.word	0x08004c38

08000aec <__io_putchar>:
//-----------------------------------------------------------------------//
int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    uint8_t c[1];
    c[0] = ch & 0x00FF;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000afa:	f107 010c 	add.w	r1, r7, #12
 8000afe:	2364      	movs	r3, #100	; 0x64
 8000b00:	2201      	movs	r2, #1
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <__io_putchar+0x28>)
 8000b04:	f000 ffc6 	bl	8001a94 <HAL_UART_Transmit>
    return ch;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001fc 	.word	0x200001fc

08000b18 <_write>:

int _write(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e009      	b.n	8000b3e <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	60ba      	str	r2, [r7, #8]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffda 	bl	8000aec <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dbf1      	blt.n	8000b2a <_write+0x12>
    }
    return len;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SysTick_Handler>:

//-----------------------------------------------------------------------//
// function definition                                                   //
//-----------------------------------------------------------------------//
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b54:	f000 f854 	bl	8000c00 <HAL_IncTick>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x28>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x28>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f931 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	200f      	movs	r0, #15
 8000b80:	f000 f80e 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f000 f806 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f935 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f90b 	bl	8000df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x1c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x20>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_IncTick+0x20>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200001f8 	.word	0x200001f8

08000c24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <HAL_GetTick+0x10>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	200001f8 	.word	0x200001f8

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff fff0 	bl	8000c24 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffe0 	bl	8000c24 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff90 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff49 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff5e 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff90 	bl	8000d38 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5f 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffb0 	bl	8000d9c <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b08b      	sub	sp, #44	; 0x2c
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e169      	b.n	8001130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8158 	bne.w	800112a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4a9a      	ldr	r2, [pc, #616]	; (80010e8 <HAL_GPIO_Init+0x2a0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d05e      	beq.n	8000f42 <HAL_GPIO_Init+0xfa>
 8000e84:	4a98      	ldr	r2, [pc, #608]	; (80010e8 <HAL_GPIO_Init+0x2a0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d875      	bhi.n	8000f76 <HAL_GPIO_Init+0x12e>
 8000e8a:	4a98      	ldr	r2, [pc, #608]	; (80010ec <HAL_GPIO_Init+0x2a4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d058      	beq.n	8000f42 <HAL_GPIO_Init+0xfa>
 8000e90:	4a96      	ldr	r2, [pc, #600]	; (80010ec <HAL_GPIO_Init+0x2a4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d86f      	bhi.n	8000f76 <HAL_GPIO_Init+0x12e>
 8000e96:	4a96      	ldr	r2, [pc, #600]	; (80010f0 <HAL_GPIO_Init+0x2a8>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d052      	beq.n	8000f42 <HAL_GPIO_Init+0xfa>
 8000e9c:	4a94      	ldr	r2, [pc, #592]	; (80010f0 <HAL_GPIO_Init+0x2a8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d869      	bhi.n	8000f76 <HAL_GPIO_Init+0x12e>
 8000ea2:	4a94      	ldr	r2, [pc, #592]	; (80010f4 <HAL_GPIO_Init+0x2ac>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d04c      	beq.n	8000f42 <HAL_GPIO_Init+0xfa>
 8000ea8:	4a92      	ldr	r2, [pc, #584]	; (80010f4 <HAL_GPIO_Init+0x2ac>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d863      	bhi.n	8000f76 <HAL_GPIO_Init+0x12e>
 8000eae:	4a92      	ldr	r2, [pc, #584]	; (80010f8 <HAL_GPIO_Init+0x2b0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d046      	beq.n	8000f42 <HAL_GPIO_Init+0xfa>
 8000eb4:	4a90      	ldr	r2, [pc, #576]	; (80010f8 <HAL_GPIO_Init+0x2b0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d85d      	bhi.n	8000f76 <HAL_GPIO_Init+0x12e>
 8000eba:	2b12      	cmp	r3, #18
 8000ebc:	d82a      	bhi.n	8000f14 <HAL_GPIO_Init+0xcc>
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d859      	bhi.n	8000f76 <HAL_GPIO_Init+0x12e>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <HAL_GPIO_Init+0x80>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08000f1d 	.word	0x08000f1d
 8000ed0:	08000f2f 	.word	0x08000f2f
 8000ed4:	08000f71 	.word	0x08000f71
 8000ed8:	08000f77 	.word	0x08000f77
 8000edc:	08000f77 	.word	0x08000f77
 8000ee0:	08000f77 	.word	0x08000f77
 8000ee4:	08000f77 	.word	0x08000f77
 8000ee8:	08000f77 	.word	0x08000f77
 8000eec:	08000f77 	.word	0x08000f77
 8000ef0:	08000f77 	.word	0x08000f77
 8000ef4:	08000f77 	.word	0x08000f77
 8000ef8:	08000f77 	.word	0x08000f77
 8000efc:	08000f77 	.word	0x08000f77
 8000f00:	08000f77 	.word	0x08000f77
 8000f04:	08000f77 	.word	0x08000f77
 8000f08:	08000f77 	.word	0x08000f77
 8000f0c:	08000f25 	.word	0x08000f25
 8000f10:	08000f39 	.word	0x08000f39
 8000f14:	4a79      	ldr	r2, [pc, #484]	; (80010fc <HAL_GPIO_Init+0x2b4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f1a:	e02c      	b.n	8000f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e029      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e024      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	3308      	adds	r3, #8
 8000f34:	623b      	str	r3, [r7, #32]
          break;
 8000f36:	e01f      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	330c      	adds	r3, #12
 8000f3e:	623b      	str	r3, [r7, #32]
          break;
 8000f40:	e01a      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	623b      	str	r3, [r7, #32]
          break;
 8000f4e:	e013      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d105      	bne.n	8000f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	611a      	str	r2, [r3, #16]
          break;
 8000f62:	e009      	b.n	8000f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f64:	2308      	movs	r3, #8
 8000f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	615a      	str	r2, [r3, #20]
          break;
 8000f6e:	e003      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x130>
          break;
 8000f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	d801      	bhi.n	8000f82 <HAL_GPIO_Init+0x13a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	e001      	b.n	8000f86 <HAL_GPIO_Init+0x13e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3304      	adds	r3, #4
 8000f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2bff      	cmp	r3, #255	; 0xff
 8000f8c:	d802      	bhi.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x152>
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	3b08      	subs	r3, #8
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	210f      	movs	r1, #15
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	401a      	ands	r2, r3
 8000fac:	6a39      	ldr	r1, [r7, #32]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 80b1 	beq.w	800112a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc8:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <HAL_GPIO_Init+0x2b8>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	; (8001100 <HAL_GPIO_Init+0x2b8>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	; (8001100 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe0:	4a48      	ldr	r2, [pc, #288]	; (8001104 <HAL_GPIO_Init+0x2bc>)
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a40      	ldr	r2, [pc, #256]	; (8001108 <HAL_GPIO_Init+0x2c0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x1ec>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a3f      	ldr	r2, [pc, #252]	; (800110c <HAL_GPIO_Init+0x2c4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1e8>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a3e      	ldr	r2, [pc, #248]	; (8001110 <HAL_GPIO_Init+0x2c8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1e4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3d      	ldr	r2, [pc, #244]	; (8001114 <HAL_GPIO_Init+0x2cc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1e0>
 8001024:	2303      	movs	r3, #3
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x1ee>
 8001028:	2304      	movs	r3, #4
 800102a:	e004      	b.n	8001036 <HAL_GPIO_Init+0x1ee>
 800102c:	2302      	movs	r3, #2
 800102e:	e002      	b.n	8001036 <HAL_GPIO_Init+0x1ee>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <HAL_GPIO_Init+0x1ee>
 8001034:	2300      	movs	r3, #0
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	f002 0203 	and.w	r2, r2, #3
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	4093      	lsls	r3, r2
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001046:	492f      	ldr	r1, [pc, #188]	; (8001104 <HAL_GPIO_Init+0x2bc>)
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	492c      	ldr	r1, [pc, #176]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	43db      	mvns	r3, r3
 8001076:	4928      	ldr	r1, [pc, #160]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001078:	4013      	ands	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4922      	ldr	r1, [pc, #136]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	491e      	ldr	r1, [pc, #120]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	4918      	ldr	r1, [pc, #96]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	608b      	str	r3, [r1, #8]
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4914      	ldr	r1, [pc, #80]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d021      	beq.n	800111c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	60cb      	str	r3, [r1, #12]
 80010e4:	e021      	b.n	800112a <HAL_GPIO_Init+0x2e2>
 80010e6:	bf00      	nop
 80010e8:	10320000 	.word	0x10320000
 80010ec:	10310000 	.word	0x10310000
 80010f0:	10220000 	.word	0x10220000
 80010f4:	10210000 	.word	0x10210000
 80010f8:	10120000 	.word	0x10120000
 80010fc:	10110000 	.word	0x10110000
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000
 8001108:	40010800 	.word	0x40010800
 800110c:	40010c00 	.word	0x40010c00
 8001110:	40011000 	.word	0x40011000
 8001114:	40011400 	.word	0x40011400
 8001118:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_GPIO_Init+0x304>)
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	4909      	ldr	r1, [pc, #36]	; (800114c <HAL_GPIO_Init+0x304>)
 8001126:	4013      	ands	r3, r2
 8001128:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	3301      	adds	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f ae8e 	bne.w	8000e5c <HAL_GPIO_Init+0x14>
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	372c      	adds	r7, #44	; 0x2c
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	611a      	str	r2, [r3, #16]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43d9      	mvns	r1, r3
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	400b      	ands	r3, r1
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e272      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8087 	beq.w	80012e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d4:	4b92      	ldr	r3, [pc, #584]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d00c      	beq.n	80011fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e0:	4b8f      	ldr	r3, [pc, #572]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d112      	bne.n	8001212 <HAL_RCC_OscConfig+0x5e>
 80011ec:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d10b      	bne.n	8001212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	4b89      	ldr	r3, [pc, #548]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d06c      	beq.n	80012e0 <HAL_RCC_OscConfig+0x12c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d168      	bne.n	80012e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e24c      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x76>
 800121c:	4b80      	ldr	r3, [pc, #512]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a7f      	ldr	r2, [pc, #508]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e02e      	b.n	8001288 <HAL_RCC_OscConfig+0xd4>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x98>
 8001232:	4b7b      	ldr	r3, [pc, #492]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a7a      	ldr	r2, [pc, #488]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b78      	ldr	r3, [pc, #480]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a77      	ldr	r2, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xd4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0xbc>
 8001256:	4b72      	ldr	r3, [pc, #456]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a71      	ldr	r2, [pc, #452]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xd4>
 8001270:	4b6b      	ldr	r3, [pc, #428]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a6a      	ldr	r2, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a67      	ldr	r2, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fcc8 	bl	8000c24 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fcc4 	bl	8000c24 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e200      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xe4>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcb4 	bl	8000c24 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcb0 	bl	8000c24 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1ec      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x10c>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ee:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x18c>
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x176>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c0      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4939      	ldr	r1, [pc, #228]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fc69 	bl	8000c24 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc65 	bl	8000c24 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a1      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4927      	ldr	r1, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fc48 	bl	8000c24 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc44 	bl	8000c24 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e180      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03a      	beq.n	8001438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d019      	beq.n	80013fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_RCC_OscConfig+0x274>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc28 	bl	8000c24 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc24 	bl	8000c24 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e160      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 fad8 	bl	80019ac <RCC_Delay>
 80013fc:	e01c      	b.n	8001438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_RCC_OscConfig+0x274>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff fc0e 	bl	8000c24 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140a:	e00f      	b.n	800142c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc0a 	bl	8000c24 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d908      	bls.n	800142c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e146      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	42420000 	.word	0x42420000
 8001428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b92      	ldr	r3, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e9      	bne.n	800140c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a6 	beq.w	8001592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10d      	bne.n	8001472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a87      	ldr	r2, [pc, #540]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b82      	ldr	r3, [pc, #520]	; (800167c <HAL_RCC_OscConfig+0x4c8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147e:	4b7f      	ldr	r3, [pc, #508]	; (800167c <HAL_RCC_OscConfig+0x4c8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7e      	ldr	r2, [pc, #504]	; (800167c <HAL_RCC_OscConfig+0x4c8>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fbcb 	bl	8000c24 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fbc7 	bl	8000c24 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e103      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b75      	ldr	r3, [pc, #468]	; (800167c <HAL_RCC_OscConfig+0x4c8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x312>
 80014b8:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a6e      	ldr	r2, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	e02d      	b.n	8001522 <HAL_RCC_OscConfig+0x36e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x334>
 80014ce:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a69      	ldr	r2, [pc, #420]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6213      	str	r3, [r2, #32]
 80014da:	4b67      	ldr	r3, [pc, #412]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a66      	ldr	r2, [pc, #408]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6213      	str	r3, [r2, #32]
 80014e6:	e01c      	b.n	8001522 <HAL_RCC_OscConfig+0x36e>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x356>
 80014f0:	4b61      	ldr	r3, [pc, #388]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a60      	ldr	r2, [pc, #384]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a5d      	ldr	r2, [pc, #372]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	e00b      	b.n	8001522 <HAL_RCC_OscConfig+0x36e>
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6213      	str	r3, [r2, #32]
 8001516:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a57      	ldr	r2, [pc, #348]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d015      	beq.n	8001556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb7b 	bl	8000c24 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fb77 	bl	8000c24 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0b1      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0ee      	beq.n	8001532 <HAL_RCC_OscConfig+0x37e>
 8001554:	e014      	b.n	8001580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb65 	bl	8000c24 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff fb61 	bl	8000c24 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	; 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e09b      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a3b      	ldr	r2, [pc, #236]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8087 	beq.w	80016aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d061      	beq.n	800166c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d146      	bne.n	800163e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_RCC_OscConfig+0x4cc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb35 	bl	8000c24 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fb31 	bl	8000c24 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e06d      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d108      	bne.n	80015f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4921      	ldr	r1, [pc, #132]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a19      	ldr	r1, [r3, #32]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	430b      	orrs	r3, r1
 800160a:	491b      	ldr	r1, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x4cc>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb05 	bl	8000c24 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb01 	bl	8000c24 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e03d      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x46a>
 800163c:	e035      	b.n	80016aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x4cc>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff faee 	bl	8000c24 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff faea 	bl	8000c24 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e026      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x498>
 800166a:	e01e      	b.n	80016aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e019      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
 8001678:	40021000 	.word	0x40021000
 800167c:	40007000 	.word	0x40007000
 8001680:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x500>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	429a      	cmp	r2, r3
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0d0      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d910      	bls.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4965      	ldr	r1, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800171e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d040      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d115      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e073      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06b      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f023 0203 	bic.w	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4936      	ldr	r1, [pc, #216]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fa3c 	bl	8000c24 <HAL_GetTick>
 80017ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff fa38 	bl	8000c24 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e053      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 020c 	and.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1eb      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d210      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	4922      	ldr	r1, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1cc>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1d0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f99a 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000
 800187c:	40021000 	.word	0x40021000
 8001880:	08004c58 	.word	0x08004c58
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	b490      	push	{r4, r7}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_RCC_GetSysClockFreq+0xac>)
 8001894:	1d3c      	adds	r4, r7, #4
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800189c:	f240 2301 	movw	r3, #513	; 0x201
 80018a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x46>
 80018ca:	e02b      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ce:	623b      	str	r3, [r7, #32]
      break;
 80018d0:	e02b      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	0c9b      	lsrs	r3, r3, #18
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3328      	adds	r3, #40	; 0x28
 80018dc:	443b      	add	r3, r7
 80018de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0c5b      	lsrs	r3, r3, #17
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	3328      	adds	r3, #40	; 0x28
 80018fa:	443b      	add	r3, r7
 80018fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001900:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001906:	fb03 f202 	mul.w	r2, r3, r2
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e004      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	623b      	str	r3, [r7, #32]
      break;
 8001922:	e002      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001926:	623b      	str	r3, [r7, #32]
      break;
 8001928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192a:	6a3b      	ldr	r3, [r7, #32]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bc90      	pop	{r4, r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	08004c48 	.word	0x08004c48
 800193c:	40021000 	.word	0x40021000
 8001940:	007a1200 	.word	0x007a1200
 8001944:	003d0900 	.word	0x003d0900

08001948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_RCC_GetHCLKFreq+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff2 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4903      	ldr	r1, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	08004c68 	.word	0x08004c68

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001988:	f7ff ffde 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	0adb      	lsrs	r3, r3, #11
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	08004c68 	.word	0x08004c68

080019ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <RCC_Delay+0x34>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <RCC_Delay+0x38>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0a5b      	lsrs	r3, r3, #9
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019c8:	bf00      	nop
  }
  while (Delay --);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	60fa      	str	r2, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <RCC_Delay+0x1c>
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000000 	.word	0x20000000
 80019e4:	10624dd3 	.word	0x10624dd3

080019e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e03f      	b.n	8001a7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f837 	bl	8001a82 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f90d 	bl	8001c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d17c      	bne.n	8001bae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_UART_Transmit+0x2c>
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e075      	b.n	8001bb0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_Transmit+0x3e>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e06e      	b.n	8001bb0 <HAL_UART_Transmit+0x11c>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2221      	movs	r2, #33	; 0x21
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff f89c 	bl	8000c24 <HAL_GetTick>
 8001aec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	88fa      	ldrh	r2, [r7, #6]
 8001af2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	88fa      	ldrh	r2, [r7, #6]
 8001af8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b02:	d108      	bne.n	8001b16 <HAL_UART_Transmit+0x82>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d104      	bne.n	8001b16 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	e003      	b.n	8001b1e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b26:	e02a      	b.n	8001b7e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f840 	bl	8001bb8 <UART_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e036      	b.n	8001bb0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b56:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	e007      	b.n	8001b70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1cf      	bne.n	8001b28 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f810 	bl	8001bb8 <UART_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e006      	b.n	8001bb0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
  }
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc8:	e02c      	b.n	8001c24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d028      	beq.n	8001c24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bd8:	f7ff f824 	bl	8000c24 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d21d      	bcs.n	8001c24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bf6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e00f      	b.n	8001c44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d0c3      	beq.n	8001bca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c86:	f023 030c 	bic.w	r3, r3, #12
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <UART_SetConfig+0x114>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d103      	bne.n	8001cbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cb4:	f7ff fe66 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	e002      	b.n	8001cc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cbc:	f7ff fe4e 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8001cc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009a      	lsls	r2, r3, #2
 8001ccc:	441a      	add	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <UART_SetConfig+0x118>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	0119      	lsls	r1, r3, #4
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	009a      	lsls	r2, r3, #2
 8001cec:	441a      	add	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <UART_SetConfig+0x118>)
 8001cfa:	fba3 0302 	umull	r0, r3, r3, r2
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2064      	movs	r0, #100	; 0x64
 8001d02:	fb00 f303 	mul.w	r3, r0, r3
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	3332      	adds	r3, #50	; 0x32
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <UART_SetConfig+0x118>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d18:	4419      	add	r1, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	009a      	lsls	r2, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <UART_SetConfig+0x118>)
 8001d32:	fba3 0302 	umull	r0, r3, r3, r2
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2064      	movs	r0, #100	; 0x64
 8001d3a:	fb00 f303 	mul.w	r3, r0, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	3332      	adds	r3, #50	; 0x32
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <UART_SetConfig+0x118>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	440a      	add	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40013800 	.word	0x40013800
 8001d64:	51eb851f 	.word	0x51eb851f

08001d68 <gpio_LED_config>:

/*
// @brief LED GPIO Configuration
*/
void gpio_LED_config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
	// green LED => PB13
	// red   LED => PB14

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <gpio_LED_config+0x54>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <gpio_LED_config+0x54>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <gpio_LED_config+0x54>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef gpio_init_struct = {0};
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
  gpio_init_struct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001d98:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d9c:	60bb      	str	r3, [r7, #8]
  gpio_init_struct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2302      	movs	r3, #2
 8001da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_struct);
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <gpio_LED_config+0x58>)
 8001dae:	f7ff f84b 	bl	8000e48 <HAL_GPIO_Init>

}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <gpio_LED_write_green>:

/*
// @brief LED write/toggle (Green/Red)
*/
void gpio_LED_write_green(bool state)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (GPIO_PinState)state);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <gpio_LED_write_green+0x20>)
 8001dd8:	f7ff f9ba 	bl	8001150 <HAL_GPIO_WritePin>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40010c00 	.word	0x40010c00

08001de8 <gpio_LED_write_red>:
void gpio_LED_write_red(bool state)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)state);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	461a      	mov	r2, r3
 8001df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dfa:	4803      	ldr	r0, [pc, #12]	; (8001e08 <gpio_LED_write_red+0x20>)
 8001dfc:	f7ff f9a8 	bl	8001150 <HAL_GPIO_WritePin>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40010c00 	.word	0x40010c00

08001e0c <gpio_LED_toggle_green>:
void gpio_LED_toggle_green(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <gpio_LED_toggle_green+0x14>)
 8001e16:	f7ff f9b3 	bl	8001180 <HAL_GPIO_TogglePin>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010c00 	.word	0x40010c00

08001e24 <gpio_LED_toggle_red>:
void gpio_LED_toggle_red(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <gpio_LED_toggle_red+0x14>)
 8001e2e:	f7ff f9a7 	bl	8001180 <HAL_GPIO_TogglePin>
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40010c00 	.word	0x40010c00

08001e3c <rcc_system_clock_config>:
//-----------------------------------------------------------------------//
/*
// rcc clock configuration
*/
bool rcc_system_clock_config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b090      	sub	sp, #64	; 0x40
 8001e40:	af00      	add	r7, sp, #0

    // APB1 Prescaler = 2 => 36, 72 MHz
    // APB2 Prescaler = 1 => 72, 72 MHz
    // ADC Prescaler = 6 => 12 MHz

    RCC_OscInitTypeDef osc_init_struct = {0};
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	2228      	movs	r2, #40	; 0x28
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f8f2 	bl	8002034 <memset>
    RCC_ClkInitTypeDef clk_init_struct = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
    osc_init_struct.HSEState = RCC_HSE_ON;
 8001e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e66:	61fb      	str	r3, [r7, #28]
    osc_init_struct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
    osc_init_struct.PLL.PLLState = RCC_PLL_ON;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e76:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_RCC_OscConfig(&osc_init_struct) != HAL_OK)
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f997 	bl	80011b4 <HAL_RCC_OscConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <rcc_system_clock_config+0x54>
    {
      return false;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e014      	b.n	8001eba <rcc_system_clock_config+0x7e>
    }

    // clock initialization
    clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8001e90:	230f      	movs	r3, #15
 8001e92:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1  |
                                RCC_CLOCKTYPE_PCLK2  |
                                RCC_CLOCKTYPE_SYSCLK ;

    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e94:	2302      	movs	r3, #2
 8001e96:	60bb      	str	r3, [r7, #8]
    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
    clk_init_struct.APB1CLKDivider = RCC_SYSCLK_DIV2;
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	613b      	str	r3, [r7, #16]
    clk_init_struct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
    // 00 - 24MHz => 0
    // 24 - 48MHz => 1
    // 48 - 72MHz => 2
    if(HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2) != HAL_OK)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fc05 	bl	80016b8 <HAL_RCC_ClockConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <rcc_system_clock_config+0x7c>
    {
      return false;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <rcc_system_clock_config+0x7e>
    }

    return true;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3740      	adds	r7, #64	; 0x40
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <uart_UART1_GPIO_config>:
//-----------------------------------------------------------------------//
/*
// @brief UART1 GPIO configuration
*/
void uart_UART1_GPIO_config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
    // PA9  => TX
    // PA10 => RX
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <uart_UART1_GPIO_config+0x5c>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <uart_UART1_GPIO_config+0x5c>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6193      	str	r3, [r2, #24]
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <uart_UART1_GPIO_config+0x5c>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    // PA9  => TX
    gpio_init_struct.Pin = GPIO_PIN_9;
 8001ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee6:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480b      	ldr	r0, [pc, #44]	; (8001f24 <uart_UART1_GPIO_config+0x60>)
 8001ef8:	f7fe ffa6 	bl	8000e48 <HAL_GPIO_Init>

    // PA10 => RX
    gpio_init_struct.Pin = GPIO_PIN_10;
 8001efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f00:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <uart_UART1_GPIO_config+0x60>)
 8001f12:	f7fe ff99 	bl	8000e48 <HAL_GPIO_Init>




}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010800 	.word	0x40010800

08001f28 <uart_UART1_config>:
/*
// @brief UART1 Peripheral configuration
*/
bool uart_UART1_config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  __HAL_RCC_USART1_CLK_ENABLE();
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <uart_UART1_config+0x6c>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <uart_UART1_config+0x6c>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <uart_UART1_config+0x6c>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

  huart1.Instance = USART1;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <uart_UART1_config+0x70>)
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <uart_UART1_config+0x74>)
 8001f4a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <uart_UART1_config+0x70>)
 8001f4e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f52:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <uart_UART1_config+0x70>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <uart_UART1_config+0x70>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <uart_UART1_config+0x70>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <uart_UART1_config+0x70>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <uart_UART1_config+0x70>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <uart_UART1_config+0x70>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <uart_UART1_config+0x70>)
 8001f7a:	f7ff fd35 	bl	80019e8 <HAL_UART_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <uart_UART1_config+0x60>
  {
    return false;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e000      	b.n	8001f8a <uart_UART1_config+0x62>
  }

  return true;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	200001fc 	.word	0x200001fc
 8001f9c:	40013800 	.word	0x40013800

08001fa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa2:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	; (8001fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fc6:	f7fe fdc9 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f000 f80f 	bl	8001fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fce:	f7fe fd5b 	bl	8000a88 <main>
  bx lr
 8001fd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fdc:	08005054 	.word	0x08005054
  ldr r2, =_sbss
 8001fe0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fe4:	20000254 	.word	0x20000254

08001fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC1_2_IRQHandler>
	...

08001fec <__libc_init_array>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	2600      	movs	r6, #0
 8001ff0:	4d0c      	ldr	r5, [pc, #48]	; (8002024 <__libc_init_array+0x38>)
 8001ff2:	4c0d      	ldr	r4, [pc, #52]	; (8002028 <__libc_init_array+0x3c>)
 8001ff4:	1b64      	subs	r4, r4, r5
 8001ff6:	10a4      	asrs	r4, r4, #2
 8001ff8:	42a6      	cmp	r6, r4
 8001ffa:	d109      	bne.n	8002010 <__libc_init_array+0x24>
 8001ffc:	f002 fe02 	bl	8004c04 <_init>
 8002000:	2600      	movs	r6, #0
 8002002:	4d0a      	ldr	r5, [pc, #40]	; (800202c <__libc_init_array+0x40>)
 8002004:	4c0a      	ldr	r4, [pc, #40]	; (8002030 <__libc_init_array+0x44>)
 8002006:	1b64      	subs	r4, r4, r5
 8002008:	10a4      	asrs	r4, r4, #2
 800200a:	42a6      	cmp	r6, r4
 800200c:	d105      	bne.n	800201a <__libc_init_array+0x2e>
 800200e:	bd70      	pop	{r4, r5, r6, pc}
 8002010:	f855 3b04 	ldr.w	r3, [r5], #4
 8002014:	4798      	blx	r3
 8002016:	3601      	adds	r6, #1
 8002018:	e7ee      	b.n	8001ff8 <__libc_init_array+0xc>
 800201a:	f855 3b04 	ldr.w	r3, [r5], #4
 800201e:	4798      	blx	r3
 8002020:	3601      	adds	r6, #1
 8002022:	e7f2      	b.n	800200a <__libc_init_array+0x1e>
 8002024:	0800504c 	.word	0x0800504c
 8002028:	0800504c 	.word	0x0800504c
 800202c:	0800504c 	.word	0x0800504c
 8002030:	08005050 	.word	0x08005050

08002034 <memset>:
 8002034:	4603      	mov	r3, r0
 8002036:	4402      	add	r2, r0
 8002038:	4293      	cmp	r3, r2
 800203a:	d100      	bne.n	800203e <memset+0xa>
 800203c:	4770      	bx	lr
 800203e:	f803 1b01 	strb.w	r1, [r3], #1
 8002042:	e7f9      	b.n	8002038 <memset+0x4>

08002044 <__cvt>:
 8002044:	2b00      	cmp	r3, #0
 8002046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800204a:	461f      	mov	r7, r3
 800204c:	bfbb      	ittet	lt
 800204e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002052:	461f      	movlt	r7, r3
 8002054:	2300      	movge	r3, #0
 8002056:	232d      	movlt	r3, #45	; 0x2d
 8002058:	b088      	sub	sp, #32
 800205a:	4614      	mov	r4, r2
 800205c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800205e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002060:	7013      	strb	r3, [r2, #0]
 8002062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002064:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002068:	f023 0820 	bic.w	r8, r3, #32
 800206c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002070:	d005      	beq.n	800207e <__cvt+0x3a>
 8002072:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002076:	d100      	bne.n	800207a <__cvt+0x36>
 8002078:	3501      	adds	r5, #1
 800207a:	2302      	movs	r3, #2
 800207c:	e000      	b.n	8002080 <__cvt+0x3c>
 800207e:	2303      	movs	r3, #3
 8002080:	aa07      	add	r2, sp, #28
 8002082:	9204      	str	r2, [sp, #16]
 8002084:	aa06      	add	r2, sp, #24
 8002086:	e9cd a202 	strd	sl, r2, [sp, #8]
 800208a:	e9cd 3500 	strd	r3, r5, [sp]
 800208e:	4622      	mov	r2, r4
 8002090:	463b      	mov	r3, r7
 8002092:	f000 fe11 	bl	8002cb8 <_dtoa_r>
 8002096:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800209a:	4606      	mov	r6, r0
 800209c:	d102      	bne.n	80020a4 <__cvt+0x60>
 800209e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80020a0:	07db      	lsls	r3, r3, #31
 80020a2:	d522      	bpl.n	80020ea <__cvt+0xa6>
 80020a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80020a8:	eb06 0905 	add.w	r9, r6, r5
 80020ac:	d110      	bne.n	80020d0 <__cvt+0x8c>
 80020ae:	7833      	ldrb	r3, [r6, #0]
 80020b0:	2b30      	cmp	r3, #48	; 0x30
 80020b2:	d10a      	bne.n	80020ca <__cvt+0x86>
 80020b4:	2200      	movs	r2, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	4620      	mov	r0, r4
 80020ba:	4639      	mov	r1, r7
 80020bc:	f7fe fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80020c0:	b918      	cbnz	r0, 80020ca <__cvt+0x86>
 80020c2:	f1c5 0501 	rsb	r5, r5, #1
 80020c6:	f8ca 5000 	str.w	r5, [sl]
 80020ca:	f8da 3000 	ldr.w	r3, [sl]
 80020ce:	4499      	add	r9, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	2300      	movs	r3, #0
 80020d4:	4620      	mov	r0, r4
 80020d6:	4639      	mov	r1, r7
 80020d8:	f7fe fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80020dc:	b108      	cbz	r0, 80020e2 <__cvt+0x9e>
 80020de:	f8cd 901c 	str.w	r9, [sp, #28]
 80020e2:	2230      	movs	r2, #48	; 0x30
 80020e4:	9b07      	ldr	r3, [sp, #28]
 80020e6:	454b      	cmp	r3, r9
 80020e8:	d307      	bcc.n	80020fa <__cvt+0xb6>
 80020ea:	4630      	mov	r0, r6
 80020ec:	9b07      	ldr	r3, [sp, #28]
 80020ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80020f0:	1b9b      	subs	r3, r3, r6
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	b008      	add	sp, #32
 80020f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	9107      	str	r1, [sp, #28]
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e7f0      	b.n	80020e4 <__cvt+0xa0>

08002102 <__exponent>:
 8002102:	4603      	mov	r3, r0
 8002104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002106:	2900      	cmp	r1, #0
 8002108:	f803 2b02 	strb.w	r2, [r3], #2
 800210c:	bfb6      	itet	lt
 800210e:	222d      	movlt	r2, #45	; 0x2d
 8002110:	222b      	movge	r2, #43	; 0x2b
 8002112:	4249      	neglt	r1, r1
 8002114:	2909      	cmp	r1, #9
 8002116:	7042      	strb	r2, [r0, #1]
 8002118:	dd2b      	ble.n	8002172 <__exponent+0x70>
 800211a:	f10d 0407 	add.w	r4, sp, #7
 800211e:	46a4      	mov	ip, r4
 8002120:	270a      	movs	r7, #10
 8002122:	fb91 f6f7 	sdiv	r6, r1, r7
 8002126:	460a      	mov	r2, r1
 8002128:	46a6      	mov	lr, r4
 800212a:	fb07 1516 	mls	r5, r7, r6, r1
 800212e:	2a63      	cmp	r2, #99	; 0x63
 8002130:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002134:	4631      	mov	r1, r6
 8002136:	f104 34ff 	add.w	r4, r4, #4294967295
 800213a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800213e:	dcf0      	bgt.n	8002122 <__exponent+0x20>
 8002140:	3130      	adds	r1, #48	; 0x30
 8002142:	f1ae 0502 	sub.w	r5, lr, #2
 8002146:	f804 1c01 	strb.w	r1, [r4, #-1]
 800214a:	4629      	mov	r1, r5
 800214c:	1c44      	adds	r4, r0, #1
 800214e:	4561      	cmp	r1, ip
 8002150:	d30a      	bcc.n	8002168 <__exponent+0x66>
 8002152:	f10d 0209 	add.w	r2, sp, #9
 8002156:	eba2 020e 	sub.w	r2, r2, lr
 800215a:	4565      	cmp	r5, ip
 800215c:	bf88      	it	hi
 800215e:	2200      	movhi	r2, #0
 8002160:	4413      	add	r3, r2
 8002162:	1a18      	subs	r0, r3, r0
 8002164:	b003      	add	sp, #12
 8002166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002168:	f811 2b01 	ldrb.w	r2, [r1], #1
 800216c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002170:	e7ed      	b.n	800214e <__exponent+0x4c>
 8002172:	2330      	movs	r3, #48	; 0x30
 8002174:	3130      	adds	r1, #48	; 0x30
 8002176:	7083      	strb	r3, [r0, #2]
 8002178:	70c1      	strb	r1, [r0, #3]
 800217a:	1d03      	adds	r3, r0, #4
 800217c:	e7f1      	b.n	8002162 <__exponent+0x60>
	...

08002180 <_printf_float>:
 8002180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002184:	b091      	sub	sp, #68	; 0x44
 8002186:	460c      	mov	r4, r1
 8002188:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800218c:	4616      	mov	r6, r2
 800218e:	461f      	mov	r7, r3
 8002190:	4605      	mov	r5, r0
 8002192:	f001 fd33 	bl	8003bfc <_localeconv_r>
 8002196:	6803      	ldr	r3, [r0, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	9309      	str	r3, [sp, #36]	; 0x24
 800219c:	f7fd ffd8 	bl	8000150 <strlen>
 80021a0:	2300      	movs	r3, #0
 80021a2:	930e      	str	r3, [sp, #56]	; 0x38
 80021a4:	f8d8 3000 	ldr.w	r3, [r8]
 80021a8:	900a      	str	r0, [sp, #40]	; 0x28
 80021aa:	3307      	adds	r3, #7
 80021ac:	f023 0307 	bic.w	r3, r3, #7
 80021b0:	f103 0208 	add.w	r2, r3, #8
 80021b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80021b8:	f8d4 b000 	ldr.w	fp, [r4]
 80021bc:	f8c8 2000 	str.w	r2, [r8]
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80021c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80021cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80021d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80021d2:	f04f 32ff 	mov.w	r2, #4294967295
 80021d6:	4640      	mov	r0, r8
 80021d8:	4b9c      	ldr	r3, [pc, #624]	; (800244c <_printf_float+0x2cc>)
 80021da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021dc:	f7fe fc16 	bl	8000a0c <__aeabi_dcmpun>
 80021e0:	bb70      	cbnz	r0, 8002240 <_printf_float+0xc0>
 80021e2:	f04f 32ff 	mov.w	r2, #4294967295
 80021e6:	4640      	mov	r0, r8
 80021e8:	4b98      	ldr	r3, [pc, #608]	; (800244c <_printf_float+0x2cc>)
 80021ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021ec:	f7fe fbf0 	bl	80009d0 <__aeabi_dcmple>
 80021f0:	bb30      	cbnz	r0, 8002240 <_printf_float+0xc0>
 80021f2:	2200      	movs	r2, #0
 80021f4:	2300      	movs	r3, #0
 80021f6:	4640      	mov	r0, r8
 80021f8:	4651      	mov	r1, sl
 80021fa:	f7fe fbdf 	bl	80009bc <__aeabi_dcmplt>
 80021fe:	b110      	cbz	r0, 8002206 <_printf_float+0x86>
 8002200:	232d      	movs	r3, #45	; 0x2d
 8002202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002206:	4b92      	ldr	r3, [pc, #584]	; (8002450 <_printf_float+0x2d0>)
 8002208:	4892      	ldr	r0, [pc, #584]	; (8002454 <_printf_float+0x2d4>)
 800220a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800220e:	bf94      	ite	ls
 8002210:	4698      	movls	r8, r3
 8002212:	4680      	movhi	r8, r0
 8002214:	2303      	movs	r3, #3
 8002216:	f04f 0a00 	mov.w	sl, #0
 800221a:	6123      	str	r3, [r4, #16]
 800221c:	f02b 0304 	bic.w	r3, fp, #4
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	4633      	mov	r3, r6
 8002224:	4621      	mov	r1, r4
 8002226:	4628      	mov	r0, r5
 8002228:	9700      	str	r7, [sp, #0]
 800222a:	aa0f      	add	r2, sp, #60	; 0x3c
 800222c:	f000 f9d4 	bl	80025d8 <_printf_common>
 8002230:	3001      	adds	r0, #1
 8002232:	f040 8090 	bne.w	8002356 <_printf_float+0x1d6>
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
 800223a:	b011      	add	sp, #68	; 0x44
 800223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002240:	4642      	mov	r2, r8
 8002242:	4653      	mov	r3, sl
 8002244:	4640      	mov	r0, r8
 8002246:	4651      	mov	r1, sl
 8002248:	f7fe fbe0 	bl	8000a0c <__aeabi_dcmpun>
 800224c:	b148      	cbz	r0, 8002262 <_printf_float+0xe2>
 800224e:	f1ba 0f00 	cmp.w	sl, #0
 8002252:	bfb8      	it	lt
 8002254:	232d      	movlt	r3, #45	; 0x2d
 8002256:	4880      	ldr	r0, [pc, #512]	; (8002458 <_printf_float+0x2d8>)
 8002258:	bfb8      	it	lt
 800225a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800225e:	4b7f      	ldr	r3, [pc, #508]	; (800245c <_printf_float+0x2dc>)
 8002260:	e7d3      	b.n	800220a <_printf_float+0x8a>
 8002262:	6863      	ldr	r3, [r4, #4]
 8002264:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	d142      	bne.n	80022f2 <_printf_float+0x172>
 800226c:	2306      	movs	r3, #6
 800226e:	6063      	str	r3, [r4, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	9206      	str	r2, [sp, #24]
 8002274:	aa0e      	add	r2, sp, #56	; 0x38
 8002276:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800227a:	aa0d      	add	r2, sp, #52	; 0x34
 800227c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002280:	9203      	str	r2, [sp, #12]
 8002282:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002286:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	6863      	ldr	r3, [r4, #4]
 800228e:	4642      	mov	r2, r8
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	4628      	mov	r0, r5
 8002294:	4653      	mov	r3, sl
 8002296:	910b      	str	r1, [sp, #44]	; 0x2c
 8002298:	f7ff fed4 	bl	8002044 <__cvt>
 800229c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800229e:	4680      	mov	r8, r0
 80022a0:	2947      	cmp	r1, #71	; 0x47
 80022a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80022a4:	d108      	bne.n	80022b8 <_printf_float+0x138>
 80022a6:	1cc8      	adds	r0, r1, #3
 80022a8:	db02      	blt.n	80022b0 <_printf_float+0x130>
 80022aa:	6863      	ldr	r3, [r4, #4]
 80022ac:	4299      	cmp	r1, r3
 80022ae:	dd40      	ble.n	8002332 <_printf_float+0x1b2>
 80022b0:	f1a9 0902 	sub.w	r9, r9, #2
 80022b4:	fa5f f989 	uxtb.w	r9, r9
 80022b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80022bc:	d81f      	bhi.n	80022fe <_printf_float+0x17e>
 80022be:	464a      	mov	r2, r9
 80022c0:	3901      	subs	r1, #1
 80022c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80022c6:	910d      	str	r1, [sp, #52]	; 0x34
 80022c8:	f7ff ff1b 	bl	8002102 <__exponent>
 80022cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80022ce:	4682      	mov	sl, r0
 80022d0:	1813      	adds	r3, r2, r0
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	6123      	str	r3, [r4, #16]
 80022d6:	dc02      	bgt.n	80022de <_printf_float+0x15e>
 80022d8:	6822      	ldr	r2, [r4, #0]
 80022da:	07d2      	lsls	r2, r2, #31
 80022dc:	d501      	bpl.n	80022e2 <_printf_float+0x162>
 80022de:	3301      	adds	r3, #1
 80022e0:	6123      	str	r3, [r4, #16]
 80022e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d09b      	beq.n	8002222 <_printf_float+0xa2>
 80022ea:	232d      	movs	r3, #45	; 0x2d
 80022ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022f0:	e797      	b.n	8002222 <_printf_float+0xa2>
 80022f2:	2947      	cmp	r1, #71	; 0x47
 80022f4:	d1bc      	bne.n	8002270 <_printf_float+0xf0>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ba      	bne.n	8002270 <_printf_float+0xf0>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e7b7      	b.n	800226e <_printf_float+0xee>
 80022fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002302:	d118      	bne.n	8002336 <_printf_float+0x1b6>
 8002304:	2900      	cmp	r1, #0
 8002306:	6863      	ldr	r3, [r4, #4]
 8002308:	dd0b      	ble.n	8002322 <_printf_float+0x1a2>
 800230a:	6121      	str	r1, [r4, #16]
 800230c:	b913      	cbnz	r3, 8002314 <_printf_float+0x194>
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	07d0      	lsls	r0, r2, #31
 8002312:	d502      	bpl.n	800231a <_printf_float+0x19a>
 8002314:	3301      	adds	r3, #1
 8002316:	440b      	add	r3, r1
 8002318:	6123      	str	r3, [r4, #16]
 800231a:	f04f 0a00 	mov.w	sl, #0
 800231e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002320:	e7df      	b.n	80022e2 <_printf_float+0x162>
 8002322:	b913      	cbnz	r3, 800232a <_printf_float+0x1aa>
 8002324:	6822      	ldr	r2, [r4, #0]
 8002326:	07d2      	lsls	r2, r2, #31
 8002328:	d501      	bpl.n	800232e <_printf_float+0x1ae>
 800232a:	3302      	adds	r3, #2
 800232c:	e7f4      	b.n	8002318 <_printf_float+0x198>
 800232e:	2301      	movs	r3, #1
 8002330:	e7f2      	b.n	8002318 <_printf_float+0x198>
 8002332:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002338:	4299      	cmp	r1, r3
 800233a:	db05      	blt.n	8002348 <_printf_float+0x1c8>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	6121      	str	r1, [r4, #16]
 8002340:	07d8      	lsls	r0, r3, #31
 8002342:	d5ea      	bpl.n	800231a <_printf_float+0x19a>
 8002344:	1c4b      	adds	r3, r1, #1
 8002346:	e7e7      	b.n	8002318 <_printf_float+0x198>
 8002348:	2900      	cmp	r1, #0
 800234a:	bfcc      	ite	gt
 800234c:	2201      	movgt	r2, #1
 800234e:	f1c1 0202 	rsble	r2, r1, #2
 8002352:	4413      	add	r3, r2
 8002354:	e7e0      	b.n	8002318 <_printf_float+0x198>
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	055a      	lsls	r2, r3, #21
 800235a:	d407      	bmi.n	800236c <_printf_float+0x1ec>
 800235c:	6923      	ldr	r3, [r4, #16]
 800235e:	4642      	mov	r2, r8
 8002360:	4631      	mov	r1, r6
 8002362:	4628      	mov	r0, r5
 8002364:	47b8      	blx	r7
 8002366:	3001      	adds	r0, #1
 8002368:	d12b      	bne.n	80023c2 <_printf_float+0x242>
 800236a:	e764      	b.n	8002236 <_printf_float+0xb6>
 800236c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002370:	f240 80dd 	bls.w	800252e <_printf_float+0x3ae>
 8002374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002378:	2200      	movs	r2, #0
 800237a:	2300      	movs	r3, #0
 800237c:	f7fe fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8002380:	2800      	cmp	r0, #0
 8002382:	d033      	beq.n	80023ec <_printf_float+0x26c>
 8002384:	2301      	movs	r3, #1
 8002386:	4631      	mov	r1, r6
 8002388:	4628      	mov	r0, r5
 800238a:	4a35      	ldr	r2, [pc, #212]	; (8002460 <_printf_float+0x2e0>)
 800238c:	47b8      	blx	r7
 800238e:	3001      	adds	r0, #1
 8002390:	f43f af51 	beq.w	8002236 <_printf_float+0xb6>
 8002394:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002398:	429a      	cmp	r2, r3
 800239a:	db02      	blt.n	80023a2 <_printf_float+0x222>
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	07d8      	lsls	r0, r3, #31
 80023a0:	d50f      	bpl.n	80023c2 <_printf_float+0x242>
 80023a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023a6:	4631      	mov	r1, r6
 80023a8:	4628      	mov	r0, r5
 80023aa:	47b8      	blx	r7
 80023ac:	3001      	adds	r0, #1
 80023ae:	f43f af42 	beq.w	8002236 <_printf_float+0xb6>
 80023b2:	f04f 0800 	mov.w	r8, #0
 80023b6:	f104 091a 	add.w	r9, r4, #26
 80023ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023bc:	3b01      	subs	r3, #1
 80023be:	4543      	cmp	r3, r8
 80023c0:	dc09      	bgt.n	80023d6 <_printf_float+0x256>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	079b      	lsls	r3, r3, #30
 80023c6:	f100 8102 	bmi.w	80025ce <_printf_float+0x44e>
 80023ca:	68e0      	ldr	r0, [r4, #12]
 80023cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80023ce:	4298      	cmp	r0, r3
 80023d0:	bfb8      	it	lt
 80023d2:	4618      	movlt	r0, r3
 80023d4:	e731      	b.n	800223a <_printf_float+0xba>
 80023d6:	2301      	movs	r3, #1
 80023d8:	464a      	mov	r2, r9
 80023da:	4631      	mov	r1, r6
 80023dc:	4628      	mov	r0, r5
 80023de:	47b8      	blx	r7
 80023e0:	3001      	adds	r0, #1
 80023e2:	f43f af28 	beq.w	8002236 <_printf_float+0xb6>
 80023e6:	f108 0801 	add.w	r8, r8, #1
 80023ea:	e7e6      	b.n	80023ba <_printf_float+0x23a>
 80023ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	dc38      	bgt.n	8002464 <_printf_float+0x2e4>
 80023f2:	2301      	movs	r3, #1
 80023f4:	4631      	mov	r1, r6
 80023f6:	4628      	mov	r0, r5
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <_printf_float+0x2e0>)
 80023fa:	47b8      	blx	r7
 80023fc:	3001      	adds	r0, #1
 80023fe:	f43f af1a 	beq.w	8002236 <_printf_float+0xb6>
 8002402:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002406:	4313      	orrs	r3, r2
 8002408:	d102      	bne.n	8002410 <_printf_float+0x290>
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	07d9      	lsls	r1, r3, #31
 800240e:	d5d8      	bpl.n	80023c2 <_printf_float+0x242>
 8002410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002414:	4631      	mov	r1, r6
 8002416:	4628      	mov	r0, r5
 8002418:	47b8      	blx	r7
 800241a:	3001      	adds	r0, #1
 800241c:	f43f af0b 	beq.w	8002236 <_printf_float+0xb6>
 8002420:	f04f 0900 	mov.w	r9, #0
 8002424:	f104 0a1a 	add.w	sl, r4, #26
 8002428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800242a:	425b      	negs	r3, r3
 800242c:	454b      	cmp	r3, r9
 800242e:	dc01      	bgt.n	8002434 <_printf_float+0x2b4>
 8002430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002432:	e794      	b.n	800235e <_printf_float+0x1de>
 8002434:	2301      	movs	r3, #1
 8002436:	4652      	mov	r2, sl
 8002438:	4631      	mov	r1, r6
 800243a:	4628      	mov	r0, r5
 800243c:	47b8      	blx	r7
 800243e:	3001      	adds	r0, #1
 8002440:	f43f aef9 	beq.w	8002236 <_printf_float+0xb6>
 8002444:	f109 0901 	add.w	r9, r9, #1
 8002448:	e7ee      	b.n	8002428 <_printf_float+0x2a8>
 800244a:	bf00      	nop
 800244c:	7fefffff 	.word	0x7fefffff
 8002450:	08004c74 	.word	0x08004c74
 8002454:	08004c78 	.word	0x08004c78
 8002458:	08004c80 	.word	0x08004c80
 800245c:	08004c7c 	.word	0x08004c7c
 8002460:	08004c84 	.word	0x08004c84
 8002464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002468:	429a      	cmp	r2, r3
 800246a:	bfa8      	it	ge
 800246c:	461a      	movge	r2, r3
 800246e:	2a00      	cmp	r2, #0
 8002470:	4691      	mov	r9, r2
 8002472:	dc37      	bgt.n	80024e4 <_printf_float+0x364>
 8002474:	f04f 0b00 	mov.w	fp, #0
 8002478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800247c:	f104 021a 	add.w	r2, r4, #26
 8002480:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002484:	ebaa 0309 	sub.w	r3, sl, r9
 8002488:	455b      	cmp	r3, fp
 800248a:	dc33      	bgt.n	80024f4 <_printf_float+0x374>
 800248c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002490:	429a      	cmp	r2, r3
 8002492:	db3b      	blt.n	800250c <_printf_float+0x38c>
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	07da      	lsls	r2, r3, #31
 8002498:	d438      	bmi.n	800250c <_printf_float+0x38c>
 800249a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800249c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800249e:	eba3 020a 	sub.w	r2, r3, sl
 80024a2:	eba3 0901 	sub.w	r9, r3, r1
 80024a6:	4591      	cmp	r9, r2
 80024a8:	bfa8      	it	ge
 80024aa:	4691      	movge	r9, r2
 80024ac:	f1b9 0f00 	cmp.w	r9, #0
 80024b0:	dc34      	bgt.n	800251c <_printf_float+0x39c>
 80024b2:	f04f 0800 	mov.w	r8, #0
 80024b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024ba:	f104 0a1a 	add.w	sl, r4, #26
 80024be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	eba3 0309 	sub.w	r3, r3, r9
 80024c8:	4543      	cmp	r3, r8
 80024ca:	f77f af7a 	ble.w	80023c2 <_printf_float+0x242>
 80024ce:	2301      	movs	r3, #1
 80024d0:	4652      	mov	r2, sl
 80024d2:	4631      	mov	r1, r6
 80024d4:	4628      	mov	r0, r5
 80024d6:	47b8      	blx	r7
 80024d8:	3001      	adds	r0, #1
 80024da:	f43f aeac 	beq.w	8002236 <_printf_float+0xb6>
 80024de:	f108 0801 	add.w	r8, r8, #1
 80024e2:	e7ec      	b.n	80024be <_printf_float+0x33e>
 80024e4:	4613      	mov	r3, r2
 80024e6:	4631      	mov	r1, r6
 80024e8:	4642      	mov	r2, r8
 80024ea:	4628      	mov	r0, r5
 80024ec:	47b8      	blx	r7
 80024ee:	3001      	adds	r0, #1
 80024f0:	d1c0      	bne.n	8002474 <_printf_float+0x2f4>
 80024f2:	e6a0      	b.n	8002236 <_printf_float+0xb6>
 80024f4:	2301      	movs	r3, #1
 80024f6:	4631      	mov	r1, r6
 80024f8:	4628      	mov	r0, r5
 80024fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80024fc:	47b8      	blx	r7
 80024fe:	3001      	adds	r0, #1
 8002500:	f43f ae99 	beq.w	8002236 <_printf_float+0xb6>
 8002504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002506:	f10b 0b01 	add.w	fp, fp, #1
 800250a:	e7b9      	b.n	8002480 <_printf_float+0x300>
 800250c:	4631      	mov	r1, r6
 800250e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002512:	4628      	mov	r0, r5
 8002514:	47b8      	blx	r7
 8002516:	3001      	adds	r0, #1
 8002518:	d1bf      	bne.n	800249a <_printf_float+0x31a>
 800251a:	e68c      	b.n	8002236 <_printf_float+0xb6>
 800251c:	464b      	mov	r3, r9
 800251e:	4631      	mov	r1, r6
 8002520:	4628      	mov	r0, r5
 8002522:	eb08 020a 	add.w	r2, r8, sl
 8002526:	47b8      	blx	r7
 8002528:	3001      	adds	r0, #1
 800252a:	d1c2      	bne.n	80024b2 <_printf_float+0x332>
 800252c:	e683      	b.n	8002236 <_printf_float+0xb6>
 800252e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002530:	2a01      	cmp	r2, #1
 8002532:	dc01      	bgt.n	8002538 <_printf_float+0x3b8>
 8002534:	07db      	lsls	r3, r3, #31
 8002536:	d537      	bpl.n	80025a8 <_printf_float+0x428>
 8002538:	2301      	movs	r3, #1
 800253a:	4642      	mov	r2, r8
 800253c:	4631      	mov	r1, r6
 800253e:	4628      	mov	r0, r5
 8002540:	47b8      	blx	r7
 8002542:	3001      	adds	r0, #1
 8002544:	f43f ae77 	beq.w	8002236 <_printf_float+0xb6>
 8002548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800254c:	4631      	mov	r1, r6
 800254e:	4628      	mov	r0, r5
 8002550:	47b8      	blx	r7
 8002552:	3001      	adds	r0, #1
 8002554:	f43f ae6f 	beq.w	8002236 <_printf_float+0xb6>
 8002558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800255c:	2200      	movs	r2, #0
 800255e:	2300      	movs	r3, #0
 8002560:	f7fe fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8002564:	b9d8      	cbnz	r0, 800259e <_printf_float+0x41e>
 8002566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002568:	f108 0201 	add.w	r2, r8, #1
 800256c:	3b01      	subs	r3, #1
 800256e:	4631      	mov	r1, r6
 8002570:	4628      	mov	r0, r5
 8002572:	47b8      	blx	r7
 8002574:	3001      	adds	r0, #1
 8002576:	d10e      	bne.n	8002596 <_printf_float+0x416>
 8002578:	e65d      	b.n	8002236 <_printf_float+0xb6>
 800257a:	2301      	movs	r3, #1
 800257c:	464a      	mov	r2, r9
 800257e:	4631      	mov	r1, r6
 8002580:	4628      	mov	r0, r5
 8002582:	47b8      	blx	r7
 8002584:	3001      	adds	r0, #1
 8002586:	f43f ae56 	beq.w	8002236 <_printf_float+0xb6>
 800258a:	f108 0801 	add.w	r8, r8, #1
 800258e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002590:	3b01      	subs	r3, #1
 8002592:	4543      	cmp	r3, r8
 8002594:	dcf1      	bgt.n	800257a <_printf_float+0x3fa>
 8002596:	4653      	mov	r3, sl
 8002598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800259c:	e6e0      	b.n	8002360 <_printf_float+0x1e0>
 800259e:	f04f 0800 	mov.w	r8, #0
 80025a2:	f104 091a 	add.w	r9, r4, #26
 80025a6:	e7f2      	b.n	800258e <_printf_float+0x40e>
 80025a8:	2301      	movs	r3, #1
 80025aa:	4642      	mov	r2, r8
 80025ac:	e7df      	b.n	800256e <_printf_float+0x3ee>
 80025ae:	2301      	movs	r3, #1
 80025b0:	464a      	mov	r2, r9
 80025b2:	4631      	mov	r1, r6
 80025b4:	4628      	mov	r0, r5
 80025b6:	47b8      	blx	r7
 80025b8:	3001      	adds	r0, #1
 80025ba:	f43f ae3c 	beq.w	8002236 <_printf_float+0xb6>
 80025be:	f108 0801 	add.w	r8, r8, #1
 80025c2:	68e3      	ldr	r3, [r4, #12]
 80025c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80025c6:	1a5b      	subs	r3, r3, r1
 80025c8:	4543      	cmp	r3, r8
 80025ca:	dcf0      	bgt.n	80025ae <_printf_float+0x42e>
 80025cc:	e6fd      	b.n	80023ca <_printf_float+0x24a>
 80025ce:	f04f 0800 	mov.w	r8, #0
 80025d2:	f104 0919 	add.w	r9, r4, #25
 80025d6:	e7f4      	b.n	80025c2 <_printf_float+0x442>

080025d8 <_printf_common>:
 80025d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025dc:	4616      	mov	r6, r2
 80025de:	4699      	mov	r9, r3
 80025e0:	688a      	ldr	r2, [r1, #8]
 80025e2:	690b      	ldr	r3, [r1, #16]
 80025e4:	4607      	mov	r7, r0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	bfb8      	it	lt
 80025ea:	4613      	movlt	r3, r2
 80025ec:	6033      	str	r3, [r6, #0]
 80025ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025f2:	460c      	mov	r4, r1
 80025f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025f8:	b10a      	cbz	r2, 80025fe <_printf_common+0x26>
 80025fa:	3301      	adds	r3, #1
 80025fc:	6033      	str	r3, [r6, #0]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	0699      	lsls	r1, r3, #26
 8002602:	bf42      	ittt	mi
 8002604:	6833      	ldrmi	r3, [r6, #0]
 8002606:	3302      	addmi	r3, #2
 8002608:	6033      	strmi	r3, [r6, #0]
 800260a:	6825      	ldr	r5, [r4, #0]
 800260c:	f015 0506 	ands.w	r5, r5, #6
 8002610:	d106      	bne.n	8002620 <_printf_common+0x48>
 8002612:	f104 0a19 	add.w	sl, r4, #25
 8002616:	68e3      	ldr	r3, [r4, #12]
 8002618:	6832      	ldr	r2, [r6, #0]
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	42ab      	cmp	r3, r5
 800261e:	dc28      	bgt.n	8002672 <_printf_common+0x9a>
 8002620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002624:	1e13      	subs	r3, r2, #0
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	bf18      	it	ne
 800262a:	2301      	movne	r3, #1
 800262c:	0692      	lsls	r2, r2, #26
 800262e:	d42d      	bmi.n	800268c <_printf_common+0xb4>
 8002630:	4649      	mov	r1, r9
 8002632:	4638      	mov	r0, r7
 8002634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002638:	47c0      	blx	r8
 800263a:	3001      	adds	r0, #1
 800263c:	d020      	beq.n	8002680 <_printf_common+0xa8>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	68e5      	ldr	r5, [r4, #12]
 8002642:	f003 0306 	and.w	r3, r3, #6
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf18      	it	ne
 800264a:	2500      	movne	r5, #0
 800264c:	6832      	ldr	r2, [r6, #0]
 800264e:	f04f 0600 	mov.w	r6, #0
 8002652:	68a3      	ldr	r3, [r4, #8]
 8002654:	bf08      	it	eq
 8002656:	1aad      	subeq	r5, r5, r2
 8002658:	6922      	ldr	r2, [r4, #16]
 800265a:	bf08      	it	eq
 800265c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002660:	4293      	cmp	r3, r2
 8002662:	bfc4      	itt	gt
 8002664:	1a9b      	subgt	r3, r3, r2
 8002666:	18ed      	addgt	r5, r5, r3
 8002668:	341a      	adds	r4, #26
 800266a:	42b5      	cmp	r5, r6
 800266c:	d11a      	bne.n	80026a4 <_printf_common+0xcc>
 800266e:	2000      	movs	r0, #0
 8002670:	e008      	b.n	8002684 <_printf_common+0xac>
 8002672:	2301      	movs	r3, #1
 8002674:	4652      	mov	r2, sl
 8002676:	4649      	mov	r1, r9
 8002678:	4638      	mov	r0, r7
 800267a:	47c0      	blx	r8
 800267c:	3001      	adds	r0, #1
 800267e:	d103      	bne.n	8002688 <_printf_common+0xb0>
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002688:	3501      	adds	r5, #1
 800268a:	e7c4      	b.n	8002616 <_printf_common+0x3e>
 800268c:	2030      	movs	r0, #48	; 0x30
 800268e:	18e1      	adds	r1, r4, r3
 8002690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800269a:	4422      	add	r2, r4
 800269c:	3302      	adds	r3, #2
 800269e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026a2:	e7c5      	b.n	8002630 <_printf_common+0x58>
 80026a4:	2301      	movs	r3, #1
 80026a6:	4622      	mov	r2, r4
 80026a8:	4649      	mov	r1, r9
 80026aa:	4638      	mov	r0, r7
 80026ac:	47c0      	blx	r8
 80026ae:	3001      	adds	r0, #1
 80026b0:	d0e6      	beq.n	8002680 <_printf_common+0xa8>
 80026b2:	3601      	adds	r6, #1
 80026b4:	e7d9      	b.n	800266a <_printf_common+0x92>
	...

080026b8 <_printf_i>:
 80026b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026bc:	7e0f      	ldrb	r7, [r1, #24]
 80026be:	4691      	mov	r9, r2
 80026c0:	2f78      	cmp	r7, #120	; 0x78
 80026c2:	4680      	mov	r8, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	469a      	mov	sl, r3
 80026c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026ce:	d807      	bhi.n	80026e0 <_printf_i+0x28>
 80026d0:	2f62      	cmp	r7, #98	; 0x62
 80026d2:	d80a      	bhi.n	80026ea <_printf_i+0x32>
 80026d4:	2f00      	cmp	r7, #0
 80026d6:	f000 80d9 	beq.w	800288c <_printf_i+0x1d4>
 80026da:	2f58      	cmp	r7, #88	; 0x58
 80026dc:	f000 80a4 	beq.w	8002828 <_printf_i+0x170>
 80026e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026e8:	e03a      	b.n	8002760 <_printf_i+0xa8>
 80026ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026ee:	2b15      	cmp	r3, #21
 80026f0:	d8f6      	bhi.n	80026e0 <_printf_i+0x28>
 80026f2:	a101      	add	r1, pc, #4	; (adr r1, 80026f8 <_printf_i+0x40>)
 80026f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026f8:	08002751 	.word	0x08002751
 80026fc:	08002765 	.word	0x08002765
 8002700:	080026e1 	.word	0x080026e1
 8002704:	080026e1 	.word	0x080026e1
 8002708:	080026e1 	.word	0x080026e1
 800270c:	080026e1 	.word	0x080026e1
 8002710:	08002765 	.word	0x08002765
 8002714:	080026e1 	.word	0x080026e1
 8002718:	080026e1 	.word	0x080026e1
 800271c:	080026e1 	.word	0x080026e1
 8002720:	080026e1 	.word	0x080026e1
 8002724:	08002873 	.word	0x08002873
 8002728:	08002795 	.word	0x08002795
 800272c:	08002855 	.word	0x08002855
 8002730:	080026e1 	.word	0x080026e1
 8002734:	080026e1 	.word	0x080026e1
 8002738:	08002895 	.word	0x08002895
 800273c:	080026e1 	.word	0x080026e1
 8002740:	08002795 	.word	0x08002795
 8002744:	080026e1 	.word	0x080026e1
 8002748:	080026e1 	.word	0x080026e1
 800274c:	0800285d 	.word	0x0800285d
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	1d1a      	adds	r2, r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	602a      	str	r2, [r5, #0]
 8002758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800275c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002760:	2301      	movs	r3, #1
 8002762:	e0a4      	b.n	80028ae <_printf_i+0x1f6>
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	6829      	ldr	r1, [r5, #0]
 8002768:	0606      	lsls	r6, r0, #24
 800276a:	f101 0304 	add.w	r3, r1, #4
 800276e:	d50a      	bpl.n	8002786 <_printf_i+0xce>
 8002770:	680e      	ldr	r6, [r1, #0]
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	2e00      	cmp	r6, #0
 8002776:	da03      	bge.n	8002780 <_printf_i+0xc8>
 8002778:	232d      	movs	r3, #45	; 0x2d
 800277a:	4276      	negs	r6, r6
 800277c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002780:	230a      	movs	r3, #10
 8002782:	485e      	ldr	r0, [pc, #376]	; (80028fc <_printf_i+0x244>)
 8002784:	e019      	b.n	80027ba <_printf_i+0x102>
 8002786:	680e      	ldr	r6, [r1, #0]
 8002788:	f010 0f40 	tst.w	r0, #64	; 0x40
 800278c:	602b      	str	r3, [r5, #0]
 800278e:	bf18      	it	ne
 8002790:	b236      	sxthne	r6, r6
 8002792:	e7ef      	b.n	8002774 <_printf_i+0xbc>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	1d19      	adds	r1, r3, #4
 800279a:	6029      	str	r1, [r5, #0]
 800279c:	0601      	lsls	r1, r0, #24
 800279e:	d501      	bpl.n	80027a4 <_printf_i+0xec>
 80027a0:	681e      	ldr	r6, [r3, #0]
 80027a2:	e002      	b.n	80027aa <_printf_i+0xf2>
 80027a4:	0646      	lsls	r6, r0, #25
 80027a6:	d5fb      	bpl.n	80027a0 <_printf_i+0xe8>
 80027a8:	881e      	ldrh	r6, [r3, #0]
 80027aa:	2f6f      	cmp	r7, #111	; 0x6f
 80027ac:	bf0c      	ite	eq
 80027ae:	2308      	moveq	r3, #8
 80027b0:	230a      	movne	r3, #10
 80027b2:	4852      	ldr	r0, [pc, #328]	; (80028fc <_printf_i+0x244>)
 80027b4:	2100      	movs	r1, #0
 80027b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027ba:	6865      	ldr	r5, [r4, #4]
 80027bc:	2d00      	cmp	r5, #0
 80027be:	bfa8      	it	ge
 80027c0:	6821      	ldrge	r1, [r4, #0]
 80027c2:	60a5      	str	r5, [r4, #8]
 80027c4:	bfa4      	itt	ge
 80027c6:	f021 0104 	bicge.w	r1, r1, #4
 80027ca:	6021      	strge	r1, [r4, #0]
 80027cc:	b90e      	cbnz	r6, 80027d2 <_printf_i+0x11a>
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	d04d      	beq.n	800286e <_printf_i+0x1b6>
 80027d2:	4615      	mov	r5, r2
 80027d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80027d8:	fb03 6711 	mls	r7, r3, r1, r6
 80027dc:	5dc7      	ldrb	r7, [r0, r7]
 80027de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027e2:	4637      	mov	r7, r6
 80027e4:	42bb      	cmp	r3, r7
 80027e6:	460e      	mov	r6, r1
 80027e8:	d9f4      	bls.n	80027d4 <_printf_i+0x11c>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d10b      	bne.n	8002806 <_printf_i+0x14e>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	07de      	lsls	r6, r3, #31
 80027f2:	d508      	bpl.n	8002806 <_printf_i+0x14e>
 80027f4:	6923      	ldr	r3, [r4, #16]
 80027f6:	6861      	ldr	r1, [r4, #4]
 80027f8:	4299      	cmp	r1, r3
 80027fa:	bfde      	ittt	le
 80027fc:	2330      	movle	r3, #48	; 0x30
 80027fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002802:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002806:	1b52      	subs	r2, r2, r5
 8002808:	6122      	str	r2, [r4, #16]
 800280a:	464b      	mov	r3, r9
 800280c:	4621      	mov	r1, r4
 800280e:	4640      	mov	r0, r8
 8002810:	f8cd a000 	str.w	sl, [sp]
 8002814:	aa03      	add	r2, sp, #12
 8002816:	f7ff fedf 	bl	80025d8 <_printf_common>
 800281a:	3001      	adds	r0, #1
 800281c:	d14c      	bne.n	80028b8 <_printf_i+0x200>
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	b004      	add	sp, #16
 8002824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002828:	4834      	ldr	r0, [pc, #208]	; (80028fc <_printf_i+0x244>)
 800282a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800282e:	6829      	ldr	r1, [r5, #0]
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	f851 6b04 	ldr.w	r6, [r1], #4
 8002836:	6029      	str	r1, [r5, #0]
 8002838:	061d      	lsls	r5, r3, #24
 800283a:	d514      	bpl.n	8002866 <_printf_i+0x1ae>
 800283c:	07df      	lsls	r7, r3, #31
 800283e:	bf44      	itt	mi
 8002840:	f043 0320 	orrmi.w	r3, r3, #32
 8002844:	6023      	strmi	r3, [r4, #0]
 8002846:	b91e      	cbnz	r6, 8002850 <_printf_i+0x198>
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	f023 0320 	bic.w	r3, r3, #32
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	2310      	movs	r3, #16
 8002852:	e7af      	b.n	80027b4 <_printf_i+0xfc>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	f043 0320 	orr.w	r3, r3, #32
 800285a:	6023      	str	r3, [r4, #0]
 800285c:	2378      	movs	r3, #120	; 0x78
 800285e:	4828      	ldr	r0, [pc, #160]	; (8002900 <_printf_i+0x248>)
 8002860:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002864:	e7e3      	b.n	800282e <_printf_i+0x176>
 8002866:	0659      	lsls	r1, r3, #25
 8002868:	bf48      	it	mi
 800286a:	b2b6      	uxthmi	r6, r6
 800286c:	e7e6      	b.n	800283c <_printf_i+0x184>
 800286e:	4615      	mov	r5, r2
 8002870:	e7bb      	b.n	80027ea <_printf_i+0x132>
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	6826      	ldr	r6, [r4, #0]
 8002876:	1d18      	adds	r0, r3, #4
 8002878:	6961      	ldr	r1, [r4, #20]
 800287a:	6028      	str	r0, [r5, #0]
 800287c:	0635      	lsls	r5, r6, #24
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	d501      	bpl.n	8002886 <_printf_i+0x1ce>
 8002882:	6019      	str	r1, [r3, #0]
 8002884:	e002      	b.n	800288c <_printf_i+0x1d4>
 8002886:	0670      	lsls	r0, r6, #25
 8002888:	d5fb      	bpl.n	8002882 <_printf_i+0x1ca>
 800288a:	8019      	strh	r1, [r3, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	4615      	mov	r5, r2
 8002890:	6123      	str	r3, [r4, #16]
 8002892:	e7ba      	b.n	800280a <_printf_i+0x152>
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	2100      	movs	r1, #0
 8002898:	1d1a      	adds	r2, r3, #4
 800289a:	602a      	str	r2, [r5, #0]
 800289c:	681d      	ldr	r5, [r3, #0]
 800289e:	6862      	ldr	r2, [r4, #4]
 80028a0:	4628      	mov	r0, r5
 80028a2:	f001 fa1f 	bl	8003ce4 <memchr>
 80028a6:	b108      	cbz	r0, 80028ac <_printf_i+0x1f4>
 80028a8:	1b40      	subs	r0, r0, r5
 80028aa:	6060      	str	r0, [r4, #4]
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	6123      	str	r3, [r4, #16]
 80028b0:	2300      	movs	r3, #0
 80028b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028b6:	e7a8      	b.n	800280a <_printf_i+0x152>
 80028b8:	462a      	mov	r2, r5
 80028ba:	4649      	mov	r1, r9
 80028bc:	4640      	mov	r0, r8
 80028be:	6923      	ldr	r3, [r4, #16]
 80028c0:	47d0      	blx	sl
 80028c2:	3001      	adds	r0, #1
 80028c4:	d0ab      	beq.n	800281e <_printf_i+0x166>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	079b      	lsls	r3, r3, #30
 80028ca:	d413      	bmi.n	80028f4 <_printf_i+0x23c>
 80028cc:	68e0      	ldr	r0, [r4, #12]
 80028ce:	9b03      	ldr	r3, [sp, #12]
 80028d0:	4298      	cmp	r0, r3
 80028d2:	bfb8      	it	lt
 80028d4:	4618      	movlt	r0, r3
 80028d6:	e7a4      	b.n	8002822 <_printf_i+0x16a>
 80028d8:	2301      	movs	r3, #1
 80028da:	4632      	mov	r2, r6
 80028dc:	4649      	mov	r1, r9
 80028de:	4640      	mov	r0, r8
 80028e0:	47d0      	blx	sl
 80028e2:	3001      	adds	r0, #1
 80028e4:	d09b      	beq.n	800281e <_printf_i+0x166>
 80028e6:	3501      	adds	r5, #1
 80028e8:	68e3      	ldr	r3, [r4, #12]
 80028ea:	9903      	ldr	r1, [sp, #12]
 80028ec:	1a5b      	subs	r3, r3, r1
 80028ee:	42ab      	cmp	r3, r5
 80028f0:	dcf2      	bgt.n	80028d8 <_printf_i+0x220>
 80028f2:	e7eb      	b.n	80028cc <_printf_i+0x214>
 80028f4:	2500      	movs	r5, #0
 80028f6:	f104 0619 	add.w	r6, r4, #25
 80028fa:	e7f5      	b.n	80028e8 <_printf_i+0x230>
 80028fc:	08004c86 	.word	0x08004c86
 8002900:	08004c97 	.word	0x08004c97

08002904 <iprintf>:
 8002904:	b40f      	push	{r0, r1, r2, r3}
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <iprintf+0x2c>)
 8002908:	b513      	push	{r0, r1, r4, lr}
 800290a:	681c      	ldr	r4, [r3, #0]
 800290c:	b124      	cbz	r4, 8002918 <iprintf+0x14>
 800290e:	69a3      	ldr	r3, [r4, #24]
 8002910:	b913      	cbnz	r3, 8002918 <iprintf+0x14>
 8002912:	4620      	mov	r0, r4
 8002914:	f001 f8d4 	bl	8003ac0 <__sinit>
 8002918:	ab05      	add	r3, sp, #20
 800291a:	4620      	mov	r0, r4
 800291c:	9a04      	ldr	r2, [sp, #16]
 800291e:	68a1      	ldr	r1, [r4, #8]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f001 fe95 	bl	8004650 <_vfiprintf_r>
 8002926:	b002      	add	sp, #8
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800292c:	b004      	add	sp, #16
 800292e:	4770      	bx	lr
 8002930:	2000000c 	.word	0x2000000c

08002934 <_puts_r>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	460e      	mov	r6, r1
 8002938:	4605      	mov	r5, r0
 800293a:	b118      	cbz	r0, 8002944 <_puts_r+0x10>
 800293c:	6983      	ldr	r3, [r0, #24]
 800293e:	b90b      	cbnz	r3, 8002944 <_puts_r+0x10>
 8002940:	f001 f8be 	bl	8003ac0 <__sinit>
 8002944:	69ab      	ldr	r3, [r5, #24]
 8002946:	68ac      	ldr	r4, [r5, #8]
 8002948:	b913      	cbnz	r3, 8002950 <_puts_r+0x1c>
 800294a:	4628      	mov	r0, r5
 800294c:	f001 f8b8 	bl	8003ac0 <__sinit>
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <_puts_r+0xd0>)
 8002952:	429c      	cmp	r4, r3
 8002954:	d120      	bne.n	8002998 <_puts_r+0x64>
 8002956:	686c      	ldr	r4, [r5, #4]
 8002958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800295a:	07db      	lsls	r3, r3, #31
 800295c:	d405      	bmi.n	800296a <_puts_r+0x36>
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	0598      	lsls	r0, r3, #22
 8002962:	d402      	bmi.n	800296a <_puts_r+0x36>
 8002964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002966:	f001 f94e 	bl	8003c06 <__retarget_lock_acquire_recursive>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	0719      	lsls	r1, r3, #28
 800296e:	d51d      	bpl.n	80029ac <_puts_r+0x78>
 8002970:	6923      	ldr	r3, [r4, #16]
 8002972:	b1db      	cbz	r3, 80029ac <_puts_r+0x78>
 8002974:	3e01      	subs	r6, #1
 8002976:	68a3      	ldr	r3, [r4, #8]
 8002978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800297c:	3b01      	subs	r3, #1
 800297e:	60a3      	str	r3, [r4, #8]
 8002980:	bb39      	cbnz	r1, 80029d2 <_puts_r+0x9e>
 8002982:	2b00      	cmp	r3, #0
 8002984:	da38      	bge.n	80029f8 <_puts_r+0xc4>
 8002986:	4622      	mov	r2, r4
 8002988:	210a      	movs	r1, #10
 800298a:	4628      	mov	r0, r5
 800298c:	f000 f848 	bl	8002a20 <__swbuf_r>
 8002990:	3001      	adds	r0, #1
 8002992:	d011      	beq.n	80029b8 <_puts_r+0x84>
 8002994:	250a      	movs	r5, #10
 8002996:	e011      	b.n	80029bc <_puts_r+0x88>
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <_puts_r+0xd4>)
 800299a:	429c      	cmp	r4, r3
 800299c:	d101      	bne.n	80029a2 <_puts_r+0x6e>
 800299e:	68ac      	ldr	r4, [r5, #8]
 80029a0:	e7da      	b.n	8002958 <_puts_r+0x24>
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <_puts_r+0xd8>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	bf08      	it	eq
 80029a8:	68ec      	ldreq	r4, [r5, #12]
 80029aa:	e7d5      	b.n	8002958 <_puts_r+0x24>
 80029ac:	4621      	mov	r1, r4
 80029ae:	4628      	mov	r0, r5
 80029b0:	f000 f888 	bl	8002ac4 <__swsetup_r>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0dd      	beq.n	8002974 <_puts_r+0x40>
 80029b8:	f04f 35ff 	mov.w	r5, #4294967295
 80029bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029be:	07da      	lsls	r2, r3, #31
 80029c0:	d405      	bmi.n	80029ce <_puts_r+0x9a>
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	059b      	lsls	r3, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_puts_r+0x9a>
 80029c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ca:	f001 f91d 	bl	8003c08 <__retarget_lock_release_recursive>
 80029ce:	4628      	mov	r0, r5
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da04      	bge.n	80029e0 <_puts_r+0xac>
 80029d6:	69a2      	ldr	r2, [r4, #24]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dc06      	bgt.n	80029ea <_puts_r+0xb6>
 80029dc:	290a      	cmp	r1, #10
 80029de:	d004      	beq.n	80029ea <_puts_r+0xb6>
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	6022      	str	r2, [r4, #0]
 80029e6:	7019      	strb	r1, [r3, #0]
 80029e8:	e7c5      	b.n	8002976 <_puts_r+0x42>
 80029ea:	4622      	mov	r2, r4
 80029ec:	4628      	mov	r0, r5
 80029ee:	f000 f817 	bl	8002a20 <__swbuf_r>
 80029f2:	3001      	adds	r0, #1
 80029f4:	d1bf      	bne.n	8002976 <_puts_r+0x42>
 80029f6:	e7df      	b.n	80029b8 <_puts_r+0x84>
 80029f8:	250a      	movs	r5, #10
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	6022      	str	r2, [r4, #0]
 8002a00:	701d      	strb	r5, [r3, #0]
 8002a02:	e7db      	b.n	80029bc <_puts_r+0x88>
 8002a04:	08004d58 	.word	0x08004d58
 8002a08:	08004d78 	.word	0x08004d78
 8002a0c:	08004d38 	.word	0x08004d38

08002a10 <puts>:
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <puts+0xc>)
 8002a12:	4601      	mov	r1, r0
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f7ff bf8d 	b.w	8002934 <_puts_r>
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <__swbuf_r>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	460e      	mov	r6, r1
 8002a24:	4614      	mov	r4, r2
 8002a26:	4605      	mov	r5, r0
 8002a28:	b118      	cbz	r0, 8002a32 <__swbuf_r+0x12>
 8002a2a:	6983      	ldr	r3, [r0, #24]
 8002a2c:	b90b      	cbnz	r3, 8002a32 <__swbuf_r+0x12>
 8002a2e:	f001 f847 	bl	8003ac0 <__sinit>
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <__swbuf_r+0x98>)
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d12b      	bne.n	8002a90 <__swbuf_r+0x70>
 8002a38:	686c      	ldr	r4, [r5, #4]
 8002a3a:	69a3      	ldr	r3, [r4, #24]
 8002a3c:	60a3      	str	r3, [r4, #8]
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	071a      	lsls	r2, r3, #28
 8002a42:	d52f      	bpl.n	8002aa4 <__swbuf_r+0x84>
 8002a44:	6923      	ldr	r3, [r4, #16]
 8002a46:	b36b      	cbz	r3, 8002aa4 <__swbuf_r+0x84>
 8002a48:	6923      	ldr	r3, [r4, #16]
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	b2f6      	uxtb	r6, r6
 8002a4e:	1ac0      	subs	r0, r0, r3
 8002a50:	6963      	ldr	r3, [r4, #20]
 8002a52:	4637      	mov	r7, r6
 8002a54:	4283      	cmp	r3, r0
 8002a56:	dc04      	bgt.n	8002a62 <__swbuf_r+0x42>
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 ff9c 	bl	8003998 <_fflush_r>
 8002a60:	bb30      	cbnz	r0, 8002ab0 <__swbuf_r+0x90>
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	3001      	adds	r0, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	60a3      	str	r3, [r4, #8]
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	6022      	str	r2, [r4, #0]
 8002a70:	701e      	strb	r6, [r3, #0]
 8002a72:	6963      	ldr	r3, [r4, #20]
 8002a74:	4283      	cmp	r3, r0
 8002a76:	d004      	beq.n	8002a82 <__swbuf_r+0x62>
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	07db      	lsls	r3, r3, #31
 8002a7c:	d506      	bpl.n	8002a8c <__swbuf_r+0x6c>
 8002a7e:	2e0a      	cmp	r6, #10
 8002a80:	d104      	bne.n	8002a8c <__swbuf_r+0x6c>
 8002a82:	4621      	mov	r1, r4
 8002a84:	4628      	mov	r0, r5
 8002a86:	f000 ff87 	bl	8003998 <_fflush_r>
 8002a8a:	b988      	cbnz	r0, 8002ab0 <__swbuf_r+0x90>
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <__swbuf_r+0x9c>)
 8002a92:	429c      	cmp	r4, r3
 8002a94:	d101      	bne.n	8002a9a <__swbuf_r+0x7a>
 8002a96:	68ac      	ldr	r4, [r5, #8]
 8002a98:	e7cf      	b.n	8002a3a <__swbuf_r+0x1a>
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <__swbuf_r+0xa0>)
 8002a9c:	429c      	cmp	r4, r3
 8002a9e:	bf08      	it	eq
 8002aa0:	68ec      	ldreq	r4, [r5, #12]
 8002aa2:	e7ca      	b.n	8002a3a <__swbuf_r+0x1a>
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f000 f80c 	bl	8002ac4 <__swsetup_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d0cb      	beq.n	8002a48 <__swbuf_r+0x28>
 8002ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8002ab4:	e7ea      	b.n	8002a8c <__swbuf_r+0x6c>
 8002ab6:	bf00      	nop
 8002ab8:	08004d58 	.word	0x08004d58
 8002abc:	08004d78 	.word	0x08004d78
 8002ac0:	08004d38 	.word	0x08004d38

08002ac4 <__swsetup_r>:
 8002ac4:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <__swsetup_r+0xcc>)
 8002ac6:	b570      	push	{r4, r5, r6, lr}
 8002ac8:	681d      	ldr	r5, [r3, #0]
 8002aca:	4606      	mov	r6, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	b125      	cbz	r5, 8002ada <__swsetup_r+0x16>
 8002ad0:	69ab      	ldr	r3, [r5, #24]
 8002ad2:	b913      	cbnz	r3, 8002ada <__swsetup_r+0x16>
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f000 fff3 	bl	8003ac0 <__sinit>
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <__swsetup_r+0xd0>)
 8002adc:	429c      	cmp	r4, r3
 8002ade:	d10f      	bne.n	8002b00 <__swsetup_r+0x3c>
 8002ae0:	686c      	ldr	r4, [r5, #4]
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ae8:	0719      	lsls	r1, r3, #28
 8002aea:	d42c      	bmi.n	8002b46 <__swsetup_r+0x82>
 8002aec:	06dd      	lsls	r5, r3, #27
 8002aee:	d411      	bmi.n	8002b14 <__swsetup_r+0x50>
 8002af0:	2309      	movs	r3, #9
 8002af2:	6033      	str	r3, [r6, #0]
 8002af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	81a3      	strh	r3, [r4, #12]
 8002afe:	e03e      	b.n	8002b7e <__swsetup_r+0xba>
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <__swsetup_r+0xd4>)
 8002b02:	429c      	cmp	r4, r3
 8002b04:	d101      	bne.n	8002b0a <__swsetup_r+0x46>
 8002b06:	68ac      	ldr	r4, [r5, #8]
 8002b08:	e7eb      	b.n	8002ae2 <__swsetup_r+0x1e>
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <__swsetup_r+0xd8>)
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	bf08      	it	eq
 8002b10:	68ec      	ldreq	r4, [r5, #12]
 8002b12:	e7e6      	b.n	8002ae2 <__swsetup_r+0x1e>
 8002b14:	0758      	lsls	r0, r3, #29
 8002b16:	d512      	bpl.n	8002b3e <__swsetup_r+0x7a>
 8002b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b1a:	b141      	cbz	r1, 8002b2e <__swsetup_r+0x6a>
 8002b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b20:	4299      	cmp	r1, r3
 8002b22:	d002      	beq.n	8002b2a <__swsetup_r+0x66>
 8002b24:	4630      	mov	r0, r6
 8002b26:	f001 fc8f 	bl	8004448 <_free_r>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	6063      	str	r3, [r4, #4]
 8002b3a:	6923      	ldr	r3, [r4, #16]
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	81a3      	strh	r3, [r4, #12]
 8002b46:	6923      	ldr	r3, [r4, #16]
 8002b48:	b94b      	cbnz	r3, 8002b5e <__swsetup_r+0x9a>
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d003      	beq.n	8002b5e <__swsetup_r+0x9a>
 8002b56:	4621      	mov	r1, r4
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f001 f87b 	bl	8003c54 <__smakebuf_r>
 8002b5e:	89a0      	ldrh	r0, [r4, #12]
 8002b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b64:	f010 0301 	ands.w	r3, r0, #1
 8002b68:	d00a      	beq.n	8002b80 <__swsetup_r+0xbc>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60a3      	str	r3, [r4, #8]
 8002b6e:	6963      	ldr	r3, [r4, #20]
 8002b70:	425b      	negs	r3, r3
 8002b72:	61a3      	str	r3, [r4, #24]
 8002b74:	6923      	ldr	r3, [r4, #16]
 8002b76:	b943      	cbnz	r3, 8002b8a <__swsetup_r+0xc6>
 8002b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b7c:	d1ba      	bne.n	8002af4 <__swsetup_r+0x30>
 8002b7e:	bd70      	pop	{r4, r5, r6, pc}
 8002b80:	0781      	lsls	r1, r0, #30
 8002b82:	bf58      	it	pl
 8002b84:	6963      	ldrpl	r3, [r4, #20]
 8002b86:	60a3      	str	r3, [r4, #8]
 8002b88:	e7f4      	b.n	8002b74 <__swsetup_r+0xb0>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	e7f7      	b.n	8002b7e <__swsetup_r+0xba>
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	08004d58 	.word	0x08004d58
 8002b98:	08004d78 	.word	0x08004d78
 8002b9c:	08004d38 	.word	0x08004d38

08002ba0 <quorem>:
 8002ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba4:	6903      	ldr	r3, [r0, #16]
 8002ba6:	690c      	ldr	r4, [r1, #16]
 8002ba8:	4607      	mov	r7, r0
 8002baa:	42a3      	cmp	r3, r4
 8002bac:	f2c0 8082 	blt.w	8002cb4 <quorem+0x114>
 8002bb0:	3c01      	subs	r4, #1
 8002bb2:	f100 0514 	add.w	r5, r0, #20
 8002bb6:	f101 0814 	add.w	r8, r1, #20
 8002bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002bd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002bd8:	d331      	bcc.n	8002c3e <quorem+0x9e>
 8002bda:	f04f 0e00 	mov.w	lr, #0
 8002bde:	4640      	mov	r0, r8
 8002be0:	46ac      	mov	ip, r5
 8002be2:	46f2      	mov	sl, lr
 8002be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8002be8:	b293      	uxth	r3, r2
 8002bea:	fb06 e303 	mla	r3, r6, r3, lr
 8002bee:	0c12      	lsrs	r2, r2, #16
 8002bf0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	fb06 e202 	mla	r2, r6, r2, lr
 8002bfa:	ebaa 0303 	sub.w	r3, sl, r3
 8002bfe:	f8dc a000 	ldr.w	sl, [ip]
 8002c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002c06:	fa1f fa8a 	uxth.w	sl, sl
 8002c0a:	4453      	add	r3, sl
 8002c0c:	f8dc a000 	ldr.w	sl, [ip]
 8002c10:	b292      	uxth	r2, r2
 8002c12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002c16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c20:	4581      	cmp	r9, r0
 8002c22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002c26:	f84c 3b04 	str.w	r3, [ip], #4
 8002c2a:	d2db      	bcs.n	8002be4 <quorem+0x44>
 8002c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8002c30:	b92b      	cbnz	r3, 8002c3e <quorem+0x9e>
 8002c32:	9b01      	ldr	r3, [sp, #4]
 8002c34:	3b04      	subs	r3, #4
 8002c36:	429d      	cmp	r5, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	d32f      	bcc.n	8002c9c <quorem+0xfc>
 8002c3c:	613c      	str	r4, [r7, #16]
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f001 faea 	bl	8004218 <__mcmp>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	db25      	blt.n	8002c94 <quorem+0xf4>
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f04f 0c00 	mov.w	ip, #0
 8002c4e:	3601      	adds	r6, #1
 8002c50:	f858 1b04 	ldr.w	r1, [r8], #4
 8002c54:	f8d0 e000 	ldr.w	lr, [r0]
 8002c58:	b28b      	uxth	r3, r1
 8002c5a:	ebac 0303 	sub.w	r3, ip, r3
 8002c5e:	fa1f f28e 	uxth.w	r2, lr
 8002c62:	4413      	add	r3, r2
 8002c64:	0c0a      	lsrs	r2, r1, #16
 8002c66:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002c6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c74:	45c1      	cmp	r9, r8
 8002c76:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002c7a:	f840 3b04 	str.w	r3, [r0], #4
 8002c7e:	d2e7      	bcs.n	8002c50 <quorem+0xb0>
 8002c80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c88:	b922      	cbnz	r2, 8002c94 <quorem+0xf4>
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	429d      	cmp	r5, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	d30a      	bcc.n	8002ca8 <quorem+0x108>
 8002c92:	613c      	str	r4, [r7, #16]
 8002c94:	4630      	mov	r0, r6
 8002c96:	b003      	add	sp, #12
 8002c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	2a00      	cmp	r2, #0
 8002ca2:	d1cb      	bne.n	8002c3c <quorem+0x9c>
 8002ca4:	3c01      	subs	r4, #1
 8002ca6:	e7c6      	b.n	8002c36 <quorem+0x96>
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	3b04      	subs	r3, #4
 8002cac:	2a00      	cmp	r2, #0
 8002cae:	d1f0      	bne.n	8002c92 <quorem+0xf2>
 8002cb0:	3c01      	subs	r4, #1
 8002cb2:	e7eb      	b.n	8002c8c <quorem+0xec>
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e7ee      	b.n	8002c96 <quorem+0xf6>

08002cb8 <_dtoa_r>:
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	4616      	mov	r6, r2
 8002cbe:	461f      	mov	r7, r3
 8002cc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002cc2:	b099      	sub	sp, #100	; 0x64
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002cca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002cce:	b974      	cbnz	r4, 8002cee <_dtoa_r+0x36>
 8002cd0:	2010      	movs	r0, #16
 8002cd2:	f000 ffff 	bl	8003cd4 <malloc>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6268      	str	r0, [r5, #36]	; 0x24
 8002cda:	b920      	cbnz	r0, 8002ce6 <_dtoa_r+0x2e>
 8002cdc:	21ea      	movs	r1, #234	; 0xea
 8002cde:	4ba8      	ldr	r3, [pc, #672]	; (8002f80 <_dtoa_r+0x2c8>)
 8002ce0:	48a8      	ldr	r0, [pc, #672]	; (8002f84 <_dtoa_r+0x2cc>)
 8002ce2:	f001 fe4b 	bl	800497c <__assert_func>
 8002ce6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002cea:	6004      	str	r4, [r0, #0]
 8002cec:	60c4      	str	r4, [r0, #12]
 8002cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	b151      	cbz	r1, 8002d0a <_dtoa_r+0x52>
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4093      	lsls	r3, r2
 8002cfa:	604a      	str	r2, [r1, #4]
 8002cfc:	608b      	str	r3, [r1, #8]
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f001 f84c 	bl	8003d9c <_Bfree>
 8002d04:	2200      	movs	r2, #0
 8002d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	1e3b      	subs	r3, r7, #0
 8002d0c:	bfaf      	iteee	ge
 8002d0e:	2300      	movge	r3, #0
 8002d10:	2201      	movlt	r2, #1
 8002d12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002d16:	9305      	strlt	r3, [sp, #20]
 8002d18:	bfa8      	it	ge
 8002d1a:	f8c8 3000 	strge.w	r3, [r8]
 8002d1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002d22:	4b99      	ldr	r3, [pc, #612]	; (8002f88 <_dtoa_r+0x2d0>)
 8002d24:	bfb8      	it	lt
 8002d26:	f8c8 2000 	strlt.w	r2, [r8]
 8002d2a:	ea33 0309 	bics.w	r3, r3, r9
 8002d2e:	d119      	bne.n	8002d64 <_dtoa_r+0xac>
 8002d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8002d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002d3c:	4333      	orrs	r3, r6
 8002d3e:	f000 857f 	beq.w	8003840 <_dtoa_r+0xb88>
 8002d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d44:	b953      	cbnz	r3, 8002d5c <_dtoa_r+0xa4>
 8002d46:	4b91      	ldr	r3, [pc, #580]	; (8002f8c <_dtoa_r+0x2d4>)
 8002d48:	e022      	b.n	8002d90 <_dtoa_r+0xd8>
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <_dtoa_r+0x2d8>)
 8002d4c:	9303      	str	r3, [sp, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	9803      	ldr	r0, [sp, #12]
 8002d56:	b019      	add	sp, #100	; 0x64
 8002d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d5c:	4b8b      	ldr	r3, [pc, #556]	; (8002f8c <_dtoa_r+0x2d4>)
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	3303      	adds	r3, #3
 8002d62:	e7f5      	b.n	8002d50 <_dtoa_r+0x98>
 8002d64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002d68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d70:	2200      	movs	r2, #0
 8002d72:	2300      	movs	r3, #0
 8002d74:	f7fd fe18 	bl	80009a8 <__aeabi_dcmpeq>
 8002d78:	4680      	mov	r8, r0
 8002d7a:	b158      	cbz	r0, 8002d94 <_dtoa_r+0xdc>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8558 	beq.w	800383a <_dtoa_r+0xb82>
 8002d8a:	4882      	ldr	r0, [pc, #520]	; (8002f94 <_dtoa_r+0x2dc>)
 8002d8c:	6018      	str	r0, [r3, #0]
 8002d8e:	1e43      	subs	r3, r0, #1
 8002d90:	9303      	str	r3, [sp, #12]
 8002d92:	e7df      	b.n	8002d54 <_dtoa_r+0x9c>
 8002d94:	ab16      	add	r3, sp, #88	; 0x58
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	ab17      	add	r3, sp, #92	; 0x5c
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002da2:	f001 fae1 	bl	8004368 <__d2b>
 8002da6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002daa:	4683      	mov	fp, r0
 8002dac:	2c00      	cmp	r4, #0
 8002dae:	d07f      	beq.n	8002eb0 <_dtoa_r+0x1f8>
 8002db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002db6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dbe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002dc2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002dc6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <_dtoa_r+0x2e0>)
 8002dce:	f7fd f9cb 	bl	8000168 <__aeabi_dsub>
 8002dd2:	a365      	add	r3, pc, #404	; (adr r3, 8002f68 <_dtoa_r+0x2b0>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fb7e 	bl	80004d8 <__aeabi_dmul>
 8002ddc:	a364      	add	r3, pc, #400	; (adr r3, 8002f70 <_dtoa_r+0x2b8>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	f7fd f9c3 	bl	800016c <__adddf3>
 8002de6:	4606      	mov	r6, r0
 8002de8:	4620      	mov	r0, r4
 8002dea:	460f      	mov	r7, r1
 8002dec:	f7fd fb0a 	bl	8000404 <__aeabi_i2d>
 8002df0:	a361      	add	r3, pc, #388	; (adr r3, 8002f78 <_dtoa_r+0x2c0>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fb6f 	bl	80004d8 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4630      	mov	r0, r6
 8002e00:	4639      	mov	r1, r7
 8002e02:	f7fd f9b3 	bl	800016c <__adddf3>
 8002e06:	4606      	mov	r6, r0
 8002e08:	460f      	mov	r7, r1
 8002e0a:	f7fd fe15 	bl	8000a38 <__aeabi_d2iz>
 8002e0e:	2200      	movs	r2, #0
 8002e10:	4682      	mov	sl, r0
 8002e12:	2300      	movs	r3, #0
 8002e14:	4630      	mov	r0, r6
 8002e16:	4639      	mov	r1, r7
 8002e18:	f7fd fdd0 	bl	80009bc <__aeabi_dcmplt>
 8002e1c:	b148      	cbz	r0, 8002e32 <_dtoa_r+0x17a>
 8002e1e:	4650      	mov	r0, sl
 8002e20:	f7fd faf0 	bl	8000404 <__aeabi_i2d>
 8002e24:	4632      	mov	r2, r6
 8002e26:	463b      	mov	r3, r7
 8002e28:	f7fd fdbe 	bl	80009a8 <__aeabi_dcmpeq>
 8002e2c:	b908      	cbnz	r0, 8002e32 <_dtoa_r+0x17a>
 8002e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e32:	f1ba 0f16 	cmp.w	sl, #22
 8002e36:	d858      	bhi.n	8002eea <_dtoa_r+0x232>
 8002e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e3c:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <_dtoa_r+0x2e4>)
 8002e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f7fd fdb9 	bl	80009bc <__aeabi_dcmplt>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d04f      	beq.n	8002eee <_dtoa_r+0x236>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002e58:	1b1c      	subs	r4, r3, r4
 8002e5a:	1e63      	subs	r3, r4, #1
 8002e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e5e:	bf49      	itett	mi
 8002e60:	f1c4 0301 	rsbmi	r3, r4, #1
 8002e64:	2300      	movpl	r3, #0
 8002e66:	9306      	strmi	r3, [sp, #24]
 8002e68:	2300      	movmi	r3, #0
 8002e6a:	bf54      	ite	pl
 8002e6c:	9306      	strpl	r3, [sp, #24]
 8002e6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002e70:	f1ba 0f00 	cmp.w	sl, #0
 8002e74:	db3d      	blt.n	8002ef2 <_dtoa_r+0x23a>
 8002e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e78:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002e7c:	4453      	add	r3, sl
 8002e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e80:	2300      	movs	r3, #0
 8002e82:	930a      	str	r3, [sp, #40]	; 0x28
 8002e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	f200 808c 	bhi.w	8002fa4 <_dtoa_r+0x2ec>
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	bfc4      	itt	gt
 8002e90:	3b04      	subgt	r3, #4
 8002e92:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e96:	bfc8      	it	gt
 8002e98:	2400      	movgt	r4, #0
 8002e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8002e9e:	bfd8      	it	le
 8002ea0:	2401      	movle	r4, #1
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	f200 808a 	bhi.w	8002fbc <_dtoa_r+0x304>
 8002ea8:	e8df f003 	tbb	[pc, r3]
 8002eac:	5b4d4f2d 	.word	0x5b4d4f2d
 8002eb0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002eb4:	441c      	add	r4, r3
 8002eb6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	bfc3      	ittte	gt
 8002ebe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002ec2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002ec6:	fa09 f303 	lslgt.w	r3, r9, r3
 8002eca:	f1c3 0320 	rsble	r3, r3, #32
 8002ece:	bfc6      	itte	gt
 8002ed0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002ed4:	4318      	orrgt	r0, r3
 8002ed6:	fa06 f003 	lslle.w	r0, r6, r3
 8002eda:	f7fd fa83 	bl	80003e4 <__aeabi_ui2d>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002ee4:	3c01      	subs	r4, #1
 8002ee6:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ee8:	e76f      	b.n	8002dca <_dtoa_r+0x112>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e7b2      	b.n	8002e54 <_dtoa_r+0x19c>
 8002eee:	900f      	str	r0, [sp, #60]	; 0x3c
 8002ef0:	e7b1      	b.n	8002e56 <_dtoa_r+0x19e>
 8002ef2:	9b06      	ldr	r3, [sp, #24]
 8002ef4:	eba3 030a 	sub.w	r3, r3, sl
 8002ef8:	9306      	str	r3, [sp, #24]
 8002efa:	f1ca 0300 	rsb	r3, sl, #0
 8002efe:	930a      	str	r3, [sp, #40]	; 0x28
 8002f00:	2300      	movs	r3, #0
 8002f02:	930e      	str	r3, [sp, #56]	; 0x38
 8002f04:	e7be      	b.n	8002e84 <_dtoa_r+0x1cc>
 8002f06:	2300      	movs	r3, #0
 8002f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dc58      	bgt.n	8002fc2 <_dtoa_r+0x30a>
 8002f10:	f04f 0901 	mov.w	r9, #1
 8002f14:	464b      	mov	r3, r9
 8002f16:	f8cd 9020 	str.w	r9, [sp, #32]
 8002f1a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002f1e:	2200      	movs	r2, #0
 8002f20:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002f22:	6042      	str	r2, [r0, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f102 0614 	add.w	r6, r2, #20
 8002f2a:	429e      	cmp	r6, r3
 8002f2c:	6841      	ldr	r1, [r0, #4]
 8002f2e:	d94e      	bls.n	8002fce <_dtoa_r+0x316>
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 fef3 	bl	8003d1c <_Balloc>
 8002f36:	9003      	str	r0, [sp, #12]
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d14c      	bne.n	8002fd6 <_dtoa_r+0x31e>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <_dtoa_r+0x2e8>)
 8002f44:	e6cc      	b.n	8002ce0 <_dtoa_r+0x28>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e7de      	b.n	8002f08 <_dtoa_r+0x250>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f50:	eb0a 0903 	add.w	r9, sl, r3
 8002f54:	f109 0301 	add.w	r3, r9, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	9308      	str	r3, [sp, #32]
 8002f5c:	bfb8      	it	lt
 8002f5e:	2301      	movlt	r3, #1
 8002f60:	e7dd      	b.n	8002f1e <_dtoa_r+0x266>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e7f2      	b.n	8002f4c <_dtoa_r+0x294>
 8002f66:	bf00      	nop
 8002f68:	636f4361 	.word	0x636f4361
 8002f6c:	3fd287a7 	.word	0x3fd287a7
 8002f70:	8b60c8b3 	.word	0x8b60c8b3
 8002f74:	3fc68a28 	.word	0x3fc68a28
 8002f78:	509f79fb 	.word	0x509f79fb
 8002f7c:	3fd34413 	.word	0x3fd34413
 8002f80:	08004cb5 	.word	0x08004cb5
 8002f84:	08004ccc 	.word	0x08004ccc
 8002f88:	7ff00000 	.word	0x7ff00000
 8002f8c:	08004cb1 	.word	0x08004cb1
 8002f90:	08004ca8 	.word	0x08004ca8
 8002f94:	08004c85 	.word	0x08004c85
 8002f98:	3ff80000 	.word	0x3ff80000
 8002f9c:	08004e20 	.word	0x08004e20
 8002fa0:	08004d27 	.word	0x08004d27
 8002fa4:	2401      	movs	r4, #1
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	940b      	str	r4, [sp, #44]	; 0x2c
 8002faa:	9322      	str	r3, [sp, #136]	; 0x88
 8002fac:	f04f 39ff 	mov.w	r9, #4294967295
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	f8cd 9020 	str.w	r9, [sp, #32]
 8002fb8:	9223      	str	r2, [sp, #140]	; 0x8c
 8002fba:	e7b0      	b.n	8002f1e <_dtoa_r+0x266>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fc0:	e7f4      	b.n	8002fac <_dtoa_r+0x2f4>
 8002fc2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	f8cd 9020 	str.w	r9, [sp, #32]
 8002fcc:	e7a7      	b.n	8002f1e <_dtoa_r+0x266>
 8002fce:	3101      	adds	r1, #1
 8002fd0:	6041      	str	r1, [r0, #4]
 8002fd2:	0052      	lsls	r2, r2, #1
 8002fd4:	e7a7      	b.n	8002f26 <_dtoa_r+0x26e>
 8002fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fd8:	9a03      	ldr	r2, [sp, #12]
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	9b08      	ldr	r3, [sp, #32]
 8002fde:	2b0e      	cmp	r3, #14
 8002fe0:	f200 80a8 	bhi.w	8003134 <_dtoa_r+0x47c>
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	f000 80a5 	beq.w	8003134 <_dtoa_r+0x47c>
 8002fea:	f1ba 0f00 	cmp.w	sl, #0
 8002fee:	dd34      	ble.n	800305a <_dtoa_r+0x3a2>
 8002ff0:	4a9a      	ldr	r2, [pc, #616]	; (800325c <_dtoa_r+0x5a4>)
 8002ff2:	f00a 030f 	and.w	r3, sl, #15
 8002ff6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002ffa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003002:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003006:	ea4f 142a 	mov.w	r4, sl, asr #4
 800300a:	d016      	beq.n	800303a <_dtoa_r+0x382>
 800300c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003010:	4b93      	ldr	r3, [pc, #588]	; (8003260 <_dtoa_r+0x5a8>)
 8003012:	2703      	movs	r7, #3
 8003014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003018:	f7fd fb88 	bl	800072c <__aeabi_ddiv>
 800301c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003020:	f004 040f 	and.w	r4, r4, #15
 8003024:	4e8e      	ldr	r6, [pc, #568]	; (8003260 <_dtoa_r+0x5a8>)
 8003026:	b954      	cbnz	r4, 800303e <_dtoa_r+0x386>
 8003028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800302c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003030:	f7fd fb7c 	bl	800072c <__aeabi_ddiv>
 8003034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003038:	e029      	b.n	800308e <_dtoa_r+0x3d6>
 800303a:	2702      	movs	r7, #2
 800303c:	e7f2      	b.n	8003024 <_dtoa_r+0x36c>
 800303e:	07e1      	lsls	r1, r4, #31
 8003040:	d508      	bpl.n	8003054 <_dtoa_r+0x39c>
 8003042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003046:	e9d6 2300 	ldrd	r2, r3, [r6]
 800304a:	f7fd fa45 	bl	80004d8 <__aeabi_dmul>
 800304e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003052:	3701      	adds	r7, #1
 8003054:	1064      	asrs	r4, r4, #1
 8003056:	3608      	adds	r6, #8
 8003058:	e7e5      	b.n	8003026 <_dtoa_r+0x36e>
 800305a:	f000 80a5 	beq.w	80031a8 <_dtoa_r+0x4f0>
 800305e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003062:	f1ca 0400 	rsb	r4, sl, #0
 8003066:	4b7d      	ldr	r3, [pc, #500]	; (800325c <_dtoa_r+0x5a4>)
 8003068:	f004 020f 	and.w	r2, r4, #15
 800306c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fa30 	bl	80004d8 <__aeabi_dmul>
 8003078:	2702      	movs	r7, #2
 800307a:	2300      	movs	r3, #0
 800307c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003080:	4e77      	ldr	r6, [pc, #476]	; (8003260 <_dtoa_r+0x5a8>)
 8003082:	1124      	asrs	r4, r4, #4
 8003084:	2c00      	cmp	r4, #0
 8003086:	f040 8084 	bne.w	8003192 <_dtoa_r+0x4da>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1d2      	bne.n	8003034 <_dtoa_r+0x37c>
 800308e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808b 	beq.w	80031ac <_dtoa_r+0x4f4>
 8003096:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800309a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800309e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80030a2:	2200      	movs	r2, #0
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <_dtoa_r+0x5ac>)
 80030a6:	f7fd fc89 	bl	80009bc <__aeabi_dcmplt>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d07e      	beq.n	80031ac <_dtoa_r+0x4f4>
 80030ae:	9b08      	ldr	r3, [sp, #32]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d07b      	beq.n	80031ac <_dtoa_r+0x4f4>
 80030b4:	f1b9 0f00 	cmp.w	r9, #0
 80030b8:	dd38      	ble.n	800312c <_dtoa_r+0x474>
 80030ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80030be:	2200      	movs	r2, #0
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <_dtoa_r+0x5b0>)
 80030c2:	f7fd fa09 	bl	80004d8 <__aeabi_dmul>
 80030c6:	464c      	mov	r4, r9
 80030c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80030d0:	3701      	adds	r7, #1
 80030d2:	4638      	mov	r0, r7
 80030d4:	f7fd f996 	bl	8000404 <__aeabi_i2d>
 80030d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030dc:	f7fd f9fc 	bl	80004d8 <__aeabi_dmul>
 80030e0:	2200      	movs	r2, #0
 80030e2:	4b62      	ldr	r3, [pc, #392]	; (800326c <_dtoa_r+0x5b4>)
 80030e4:	f7fd f842 	bl	800016c <__adddf3>
 80030e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80030ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030f0:	9611      	str	r6, [sp, #68]	; 0x44
 80030f2:	2c00      	cmp	r4, #0
 80030f4:	d15d      	bne.n	80031b2 <_dtoa_r+0x4fa>
 80030f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030fa:	2200      	movs	r2, #0
 80030fc:	4b5c      	ldr	r3, [pc, #368]	; (8003270 <_dtoa_r+0x5b8>)
 80030fe:	f7fd f833 	bl	8000168 <__aeabi_dsub>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800310a:	4633      	mov	r3, r6
 800310c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800310e:	f7fd fc73 	bl	80009f8 <__aeabi_dcmpgt>
 8003112:	2800      	cmp	r0, #0
 8003114:	f040 829c 	bne.w	8003650 <_dtoa_r+0x998>
 8003118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800311c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800311e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003122:	f7fd fc4b 	bl	80009bc <__aeabi_dcmplt>
 8003126:	2800      	cmp	r0, #0
 8003128:	f040 8290 	bne.w	800364c <_dtoa_r+0x994>
 800312c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003130:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003136:	2b00      	cmp	r3, #0
 8003138:	f2c0 8152 	blt.w	80033e0 <_dtoa_r+0x728>
 800313c:	f1ba 0f0e 	cmp.w	sl, #14
 8003140:	f300 814e 	bgt.w	80033e0 <_dtoa_r+0x728>
 8003144:	4b45      	ldr	r3, [pc, #276]	; (800325c <_dtoa_r+0x5a4>)
 8003146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800314a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800314e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003154:	2b00      	cmp	r3, #0
 8003156:	f280 80db 	bge.w	8003310 <_dtoa_r+0x658>
 800315a:	9b08      	ldr	r3, [sp, #32]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f300 80d7 	bgt.w	8003310 <_dtoa_r+0x658>
 8003162:	f040 8272 	bne.w	800364a <_dtoa_r+0x992>
 8003166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800316a:	2200      	movs	r2, #0
 800316c:	4b40      	ldr	r3, [pc, #256]	; (8003270 <_dtoa_r+0x5b8>)
 800316e:	f7fd f9b3 	bl	80004d8 <__aeabi_dmul>
 8003172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003176:	f7fd fc35 	bl	80009e4 <__aeabi_dcmpge>
 800317a:	9c08      	ldr	r4, [sp, #32]
 800317c:	4626      	mov	r6, r4
 800317e:	2800      	cmp	r0, #0
 8003180:	f040 8248 	bne.w	8003614 <_dtoa_r+0x95c>
 8003184:	2331      	movs	r3, #49	; 0x31
 8003186:	9f03      	ldr	r7, [sp, #12]
 8003188:	f10a 0a01 	add.w	sl, sl, #1
 800318c:	f807 3b01 	strb.w	r3, [r7], #1
 8003190:	e244      	b.n	800361c <_dtoa_r+0x964>
 8003192:	07e2      	lsls	r2, r4, #31
 8003194:	d505      	bpl.n	80031a2 <_dtoa_r+0x4ea>
 8003196:	e9d6 2300 	ldrd	r2, r3, [r6]
 800319a:	f7fd f99d 	bl	80004d8 <__aeabi_dmul>
 800319e:	2301      	movs	r3, #1
 80031a0:	3701      	adds	r7, #1
 80031a2:	1064      	asrs	r4, r4, #1
 80031a4:	3608      	adds	r6, #8
 80031a6:	e76d      	b.n	8003084 <_dtoa_r+0x3cc>
 80031a8:	2702      	movs	r7, #2
 80031aa:	e770      	b.n	800308e <_dtoa_r+0x3d6>
 80031ac:	46d0      	mov	r8, sl
 80031ae:	9c08      	ldr	r4, [sp, #32]
 80031b0:	e78f      	b.n	80030d2 <_dtoa_r+0x41a>
 80031b2:	9903      	ldr	r1, [sp, #12]
 80031b4:	4b29      	ldr	r3, [pc, #164]	; (800325c <_dtoa_r+0x5a4>)
 80031b6:	4421      	add	r1, r4
 80031b8:	9112      	str	r1, [sp, #72]	; 0x48
 80031ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80031c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80031c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d055      	beq.n	8003278 <_dtoa_r+0x5c0>
 80031cc:	2000      	movs	r0, #0
 80031ce:	4929      	ldr	r1, [pc, #164]	; (8003274 <_dtoa_r+0x5bc>)
 80031d0:	f7fd faac 	bl	800072c <__aeabi_ddiv>
 80031d4:	463b      	mov	r3, r7
 80031d6:	4632      	mov	r2, r6
 80031d8:	f7fc ffc6 	bl	8000168 <__aeabi_dsub>
 80031dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80031e0:	9f03      	ldr	r7, [sp, #12]
 80031e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031e6:	f7fd fc27 	bl	8000a38 <__aeabi_d2iz>
 80031ea:	4604      	mov	r4, r0
 80031ec:	f7fd f90a 	bl	8000404 <__aeabi_i2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031f8:	f7fc ffb6 	bl	8000168 <__aeabi_dsub>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	3430      	adds	r4, #48	; 0x30
 8003202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800320a:	f807 4b01 	strb.w	r4, [r7], #1
 800320e:	f7fd fbd5 	bl	80009bc <__aeabi_dcmplt>
 8003212:	2800      	cmp	r0, #0
 8003214:	d174      	bne.n	8003300 <_dtoa_r+0x648>
 8003216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800321a:	2000      	movs	r0, #0
 800321c:	4911      	ldr	r1, [pc, #68]	; (8003264 <_dtoa_r+0x5ac>)
 800321e:	f7fc ffa3 	bl	8000168 <__aeabi_dsub>
 8003222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003226:	f7fd fbc9 	bl	80009bc <__aeabi_dcmplt>
 800322a:	2800      	cmp	r0, #0
 800322c:	f040 80b7 	bne.w	800339e <_dtoa_r+0x6e6>
 8003230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003232:	429f      	cmp	r7, r3
 8003234:	f43f af7a 	beq.w	800312c <_dtoa_r+0x474>
 8003238:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800323c:	2200      	movs	r2, #0
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <_dtoa_r+0x5b0>)
 8003240:	f7fd f94a 	bl	80004d8 <__aeabi_dmul>
 8003244:	2200      	movs	r2, #0
 8003246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800324a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <_dtoa_r+0x5b0>)
 8003250:	f7fd f942 	bl	80004d8 <__aeabi_dmul>
 8003254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003258:	e7c3      	b.n	80031e2 <_dtoa_r+0x52a>
 800325a:	bf00      	nop
 800325c:	08004e20 	.word	0x08004e20
 8003260:	08004df8 	.word	0x08004df8
 8003264:	3ff00000 	.word	0x3ff00000
 8003268:	40240000 	.word	0x40240000
 800326c:	401c0000 	.word	0x401c0000
 8003270:	40140000 	.word	0x40140000
 8003274:	3fe00000 	.word	0x3fe00000
 8003278:	4630      	mov	r0, r6
 800327a:	4639      	mov	r1, r7
 800327c:	f7fd f92c 	bl	80004d8 <__aeabi_dmul>
 8003280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003282:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003286:	9c03      	ldr	r4, [sp, #12]
 8003288:	9314      	str	r3, [sp, #80]	; 0x50
 800328a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800328e:	f7fd fbd3 	bl	8000a38 <__aeabi_d2iz>
 8003292:	9015      	str	r0, [sp, #84]	; 0x54
 8003294:	f7fd f8b6 	bl	8000404 <__aeabi_i2d>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032a0:	f7fc ff62 	bl	8000168 <__aeabi_dsub>
 80032a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80032a6:	4606      	mov	r6, r0
 80032a8:	3330      	adds	r3, #48	; 0x30
 80032aa:	f804 3b01 	strb.w	r3, [r4], #1
 80032ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032b0:	460f      	mov	r7, r1
 80032b2:	429c      	cmp	r4, r3
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	d124      	bne.n	8003304 <_dtoa_r+0x64c>
 80032ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032be:	4bb0      	ldr	r3, [pc, #704]	; (8003580 <_dtoa_r+0x8c8>)
 80032c0:	f7fc ff54 	bl	800016c <__adddf3>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4630      	mov	r0, r6
 80032ca:	4639      	mov	r1, r7
 80032cc:	f7fd fb94 	bl	80009f8 <__aeabi_dcmpgt>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d163      	bne.n	800339c <_dtoa_r+0x6e4>
 80032d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80032d8:	2000      	movs	r0, #0
 80032da:	49a9      	ldr	r1, [pc, #676]	; (8003580 <_dtoa_r+0x8c8>)
 80032dc:	f7fc ff44 	bl	8000168 <__aeabi_dsub>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4630      	mov	r0, r6
 80032e6:	4639      	mov	r1, r7
 80032e8:	f7fd fb68 	bl	80009bc <__aeabi_dcmplt>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f43f af1d 	beq.w	800312c <_dtoa_r+0x474>
 80032f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80032f4:	1e7b      	subs	r3, r7, #1
 80032f6:	9314      	str	r3, [sp, #80]	; 0x50
 80032f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d0f8      	beq.n	80032f2 <_dtoa_r+0x63a>
 8003300:	46c2      	mov	sl, r8
 8003302:	e03b      	b.n	800337c <_dtoa_r+0x6c4>
 8003304:	4b9f      	ldr	r3, [pc, #636]	; (8003584 <_dtoa_r+0x8cc>)
 8003306:	f7fd f8e7 	bl	80004d8 <__aeabi_dmul>
 800330a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800330e:	e7bc      	b.n	800328a <_dtoa_r+0x5d2>
 8003310:	9f03      	ldr	r7, [sp, #12]
 8003312:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800331a:	4640      	mov	r0, r8
 800331c:	4649      	mov	r1, r9
 800331e:	f7fd fa05 	bl	800072c <__aeabi_ddiv>
 8003322:	f7fd fb89 	bl	8000a38 <__aeabi_d2iz>
 8003326:	4604      	mov	r4, r0
 8003328:	f7fd f86c 	bl	8000404 <__aeabi_i2d>
 800332c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003330:	f7fd f8d2 	bl	80004d8 <__aeabi_dmul>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4640      	mov	r0, r8
 800333a:	4649      	mov	r1, r9
 800333c:	f7fc ff14 	bl	8000168 <__aeabi_dsub>
 8003340:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003344:	f807 6b01 	strb.w	r6, [r7], #1
 8003348:	9e03      	ldr	r6, [sp, #12]
 800334a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800334e:	1bbe      	subs	r6, r7, r6
 8003350:	45b4      	cmp	ip, r6
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	d136      	bne.n	80033c6 <_dtoa_r+0x70e>
 8003358:	f7fc ff08 	bl	800016c <__adddf3>
 800335c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003360:	4680      	mov	r8, r0
 8003362:	4689      	mov	r9, r1
 8003364:	f7fd fb48 	bl	80009f8 <__aeabi_dcmpgt>
 8003368:	bb58      	cbnz	r0, 80033c2 <_dtoa_r+0x70a>
 800336a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800336e:	4640      	mov	r0, r8
 8003370:	4649      	mov	r1, r9
 8003372:	f7fd fb19 	bl	80009a8 <__aeabi_dcmpeq>
 8003376:	b108      	cbz	r0, 800337c <_dtoa_r+0x6c4>
 8003378:	07e1      	lsls	r1, r4, #31
 800337a:	d422      	bmi.n	80033c2 <_dtoa_r+0x70a>
 800337c:	4628      	mov	r0, r5
 800337e:	4659      	mov	r1, fp
 8003380:	f000 fd0c 	bl	8003d9c <_Bfree>
 8003384:	2300      	movs	r3, #0
 8003386:	703b      	strb	r3, [r7, #0]
 8003388:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800338a:	f10a 0001 	add.w	r0, sl, #1
 800338e:	6018      	str	r0, [r3, #0]
 8003390:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003392:	2b00      	cmp	r3, #0
 8003394:	f43f acde 	beq.w	8002d54 <_dtoa_r+0x9c>
 8003398:	601f      	str	r7, [r3, #0]
 800339a:	e4db      	b.n	8002d54 <_dtoa_r+0x9c>
 800339c:	4627      	mov	r7, r4
 800339e:	463b      	mov	r3, r7
 80033a0:	461f      	mov	r7, r3
 80033a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80033a6:	2a39      	cmp	r2, #57	; 0x39
 80033a8:	d107      	bne.n	80033ba <_dtoa_r+0x702>
 80033aa:	9a03      	ldr	r2, [sp, #12]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1f7      	bne.n	80033a0 <_dtoa_r+0x6e8>
 80033b0:	2230      	movs	r2, #48	; 0x30
 80033b2:	9903      	ldr	r1, [sp, #12]
 80033b4:	f108 0801 	add.w	r8, r8, #1
 80033b8:	700a      	strb	r2, [r1, #0]
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	3201      	adds	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e79e      	b.n	8003300 <_dtoa_r+0x648>
 80033c2:	46d0      	mov	r8, sl
 80033c4:	e7eb      	b.n	800339e <_dtoa_r+0x6e6>
 80033c6:	2200      	movs	r2, #0
 80033c8:	4b6e      	ldr	r3, [pc, #440]	; (8003584 <_dtoa_r+0x8cc>)
 80033ca:	f7fd f885 	bl	80004d8 <__aeabi_dmul>
 80033ce:	2200      	movs	r2, #0
 80033d0:	2300      	movs	r3, #0
 80033d2:	4680      	mov	r8, r0
 80033d4:	4689      	mov	r9, r1
 80033d6:	f7fd fae7 	bl	80009a8 <__aeabi_dcmpeq>
 80033da:	2800      	cmp	r0, #0
 80033dc:	d09b      	beq.n	8003316 <_dtoa_r+0x65e>
 80033de:	e7cd      	b.n	800337c <_dtoa_r+0x6c4>
 80033e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033e2:	2a00      	cmp	r2, #0
 80033e4:	f000 80d0 	beq.w	8003588 <_dtoa_r+0x8d0>
 80033e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80033ea:	2a01      	cmp	r2, #1
 80033ec:	f300 80ae 	bgt.w	800354c <_dtoa_r+0x894>
 80033f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80033f2:	2a00      	cmp	r2, #0
 80033f4:	f000 80a6 	beq.w	8003544 <_dtoa_r+0x88c>
 80033f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80033fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80033fe:	9f06      	ldr	r7, [sp, #24]
 8003400:	9a06      	ldr	r2, [sp, #24]
 8003402:	2101      	movs	r1, #1
 8003404:	441a      	add	r2, r3
 8003406:	9206      	str	r2, [sp, #24]
 8003408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800340a:	4628      	mov	r0, r5
 800340c:	441a      	add	r2, r3
 800340e:	9209      	str	r2, [sp, #36]	; 0x24
 8003410:	f000 fd7a 	bl	8003f08 <__i2b>
 8003414:	4606      	mov	r6, r0
 8003416:	2f00      	cmp	r7, #0
 8003418:	dd0c      	ble.n	8003434 <_dtoa_r+0x77c>
 800341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	dd09      	ble.n	8003434 <_dtoa_r+0x77c>
 8003420:	42bb      	cmp	r3, r7
 8003422:	bfa8      	it	ge
 8003424:	463b      	movge	r3, r7
 8003426:	9a06      	ldr	r2, [sp, #24]
 8003428:	1aff      	subs	r7, r7, r3
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	9206      	str	r2, [sp, #24]
 800342e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	9309      	str	r3, [sp, #36]	; 0x24
 8003434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003436:	b1f3      	cbz	r3, 8003476 <_dtoa_r+0x7be>
 8003438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80a8 	beq.w	8003590 <_dtoa_r+0x8d8>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd10      	ble.n	8003466 <_dtoa_r+0x7ae>
 8003444:	4631      	mov	r1, r6
 8003446:	4622      	mov	r2, r4
 8003448:	4628      	mov	r0, r5
 800344a:	f000 fe1b 	bl	8004084 <__pow5mult>
 800344e:	465a      	mov	r2, fp
 8003450:	4601      	mov	r1, r0
 8003452:	4606      	mov	r6, r0
 8003454:	4628      	mov	r0, r5
 8003456:	f000 fd6d 	bl	8003f34 <__multiply>
 800345a:	4680      	mov	r8, r0
 800345c:	4659      	mov	r1, fp
 800345e:	4628      	mov	r0, r5
 8003460:	f000 fc9c 	bl	8003d9c <_Bfree>
 8003464:	46c3      	mov	fp, r8
 8003466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003468:	1b1a      	subs	r2, r3, r4
 800346a:	d004      	beq.n	8003476 <_dtoa_r+0x7be>
 800346c:	4659      	mov	r1, fp
 800346e:	4628      	mov	r0, r5
 8003470:	f000 fe08 	bl	8004084 <__pow5mult>
 8003474:	4683      	mov	fp, r0
 8003476:	2101      	movs	r1, #1
 8003478:	4628      	mov	r0, r5
 800347a:	f000 fd45 	bl	8003f08 <__i2b>
 800347e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003480:	4604      	mov	r4, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f340 8086 	ble.w	8003594 <_dtoa_r+0x8dc>
 8003488:	461a      	mov	r2, r3
 800348a:	4601      	mov	r1, r0
 800348c:	4628      	mov	r0, r5
 800348e:	f000 fdf9 	bl	8004084 <__pow5mult>
 8003492:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003494:	4604      	mov	r4, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	dd7f      	ble.n	800359a <_dtoa_r+0x8e2>
 800349a:	f04f 0800 	mov.w	r8, #0
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034a4:	6918      	ldr	r0, [r3, #16]
 80034a6:	f000 fce1 	bl	8003e6c <__hi0bits>
 80034aa:	f1c0 0020 	rsb	r0, r0, #32
 80034ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b0:	4418      	add	r0, r3
 80034b2:	f010 001f 	ands.w	r0, r0, #31
 80034b6:	f000 8092 	beq.w	80035de <_dtoa_r+0x926>
 80034ba:	f1c0 0320 	rsb	r3, r0, #32
 80034be:	2b04      	cmp	r3, #4
 80034c0:	f340 808a 	ble.w	80035d8 <_dtoa_r+0x920>
 80034c4:	f1c0 001c 	rsb	r0, r0, #28
 80034c8:	9b06      	ldr	r3, [sp, #24]
 80034ca:	4407      	add	r7, r0
 80034cc:	4403      	add	r3, r0
 80034ce:	9306      	str	r3, [sp, #24]
 80034d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d2:	4403      	add	r3, r0
 80034d4:	9309      	str	r3, [sp, #36]	; 0x24
 80034d6:	9b06      	ldr	r3, [sp, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dd05      	ble.n	80034e8 <_dtoa_r+0x830>
 80034dc:	4659      	mov	r1, fp
 80034de:	461a      	mov	r2, r3
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 fe29 	bl	8004138 <__lshift>
 80034e6:	4683      	mov	fp, r0
 80034e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	dd05      	ble.n	80034fa <_dtoa_r+0x842>
 80034ee:	4621      	mov	r1, r4
 80034f0:	461a      	mov	r2, r3
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 fe20 	bl	8004138 <__lshift>
 80034f8:	4604      	mov	r4, r0
 80034fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d070      	beq.n	80035e2 <_dtoa_r+0x92a>
 8003500:	4621      	mov	r1, r4
 8003502:	4658      	mov	r0, fp
 8003504:	f000 fe88 	bl	8004218 <__mcmp>
 8003508:	2800      	cmp	r0, #0
 800350a:	da6a      	bge.n	80035e2 <_dtoa_r+0x92a>
 800350c:	2300      	movs	r3, #0
 800350e:	4659      	mov	r1, fp
 8003510:	220a      	movs	r2, #10
 8003512:	4628      	mov	r0, r5
 8003514:	f000 fc64 	bl	8003de0 <__multadd>
 8003518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800351a:	4683      	mov	fp, r0
 800351c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8194 	beq.w	800384e <_dtoa_r+0xb96>
 8003526:	4631      	mov	r1, r6
 8003528:	2300      	movs	r3, #0
 800352a:	220a      	movs	r2, #10
 800352c:	4628      	mov	r0, r5
 800352e:	f000 fc57 	bl	8003de0 <__multadd>
 8003532:	f1b9 0f00 	cmp.w	r9, #0
 8003536:	4606      	mov	r6, r0
 8003538:	f300 8093 	bgt.w	8003662 <_dtoa_r+0x9aa>
 800353c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800353e:	2b02      	cmp	r3, #2
 8003540:	dc57      	bgt.n	80035f2 <_dtoa_r+0x93a>
 8003542:	e08e      	b.n	8003662 <_dtoa_r+0x9aa>
 8003544:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800354a:	e757      	b.n	80033fc <_dtoa_r+0x744>
 800354c:	9b08      	ldr	r3, [sp, #32]
 800354e:	1e5c      	subs	r4, r3, #1
 8003550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003552:	42a3      	cmp	r3, r4
 8003554:	bfb7      	itett	lt
 8003556:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003558:	1b1c      	subge	r4, r3, r4
 800355a:	1ae2      	sublt	r2, r4, r3
 800355c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800355e:	bfbe      	ittt	lt
 8003560:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003562:	189b      	addlt	r3, r3, r2
 8003564:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003566:	9b08      	ldr	r3, [sp, #32]
 8003568:	bfb8      	it	lt
 800356a:	2400      	movlt	r4, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	bfbb      	ittet	lt
 8003570:	9b06      	ldrlt	r3, [sp, #24]
 8003572:	9a08      	ldrlt	r2, [sp, #32]
 8003574:	9f06      	ldrge	r7, [sp, #24]
 8003576:	1a9f      	sublt	r7, r3, r2
 8003578:	bfac      	ite	ge
 800357a:	9b08      	ldrge	r3, [sp, #32]
 800357c:	2300      	movlt	r3, #0
 800357e:	e73f      	b.n	8003400 <_dtoa_r+0x748>
 8003580:	3fe00000 	.word	0x3fe00000
 8003584:	40240000 	.word	0x40240000
 8003588:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800358a:	9f06      	ldr	r7, [sp, #24]
 800358c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800358e:	e742      	b.n	8003416 <_dtoa_r+0x75e>
 8003590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003592:	e76b      	b.n	800346c <_dtoa_r+0x7b4>
 8003594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003596:	2b01      	cmp	r3, #1
 8003598:	dc19      	bgt.n	80035ce <_dtoa_r+0x916>
 800359a:	9b04      	ldr	r3, [sp, #16]
 800359c:	b9bb      	cbnz	r3, 80035ce <_dtoa_r+0x916>
 800359e:	9b05      	ldr	r3, [sp, #20]
 80035a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a4:	b99b      	cbnz	r3, 80035ce <_dtoa_r+0x916>
 80035a6:	9b05      	ldr	r3, [sp, #20]
 80035a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ac:	0d1b      	lsrs	r3, r3, #20
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	b183      	cbz	r3, 80035d4 <_dtoa_r+0x91c>
 80035b2:	f04f 0801 	mov.w	r8, #1
 80035b6:	9b06      	ldr	r3, [sp, #24]
 80035b8:	3301      	adds	r3, #1
 80035ba:	9306      	str	r3, [sp, #24]
 80035bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035be:	3301      	adds	r3, #1
 80035c0:	9309      	str	r3, [sp, #36]	; 0x24
 80035c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af6a 	bne.w	800349e <_dtoa_r+0x7e6>
 80035ca:	2001      	movs	r0, #1
 80035cc:	e76f      	b.n	80034ae <_dtoa_r+0x7f6>
 80035ce:	f04f 0800 	mov.w	r8, #0
 80035d2:	e7f6      	b.n	80035c2 <_dtoa_r+0x90a>
 80035d4:	4698      	mov	r8, r3
 80035d6:	e7f4      	b.n	80035c2 <_dtoa_r+0x90a>
 80035d8:	f43f af7d 	beq.w	80034d6 <_dtoa_r+0x81e>
 80035dc:	4618      	mov	r0, r3
 80035de:	301c      	adds	r0, #28
 80035e0:	e772      	b.n	80034c8 <_dtoa_r+0x810>
 80035e2:	9b08      	ldr	r3, [sp, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	dc36      	bgt.n	8003656 <_dtoa_r+0x99e>
 80035e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	dd33      	ble.n	8003656 <_dtoa_r+0x99e>
 80035ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035f2:	f1b9 0f00 	cmp.w	r9, #0
 80035f6:	d10d      	bne.n	8003614 <_dtoa_r+0x95c>
 80035f8:	4621      	mov	r1, r4
 80035fa:	464b      	mov	r3, r9
 80035fc:	2205      	movs	r2, #5
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 fbee 	bl	8003de0 <__multadd>
 8003604:	4601      	mov	r1, r0
 8003606:	4604      	mov	r4, r0
 8003608:	4658      	mov	r0, fp
 800360a:	f000 fe05 	bl	8004218 <__mcmp>
 800360e:	2800      	cmp	r0, #0
 8003610:	f73f adb8 	bgt.w	8003184 <_dtoa_r+0x4cc>
 8003614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003616:	9f03      	ldr	r7, [sp, #12]
 8003618:	ea6f 0a03 	mvn.w	sl, r3
 800361c:	f04f 0800 	mov.w	r8, #0
 8003620:	4621      	mov	r1, r4
 8003622:	4628      	mov	r0, r5
 8003624:	f000 fbba 	bl	8003d9c <_Bfree>
 8003628:	2e00      	cmp	r6, #0
 800362a:	f43f aea7 	beq.w	800337c <_dtoa_r+0x6c4>
 800362e:	f1b8 0f00 	cmp.w	r8, #0
 8003632:	d005      	beq.n	8003640 <_dtoa_r+0x988>
 8003634:	45b0      	cmp	r8, r6
 8003636:	d003      	beq.n	8003640 <_dtoa_r+0x988>
 8003638:	4641      	mov	r1, r8
 800363a:	4628      	mov	r0, r5
 800363c:	f000 fbae 	bl	8003d9c <_Bfree>
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	f000 fbaa 	bl	8003d9c <_Bfree>
 8003648:	e698      	b.n	800337c <_dtoa_r+0x6c4>
 800364a:	2400      	movs	r4, #0
 800364c:	4626      	mov	r6, r4
 800364e:	e7e1      	b.n	8003614 <_dtoa_r+0x95c>
 8003650:	46c2      	mov	sl, r8
 8003652:	4626      	mov	r6, r4
 8003654:	e596      	b.n	8003184 <_dtoa_r+0x4cc>
 8003656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80fd 	beq.w	800385c <_dtoa_r+0xba4>
 8003662:	2f00      	cmp	r7, #0
 8003664:	dd05      	ble.n	8003672 <_dtoa_r+0x9ba>
 8003666:	4631      	mov	r1, r6
 8003668:	463a      	mov	r2, r7
 800366a:	4628      	mov	r0, r5
 800366c:	f000 fd64 	bl	8004138 <__lshift>
 8003670:	4606      	mov	r6, r0
 8003672:	f1b8 0f00 	cmp.w	r8, #0
 8003676:	d05c      	beq.n	8003732 <_dtoa_r+0xa7a>
 8003678:	4628      	mov	r0, r5
 800367a:	6871      	ldr	r1, [r6, #4]
 800367c:	f000 fb4e 	bl	8003d1c <_Balloc>
 8003680:	4607      	mov	r7, r0
 8003682:	b928      	cbnz	r0, 8003690 <_dtoa_r+0x9d8>
 8003684:	4602      	mov	r2, r0
 8003686:	f240 21ea 	movw	r1, #746	; 0x2ea
 800368a:	4b7f      	ldr	r3, [pc, #508]	; (8003888 <_dtoa_r+0xbd0>)
 800368c:	f7ff bb28 	b.w	8002ce0 <_dtoa_r+0x28>
 8003690:	6932      	ldr	r2, [r6, #16]
 8003692:	f106 010c 	add.w	r1, r6, #12
 8003696:	3202      	adds	r2, #2
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	300c      	adds	r0, #12
 800369c:	f000 fb30 	bl	8003d00 <memcpy>
 80036a0:	2201      	movs	r2, #1
 80036a2:	4639      	mov	r1, r7
 80036a4:	4628      	mov	r0, r5
 80036a6:	f000 fd47 	bl	8004138 <__lshift>
 80036aa:	46b0      	mov	r8, r6
 80036ac:	4606      	mov	r6, r0
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	9308      	str	r3, [sp, #32]
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	444b      	add	r3, r9
 80036b8:	930a      	str	r3, [sp, #40]	; 0x28
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	9309      	str	r3, [sp, #36]	; 0x24
 80036c2:	9b08      	ldr	r3, [sp, #32]
 80036c4:	4621      	mov	r1, r4
 80036c6:	3b01      	subs	r3, #1
 80036c8:	4658      	mov	r0, fp
 80036ca:	9304      	str	r3, [sp, #16]
 80036cc:	f7ff fa68 	bl	8002ba0 <quorem>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4641      	mov	r1, r8
 80036d4:	3330      	adds	r3, #48	; 0x30
 80036d6:	9006      	str	r0, [sp, #24]
 80036d8:	4658      	mov	r0, fp
 80036da:	930b      	str	r3, [sp, #44]	; 0x2c
 80036dc:	f000 fd9c 	bl	8004218 <__mcmp>
 80036e0:	4632      	mov	r2, r6
 80036e2:	4681      	mov	r9, r0
 80036e4:	4621      	mov	r1, r4
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 fdb2 	bl	8004250 <__mdiff>
 80036ec:	68c2      	ldr	r2, [r0, #12]
 80036ee:	4607      	mov	r7, r0
 80036f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036f2:	bb02      	cbnz	r2, 8003736 <_dtoa_r+0xa7e>
 80036f4:	4601      	mov	r1, r0
 80036f6:	4658      	mov	r0, fp
 80036f8:	f000 fd8e 	bl	8004218 <__mcmp>
 80036fc:	4602      	mov	r2, r0
 80036fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003700:	4639      	mov	r1, r7
 8003702:	4628      	mov	r0, r5
 8003704:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003708:	f000 fb48 	bl	8003d9c <_Bfree>
 800370c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800370e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003710:	9f08      	ldr	r7, [sp, #32]
 8003712:	ea43 0102 	orr.w	r1, r3, r2
 8003716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003718:	430b      	orrs	r3, r1
 800371a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800371c:	d10d      	bne.n	800373a <_dtoa_r+0xa82>
 800371e:	2b39      	cmp	r3, #57	; 0x39
 8003720:	d029      	beq.n	8003776 <_dtoa_r+0xabe>
 8003722:	f1b9 0f00 	cmp.w	r9, #0
 8003726:	dd01      	ble.n	800372c <_dtoa_r+0xa74>
 8003728:	9b06      	ldr	r3, [sp, #24]
 800372a:	3331      	adds	r3, #49	; 0x31
 800372c:	9a04      	ldr	r2, [sp, #16]
 800372e:	7013      	strb	r3, [r2, #0]
 8003730:	e776      	b.n	8003620 <_dtoa_r+0x968>
 8003732:	4630      	mov	r0, r6
 8003734:	e7b9      	b.n	80036aa <_dtoa_r+0x9f2>
 8003736:	2201      	movs	r2, #1
 8003738:	e7e2      	b.n	8003700 <_dtoa_r+0xa48>
 800373a:	f1b9 0f00 	cmp.w	r9, #0
 800373e:	db06      	blt.n	800374e <_dtoa_r+0xa96>
 8003740:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003742:	ea41 0909 	orr.w	r9, r1, r9
 8003746:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003748:	ea59 0101 	orrs.w	r1, r9, r1
 800374c:	d120      	bne.n	8003790 <_dtoa_r+0xad8>
 800374e:	2a00      	cmp	r2, #0
 8003750:	ddec      	ble.n	800372c <_dtoa_r+0xa74>
 8003752:	4659      	mov	r1, fp
 8003754:	2201      	movs	r2, #1
 8003756:	4628      	mov	r0, r5
 8003758:	9308      	str	r3, [sp, #32]
 800375a:	f000 fced 	bl	8004138 <__lshift>
 800375e:	4621      	mov	r1, r4
 8003760:	4683      	mov	fp, r0
 8003762:	f000 fd59 	bl	8004218 <__mcmp>
 8003766:	2800      	cmp	r0, #0
 8003768:	9b08      	ldr	r3, [sp, #32]
 800376a:	dc02      	bgt.n	8003772 <_dtoa_r+0xaba>
 800376c:	d1de      	bne.n	800372c <_dtoa_r+0xa74>
 800376e:	07da      	lsls	r2, r3, #31
 8003770:	d5dc      	bpl.n	800372c <_dtoa_r+0xa74>
 8003772:	2b39      	cmp	r3, #57	; 0x39
 8003774:	d1d8      	bne.n	8003728 <_dtoa_r+0xa70>
 8003776:	2339      	movs	r3, #57	; 0x39
 8003778:	9a04      	ldr	r2, [sp, #16]
 800377a:	7013      	strb	r3, [r2, #0]
 800377c:	463b      	mov	r3, r7
 800377e:	461f      	mov	r7, r3
 8003780:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003784:	3b01      	subs	r3, #1
 8003786:	2a39      	cmp	r2, #57	; 0x39
 8003788:	d050      	beq.n	800382c <_dtoa_r+0xb74>
 800378a:	3201      	adds	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e747      	b.n	8003620 <_dtoa_r+0x968>
 8003790:	2a00      	cmp	r2, #0
 8003792:	dd03      	ble.n	800379c <_dtoa_r+0xae4>
 8003794:	2b39      	cmp	r3, #57	; 0x39
 8003796:	d0ee      	beq.n	8003776 <_dtoa_r+0xabe>
 8003798:	3301      	adds	r3, #1
 800379a:	e7c7      	b.n	800372c <_dtoa_r+0xa74>
 800379c:	9a08      	ldr	r2, [sp, #32]
 800379e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80037a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80037a4:	428a      	cmp	r2, r1
 80037a6:	d02a      	beq.n	80037fe <_dtoa_r+0xb46>
 80037a8:	4659      	mov	r1, fp
 80037aa:	2300      	movs	r3, #0
 80037ac:	220a      	movs	r2, #10
 80037ae:	4628      	mov	r0, r5
 80037b0:	f000 fb16 	bl	8003de0 <__multadd>
 80037b4:	45b0      	cmp	r8, r6
 80037b6:	4683      	mov	fp, r0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	f04f 020a 	mov.w	r2, #10
 80037c0:	4641      	mov	r1, r8
 80037c2:	4628      	mov	r0, r5
 80037c4:	d107      	bne.n	80037d6 <_dtoa_r+0xb1e>
 80037c6:	f000 fb0b 	bl	8003de0 <__multadd>
 80037ca:	4680      	mov	r8, r0
 80037cc:	4606      	mov	r6, r0
 80037ce:	9b08      	ldr	r3, [sp, #32]
 80037d0:	3301      	adds	r3, #1
 80037d2:	9308      	str	r3, [sp, #32]
 80037d4:	e775      	b.n	80036c2 <_dtoa_r+0xa0a>
 80037d6:	f000 fb03 	bl	8003de0 <__multadd>
 80037da:	4631      	mov	r1, r6
 80037dc:	4680      	mov	r8, r0
 80037de:	2300      	movs	r3, #0
 80037e0:	220a      	movs	r2, #10
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 fafc 	bl	8003de0 <__multadd>
 80037e8:	4606      	mov	r6, r0
 80037ea:	e7f0      	b.n	80037ce <_dtoa_r+0xb16>
 80037ec:	f1b9 0f00 	cmp.w	r9, #0
 80037f0:	bfcc      	ite	gt
 80037f2:	464f      	movgt	r7, r9
 80037f4:	2701      	movle	r7, #1
 80037f6:	f04f 0800 	mov.w	r8, #0
 80037fa:	9a03      	ldr	r2, [sp, #12]
 80037fc:	4417      	add	r7, r2
 80037fe:	4659      	mov	r1, fp
 8003800:	2201      	movs	r2, #1
 8003802:	4628      	mov	r0, r5
 8003804:	9308      	str	r3, [sp, #32]
 8003806:	f000 fc97 	bl	8004138 <__lshift>
 800380a:	4621      	mov	r1, r4
 800380c:	4683      	mov	fp, r0
 800380e:	f000 fd03 	bl	8004218 <__mcmp>
 8003812:	2800      	cmp	r0, #0
 8003814:	dcb2      	bgt.n	800377c <_dtoa_r+0xac4>
 8003816:	d102      	bne.n	800381e <_dtoa_r+0xb66>
 8003818:	9b08      	ldr	r3, [sp, #32]
 800381a:	07db      	lsls	r3, r3, #31
 800381c:	d4ae      	bmi.n	800377c <_dtoa_r+0xac4>
 800381e:	463b      	mov	r3, r7
 8003820:	461f      	mov	r7, r3
 8003822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003826:	2a30      	cmp	r2, #48	; 0x30
 8003828:	d0fa      	beq.n	8003820 <_dtoa_r+0xb68>
 800382a:	e6f9      	b.n	8003620 <_dtoa_r+0x968>
 800382c:	9a03      	ldr	r2, [sp, #12]
 800382e:	429a      	cmp	r2, r3
 8003830:	d1a5      	bne.n	800377e <_dtoa_r+0xac6>
 8003832:	2331      	movs	r3, #49	; 0x31
 8003834:	f10a 0a01 	add.w	sl, sl, #1
 8003838:	e779      	b.n	800372e <_dtoa_r+0xa76>
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <_dtoa_r+0xbd4>)
 800383c:	f7ff baa8 	b.w	8002d90 <_dtoa_r+0xd8>
 8003840:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003842:	2b00      	cmp	r3, #0
 8003844:	f47f aa81 	bne.w	8002d4a <_dtoa_r+0x92>
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <_dtoa_r+0xbd8>)
 800384a:	f7ff baa1 	b.w	8002d90 <_dtoa_r+0xd8>
 800384e:	f1b9 0f00 	cmp.w	r9, #0
 8003852:	dc03      	bgt.n	800385c <_dtoa_r+0xba4>
 8003854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003856:	2b02      	cmp	r3, #2
 8003858:	f73f aecb 	bgt.w	80035f2 <_dtoa_r+0x93a>
 800385c:	9f03      	ldr	r7, [sp, #12]
 800385e:	4621      	mov	r1, r4
 8003860:	4658      	mov	r0, fp
 8003862:	f7ff f99d 	bl	8002ba0 <quorem>
 8003866:	9a03      	ldr	r2, [sp, #12]
 8003868:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800386c:	f807 3b01 	strb.w	r3, [r7], #1
 8003870:	1aba      	subs	r2, r7, r2
 8003872:	4591      	cmp	r9, r2
 8003874:	ddba      	ble.n	80037ec <_dtoa_r+0xb34>
 8003876:	4659      	mov	r1, fp
 8003878:	2300      	movs	r3, #0
 800387a:	220a      	movs	r2, #10
 800387c:	4628      	mov	r0, r5
 800387e:	f000 faaf 	bl	8003de0 <__multadd>
 8003882:	4683      	mov	fp, r0
 8003884:	e7eb      	b.n	800385e <_dtoa_r+0xba6>
 8003886:	bf00      	nop
 8003888:	08004d27 	.word	0x08004d27
 800388c:	08004c84 	.word	0x08004c84
 8003890:	08004ca8 	.word	0x08004ca8

08003894 <__sflush_r>:
 8003894:	898a      	ldrh	r2, [r1, #12]
 8003896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003898:	4605      	mov	r5, r0
 800389a:	0710      	lsls	r0, r2, #28
 800389c:	460c      	mov	r4, r1
 800389e:	d457      	bmi.n	8003950 <__sflush_r+0xbc>
 80038a0:	684b      	ldr	r3, [r1, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	dc04      	bgt.n	80038b0 <__sflush_r+0x1c>
 80038a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dc01      	bgt.n	80038b0 <__sflush_r+0x1c>
 80038ac:	2000      	movs	r0, #0
 80038ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d0fa      	beq.n	80038ac <__sflush_r+0x18>
 80038b6:	2300      	movs	r3, #0
 80038b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038bc:	682f      	ldr	r7, [r5, #0]
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	d032      	beq.n	8003928 <__sflush_r+0x94>
 80038c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	075a      	lsls	r2, r3, #29
 80038c8:	d505      	bpl.n	80038d6 <__sflush_r+0x42>
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	1ac0      	subs	r0, r0, r3
 80038ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038d0:	b10b      	cbz	r3, 80038d6 <__sflush_r+0x42>
 80038d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038d4:	1ac0      	subs	r0, r0, r3
 80038d6:	2300      	movs	r3, #0
 80038d8:	4602      	mov	r2, r0
 80038da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038dc:	4628      	mov	r0, r5
 80038de:	6a21      	ldr	r1, [r4, #32]
 80038e0:	47b0      	blx	r6
 80038e2:	1c43      	adds	r3, r0, #1
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	d106      	bne.n	80038f6 <__sflush_r+0x62>
 80038e8:	6829      	ldr	r1, [r5, #0]
 80038ea:	291d      	cmp	r1, #29
 80038ec:	d82c      	bhi.n	8003948 <__sflush_r+0xb4>
 80038ee:	4a29      	ldr	r2, [pc, #164]	; (8003994 <__sflush_r+0x100>)
 80038f0:	40ca      	lsrs	r2, r1
 80038f2:	07d6      	lsls	r6, r2, #31
 80038f4:	d528      	bpl.n	8003948 <__sflush_r+0xb4>
 80038f6:	2200      	movs	r2, #0
 80038f8:	6062      	str	r2, [r4, #4]
 80038fa:	6922      	ldr	r2, [r4, #16]
 80038fc:	04d9      	lsls	r1, r3, #19
 80038fe:	6022      	str	r2, [r4, #0]
 8003900:	d504      	bpl.n	800390c <__sflush_r+0x78>
 8003902:	1c42      	adds	r2, r0, #1
 8003904:	d101      	bne.n	800390a <__sflush_r+0x76>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	b903      	cbnz	r3, 800390c <__sflush_r+0x78>
 800390a:	6560      	str	r0, [r4, #84]	; 0x54
 800390c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800390e:	602f      	str	r7, [r5, #0]
 8003910:	2900      	cmp	r1, #0
 8003912:	d0cb      	beq.n	80038ac <__sflush_r+0x18>
 8003914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003918:	4299      	cmp	r1, r3
 800391a:	d002      	beq.n	8003922 <__sflush_r+0x8e>
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fd93 	bl	8004448 <_free_r>
 8003922:	2000      	movs	r0, #0
 8003924:	6360      	str	r0, [r4, #52]	; 0x34
 8003926:	e7c2      	b.n	80038ae <__sflush_r+0x1a>
 8003928:	6a21      	ldr	r1, [r4, #32]
 800392a:	2301      	movs	r3, #1
 800392c:	4628      	mov	r0, r5
 800392e:	47b0      	blx	r6
 8003930:	1c41      	adds	r1, r0, #1
 8003932:	d1c7      	bne.n	80038c4 <__sflush_r+0x30>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0c4      	beq.n	80038c4 <__sflush_r+0x30>
 800393a:	2b1d      	cmp	r3, #29
 800393c:	d001      	beq.n	8003942 <__sflush_r+0xae>
 800393e:	2b16      	cmp	r3, #22
 8003940:	d101      	bne.n	8003946 <__sflush_r+0xb2>
 8003942:	602f      	str	r7, [r5, #0]
 8003944:	e7b2      	b.n	80038ac <__sflush_r+0x18>
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	e7ae      	b.n	80038ae <__sflush_r+0x1a>
 8003950:	690f      	ldr	r7, [r1, #16]
 8003952:	2f00      	cmp	r7, #0
 8003954:	d0aa      	beq.n	80038ac <__sflush_r+0x18>
 8003956:	0793      	lsls	r3, r2, #30
 8003958:	bf18      	it	ne
 800395a:	2300      	movne	r3, #0
 800395c:	680e      	ldr	r6, [r1, #0]
 800395e:	bf08      	it	eq
 8003960:	694b      	ldreq	r3, [r1, #20]
 8003962:	1bf6      	subs	r6, r6, r7
 8003964:	600f      	str	r7, [r1, #0]
 8003966:	608b      	str	r3, [r1, #8]
 8003968:	2e00      	cmp	r6, #0
 800396a:	dd9f      	ble.n	80038ac <__sflush_r+0x18>
 800396c:	4633      	mov	r3, r6
 800396e:	463a      	mov	r2, r7
 8003970:	4628      	mov	r0, r5
 8003972:	6a21      	ldr	r1, [r4, #32]
 8003974:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003978:	47e0      	blx	ip
 800397a:	2800      	cmp	r0, #0
 800397c:	dc06      	bgt.n	800398c <__sflush_r+0xf8>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003988:	81a3      	strh	r3, [r4, #12]
 800398a:	e790      	b.n	80038ae <__sflush_r+0x1a>
 800398c:	4407      	add	r7, r0
 800398e:	1a36      	subs	r6, r6, r0
 8003990:	e7ea      	b.n	8003968 <__sflush_r+0xd4>
 8003992:	bf00      	nop
 8003994:	20400001 	.word	0x20400001

08003998 <_fflush_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	690b      	ldr	r3, [r1, #16]
 800399c:	4605      	mov	r5, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	b913      	cbnz	r3, 80039a8 <_fflush_r+0x10>
 80039a2:	2500      	movs	r5, #0
 80039a4:	4628      	mov	r0, r5
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	b118      	cbz	r0, 80039b2 <_fflush_r+0x1a>
 80039aa:	6983      	ldr	r3, [r0, #24]
 80039ac:	b90b      	cbnz	r3, 80039b2 <_fflush_r+0x1a>
 80039ae:	f000 f887 	bl	8003ac0 <__sinit>
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <_fflush_r+0x6c>)
 80039b4:	429c      	cmp	r4, r3
 80039b6:	d11b      	bne.n	80039f0 <_fflush_r+0x58>
 80039b8:	686c      	ldr	r4, [r5, #4]
 80039ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0ef      	beq.n	80039a2 <_fflush_r+0xa>
 80039c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039c4:	07d0      	lsls	r0, r2, #31
 80039c6:	d404      	bmi.n	80039d2 <_fflush_r+0x3a>
 80039c8:	0599      	lsls	r1, r3, #22
 80039ca:	d402      	bmi.n	80039d2 <_fflush_r+0x3a>
 80039cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ce:	f000 f91a 	bl	8003c06 <__retarget_lock_acquire_recursive>
 80039d2:	4628      	mov	r0, r5
 80039d4:	4621      	mov	r1, r4
 80039d6:	f7ff ff5d 	bl	8003894 <__sflush_r>
 80039da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039dc:	4605      	mov	r5, r0
 80039de:	07da      	lsls	r2, r3, #31
 80039e0:	d4e0      	bmi.n	80039a4 <_fflush_r+0xc>
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	059b      	lsls	r3, r3, #22
 80039e6:	d4dd      	bmi.n	80039a4 <_fflush_r+0xc>
 80039e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ea:	f000 f90d 	bl	8003c08 <__retarget_lock_release_recursive>
 80039ee:	e7d9      	b.n	80039a4 <_fflush_r+0xc>
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <_fflush_r+0x70>)
 80039f2:	429c      	cmp	r4, r3
 80039f4:	d101      	bne.n	80039fa <_fflush_r+0x62>
 80039f6:	68ac      	ldr	r4, [r5, #8]
 80039f8:	e7df      	b.n	80039ba <_fflush_r+0x22>
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <_fflush_r+0x74>)
 80039fc:	429c      	cmp	r4, r3
 80039fe:	bf08      	it	eq
 8003a00:	68ec      	ldreq	r4, [r5, #12]
 8003a02:	e7da      	b.n	80039ba <_fflush_r+0x22>
 8003a04:	08004d58 	.word	0x08004d58
 8003a08:	08004d78 	.word	0x08004d78
 8003a0c:	08004d38 	.word	0x08004d38

08003a10 <std>:
 8003a10:	2300      	movs	r3, #0
 8003a12:	b510      	push	{r4, lr}
 8003a14:	4604      	mov	r4, r0
 8003a16:	e9c0 3300 	strd	r3, r3, [r0]
 8003a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a1e:	6083      	str	r3, [r0, #8]
 8003a20:	8181      	strh	r1, [r0, #12]
 8003a22:	6643      	str	r3, [r0, #100]	; 0x64
 8003a24:	81c2      	strh	r2, [r0, #14]
 8003a26:	6183      	str	r3, [r0, #24]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	305c      	adds	r0, #92	; 0x5c
 8003a2e:	f7fe fb01 	bl	8002034 <memset>
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <std+0x38>)
 8003a34:	6224      	str	r4, [r4, #32]
 8003a36:	6263      	str	r3, [r4, #36]	; 0x24
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <std+0x3c>)
 8003a3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <std+0x40>)
 8003a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <std+0x44>)
 8003a42:	6323      	str	r3, [r4, #48]	; 0x30
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	080048d1 	.word	0x080048d1
 8003a4c:	080048f3 	.word	0x080048f3
 8003a50:	0800492b 	.word	0x0800492b
 8003a54:	0800494f 	.word	0x0800494f

08003a58 <_cleanup_r>:
 8003a58:	4901      	ldr	r1, [pc, #4]	; (8003a60 <_cleanup_r+0x8>)
 8003a5a:	f000 b8af 	b.w	8003bbc <_fwalk_reent>
 8003a5e:	bf00      	nop
 8003a60:	08003999 	.word	0x08003999

08003a64 <__sfmoreglue>:
 8003a64:	2268      	movs	r2, #104	; 0x68
 8003a66:	b570      	push	{r4, r5, r6, lr}
 8003a68:	1e4d      	subs	r5, r1, #1
 8003a6a:	4355      	muls	r5, r2
 8003a6c:	460e      	mov	r6, r1
 8003a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a72:	f000 fd51 	bl	8004518 <_malloc_r>
 8003a76:	4604      	mov	r4, r0
 8003a78:	b140      	cbz	r0, 8003a8c <__sfmoreglue+0x28>
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	e9c0 1600 	strd	r1, r6, [r0]
 8003a80:	300c      	adds	r0, #12
 8003a82:	60a0      	str	r0, [r4, #8]
 8003a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a88:	f7fe fad4 	bl	8002034 <memset>
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}

08003a90 <__sfp_lock_acquire>:
 8003a90:	4801      	ldr	r0, [pc, #4]	; (8003a98 <__sfp_lock_acquire+0x8>)
 8003a92:	f000 b8b8 	b.w	8003c06 <__retarget_lock_acquire_recursive>
 8003a96:	bf00      	nop
 8003a98:	20000241 	.word	0x20000241

08003a9c <__sfp_lock_release>:
 8003a9c:	4801      	ldr	r0, [pc, #4]	; (8003aa4 <__sfp_lock_release+0x8>)
 8003a9e:	f000 b8b3 	b.w	8003c08 <__retarget_lock_release_recursive>
 8003aa2:	bf00      	nop
 8003aa4:	20000241 	.word	0x20000241

08003aa8 <__sinit_lock_acquire>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__sinit_lock_acquire+0x8>)
 8003aaa:	f000 b8ac 	b.w	8003c06 <__retarget_lock_acquire_recursive>
 8003aae:	bf00      	nop
 8003ab0:	20000242 	.word	0x20000242

08003ab4 <__sinit_lock_release>:
 8003ab4:	4801      	ldr	r0, [pc, #4]	; (8003abc <__sinit_lock_release+0x8>)
 8003ab6:	f000 b8a7 	b.w	8003c08 <__retarget_lock_release_recursive>
 8003aba:	bf00      	nop
 8003abc:	20000242 	.word	0x20000242

08003ac0 <__sinit>:
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	f7ff fff0 	bl	8003aa8 <__sinit_lock_acquire>
 8003ac8:	69a3      	ldr	r3, [r4, #24]
 8003aca:	b11b      	cbz	r3, 8003ad4 <__sinit+0x14>
 8003acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad0:	f7ff bff0 	b.w	8003ab4 <__sinit_lock_release>
 8003ad4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <__sinit+0x68>)
 8003adc:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <__sinit+0x6c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ae2:	42a3      	cmp	r3, r4
 8003ae4:	bf08      	it	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	4620      	mov	r0, r4
 8003aea:	bf08      	it	eq
 8003aec:	61a3      	streq	r3, [r4, #24]
 8003aee:	f000 f81f 	bl	8003b30 <__sfp>
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	4620      	mov	r0, r4
 8003af6:	f000 f81b 	bl	8003b30 <__sfp>
 8003afa:	60a0      	str	r0, [r4, #8]
 8003afc:	4620      	mov	r0, r4
 8003afe:	f000 f817 	bl	8003b30 <__sfp>
 8003b02:	2200      	movs	r2, #0
 8003b04:	2104      	movs	r1, #4
 8003b06:	60e0      	str	r0, [r4, #12]
 8003b08:	6860      	ldr	r0, [r4, #4]
 8003b0a:	f7ff ff81 	bl	8003a10 <std>
 8003b0e:	2201      	movs	r2, #1
 8003b10:	2109      	movs	r1, #9
 8003b12:	68a0      	ldr	r0, [r4, #8]
 8003b14:	f7ff ff7c 	bl	8003a10 <std>
 8003b18:	2202      	movs	r2, #2
 8003b1a:	2112      	movs	r1, #18
 8003b1c:	68e0      	ldr	r0, [r4, #12]
 8003b1e:	f7ff ff77 	bl	8003a10 <std>
 8003b22:	2301      	movs	r3, #1
 8003b24:	61a3      	str	r3, [r4, #24]
 8003b26:	e7d1      	b.n	8003acc <__sinit+0xc>
 8003b28:	08004c70 	.word	0x08004c70
 8003b2c:	08003a59 	.word	0x08003a59

08003b30 <__sfp>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	4607      	mov	r7, r0
 8003b34:	f7ff ffac 	bl	8003a90 <__sfp_lock_acquire>
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <__sfp+0x84>)
 8003b3a:	681e      	ldr	r6, [r3, #0]
 8003b3c:	69b3      	ldr	r3, [r6, #24]
 8003b3e:	b913      	cbnz	r3, 8003b46 <__sfp+0x16>
 8003b40:	4630      	mov	r0, r6
 8003b42:	f7ff ffbd 	bl	8003ac0 <__sinit>
 8003b46:	3648      	adds	r6, #72	; 0x48
 8003b48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	d503      	bpl.n	8003b58 <__sfp+0x28>
 8003b50:	6833      	ldr	r3, [r6, #0]
 8003b52:	b30b      	cbz	r3, 8003b98 <__sfp+0x68>
 8003b54:	6836      	ldr	r6, [r6, #0]
 8003b56:	e7f7      	b.n	8003b48 <__sfp+0x18>
 8003b58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b5c:	b9d5      	cbnz	r5, 8003b94 <__sfp+0x64>
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <__sfp+0x88>)
 8003b60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b64:	60e3      	str	r3, [r4, #12]
 8003b66:	6665      	str	r5, [r4, #100]	; 0x64
 8003b68:	f000 f84c 	bl	8003c04 <__retarget_lock_init_recursive>
 8003b6c:	f7ff ff96 	bl	8003a9c <__sfp_lock_release>
 8003b70:	2208      	movs	r2, #8
 8003b72:	4629      	mov	r1, r5
 8003b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b7c:	6025      	str	r5, [r4, #0]
 8003b7e:	61a5      	str	r5, [r4, #24]
 8003b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b84:	f7fe fa56 	bl	8002034 <memset>
 8003b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b90:	4620      	mov	r0, r4
 8003b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b94:	3468      	adds	r4, #104	; 0x68
 8003b96:	e7d9      	b.n	8003b4c <__sfp+0x1c>
 8003b98:	2104      	movs	r1, #4
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	f7ff ff62 	bl	8003a64 <__sfmoreglue>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	6030      	str	r0, [r6, #0]
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d1d5      	bne.n	8003b54 <__sfp+0x24>
 8003ba8:	f7ff ff78 	bl	8003a9c <__sfp_lock_release>
 8003bac:	230c      	movs	r3, #12
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	e7ee      	b.n	8003b90 <__sfp+0x60>
 8003bb2:	bf00      	nop
 8003bb4:	08004c70 	.word	0x08004c70
 8003bb8:	ffff0001 	.word	0xffff0001

08003bbc <_fwalk_reent>:
 8003bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	4688      	mov	r8, r1
 8003bc4:	2700      	movs	r7, #0
 8003bc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bce:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd2:	d505      	bpl.n	8003be0 <_fwalk_reent+0x24>
 8003bd4:	6824      	ldr	r4, [r4, #0]
 8003bd6:	2c00      	cmp	r4, #0
 8003bd8:	d1f7      	bne.n	8003bca <_fwalk_reent+0xe>
 8003bda:	4638      	mov	r0, r7
 8003bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be0:	89ab      	ldrh	r3, [r5, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d907      	bls.n	8003bf6 <_fwalk_reent+0x3a>
 8003be6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bea:	3301      	adds	r3, #1
 8003bec:	d003      	beq.n	8003bf6 <_fwalk_reent+0x3a>
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	47c0      	blx	r8
 8003bf4:	4307      	orrs	r7, r0
 8003bf6:	3568      	adds	r5, #104	; 0x68
 8003bf8:	e7e9      	b.n	8003bce <_fwalk_reent+0x12>
	...

08003bfc <_localeconv_r>:
 8003bfc:	4800      	ldr	r0, [pc, #0]	; (8003c00 <_localeconv_r+0x4>)
 8003bfe:	4770      	bx	lr
 8003c00:	20000160 	.word	0x20000160

08003c04 <__retarget_lock_init_recursive>:
 8003c04:	4770      	bx	lr

08003c06 <__retarget_lock_acquire_recursive>:
 8003c06:	4770      	bx	lr

08003c08 <__retarget_lock_release_recursive>:
 8003c08:	4770      	bx	lr

08003c0a <__swhatbuf_r>:
 8003c0a:	b570      	push	{r4, r5, r6, lr}
 8003c0c:	460e      	mov	r6, r1
 8003c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c12:	4614      	mov	r4, r2
 8003c14:	2900      	cmp	r1, #0
 8003c16:	461d      	mov	r5, r3
 8003c18:	b096      	sub	sp, #88	; 0x58
 8003c1a:	da08      	bge.n	8003c2e <__swhatbuf_r+0x24>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c22:	602a      	str	r2, [r5, #0]
 8003c24:	061a      	lsls	r2, r3, #24
 8003c26:	d410      	bmi.n	8003c4a <__swhatbuf_r+0x40>
 8003c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2c:	e00e      	b.n	8003c4c <__swhatbuf_r+0x42>
 8003c2e:	466a      	mov	r2, sp
 8003c30:	f000 fee4 	bl	80049fc <_fstat_r>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	dbf1      	blt.n	8003c1c <__swhatbuf_r+0x12>
 8003c38:	9a01      	ldr	r2, [sp, #4]
 8003c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c42:	425a      	negs	r2, r3
 8003c44:	415a      	adcs	r2, r3
 8003c46:	602a      	str	r2, [r5, #0]
 8003c48:	e7ee      	b.n	8003c28 <__swhatbuf_r+0x1e>
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	b016      	add	sp, #88	; 0x58
 8003c52:	bd70      	pop	{r4, r5, r6, pc}

08003c54 <__smakebuf_r>:
 8003c54:	898b      	ldrh	r3, [r1, #12]
 8003c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c58:	079d      	lsls	r5, r3, #30
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	d507      	bpl.n	8003c70 <__smakebuf_r+0x1c>
 8003c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	6123      	str	r3, [r4, #16]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	6163      	str	r3, [r4, #20]
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	466a      	mov	r2, sp
 8003c72:	ab01      	add	r3, sp, #4
 8003c74:	f7ff ffc9 	bl	8003c0a <__swhatbuf_r>
 8003c78:	9900      	ldr	r1, [sp, #0]
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	f000 fc4b 	bl	8004518 <_malloc_r>
 8003c82:	b948      	cbnz	r0, 8003c98 <__smakebuf_r+0x44>
 8003c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c88:	059a      	lsls	r2, r3, #22
 8003c8a:	d4ef      	bmi.n	8003c6c <__smakebuf_r+0x18>
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	81a3      	strh	r3, [r4, #12]
 8003c96:	e7e3      	b.n	8003c60 <__smakebuf_r+0xc>
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <__smakebuf_r+0x7c>)
 8003c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	6020      	str	r0, [r4, #0]
 8003ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	9b00      	ldr	r3, [sp, #0]
 8003ca8:	6120      	str	r0, [r4, #16]
 8003caa:	6163      	str	r3, [r4, #20]
 8003cac:	9b01      	ldr	r3, [sp, #4]
 8003cae:	b15b      	cbz	r3, 8003cc8 <__smakebuf_r+0x74>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb6:	f000 feb3 	bl	8004a20 <_isatty_r>
 8003cba:	b128      	cbz	r0, 8003cc8 <__smakebuf_r+0x74>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	89a0      	ldrh	r0, [r4, #12]
 8003cca:	4305      	orrs	r5, r0
 8003ccc:	81a5      	strh	r5, [r4, #12]
 8003cce:	e7cd      	b.n	8003c6c <__smakebuf_r+0x18>
 8003cd0:	08003a59 	.word	0x08003a59

08003cd4 <malloc>:
 8003cd4:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <malloc+0xc>)
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f000 bc1d 	b.w	8004518 <_malloc_r>
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c

08003ce4 <memchr>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	b2c9      	uxtb	r1, r1
 8003cea:	4402      	add	r2, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	d101      	bne.n	8003cf6 <memchr+0x12>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e003      	b.n	8003cfe <memchr+0x1a>
 8003cf6:	7804      	ldrb	r4, [r0, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	428c      	cmp	r4, r1
 8003cfc:	d1f6      	bne.n	8003cec <memchr+0x8>
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <memcpy>:
 8003d00:	440a      	add	r2, r1
 8003d02:	4291      	cmp	r1, r2
 8003d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d08:	d100      	bne.n	8003d0c <memcpy+0xc>
 8003d0a:	4770      	bx	lr
 8003d0c:	b510      	push	{r4, lr}
 8003d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d12:	4291      	cmp	r1, r2
 8003d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d18:	d1f9      	bne.n	8003d0e <memcpy+0xe>
 8003d1a:	bd10      	pop	{r4, pc}

08003d1c <_Balloc>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003d20:	4604      	mov	r4, r0
 8003d22:	460d      	mov	r5, r1
 8003d24:	b976      	cbnz	r6, 8003d44 <_Balloc+0x28>
 8003d26:	2010      	movs	r0, #16
 8003d28:	f7ff ffd4 	bl	8003cd4 <malloc>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8003d30:	b920      	cbnz	r0, 8003d3c <_Balloc+0x20>
 8003d32:	2166      	movs	r1, #102	; 0x66
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <_Balloc+0x78>)
 8003d36:	4818      	ldr	r0, [pc, #96]	; (8003d98 <_Balloc+0x7c>)
 8003d38:	f000 fe20 	bl	800497c <__assert_func>
 8003d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003d40:	6006      	str	r6, [r0, #0]
 8003d42:	60c6      	str	r6, [r0, #12]
 8003d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003d46:	68f3      	ldr	r3, [r6, #12]
 8003d48:	b183      	cbz	r3, 8003d6c <_Balloc+0x50>
 8003d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003d52:	b9b8      	cbnz	r0, 8003d84 <_Balloc+0x68>
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f605 	lsl.w	r6, r1, r5
 8003d5a:	1d72      	adds	r2, r6, #5
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	0092      	lsls	r2, r2, #2
 8003d60:	f000 fb5e 	bl	8004420 <_calloc_r>
 8003d64:	b160      	cbz	r0, 8003d80 <_Balloc+0x64>
 8003d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003d6a:	e00e      	b.n	8003d8a <_Balloc+0x6e>
 8003d6c:	2221      	movs	r2, #33	; 0x21
 8003d6e:	2104      	movs	r1, #4
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 fb55 	bl	8004420 <_calloc_r>
 8003d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d78:	60f0      	str	r0, [r6, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e4      	bne.n	8003d4a <_Balloc+0x2e>
 8003d80:	2000      	movs	r0, #0
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	6802      	ldr	r2, [r0, #0]
 8003d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003d90:	e7f7      	b.n	8003d82 <_Balloc+0x66>
 8003d92:	bf00      	nop
 8003d94:	08004cb5 	.word	0x08004cb5
 8003d98:	08004d98 	.word	0x08004d98

08003d9c <_Bfree>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003da0:	4605      	mov	r5, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	b976      	cbnz	r6, 8003dc4 <_Bfree+0x28>
 8003da6:	2010      	movs	r0, #16
 8003da8:	f7ff ff94 	bl	8003cd4 <malloc>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6268      	str	r0, [r5, #36]	; 0x24
 8003db0:	b920      	cbnz	r0, 8003dbc <_Bfree+0x20>
 8003db2:	218a      	movs	r1, #138	; 0x8a
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <_Bfree+0x3c>)
 8003db6:	4809      	ldr	r0, [pc, #36]	; (8003ddc <_Bfree+0x40>)
 8003db8:	f000 fde0 	bl	800497c <__assert_func>
 8003dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003dc0:	6006      	str	r6, [r0, #0]
 8003dc2:	60c6      	str	r6, [r0, #12]
 8003dc4:	b13c      	cbz	r4, 8003dd6 <_Bfree+0x3a>
 8003dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003dc8:	6862      	ldr	r2, [r4, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dd0:	6021      	str	r1, [r4, #0]
 8003dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	08004cb5 	.word	0x08004cb5
 8003ddc:	08004d98 	.word	0x08004d98

08003de0 <__multadd>:
 8003de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de4:	4607      	mov	r7, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	461e      	mov	r6, r3
 8003dea:	2000      	movs	r0, #0
 8003dec:	690d      	ldr	r5, [r1, #16]
 8003dee:	f101 0c14 	add.w	ip, r1, #20
 8003df2:	f8dc 3000 	ldr.w	r3, [ip]
 8003df6:	3001      	adds	r0, #1
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	fb02 6101 	mla	r1, r2, r1, r6
 8003dfe:	0c1e      	lsrs	r6, r3, #16
 8003e00:	0c0b      	lsrs	r3, r1, #16
 8003e02:	fb02 3306 	mla	r3, r2, r6, r3
 8003e06:	b289      	uxth	r1, r1
 8003e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003e0c:	4285      	cmp	r5, r0
 8003e0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003e12:	f84c 1b04 	str.w	r1, [ip], #4
 8003e16:	dcec      	bgt.n	8003df2 <__multadd+0x12>
 8003e18:	b30e      	cbz	r6, 8003e5e <__multadd+0x7e>
 8003e1a:	68a3      	ldr	r3, [r4, #8]
 8003e1c:	42ab      	cmp	r3, r5
 8003e1e:	dc19      	bgt.n	8003e54 <__multadd+0x74>
 8003e20:	6861      	ldr	r1, [r4, #4]
 8003e22:	4638      	mov	r0, r7
 8003e24:	3101      	adds	r1, #1
 8003e26:	f7ff ff79 	bl	8003d1c <_Balloc>
 8003e2a:	4680      	mov	r8, r0
 8003e2c:	b928      	cbnz	r0, 8003e3a <__multadd+0x5a>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	21b5      	movs	r1, #181	; 0xb5
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <__multadd+0x84>)
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <__multadd+0x88>)
 8003e36:	f000 fda1 	bl	800497c <__assert_func>
 8003e3a:	6922      	ldr	r2, [r4, #16]
 8003e3c:	f104 010c 	add.w	r1, r4, #12
 8003e40:	3202      	adds	r2, #2
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	300c      	adds	r0, #12
 8003e46:	f7ff ff5b 	bl	8003d00 <memcpy>
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	f7ff ffa5 	bl	8003d9c <_Bfree>
 8003e52:	4644      	mov	r4, r8
 8003e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003e58:	3501      	adds	r5, #1
 8003e5a:	615e      	str	r6, [r3, #20]
 8003e5c:	6125      	str	r5, [r4, #16]
 8003e5e:	4620      	mov	r0, r4
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e64:	08004d27 	.word	0x08004d27
 8003e68:	08004d98 	.word	0x08004d98

08003e6c <__hi0bits>:
 8003e6c:	0c02      	lsrs	r2, r0, #16
 8003e6e:	0412      	lsls	r2, r2, #16
 8003e70:	4603      	mov	r3, r0
 8003e72:	b9ca      	cbnz	r2, 8003ea8 <__hi0bits+0x3c>
 8003e74:	0403      	lsls	r3, r0, #16
 8003e76:	2010      	movs	r0, #16
 8003e78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003e7c:	bf04      	itt	eq
 8003e7e:	021b      	lsleq	r3, r3, #8
 8003e80:	3008      	addeq	r0, #8
 8003e82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003e86:	bf04      	itt	eq
 8003e88:	011b      	lsleq	r3, r3, #4
 8003e8a:	3004      	addeq	r0, #4
 8003e8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003e90:	bf04      	itt	eq
 8003e92:	009b      	lsleq	r3, r3, #2
 8003e94:	3002      	addeq	r0, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db05      	blt.n	8003ea6 <__hi0bits+0x3a>
 8003e9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003e9e:	f100 0001 	add.w	r0, r0, #1
 8003ea2:	bf08      	it	eq
 8003ea4:	2020      	moveq	r0, #32
 8003ea6:	4770      	bx	lr
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e7e5      	b.n	8003e78 <__hi0bits+0xc>

08003eac <__lo0bits>:
 8003eac:	6803      	ldr	r3, [r0, #0]
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f013 0007 	ands.w	r0, r3, #7
 8003eb4:	d00b      	beq.n	8003ece <__lo0bits+0x22>
 8003eb6:	07d9      	lsls	r1, r3, #31
 8003eb8:	d421      	bmi.n	8003efe <__lo0bits+0x52>
 8003eba:	0798      	lsls	r0, r3, #30
 8003ebc:	bf49      	itett	mi
 8003ebe:	085b      	lsrmi	r3, r3, #1
 8003ec0:	089b      	lsrpl	r3, r3, #2
 8003ec2:	2001      	movmi	r0, #1
 8003ec4:	6013      	strmi	r3, [r2, #0]
 8003ec6:	bf5c      	itt	pl
 8003ec8:	2002      	movpl	r0, #2
 8003eca:	6013      	strpl	r3, [r2, #0]
 8003ecc:	4770      	bx	lr
 8003ece:	b299      	uxth	r1, r3
 8003ed0:	b909      	cbnz	r1, 8003ed6 <__lo0bits+0x2a>
 8003ed2:	2010      	movs	r0, #16
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2d9      	uxtb	r1, r3
 8003ed8:	b909      	cbnz	r1, 8003ede <__lo0bits+0x32>
 8003eda:	3008      	adds	r0, #8
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	0719      	lsls	r1, r3, #28
 8003ee0:	bf04      	itt	eq
 8003ee2:	091b      	lsreq	r3, r3, #4
 8003ee4:	3004      	addeq	r0, #4
 8003ee6:	0799      	lsls	r1, r3, #30
 8003ee8:	bf04      	itt	eq
 8003eea:	089b      	lsreq	r3, r3, #2
 8003eec:	3002      	addeq	r0, #2
 8003eee:	07d9      	lsls	r1, r3, #31
 8003ef0:	d403      	bmi.n	8003efa <__lo0bits+0x4e>
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	f100 0001 	add.w	r0, r0, #1
 8003ef8:	d003      	beq.n	8003f02 <__lo0bits+0x56>
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4770      	bx	lr
 8003efe:	2000      	movs	r0, #0
 8003f00:	4770      	bx	lr
 8003f02:	2020      	movs	r0, #32
 8003f04:	4770      	bx	lr
	...

08003f08 <__i2b>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	f7ff ff05 	bl	8003d1c <_Balloc>
 8003f12:	4602      	mov	r2, r0
 8003f14:	b928      	cbnz	r0, 8003f22 <__i2b+0x1a>
 8003f16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <__i2b+0x24>)
 8003f1c:	4804      	ldr	r0, [pc, #16]	; (8003f30 <__i2b+0x28>)
 8003f1e:	f000 fd2d 	bl	800497c <__assert_func>
 8003f22:	2301      	movs	r3, #1
 8003f24:	6144      	str	r4, [r0, #20]
 8003f26:	6103      	str	r3, [r0, #16]
 8003f28:	bd10      	pop	{r4, pc}
 8003f2a:	bf00      	nop
 8003f2c:	08004d27 	.word	0x08004d27
 8003f30:	08004d98 	.word	0x08004d98

08003f34 <__multiply>:
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	4691      	mov	r9, r2
 8003f3a:	690a      	ldr	r2, [r1, #16]
 8003f3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003f40:	460c      	mov	r4, r1
 8003f42:	429a      	cmp	r2, r3
 8003f44:	bfbe      	ittt	lt
 8003f46:	460b      	movlt	r3, r1
 8003f48:	464c      	movlt	r4, r9
 8003f4a:	4699      	movlt	r9, r3
 8003f4c:	6927      	ldr	r7, [r4, #16]
 8003f4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003f52:	68a3      	ldr	r3, [r4, #8]
 8003f54:	6861      	ldr	r1, [r4, #4]
 8003f56:	eb07 060a 	add.w	r6, r7, sl
 8003f5a:	42b3      	cmp	r3, r6
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	bfb8      	it	lt
 8003f60:	3101      	addlt	r1, #1
 8003f62:	f7ff fedb 	bl	8003d1c <_Balloc>
 8003f66:	b930      	cbnz	r0, 8003f76 <__multiply+0x42>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	f240 115d 	movw	r1, #349	; 0x15d
 8003f6e:	4b43      	ldr	r3, [pc, #268]	; (800407c <__multiply+0x148>)
 8003f70:	4843      	ldr	r0, [pc, #268]	; (8004080 <__multiply+0x14c>)
 8003f72:	f000 fd03 	bl	800497c <__assert_func>
 8003f76:	f100 0514 	add.w	r5, r0, #20
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003f82:	4543      	cmp	r3, r8
 8003f84:	d321      	bcc.n	8003fca <__multiply+0x96>
 8003f86:	f104 0314 	add.w	r3, r4, #20
 8003f8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003f8e:	f109 0314 	add.w	r3, r9, #20
 8003f92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003f96:	9202      	str	r2, [sp, #8]
 8003f98:	1b3a      	subs	r2, r7, r4
 8003f9a:	3a15      	subs	r2, #21
 8003f9c:	f022 0203 	bic.w	r2, r2, #3
 8003fa0:	3204      	adds	r2, #4
 8003fa2:	f104 0115 	add.w	r1, r4, #21
 8003fa6:	428f      	cmp	r7, r1
 8003fa8:	bf38      	it	cc
 8003faa:	2204      	movcc	r2, #4
 8003fac:	9201      	str	r2, [sp, #4]
 8003fae:	9a02      	ldr	r2, [sp, #8]
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d80c      	bhi.n	8003fd0 <__multiply+0x9c>
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	dd03      	ble.n	8003fc2 <__multiply+0x8e>
 8003fba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d059      	beq.n	8004076 <__multiply+0x142>
 8003fc2:	6106      	str	r6, [r0, #16]
 8003fc4:	b005      	add	sp, #20
 8003fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fca:	f843 2b04 	str.w	r2, [r3], #4
 8003fce:	e7d8      	b.n	8003f82 <__multiply+0x4e>
 8003fd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8003fd4:	f1ba 0f00 	cmp.w	sl, #0
 8003fd8:	d023      	beq.n	8004022 <__multiply+0xee>
 8003fda:	46a9      	mov	r9, r5
 8003fdc:	f04f 0c00 	mov.w	ip, #0
 8003fe0:	f104 0e14 	add.w	lr, r4, #20
 8003fe4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003fe8:	f8d9 1000 	ldr.w	r1, [r9]
 8003fec:	fa1f fb82 	uxth.w	fp, r2
 8003ff0:	b289      	uxth	r1, r1
 8003ff2:	fb0a 110b 	mla	r1, sl, fp, r1
 8003ff6:	4461      	add	r1, ip
 8003ff8:	f8d9 c000 	ldr.w	ip, [r9]
 8003ffc:	0c12      	lsrs	r2, r2, #16
 8003ffe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004002:	fb0a c202 	mla	r2, sl, r2, ip
 8004006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800400a:	b289      	uxth	r1, r1
 800400c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004010:	4577      	cmp	r7, lr
 8004012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004016:	f849 1b04 	str.w	r1, [r9], #4
 800401a:	d8e3      	bhi.n	8003fe4 <__multiply+0xb0>
 800401c:	9a01      	ldr	r2, [sp, #4]
 800401e:	f845 c002 	str.w	ip, [r5, r2]
 8004022:	9a03      	ldr	r2, [sp, #12]
 8004024:	3304      	adds	r3, #4
 8004026:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800402a:	f1b9 0f00 	cmp.w	r9, #0
 800402e:	d020      	beq.n	8004072 <__multiply+0x13e>
 8004030:	46ae      	mov	lr, r5
 8004032:	f04f 0a00 	mov.w	sl, #0
 8004036:	6829      	ldr	r1, [r5, #0]
 8004038:	f104 0c14 	add.w	ip, r4, #20
 800403c:	f8bc b000 	ldrh.w	fp, [ip]
 8004040:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004044:	b289      	uxth	r1, r1
 8004046:	fb09 220b 	mla	r2, r9, fp, r2
 800404a:	4492      	add	sl, r2
 800404c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004050:	f84e 1b04 	str.w	r1, [lr], #4
 8004054:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004058:	f8be 1000 	ldrh.w	r1, [lr]
 800405c:	0c12      	lsrs	r2, r2, #16
 800405e:	fb09 1102 	mla	r1, r9, r2, r1
 8004062:	4567      	cmp	r7, ip
 8004064:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004068:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800406c:	d8e6      	bhi.n	800403c <__multiply+0x108>
 800406e:	9a01      	ldr	r2, [sp, #4]
 8004070:	50a9      	str	r1, [r5, r2]
 8004072:	3504      	adds	r5, #4
 8004074:	e79b      	b.n	8003fae <__multiply+0x7a>
 8004076:	3e01      	subs	r6, #1
 8004078:	e79d      	b.n	8003fb6 <__multiply+0x82>
 800407a:	bf00      	nop
 800407c:	08004d27 	.word	0x08004d27
 8004080:	08004d98 	.word	0x08004d98

08004084 <__pow5mult>:
 8004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004088:	4615      	mov	r5, r2
 800408a:	f012 0203 	ands.w	r2, r2, #3
 800408e:	4606      	mov	r6, r0
 8004090:	460f      	mov	r7, r1
 8004092:	d007      	beq.n	80040a4 <__pow5mult+0x20>
 8004094:	4c25      	ldr	r4, [pc, #148]	; (800412c <__pow5mult+0xa8>)
 8004096:	3a01      	subs	r2, #1
 8004098:	2300      	movs	r3, #0
 800409a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800409e:	f7ff fe9f 	bl	8003de0 <__multadd>
 80040a2:	4607      	mov	r7, r0
 80040a4:	10ad      	asrs	r5, r5, #2
 80040a6:	d03d      	beq.n	8004124 <__pow5mult+0xa0>
 80040a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80040aa:	b97c      	cbnz	r4, 80040cc <__pow5mult+0x48>
 80040ac:	2010      	movs	r0, #16
 80040ae:	f7ff fe11 	bl	8003cd4 <malloc>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6270      	str	r0, [r6, #36]	; 0x24
 80040b6:	b928      	cbnz	r0, 80040c4 <__pow5mult+0x40>
 80040b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <__pow5mult+0xac>)
 80040be:	481d      	ldr	r0, [pc, #116]	; (8004134 <__pow5mult+0xb0>)
 80040c0:	f000 fc5c 	bl	800497c <__assert_func>
 80040c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80040c8:	6004      	str	r4, [r0, #0]
 80040ca:	60c4      	str	r4, [r0, #12]
 80040cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80040d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80040d4:	b94c      	cbnz	r4, 80040ea <__pow5mult+0x66>
 80040d6:	f240 2171 	movw	r1, #625	; 0x271
 80040da:	4630      	mov	r0, r6
 80040dc:	f7ff ff14 	bl	8003f08 <__i2b>
 80040e0:	2300      	movs	r3, #0
 80040e2:	4604      	mov	r4, r0
 80040e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80040e8:	6003      	str	r3, [r0, #0]
 80040ea:	f04f 0900 	mov.w	r9, #0
 80040ee:	07eb      	lsls	r3, r5, #31
 80040f0:	d50a      	bpl.n	8004108 <__pow5mult+0x84>
 80040f2:	4639      	mov	r1, r7
 80040f4:	4622      	mov	r2, r4
 80040f6:	4630      	mov	r0, r6
 80040f8:	f7ff ff1c 	bl	8003f34 <__multiply>
 80040fc:	4680      	mov	r8, r0
 80040fe:	4639      	mov	r1, r7
 8004100:	4630      	mov	r0, r6
 8004102:	f7ff fe4b 	bl	8003d9c <_Bfree>
 8004106:	4647      	mov	r7, r8
 8004108:	106d      	asrs	r5, r5, #1
 800410a:	d00b      	beq.n	8004124 <__pow5mult+0xa0>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	b938      	cbnz	r0, 8004120 <__pow5mult+0x9c>
 8004110:	4622      	mov	r2, r4
 8004112:	4621      	mov	r1, r4
 8004114:	4630      	mov	r0, r6
 8004116:	f7ff ff0d 	bl	8003f34 <__multiply>
 800411a:	6020      	str	r0, [r4, #0]
 800411c:	f8c0 9000 	str.w	r9, [r0]
 8004120:	4604      	mov	r4, r0
 8004122:	e7e4      	b.n	80040ee <__pow5mult+0x6a>
 8004124:	4638      	mov	r0, r7
 8004126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412a:	bf00      	nop
 800412c:	08004ee8 	.word	0x08004ee8
 8004130:	08004cb5 	.word	0x08004cb5
 8004134:	08004d98 	.word	0x08004d98

08004138 <__lshift>:
 8004138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800413c:	460c      	mov	r4, r1
 800413e:	4607      	mov	r7, r0
 8004140:	4691      	mov	r9, r2
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	6849      	ldr	r1, [r1, #4]
 8004146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800414a:	68a3      	ldr	r3, [r4, #8]
 800414c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004150:	f108 0601 	add.w	r6, r8, #1
 8004154:	42b3      	cmp	r3, r6
 8004156:	db0b      	blt.n	8004170 <__lshift+0x38>
 8004158:	4638      	mov	r0, r7
 800415a:	f7ff fddf 	bl	8003d1c <_Balloc>
 800415e:	4605      	mov	r5, r0
 8004160:	b948      	cbnz	r0, 8004176 <__lshift+0x3e>
 8004162:	4602      	mov	r2, r0
 8004164:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <__lshift+0xd8>)
 800416a:	482a      	ldr	r0, [pc, #168]	; (8004214 <__lshift+0xdc>)
 800416c:	f000 fc06 	bl	800497c <__assert_func>
 8004170:	3101      	adds	r1, #1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	e7ee      	b.n	8004154 <__lshift+0x1c>
 8004176:	2300      	movs	r3, #0
 8004178:	f100 0114 	add.w	r1, r0, #20
 800417c:	f100 0210 	add.w	r2, r0, #16
 8004180:	4618      	mov	r0, r3
 8004182:	4553      	cmp	r3, sl
 8004184:	db37      	blt.n	80041f6 <__lshift+0xbe>
 8004186:	6920      	ldr	r0, [r4, #16]
 8004188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800418c:	f104 0314 	add.w	r3, r4, #20
 8004190:	f019 091f 	ands.w	r9, r9, #31
 8004194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004198:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800419c:	d02f      	beq.n	80041fe <__lshift+0xc6>
 800419e:	468a      	mov	sl, r1
 80041a0:	f04f 0c00 	mov.w	ip, #0
 80041a4:	f1c9 0e20 	rsb	lr, r9, #32
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	fa02 f209 	lsl.w	r2, r2, r9
 80041ae:	ea42 020c 	orr.w	r2, r2, ip
 80041b2:	f84a 2b04 	str.w	r2, [sl], #4
 80041b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ba:	4298      	cmp	r0, r3
 80041bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80041c0:	d8f2      	bhi.n	80041a8 <__lshift+0x70>
 80041c2:	1b03      	subs	r3, r0, r4
 80041c4:	3b15      	subs	r3, #21
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	3304      	adds	r3, #4
 80041cc:	f104 0215 	add.w	r2, r4, #21
 80041d0:	4290      	cmp	r0, r2
 80041d2:	bf38      	it	cc
 80041d4:	2304      	movcc	r3, #4
 80041d6:	f841 c003 	str.w	ip, [r1, r3]
 80041da:	f1bc 0f00 	cmp.w	ip, #0
 80041de:	d001      	beq.n	80041e4 <__lshift+0xac>
 80041e0:	f108 0602 	add.w	r6, r8, #2
 80041e4:	3e01      	subs	r6, #1
 80041e6:	4638      	mov	r0, r7
 80041e8:	4621      	mov	r1, r4
 80041ea:	612e      	str	r6, [r5, #16]
 80041ec:	f7ff fdd6 	bl	8003d9c <_Bfree>
 80041f0:	4628      	mov	r0, r5
 80041f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80041fa:	3301      	adds	r3, #1
 80041fc:	e7c1      	b.n	8004182 <__lshift+0x4a>
 80041fe:	3904      	subs	r1, #4
 8004200:	f853 2b04 	ldr.w	r2, [r3], #4
 8004204:	4298      	cmp	r0, r3
 8004206:	f841 2f04 	str.w	r2, [r1, #4]!
 800420a:	d8f9      	bhi.n	8004200 <__lshift+0xc8>
 800420c:	e7ea      	b.n	80041e4 <__lshift+0xac>
 800420e:	bf00      	nop
 8004210:	08004d27 	.word	0x08004d27
 8004214:	08004d98 	.word	0x08004d98

08004218 <__mcmp>:
 8004218:	4603      	mov	r3, r0
 800421a:	690a      	ldr	r2, [r1, #16]
 800421c:	6900      	ldr	r0, [r0, #16]
 800421e:	b530      	push	{r4, r5, lr}
 8004220:	1a80      	subs	r0, r0, r2
 8004222:	d10d      	bne.n	8004240 <__mcmp+0x28>
 8004224:	3314      	adds	r3, #20
 8004226:	3114      	adds	r1, #20
 8004228:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800422c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004230:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004234:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004238:	4295      	cmp	r5, r2
 800423a:	d002      	beq.n	8004242 <__mcmp+0x2a>
 800423c:	d304      	bcc.n	8004248 <__mcmp+0x30>
 800423e:	2001      	movs	r0, #1
 8004240:	bd30      	pop	{r4, r5, pc}
 8004242:	42a3      	cmp	r3, r4
 8004244:	d3f4      	bcc.n	8004230 <__mcmp+0x18>
 8004246:	e7fb      	b.n	8004240 <__mcmp+0x28>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	e7f8      	b.n	8004240 <__mcmp+0x28>
	...

08004250 <__mdiff>:
 8004250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	460d      	mov	r5, r1
 8004256:	4607      	mov	r7, r0
 8004258:	4611      	mov	r1, r2
 800425a:	4628      	mov	r0, r5
 800425c:	4614      	mov	r4, r2
 800425e:	f7ff ffdb 	bl	8004218 <__mcmp>
 8004262:	1e06      	subs	r6, r0, #0
 8004264:	d111      	bne.n	800428a <__mdiff+0x3a>
 8004266:	4631      	mov	r1, r6
 8004268:	4638      	mov	r0, r7
 800426a:	f7ff fd57 	bl	8003d1c <_Balloc>
 800426e:	4602      	mov	r2, r0
 8004270:	b928      	cbnz	r0, 800427e <__mdiff+0x2e>
 8004272:	f240 2132 	movw	r1, #562	; 0x232
 8004276:	4b3a      	ldr	r3, [pc, #232]	; (8004360 <__mdiff+0x110>)
 8004278:	483a      	ldr	r0, [pc, #232]	; (8004364 <__mdiff+0x114>)
 800427a:	f000 fb7f 	bl	800497c <__assert_func>
 800427e:	2301      	movs	r3, #1
 8004280:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004284:	4610      	mov	r0, r2
 8004286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	bfa4      	itt	ge
 800428c:	4623      	movge	r3, r4
 800428e:	462c      	movge	r4, r5
 8004290:	4638      	mov	r0, r7
 8004292:	6861      	ldr	r1, [r4, #4]
 8004294:	bfa6      	itte	ge
 8004296:	461d      	movge	r5, r3
 8004298:	2600      	movge	r6, #0
 800429a:	2601      	movlt	r6, #1
 800429c:	f7ff fd3e 	bl	8003d1c <_Balloc>
 80042a0:	4602      	mov	r2, r0
 80042a2:	b918      	cbnz	r0, 80042ac <__mdiff+0x5c>
 80042a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80042a8:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <__mdiff+0x110>)
 80042aa:	e7e5      	b.n	8004278 <__mdiff+0x28>
 80042ac:	f102 0814 	add.w	r8, r2, #20
 80042b0:	46c2      	mov	sl, r8
 80042b2:	f04f 0c00 	mov.w	ip, #0
 80042b6:	6927      	ldr	r7, [r4, #16]
 80042b8:	60c6      	str	r6, [r0, #12]
 80042ba:	692e      	ldr	r6, [r5, #16]
 80042bc:	f104 0014 	add.w	r0, r4, #20
 80042c0:	f105 0914 	add.w	r9, r5, #20
 80042c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80042c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80042cc:	3410      	adds	r4, #16
 80042ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80042d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80042d6:	fa1f f18b 	uxth.w	r1, fp
 80042da:	448c      	add	ip, r1
 80042dc:	b299      	uxth	r1, r3
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	ebac 0101 	sub.w	r1, ip, r1
 80042e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80042e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80042ec:	b289      	uxth	r1, r1
 80042ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80042f2:	454e      	cmp	r6, r9
 80042f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80042f8:	f84a 3b04 	str.w	r3, [sl], #4
 80042fc:	d8e7      	bhi.n	80042ce <__mdiff+0x7e>
 80042fe:	1b73      	subs	r3, r6, r5
 8004300:	3b15      	subs	r3, #21
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	3515      	adds	r5, #21
 8004308:	3304      	adds	r3, #4
 800430a:	42ae      	cmp	r6, r5
 800430c:	bf38      	it	cc
 800430e:	2304      	movcc	r3, #4
 8004310:	4418      	add	r0, r3
 8004312:	4443      	add	r3, r8
 8004314:	461e      	mov	r6, r3
 8004316:	4605      	mov	r5, r0
 8004318:	4575      	cmp	r5, lr
 800431a:	d30e      	bcc.n	800433a <__mdiff+0xea>
 800431c:	f10e 0103 	add.w	r1, lr, #3
 8004320:	1a09      	subs	r1, r1, r0
 8004322:	f021 0103 	bic.w	r1, r1, #3
 8004326:	3803      	subs	r0, #3
 8004328:	4586      	cmp	lr, r0
 800432a:	bf38      	it	cc
 800432c:	2100      	movcc	r1, #0
 800432e:	4419      	add	r1, r3
 8004330:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004334:	b18b      	cbz	r3, 800435a <__mdiff+0x10a>
 8004336:	6117      	str	r7, [r2, #16]
 8004338:	e7a4      	b.n	8004284 <__mdiff+0x34>
 800433a:	f855 8b04 	ldr.w	r8, [r5], #4
 800433e:	fa1f f188 	uxth.w	r1, r8
 8004342:	4461      	add	r1, ip
 8004344:	140c      	asrs	r4, r1, #16
 8004346:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800434a:	b289      	uxth	r1, r1
 800434c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004350:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004354:	f846 1b04 	str.w	r1, [r6], #4
 8004358:	e7de      	b.n	8004318 <__mdiff+0xc8>
 800435a:	3f01      	subs	r7, #1
 800435c:	e7e8      	b.n	8004330 <__mdiff+0xe0>
 800435e:	bf00      	nop
 8004360:	08004d27 	.word	0x08004d27
 8004364:	08004d98 	.word	0x08004d98

08004368 <__d2b>:
 8004368:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800436c:	2101      	movs	r1, #1
 800436e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004372:	4690      	mov	r8, r2
 8004374:	461d      	mov	r5, r3
 8004376:	f7ff fcd1 	bl	8003d1c <_Balloc>
 800437a:	4604      	mov	r4, r0
 800437c:	b930      	cbnz	r0, 800438c <__d2b+0x24>
 800437e:	4602      	mov	r2, r0
 8004380:	f240 310a 	movw	r1, #778	; 0x30a
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <__d2b+0xb0>)
 8004386:	4825      	ldr	r0, [pc, #148]	; (800441c <__d2b+0xb4>)
 8004388:	f000 faf8 	bl	800497c <__assert_func>
 800438c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004390:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004394:	bb2d      	cbnz	r5, 80043e2 <__d2b+0x7a>
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	f1b8 0300 	subs.w	r3, r8, #0
 800439c:	d026      	beq.n	80043ec <__d2b+0x84>
 800439e:	4668      	mov	r0, sp
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	f7ff fd83 	bl	8003eac <__lo0bits>
 80043a6:	9900      	ldr	r1, [sp, #0]
 80043a8:	b1f0      	cbz	r0, 80043e8 <__d2b+0x80>
 80043aa:	9a01      	ldr	r2, [sp, #4]
 80043ac:	f1c0 0320 	rsb	r3, r0, #32
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	430b      	orrs	r3, r1
 80043b6:	40c2      	lsrs	r2, r0
 80043b8:	6163      	str	r3, [r4, #20]
 80043ba:	9201      	str	r2, [sp, #4]
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf14      	ite	ne
 80043c2:	2102      	movne	r1, #2
 80043c4:	2101      	moveq	r1, #1
 80043c6:	61a3      	str	r3, [r4, #24]
 80043c8:	6121      	str	r1, [r4, #16]
 80043ca:	b1c5      	cbz	r5, 80043fe <__d2b+0x96>
 80043cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80043d0:	4405      	add	r5, r0
 80043d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80043d6:	603d      	str	r5, [r7, #0]
 80043d8:	6030      	str	r0, [r6, #0]
 80043da:	4620      	mov	r0, r4
 80043dc:	b002      	add	sp, #8
 80043de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e6:	e7d6      	b.n	8004396 <__d2b+0x2e>
 80043e8:	6161      	str	r1, [r4, #20]
 80043ea:	e7e7      	b.n	80043bc <__d2b+0x54>
 80043ec:	a801      	add	r0, sp, #4
 80043ee:	f7ff fd5d 	bl	8003eac <__lo0bits>
 80043f2:	2101      	movs	r1, #1
 80043f4:	9b01      	ldr	r3, [sp, #4]
 80043f6:	6121      	str	r1, [r4, #16]
 80043f8:	6163      	str	r3, [r4, #20]
 80043fa:	3020      	adds	r0, #32
 80043fc:	e7e5      	b.n	80043ca <__d2b+0x62>
 80043fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004402:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004406:	6038      	str	r0, [r7, #0]
 8004408:	6918      	ldr	r0, [r3, #16]
 800440a:	f7ff fd2f 	bl	8003e6c <__hi0bits>
 800440e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004412:	6031      	str	r1, [r6, #0]
 8004414:	e7e1      	b.n	80043da <__d2b+0x72>
 8004416:	bf00      	nop
 8004418:	08004d27 	.word	0x08004d27
 800441c:	08004d98 	.word	0x08004d98

08004420 <_calloc_r>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	fba1 5402 	umull	r5, r4, r1, r2
 8004426:	b934      	cbnz	r4, 8004436 <_calloc_r+0x16>
 8004428:	4629      	mov	r1, r5
 800442a:	f000 f875 	bl	8004518 <_malloc_r>
 800442e:	4606      	mov	r6, r0
 8004430:	b928      	cbnz	r0, 800443e <_calloc_r+0x1e>
 8004432:	4630      	mov	r0, r6
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	220c      	movs	r2, #12
 8004438:	2600      	movs	r6, #0
 800443a:	6002      	str	r2, [r0, #0]
 800443c:	e7f9      	b.n	8004432 <_calloc_r+0x12>
 800443e:	462a      	mov	r2, r5
 8004440:	4621      	mov	r1, r4
 8004442:	f7fd fdf7 	bl	8002034 <memset>
 8004446:	e7f4      	b.n	8004432 <_calloc_r+0x12>

08004448 <_free_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4605      	mov	r5, r0
 800444c:	2900      	cmp	r1, #0
 800444e:	d040      	beq.n	80044d2 <_free_r+0x8a>
 8004450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004454:	1f0c      	subs	r4, r1, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	bfb8      	it	lt
 800445a:	18e4      	addlt	r4, r4, r3
 800445c:	f000 fb14 	bl	8004a88 <__malloc_lock>
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <_free_r+0x8c>)
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	b933      	cbnz	r3, 8004474 <_free_r+0x2c>
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6014      	str	r4, [r2, #0]
 800446a:	4628      	mov	r0, r5
 800446c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004470:	f000 bb10 	b.w	8004a94 <__malloc_unlock>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d908      	bls.n	800448a <_free_r+0x42>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	1821      	adds	r1, r4, r0
 800447c:	428b      	cmp	r3, r1
 800447e:	bf01      	itttt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	1809      	addeq	r1, r1, r0
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	e7ed      	b.n	8004466 <_free_r+0x1e>
 800448a:	461a      	mov	r2, r3
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b10b      	cbz	r3, 8004494 <_free_r+0x4c>
 8004490:	42a3      	cmp	r3, r4
 8004492:	d9fa      	bls.n	800448a <_free_r+0x42>
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	1850      	adds	r0, r2, r1
 8004498:	42a0      	cmp	r0, r4
 800449a:	d10b      	bne.n	80044b4 <_free_r+0x6c>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	4401      	add	r1, r0
 80044a0:	1850      	adds	r0, r2, r1
 80044a2:	4283      	cmp	r3, r0
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	d1e0      	bne.n	800446a <_free_r+0x22>
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4401      	add	r1, r0
 80044ae:	6011      	str	r1, [r2, #0]
 80044b0:	6053      	str	r3, [r2, #4]
 80044b2:	e7da      	b.n	800446a <_free_r+0x22>
 80044b4:	d902      	bls.n	80044bc <_free_r+0x74>
 80044b6:	230c      	movs	r3, #12
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	e7d6      	b.n	800446a <_free_r+0x22>
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	1821      	adds	r1, r4, r0
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf01      	itttt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	1809      	addeq	r1, r1, r0
 80044ca:	6021      	streq	r1, [r4, #0]
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	6054      	str	r4, [r2, #4]
 80044d0:	e7cb      	b.n	800446a <_free_r+0x22>
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	20000244 	.word	0x20000244

080044d8 <sbrk_aligned>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4e0e      	ldr	r6, [pc, #56]	; (8004514 <sbrk_aligned+0x3c>)
 80044dc:	460c      	mov	r4, r1
 80044de:	6831      	ldr	r1, [r6, #0]
 80044e0:	4605      	mov	r5, r0
 80044e2:	b911      	cbnz	r1, 80044ea <sbrk_aligned+0x12>
 80044e4:	f000 f9e4 	bl	80048b0 <_sbrk_r>
 80044e8:	6030      	str	r0, [r6, #0]
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f9df 	bl	80048b0 <_sbrk_r>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d00a      	beq.n	800450c <sbrk_aligned+0x34>
 80044f6:	1cc4      	adds	r4, r0, #3
 80044f8:	f024 0403 	bic.w	r4, r4, #3
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d007      	beq.n	8004510 <sbrk_aligned+0x38>
 8004500:	1a21      	subs	r1, r4, r0
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f9d4 	bl	80048b0 <_sbrk_r>
 8004508:	3001      	adds	r0, #1
 800450a:	d101      	bne.n	8004510 <sbrk_aligned+0x38>
 800450c:	f04f 34ff 	mov.w	r4, #4294967295
 8004510:	4620      	mov	r0, r4
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	20000248 	.word	0x20000248

08004518 <_malloc_r>:
 8004518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451c:	1ccd      	adds	r5, r1, #3
 800451e:	f025 0503 	bic.w	r5, r5, #3
 8004522:	3508      	adds	r5, #8
 8004524:	2d0c      	cmp	r5, #12
 8004526:	bf38      	it	cc
 8004528:	250c      	movcc	r5, #12
 800452a:	2d00      	cmp	r5, #0
 800452c:	4607      	mov	r7, r0
 800452e:	db01      	blt.n	8004534 <_malloc_r+0x1c>
 8004530:	42a9      	cmp	r1, r5
 8004532:	d905      	bls.n	8004540 <_malloc_r+0x28>
 8004534:	230c      	movs	r3, #12
 8004536:	2600      	movs	r6, #0
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4630      	mov	r0, r6
 800453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004540:	4e2e      	ldr	r6, [pc, #184]	; (80045fc <_malloc_r+0xe4>)
 8004542:	f000 faa1 	bl	8004a88 <__malloc_lock>
 8004546:	6833      	ldr	r3, [r6, #0]
 8004548:	461c      	mov	r4, r3
 800454a:	bb34      	cbnz	r4, 800459a <_malloc_r+0x82>
 800454c:	4629      	mov	r1, r5
 800454e:	4638      	mov	r0, r7
 8004550:	f7ff ffc2 	bl	80044d8 <sbrk_aligned>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	4604      	mov	r4, r0
 8004558:	d14d      	bne.n	80045f6 <_malloc_r+0xde>
 800455a:	6834      	ldr	r4, [r6, #0]
 800455c:	4626      	mov	r6, r4
 800455e:	2e00      	cmp	r6, #0
 8004560:	d140      	bne.n	80045e4 <_malloc_r+0xcc>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	4631      	mov	r1, r6
 8004566:	4638      	mov	r0, r7
 8004568:	eb04 0803 	add.w	r8, r4, r3
 800456c:	f000 f9a0 	bl	80048b0 <_sbrk_r>
 8004570:	4580      	cmp	r8, r0
 8004572:	d13a      	bne.n	80045ea <_malloc_r+0xd2>
 8004574:	6821      	ldr	r1, [r4, #0]
 8004576:	3503      	adds	r5, #3
 8004578:	1a6d      	subs	r5, r5, r1
 800457a:	f025 0503 	bic.w	r5, r5, #3
 800457e:	3508      	adds	r5, #8
 8004580:	2d0c      	cmp	r5, #12
 8004582:	bf38      	it	cc
 8004584:	250c      	movcc	r5, #12
 8004586:	4638      	mov	r0, r7
 8004588:	4629      	mov	r1, r5
 800458a:	f7ff ffa5 	bl	80044d8 <sbrk_aligned>
 800458e:	3001      	adds	r0, #1
 8004590:	d02b      	beq.n	80045ea <_malloc_r+0xd2>
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	442b      	add	r3, r5
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	e00e      	b.n	80045b8 <_malloc_r+0xa0>
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	1b52      	subs	r2, r2, r5
 800459e:	d41e      	bmi.n	80045de <_malloc_r+0xc6>
 80045a0:	2a0b      	cmp	r2, #11
 80045a2:	d916      	bls.n	80045d2 <_malloc_r+0xba>
 80045a4:	1961      	adds	r1, r4, r5
 80045a6:	42a3      	cmp	r3, r4
 80045a8:	6025      	str	r5, [r4, #0]
 80045aa:	bf18      	it	ne
 80045ac:	6059      	strne	r1, [r3, #4]
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	bf08      	it	eq
 80045b2:	6031      	streq	r1, [r6, #0]
 80045b4:	5162      	str	r2, [r4, r5]
 80045b6:	604b      	str	r3, [r1, #4]
 80045b8:	4638      	mov	r0, r7
 80045ba:	f104 060b 	add.w	r6, r4, #11
 80045be:	f000 fa69 	bl	8004a94 <__malloc_unlock>
 80045c2:	f026 0607 	bic.w	r6, r6, #7
 80045c6:	1d23      	adds	r3, r4, #4
 80045c8:	1af2      	subs	r2, r6, r3
 80045ca:	d0b6      	beq.n	800453a <_malloc_r+0x22>
 80045cc:	1b9b      	subs	r3, r3, r6
 80045ce:	50a3      	str	r3, [r4, r2]
 80045d0:	e7b3      	b.n	800453a <_malloc_r+0x22>
 80045d2:	6862      	ldr	r2, [r4, #4]
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	bf0c      	ite	eq
 80045d8:	6032      	streq	r2, [r6, #0]
 80045da:	605a      	strne	r2, [r3, #4]
 80045dc:	e7ec      	b.n	80045b8 <_malloc_r+0xa0>
 80045de:	4623      	mov	r3, r4
 80045e0:	6864      	ldr	r4, [r4, #4]
 80045e2:	e7b2      	b.n	800454a <_malloc_r+0x32>
 80045e4:	4634      	mov	r4, r6
 80045e6:	6876      	ldr	r6, [r6, #4]
 80045e8:	e7b9      	b.n	800455e <_malloc_r+0x46>
 80045ea:	230c      	movs	r3, #12
 80045ec:	4638      	mov	r0, r7
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	f000 fa50 	bl	8004a94 <__malloc_unlock>
 80045f4:	e7a1      	b.n	800453a <_malloc_r+0x22>
 80045f6:	6025      	str	r5, [r4, #0]
 80045f8:	e7de      	b.n	80045b8 <_malloc_r+0xa0>
 80045fa:	bf00      	nop
 80045fc:	20000244 	.word	0x20000244

08004600 <__sfputc_r>:
 8004600:	6893      	ldr	r3, [r2, #8]
 8004602:	b410      	push	{r4}
 8004604:	3b01      	subs	r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	6093      	str	r3, [r2, #8]
 800460a:	da07      	bge.n	800461c <__sfputc_r+0x1c>
 800460c:	6994      	ldr	r4, [r2, #24]
 800460e:	42a3      	cmp	r3, r4
 8004610:	db01      	blt.n	8004616 <__sfputc_r+0x16>
 8004612:	290a      	cmp	r1, #10
 8004614:	d102      	bne.n	800461c <__sfputc_r+0x1c>
 8004616:	bc10      	pop	{r4}
 8004618:	f7fe ba02 	b.w	8002a20 <__swbuf_r>
 800461c:	6813      	ldr	r3, [r2, #0]
 800461e:	1c58      	adds	r0, r3, #1
 8004620:	6010      	str	r0, [r2, #0]
 8004622:	7019      	strb	r1, [r3, #0]
 8004624:	4608      	mov	r0, r1
 8004626:	bc10      	pop	{r4}
 8004628:	4770      	bx	lr

0800462a <__sfputs_r>:
 800462a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462c:	4606      	mov	r6, r0
 800462e:	460f      	mov	r7, r1
 8004630:	4614      	mov	r4, r2
 8004632:	18d5      	adds	r5, r2, r3
 8004634:	42ac      	cmp	r4, r5
 8004636:	d101      	bne.n	800463c <__sfputs_r+0x12>
 8004638:	2000      	movs	r0, #0
 800463a:	e007      	b.n	800464c <__sfputs_r+0x22>
 800463c:	463a      	mov	r2, r7
 800463e:	4630      	mov	r0, r6
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	f7ff ffdc 	bl	8004600 <__sfputc_r>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d1f3      	bne.n	8004634 <__sfputs_r+0xa>
 800464c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004650 <_vfiprintf_r>:
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	460d      	mov	r5, r1
 8004656:	4614      	mov	r4, r2
 8004658:	4698      	mov	r8, r3
 800465a:	4606      	mov	r6, r0
 800465c:	b09d      	sub	sp, #116	; 0x74
 800465e:	b118      	cbz	r0, 8004668 <_vfiprintf_r+0x18>
 8004660:	6983      	ldr	r3, [r0, #24]
 8004662:	b90b      	cbnz	r3, 8004668 <_vfiprintf_r+0x18>
 8004664:	f7ff fa2c 	bl	8003ac0 <__sinit>
 8004668:	4b89      	ldr	r3, [pc, #548]	; (8004890 <_vfiprintf_r+0x240>)
 800466a:	429d      	cmp	r5, r3
 800466c:	d11b      	bne.n	80046a6 <_vfiprintf_r+0x56>
 800466e:	6875      	ldr	r5, [r6, #4]
 8004670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004672:	07d9      	lsls	r1, r3, #31
 8004674:	d405      	bmi.n	8004682 <_vfiprintf_r+0x32>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	059a      	lsls	r2, r3, #22
 800467a:	d402      	bmi.n	8004682 <_vfiprintf_r+0x32>
 800467c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800467e:	f7ff fac2 	bl	8003c06 <__retarget_lock_acquire_recursive>
 8004682:	89ab      	ldrh	r3, [r5, #12]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	d501      	bpl.n	800468c <_vfiprintf_r+0x3c>
 8004688:	692b      	ldr	r3, [r5, #16]
 800468a:	b9eb      	cbnz	r3, 80046c8 <_vfiprintf_r+0x78>
 800468c:	4629      	mov	r1, r5
 800468e:	4630      	mov	r0, r6
 8004690:	f7fe fa18 	bl	8002ac4 <__swsetup_r>
 8004694:	b1c0      	cbz	r0, 80046c8 <_vfiprintf_r+0x78>
 8004696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004698:	07dc      	lsls	r4, r3, #31
 800469a:	d50e      	bpl.n	80046ba <_vfiprintf_r+0x6a>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	b01d      	add	sp, #116	; 0x74
 80046a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a6:	4b7b      	ldr	r3, [pc, #492]	; (8004894 <_vfiprintf_r+0x244>)
 80046a8:	429d      	cmp	r5, r3
 80046aa:	d101      	bne.n	80046b0 <_vfiprintf_r+0x60>
 80046ac:	68b5      	ldr	r5, [r6, #8]
 80046ae:	e7df      	b.n	8004670 <_vfiprintf_r+0x20>
 80046b0:	4b79      	ldr	r3, [pc, #484]	; (8004898 <_vfiprintf_r+0x248>)
 80046b2:	429d      	cmp	r5, r3
 80046b4:	bf08      	it	eq
 80046b6:	68f5      	ldreq	r5, [r6, #12]
 80046b8:	e7da      	b.n	8004670 <_vfiprintf_r+0x20>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	0598      	lsls	r0, r3, #22
 80046be:	d4ed      	bmi.n	800469c <_vfiprintf_r+0x4c>
 80046c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c2:	f7ff faa1 	bl	8003c08 <__retarget_lock_release_recursive>
 80046c6:	e7e9      	b.n	800469c <_vfiprintf_r+0x4c>
 80046c8:	2300      	movs	r3, #0
 80046ca:	9309      	str	r3, [sp, #36]	; 0x24
 80046cc:	2320      	movs	r3, #32
 80046ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046d2:	2330      	movs	r3, #48	; 0x30
 80046d4:	f04f 0901 	mov.w	r9, #1
 80046d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800489c <_vfiprintf_r+0x24c>
 80046e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046e4:	4623      	mov	r3, r4
 80046e6:	469a      	mov	sl, r3
 80046e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ec:	b10a      	cbz	r2, 80046f2 <_vfiprintf_r+0xa2>
 80046ee:	2a25      	cmp	r2, #37	; 0x25
 80046f0:	d1f9      	bne.n	80046e6 <_vfiprintf_r+0x96>
 80046f2:	ebba 0b04 	subs.w	fp, sl, r4
 80046f6:	d00b      	beq.n	8004710 <_vfiprintf_r+0xc0>
 80046f8:	465b      	mov	r3, fp
 80046fa:	4622      	mov	r2, r4
 80046fc:	4629      	mov	r1, r5
 80046fe:	4630      	mov	r0, r6
 8004700:	f7ff ff93 	bl	800462a <__sfputs_r>
 8004704:	3001      	adds	r0, #1
 8004706:	f000 80aa 	beq.w	800485e <_vfiprintf_r+0x20e>
 800470a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800470c:	445a      	add	r2, fp
 800470e:	9209      	str	r2, [sp, #36]	; 0x24
 8004710:	f89a 3000 	ldrb.w	r3, [sl]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a2 	beq.w	800485e <_vfiprintf_r+0x20e>
 800471a:	2300      	movs	r3, #0
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004724:	f10a 0a01 	add.w	sl, sl, #1
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	9307      	str	r3, [sp, #28]
 800472c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004730:	931a      	str	r3, [sp, #104]	; 0x68
 8004732:	4654      	mov	r4, sl
 8004734:	2205      	movs	r2, #5
 8004736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473a:	4858      	ldr	r0, [pc, #352]	; (800489c <_vfiprintf_r+0x24c>)
 800473c:	f7ff fad2 	bl	8003ce4 <memchr>
 8004740:	9a04      	ldr	r2, [sp, #16]
 8004742:	b9d8      	cbnz	r0, 800477c <_vfiprintf_r+0x12c>
 8004744:	06d1      	lsls	r1, r2, #27
 8004746:	bf44      	itt	mi
 8004748:	2320      	movmi	r3, #32
 800474a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800474e:	0713      	lsls	r3, r2, #28
 8004750:	bf44      	itt	mi
 8004752:	232b      	movmi	r3, #43	; 0x2b
 8004754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004758:	f89a 3000 	ldrb.w	r3, [sl]
 800475c:	2b2a      	cmp	r3, #42	; 0x2a
 800475e:	d015      	beq.n	800478c <_vfiprintf_r+0x13c>
 8004760:	4654      	mov	r4, sl
 8004762:	2000      	movs	r0, #0
 8004764:	f04f 0c0a 	mov.w	ip, #10
 8004768:	9a07      	ldr	r2, [sp, #28]
 800476a:	4621      	mov	r1, r4
 800476c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004770:	3b30      	subs	r3, #48	; 0x30
 8004772:	2b09      	cmp	r3, #9
 8004774:	d94e      	bls.n	8004814 <_vfiprintf_r+0x1c4>
 8004776:	b1b0      	cbz	r0, 80047a6 <_vfiprintf_r+0x156>
 8004778:	9207      	str	r2, [sp, #28]
 800477a:	e014      	b.n	80047a6 <_vfiprintf_r+0x156>
 800477c:	eba0 0308 	sub.w	r3, r0, r8
 8004780:	fa09 f303 	lsl.w	r3, r9, r3
 8004784:	4313      	orrs	r3, r2
 8004786:	46a2      	mov	sl, r4
 8004788:	9304      	str	r3, [sp, #16]
 800478a:	e7d2      	b.n	8004732 <_vfiprintf_r+0xe2>
 800478c:	9b03      	ldr	r3, [sp, #12]
 800478e:	1d19      	adds	r1, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	9103      	str	r1, [sp, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	bfbb      	ittet	lt
 8004798:	425b      	neglt	r3, r3
 800479a:	f042 0202 	orrlt.w	r2, r2, #2
 800479e:	9307      	strge	r3, [sp, #28]
 80047a0:	9307      	strlt	r3, [sp, #28]
 80047a2:	bfb8      	it	lt
 80047a4:	9204      	strlt	r2, [sp, #16]
 80047a6:	7823      	ldrb	r3, [r4, #0]
 80047a8:	2b2e      	cmp	r3, #46	; 0x2e
 80047aa:	d10c      	bne.n	80047c6 <_vfiprintf_r+0x176>
 80047ac:	7863      	ldrb	r3, [r4, #1]
 80047ae:	2b2a      	cmp	r3, #42	; 0x2a
 80047b0:	d135      	bne.n	800481e <_vfiprintf_r+0x1ce>
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	3402      	adds	r4, #2
 80047b6:	1d1a      	adds	r2, r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	9203      	str	r2, [sp, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bfb8      	it	lt
 80047c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80047c4:	9305      	str	r3, [sp, #20]
 80047c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80048a0 <_vfiprintf_r+0x250>
 80047ca:	2203      	movs	r2, #3
 80047cc:	4650      	mov	r0, sl
 80047ce:	7821      	ldrb	r1, [r4, #0]
 80047d0:	f7ff fa88 	bl	8003ce4 <memchr>
 80047d4:	b140      	cbz	r0, 80047e8 <_vfiprintf_r+0x198>
 80047d6:	2340      	movs	r3, #64	; 0x40
 80047d8:	eba0 000a 	sub.w	r0, r0, sl
 80047dc:	fa03 f000 	lsl.w	r0, r3, r0
 80047e0:	9b04      	ldr	r3, [sp, #16]
 80047e2:	3401      	adds	r4, #1
 80047e4:	4303      	orrs	r3, r0
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ec:	2206      	movs	r2, #6
 80047ee:	482d      	ldr	r0, [pc, #180]	; (80048a4 <_vfiprintf_r+0x254>)
 80047f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047f4:	f7ff fa76 	bl	8003ce4 <memchr>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d03f      	beq.n	800487c <_vfiprintf_r+0x22c>
 80047fc:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <_vfiprintf_r+0x258>)
 80047fe:	bb1b      	cbnz	r3, 8004848 <_vfiprintf_r+0x1f8>
 8004800:	9b03      	ldr	r3, [sp, #12]
 8004802:	3307      	adds	r3, #7
 8004804:	f023 0307 	bic.w	r3, r3, #7
 8004808:	3308      	adds	r3, #8
 800480a:	9303      	str	r3, [sp, #12]
 800480c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800480e:	443b      	add	r3, r7
 8004810:	9309      	str	r3, [sp, #36]	; 0x24
 8004812:	e767      	b.n	80046e4 <_vfiprintf_r+0x94>
 8004814:	460c      	mov	r4, r1
 8004816:	2001      	movs	r0, #1
 8004818:	fb0c 3202 	mla	r2, ip, r2, r3
 800481c:	e7a5      	b.n	800476a <_vfiprintf_r+0x11a>
 800481e:	2300      	movs	r3, #0
 8004820:	f04f 0c0a 	mov.w	ip, #10
 8004824:	4619      	mov	r1, r3
 8004826:	3401      	adds	r4, #1
 8004828:	9305      	str	r3, [sp, #20]
 800482a:	4620      	mov	r0, r4
 800482c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004830:	3a30      	subs	r2, #48	; 0x30
 8004832:	2a09      	cmp	r2, #9
 8004834:	d903      	bls.n	800483e <_vfiprintf_r+0x1ee>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0c5      	beq.n	80047c6 <_vfiprintf_r+0x176>
 800483a:	9105      	str	r1, [sp, #20]
 800483c:	e7c3      	b.n	80047c6 <_vfiprintf_r+0x176>
 800483e:	4604      	mov	r4, r0
 8004840:	2301      	movs	r3, #1
 8004842:	fb0c 2101 	mla	r1, ip, r1, r2
 8004846:	e7f0      	b.n	800482a <_vfiprintf_r+0x1da>
 8004848:	ab03      	add	r3, sp, #12
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	462a      	mov	r2, r5
 800484e:	4630      	mov	r0, r6
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <_vfiprintf_r+0x25c>)
 8004852:	a904      	add	r1, sp, #16
 8004854:	f7fd fc94 	bl	8002180 <_printf_float>
 8004858:	4607      	mov	r7, r0
 800485a:	1c78      	adds	r0, r7, #1
 800485c:	d1d6      	bne.n	800480c <_vfiprintf_r+0x1bc>
 800485e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004860:	07d9      	lsls	r1, r3, #31
 8004862:	d405      	bmi.n	8004870 <_vfiprintf_r+0x220>
 8004864:	89ab      	ldrh	r3, [r5, #12]
 8004866:	059a      	lsls	r2, r3, #22
 8004868:	d402      	bmi.n	8004870 <_vfiprintf_r+0x220>
 800486a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800486c:	f7ff f9cc 	bl	8003c08 <__retarget_lock_release_recursive>
 8004870:	89ab      	ldrh	r3, [r5, #12]
 8004872:	065b      	lsls	r3, r3, #25
 8004874:	f53f af12 	bmi.w	800469c <_vfiprintf_r+0x4c>
 8004878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800487a:	e711      	b.n	80046a0 <_vfiprintf_r+0x50>
 800487c:	ab03      	add	r3, sp, #12
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	462a      	mov	r2, r5
 8004882:	4630      	mov	r0, r6
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <_vfiprintf_r+0x25c>)
 8004886:	a904      	add	r1, sp, #16
 8004888:	f7fd ff16 	bl	80026b8 <_printf_i>
 800488c:	e7e4      	b.n	8004858 <_vfiprintf_r+0x208>
 800488e:	bf00      	nop
 8004890:	08004d58 	.word	0x08004d58
 8004894:	08004d78 	.word	0x08004d78
 8004898:	08004d38 	.word	0x08004d38
 800489c:	08004ef4 	.word	0x08004ef4
 80048a0:	08004efa 	.word	0x08004efa
 80048a4:	08004efe 	.word	0x08004efe
 80048a8:	08002181 	.word	0x08002181
 80048ac:	0800462b 	.word	0x0800462b

080048b0 <_sbrk_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	2300      	movs	r3, #0
 80048b4:	4d05      	ldr	r5, [pc, #20]	; (80048cc <_sbrk_r+0x1c>)
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f000 f992 	bl	8004be4 <_sbrk>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_sbrk_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_sbrk_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	2000024c 	.word	0x2000024c

080048d0 <__sread>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	460c      	mov	r4, r1
 80048d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d8:	f000 f8e2 	bl	8004aa0 <_read_r>
 80048dc:	2800      	cmp	r0, #0
 80048de:	bfab      	itete	ge
 80048e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048e2:	89a3      	ldrhlt	r3, [r4, #12]
 80048e4:	181b      	addge	r3, r3, r0
 80048e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ea:	bfac      	ite	ge
 80048ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80048ee:	81a3      	strhlt	r3, [r4, #12]
 80048f0:	bd10      	pop	{r4, pc}

080048f2 <__swrite>:
 80048f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	461f      	mov	r7, r3
 80048f8:	898b      	ldrh	r3, [r1, #12]
 80048fa:	4605      	mov	r5, r0
 80048fc:	05db      	lsls	r3, r3, #23
 80048fe:	460c      	mov	r4, r1
 8004900:	4616      	mov	r6, r2
 8004902:	d505      	bpl.n	8004910 <__swrite+0x1e>
 8004904:	2302      	movs	r3, #2
 8004906:	2200      	movs	r2, #0
 8004908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490c:	f000 f898 	bl	8004a40 <_lseek_r>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	4632      	mov	r2, r6
 8004914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	4628      	mov	r0, r5
 800491c:	463b      	mov	r3, r7
 800491e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	f000 b817 	b.w	8004958 <_write_r>

0800492a <__sseek>:
 800492a:	b510      	push	{r4, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004932:	f000 f885 	bl	8004a40 <_lseek_r>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	bf15      	itete	ne
 800493c:	6560      	strne	r0, [r4, #84]	; 0x54
 800493e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004946:	81a3      	strheq	r3, [r4, #12]
 8004948:	bf18      	it	ne
 800494a:	81a3      	strhne	r3, [r4, #12]
 800494c:	bd10      	pop	{r4, pc}

0800494e <__sclose>:
 800494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004952:	f000 b831 	b.w	80049b8 <_close_r>
	...

08004958 <_write_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	2200      	movs	r2, #0
 8004962:	4d05      	ldr	r5, [pc, #20]	; (8004978 <_write_r+0x20>)
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f7fc f8d6 	bl	8000b18 <_write>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_write_r+0x1e>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_write_r+0x1e>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	2000024c 	.word	0x2000024c

0800497c <__assert_func>:
 800497c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800497e:	4614      	mov	r4, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <__assert_func+0x2c>)
 8004984:	4605      	mov	r5, r0
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68d8      	ldr	r0, [r3, #12]
 800498a:	b14c      	cbz	r4, 80049a0 <__assert_func+0x24>
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <__assert_func+0x30>)
 800498e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004992:	9100      	str	r1, [sp, #0]
 8004994:	462b      	mov	r3, r5
 8004996:	4906      	ldr	r1, [pc, #24]	; (80049b0 <__assert_func+0x34>)
 8004998:	f000 f81e 	bl	80049d8 <fiprintf>
 800499c:	f000 f89f 	bl	8004ade <abort>
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <__assert_func+0x38>)
 80049a2:	461c      	mov	r4, r3
 80049a4:	e7f3      	b.n	800498e <__assert_func+0x12>
 80049a6:	bf00      	nop
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	08004f05 	.word	0x08004f05
 80049b0:	08004f12 	.word	0x08004f12
 80049b4:	08004f40 	.word	0x08004f40

080049b8 <_close_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	2300      	movs	r3, #0
 80049bc:	4d05      	ldr	r5, [pc, #20]	; (80049d4 <_close_r+0x1c>)
 80049be:	4604      	mov	r4, r0
 80049c0:	4608      	mov	r0, r1
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	f000 f8d6 	bl	8004b74 <_close>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d102      	bne.n	80049d2 <_close_r+0x1a>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	b103      	cbz	r3, 80049d2 <_close_r+0x1a>
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	2000024c 	.word	0x2000024c

080049d8 <fiprintf>:
 80049d8:	b40e      	push	{r1, r2, r3}
 80049da:	b503      	push	{r0, r1, lr}
 80049dc:	4601      	mov	r1, r0
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	4805      	ldr	r0, [pc, #20]	; (80049f8 <fiprintf+0x20>)
 80049e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e6:	6800      	ldr	r0, [r0, #0]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	f7ff fe31 	bl	8004650 <_vfiprintf_r>
 80049ee:	b002      	add	sp, #8
 80049f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f4:	b003      	add	sp, #12
 80049f6:	4770      	bx	lr
 80049f8:	2000000c 	.word	0x2000000c

080049fc <_fstat_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	2300      	movs	r3, #0
 8004a00:	4d06      	ldr	r5, [pc, #24]	; (8004a1c <_fstat_r+0x20>)
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	f000 f8bb 	bl	8004b84 <_fstat>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d102      	bne.n	8004a18 <_fstat_r+0x1c>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	b103      	cbz	r3, 8004a18 <_fstat_r+0x1c>
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000024c 	.word	0x2000024c

08004a20 <_isatty_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	2300      	movs	r3, #0
 8004a24:	4d05      	ldr	r5, [pc, #20]	; (8004a3c <_isatty_r+0x1c>)
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f000 f8ba 	bl	8004ba4 <_isatty>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_isatty_r+0x1a>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_isatty_r+0x1a>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	2000024c 	.word	0x2000024c

08004a40 <_lseek_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4d05      	ldr	r5, [pc, #20]	; (8004a60 <_lseek_r+0x20>)
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f000 f8b8 	bl	8004bc4 <_lseek>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_lseek_r+0x1e>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_lseek_r+0x1e>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	2000024c 	.word	0x2000024c

08004a64 <__ascii_mbtowc>:
 8004a64:	b082      	sub	sp, #8
 8004a66:	b901      	cbnz	r1, 8004a6a <__ascii_mbtowc+0x6>
 8004a68:	a901      	add	r1, sp, #4
 8004a6a:	b142      	cbz	r2, 8004a7e <__ascii_mbtowc+0x1a>
 8004a6c:	b14b      	cbz	r3, 8004a82 <__ascii_mbtowc+0x1e>
 8004a6e:	7813      	ldrb	r3, [r2, #0]
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	1e10      	subs	r0, r2, #0
 8004a76:	bf18      	it	ne
 8004a78:	2001      	movne	r0, #1
 8004a7a:	b002      	add	sp, #8
 8004a7c:	4770      	bx	lr
 8004a7e:	4610      	mov	r0, r2
 8004a80:	e7fb      	b.n	8004a7a <__ascii_mbtowc+0x16>
 8004a82:	f06f 0001 	mvn.w	r0, #1
 8004a86:	e7f8      	b.n	8004a7a <__ascii_mbtowc+0x16>

08004a88 <__malloc_lock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__malloc_lock+0x8>)
 8004a8a:	f7ff b8bc 	b.w	8003c06 <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000240 	.word	0x20000240

08004a94 <__malloc_unlock>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__malloc_unlock+0x8>)
 8004a96:	f7ff b8b7 	b.w	8003c08 <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000240 	.word	0x20000240

08004aa0 <_read_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4d05      	ldr	r5, [pc, #20]	; (8004ac0 <_read_r+0x20>)
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 f890 	bl	8004bd4 <_read>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_read_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_read_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	2000024c 	.word	0x2000024c

08004ac4 <__ascii_wctomb>:
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	b141      	cbz	r1, 8004adc <__ascii_wctomb+0x18>
 8004aca:	2aff      	cmp	r2, #255	; 0xff
 8004acc:	d904      	bls.n	8004ad8 <__ascii_wctomb+0x14>
 8004ace:	228a      	movs	r2, #138	; 0x8a
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	4770      	bx	lr
 8004ad8:	2001      	movs	r0, #1
 8004ada:	700a      	strb	r2, [r1, #0]
 8004adc:	4770      	bx	lr

08004ade <abort>:
 8004ade:	2006      	movs	r0, #6
 8004ae0:	b508      	push	{r3, lr}
 8004ae2:	f000 f82b 	bl	8004b3c <raise>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f000 f88a 	bl	8004c00 <_exit>

08004aec <_raise_r>:
 8004aec:	291f      	cmp	r1, #31
 8004aee:	b538      	push	{r3, r4, r5, lr}
 8004af0:	4604      	mov	r4, r0
 8004af2:	460d      	mov	r5, r1
 8004af4:	d904      	bls.n	8004b00 <_raise_r+0x14>
 8004af6:	2316      	movs	r3, #22
 8004af8:	6003      	str	r3, [r0, #0]
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004b02:	b112      	cbz	r2, 8004b0a <_raise_r+0x1e>
 8004b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004b08:	b94b      	cbnz	r3, 8004b1e <_raise_r+0x32>
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 f830 	bl	8004b70 <_getpid_r>
 8004b10:	462a      	mov	r2, r5
 8004b12:	4601      	mov	r1, r0
 8004b14:	4620      	mov	r0, r4
 8004b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1a:	f000 b817 	b.w	8004b4c <_kill_r>
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d00a      	beq.n	8004b38 <_raise_r+0x4c>
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	d103      	bne.n	8004b2e <_raise_r+0x42>
 8004b26:	2316      	movs	r3, #22
 8004b28:	6003      	str	r3, [r0, #0]
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	e7e7      	b.n	8004afe <_raise_r+0x12>
 8004b2e:	2400      	movs	r4, #0
 8004b30:	4628      	mov	r0, r5
 8004b32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b36:	4798      	blx	r3
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e7e0      	b.n	8004afe <_raise_r+0x12>

08004b3c <raise>:
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <raise+0xc>)
 8004b3e:	4601      	mov	r1, r0
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	f7ff bfd3 	b.w	8004aec <_raise_r>
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <_kill_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	2300      	movs	r3, #0
 8004b50:	4d06      	ldr	r5, [pc, #24]	; (8004b6c <_kill_r+0x20>)
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	f000 f82b 	bl	8004bb4 <_kill>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	d102      	bne.n	8004b68 <_kill_r+0x1c>
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	b103      	cbz	r3, 8004b68 <_kill_r+0x1c>
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000024c 	.word	0x2000024c

08004b70 <_getpid_r>:
 8004b70:	f000 b810 	b.w	8004b94 <_getpid>

08004b74 <_close>:
 8004b74:	2258      	movs	r2, #88	; 0x58
 8004b76:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <_close+0xc>)
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	4770      	bx	lr
 8004b80:	2000024c 	.word	0x2000024c

08004b84 <_fstat>:
 8004b84:	2258      	movs	r2, #88	; 0x58
 8004b86:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <_fstat+0xc>)
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	4770      	bx	lr
 8004b90:	2000024c 	.word	0x2000024c

08004b94 <_getpid>:
 8004b94:	2258      	movs	r2, #88	; 0x58
 8004b96:	4b02      	ldr	r3, [pc, #8]	; (8004ba0 <_getpid+0xc>)
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	4770      	bx	lr
 8004ba0:	2000024c 	.word	0x2000024c

08004ba4 <_isatty>:
 8004ba4:	2258      	movs	r2, #88	; 0x58
 8004ba6:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <_isatty+0xc>)
 8004ba8:	2000      	movs	r0, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	2000024c 	.word	0x2000024c

08004bb4 <_kill>:
 8004bb4:	2258      	movs	r2, #88	; 0x58
 8004bb6:	4b02      	ldr	r3, [pc, #8]	; (8004bc0 <_kill+0xc>)
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	4770      	bx	lr
 8004bc0:	2000024c 	.word	0x2000024c

08004bc4 <_lseek>:
 8004bc4:	2258      	movs	r2, #88	; 0x58
 8004bc6:	4b02      	ldr	r3, [pc, #8]	; (8004bd0 <_lseek+0xc>)
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	4770      	bx	lr
 8004bd0:	2000024c 	.word	0x2000024c

08004bd4 <_read>:
 8004bd4:	2258      	movs	r2, #88	; 0x58
 8004bd6:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <_read+0xc>)
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	4770      	bx	lr
 8004be0:	2000024c 	.word	0x2000024c

08004be4 <_sbrk>:
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <_sbrk+0x14>)
 8004be6:	4603      	mov	r3, r0
 8004be8:	6811      	ldr	r1, [r2, #0]
 8004bea:	b909      	cbnz	r1, 8004bf0 <_sbrk+0xc>
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <_sbrk+0x18>)
 8004bee:	6011      	str	r1, [r2, #0]
 8004bf0:	6810      	ldr	r0, [r2, #0]
 8004bf2:	4403      	add	r3, r0
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4770      	bx	lr
 8004bf8:	20000250 	.word	0x20000250
 8004bfc:	20000258 	.word	0x20000258

08004c00 <_exit>:
 8004c00:	e7fe      	b.n	8004c00 <_exit>
	...

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
