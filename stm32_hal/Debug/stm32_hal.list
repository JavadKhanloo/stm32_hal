
stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005ab8  08005ab8  00015ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005eec  08005eec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eec  08005eec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001dc  080060d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080060d0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078c4  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8b  00000000  00000000  00027ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  00029758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00029f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002527  00000000  00000000  0002a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b546  00000000  00000000  0002cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000779a3  00000000  00000000  000380fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000afaa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003058  00000000  00000000  000afaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000b2b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000b2bfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a9c 	.word	0x08005a9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005a9c 	.word	0x08005a9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:

//-----------------------------------------------------------------------//
// main function                                                         //
//-----------------------------------------------------------------------//
int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a8c:	f000 f8a2 	bl	8000bd4 <HAL_Init>
  // clock
  rcc_system_clock_config();
 8000a90:	f002 f91e 	bl	8002cd0 <rcc_system_clock_config>

  // uart
  uart_UART1_GPIO_config();
 8000a94:	f002 f960 	bl	8002d58 <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000a98:	f002 f990 	bl	8002dbc <uart_UART1_config>

  // led
  gpio_LED_config();
 8000a9c:	f002 f868 	bl	8002b70 <gpio_LED_config>

  // pb
  gpio_PB_config();
 8000aa0:	f002 f8a0 	bl	8002be4 <gpio_PB_config>

  //sw
  gpio_SW_config();
 8000aa4:	f002 f8ca 	bl	8002c3c <gpio_SW_config>

  // ADC
  adc_GPIO_config();
 8000aa8:	f001 ff82 	bl	80029b0 <adc_GPIO_config>



  //ADC DMA
  adc_multi_channel_config();
 8000aac:	f001 ffaa 	bl	8002a04 <adc_multi_channel_config>
  adc_dma_config();
 8000ab0:	f002 f816 	bl	8002ae0 <adc_dma_config>

  HAL_ADC_Start_DMA(&adc_1_handle, (uint32_t *)adc_value, 3);
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	4912      	ldr	r1, [pc, #72]	; (8000b00 <main+0x78>)
 8000ab8:	4812      	ldr	r0, [pc, #72]	; (8000b04 <main+0x7c>)
 8000aba:	f000 f9f9 	bl	8000eb0 <HAL_ADC_Start_DMA>

  while (1)
  {

	  if(adc_EoC_flag)
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <main+0x80>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d017      	beq.n	8000af6 <main+0x6e>
	  {
		  adc_EoC_flag = false;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <main+0x80>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
		  printf("adc values:\r\n");
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <main+0x84>)
 8000ace:	f002 fee9 	bl	80038a4 <puts>
		  printf("PA1 : %d\tPA2 : %d\tPA3 : %d\r\n", adc_value[0], adc_value[1], adc_value[2]);
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <main+0x78>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <main+0x78>)
 8000ada:	885b      	ldrh	r3, [r3, #2]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <main+0x78>)
 8000ae0:	889b      	ldrh	r3, [r3, #4]
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <main+0x88>)
 8000ae4:	f002 fe58 	bl	8003798 <iprintf>
		  gpio_LED_toggle_green();
 8000ae8:	f002 f870 	bl	8002bcc <gpio_LED_toggle_green>
		  HAL_ADC_Start_DMA(&adc_1_handle, (uint32_t *)adc_value, 3);
 8000aec:	2203      	movs	r2, #3
 8000aee:	4904      	ldr	r1, [pc, #16]	; (8000b00 <main+0x78>)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <main+0x7c>)
 8000af2:	f000 f9dd 	bl	8000eb0 <HAL_ADC_Start_DMA>
	  }

	  HAL_Delay(250);
 8000af6:	20fa      	movs	r0, #250	; 0xfa
 8000af8:	f000 f8d4 	bl	8000ca4 <HAL_Delay>
	  if(adc_EoC_flag)
 8000afc:	e7df      	b.n	8000abe <main+0x36>
 8000afe:	bf00      	nop
 8000b00:	200001fc 	.word	0x200001fc
 8000b04:	20000208 	.word	0x20000208
 8000b08:	200001f8 	.word	0x200001f8
 8000b0c:	08005ab8 	.word	0x08005ab8
 8000b10:	08005ac8 	.word	0x08005ac8

08000b14 <HAL_ADC_ConvCpltCallback>:

/*
// @brief ADC Handler
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	adc_EoC_flag = true;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_ADC_ConvCpltCallback+0x18>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	200001f8 	.word	0x200001f8

08000b30 <__io_putchar>:
//-----------------------------------------------------------------------//
int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    uint8_t c[1];
    c[0] = ch & 0x00FF;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000b3e:	f107 010c 	add.w	r1, r7, #12
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	2201      	movs	r2, #1
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <__io_putchar+0x28>)
 8000b48:	f001 fdc8 	bl	80026dc <HAL_UART_Transmit>
    return ch;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000027c 	.word	0x2000027c

08000b5c <_write>:

int _write(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e009      	b.n	8000b82 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ffda 	bl	8000b30 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	dbf1      	blt.n	8000b6e <_write+0x12>
    }
    return len;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SysTick_Handler>:

//-----------------------------------------------------------------------//
// function definition                                                   //
//-----------------------------------------------------------------------//
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b98:	f000 f868 	bl	8000c6c <HAL_IncTick>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f001 f907 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <DMA1_Channel1_IRQHandler>:
//{
//	HAL_ADC_IRQHandler(&adc_1_handle);
//}

void DMA1_Channel1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(adc_1_handle.DMA_Handle);
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <DMA1_Channel1_IRQHandler+0x14>)
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fe2b 	bl	8001814 <HAL_DMA_IRQHandler>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000208 	.word	0x20000208

08000bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 fd19 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f000 f806 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fd2b 	bl	8001686 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 fcf3 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000204 	.word	0x20000204

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000204 	.word	0x20000204

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e0be      	b.n	8000e8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d109      	bne.n	8000d30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f8b6 	bl	8000e9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 faff 	bl	8001334 <ADC_ConversionStop_Disable>
 8000d36:	4603      	mov	r3, r0
 8000d38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8099 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8095 	bne.w	8000e7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d58:	f023 0302 	bic.w	r3, r3, #2
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d84:	d003      	beq.n	8000d8e <HAL_ADC_Init+0xa2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <HAL_ADC_Init+0xa8>
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	e000      	b.n	8000d96 <HAL_ADC_Init+0xaa>
 8000d94:	2300      	movs	r3, #0
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7d1b      	ldrb	r3, [r3, #20]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d119      	bne.n	8000dd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7b1b      	ldrb	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	035a      	lsls	r2, r3, #13
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e00b      	b.n	8000dd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f043 0220 	orr.w	r2, r3, #32
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_ADC_Init+0x1a8>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e08:	d003      	beq.n	8000e12 <HAL_ADC_Init+0x126>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d104      	bne.n	8000e1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	051b      	lsls	r3, r3, #20
 8000e1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_ADC_Init+0x1ac>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10b      	bne.n	8000e58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e56:	e018      	b.n	8000e8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f023 0312 	bic.w	r3, r3, #18
 8000e60:	f043 0210 	orr.w	r2, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e78:	e007      	b.n	8000e8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f043 0210 	orr.w	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	ffe1f7fd 	.word	0xffe1f7fd
 8000e98:	ff1f0efe 	.word	0xff1f0efe

08000e9c <HAL_ADC_MspInit>:
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a64      	ldr	r2, [pc, #400]	; (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d004      	beq.n	8000ed4 <HAL_ADC_Start_DMA+0x24>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <HAL_ADC_Start_DMA+0x1ac>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <HAL_ADC_Start_DMA+0x32>
 8000ed4:	4b60      	ldr	r3, [pc, #384]	; (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 80b3 	bne.w	8001048 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_Start_DMA+0x40>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e0ae      	b.n	800104e <HAL_ADC_Start_DMA+0x19e>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 f9c1 	bl	8001280 <ADC_Enable>
 8000efe:	4603      	mov	r3, r0
 8000f00:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 809a 	bne.w	800103e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f12:	f023 0301 	bic.w	r3, r3, #1
 8000f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_ADC_Start_DMA+0x1ac>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_Start_DMA+0x84>
 8000f28:	4b4b      	ldr	r3, [pc, #300]	; (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d115      	bne.n	8000f60 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d026      	beq.n	8000f9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f5e:	e01d      	b.n	8000f9c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a39      	ldr	r2, [pc, #228]	; (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d004      	beq.n	8000f80 <HAL_ADC_Start_DMA+0xd0>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <HAL_ADC_Start_DMA+0x1ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d10d      	bne.n	8000f9c <HAL_ADC_Start_DMA+0xec>
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	f023 0206 	bic.w	r2, r3, #6
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_ADC_Start_DMA+0x1b0>)
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a24      	ldr	r2, [pc, #144]	; (8001064 <HAL_ADC_Start_DMA+0x1b4>)
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a23      	ldr	r2, [pc, #140]	; (8001068 <HAL_ADC_Start_DMA+0x1b8>)
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f06f 0202 	mvn.w	r2, #2
 8000fe4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a18      	ldr	r0, [r3, #32]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	334c      	adds	r3, #76	; 0x4c
 8001000:	4619      	mov	r1, r3
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f000 fba5 	bl	8001754 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001014:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001018:	d108      	bne.n	800102c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001028:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800102a:	e00f      	b.n	800104c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800103a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800103c:	e006      	b.n	800104c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001046:	e001      	b.n	800104c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012400 	.word	0x40012400
 800105c:	40012800 	.word	0x40012800
 8001060:	080013b7 	.word	0x080013b7
 8001064:	08001433 	.word	0x08001433
 8001068:	0800144f 	.word	0x0800144f

0800106c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x20>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e0dc      	b.n	800126a <HAL_ADC_ConfigChannel+0x1da>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b06      	cmp	r3, #6
 80010be:	d81c      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	3b05      	subs	r3, #5
 80010d2:	221f      	movs	r2, #31
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b05      	subs	r3, #5
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
 80010f8:	e03c      	b.n	8001174 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d81c      	bhi.n	800113c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b23      	subs	r3, #35	; 0x23
 8001114:	221f      	movs	r2, #31
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	4019      	ands	r1, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b23      	subs	r3, #35	; 0x23
 800112e:	fa00 f203 	lsl.w	r2, r0, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
 800113a:	e01b      	b.n	8001174 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b41      	subs	r3, #65	; 0x41
 800114e:	221f      	movs	r2, #31
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4019      	ands	r1, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b41      	subs	r3, #65	; 0x41
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b09      	cmp	r3, #9
 800117a:	d91c      	bls.n	80011b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	3b1e      	subs	r3, #30
 800118e:	2207      	movs	r2, #7
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6898      	ldr	r0, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	3b1e      	subs	r3, #30
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	e019      	b.n	80011ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6919      	ldr	r1, [r3, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	2207      	movs	r2, #7
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4019      	ands	r1, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6898      	ldr	r0, [r3, #8]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d003      	beq.n	80011fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011f6:	2b11      	cmp	r3, #17
 80011f8:	d132      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_ADC_ConfigChannel+0x1e4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d125      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d126      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001220:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d11a      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_ADC_ConfigChannel+0x1e8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_ADC_ConfigChannel+0x1ec>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	0c9a      	lsrs	r2, r3, #18
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001240:	e002      	b.n	8001248 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3b01      	subs	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x1b2>
 800124e:	e007      	b.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f043 0220 	orr.w	r2, r3, #32
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40012400 	.word	0x40012400
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83

08001280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d040      	beq.n	8001320 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0201 	orr.w	r2, r2, #1
 80012ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ae:	4b1f      	ldr	r3, [pc, #124]	; (800132c <ADC_Enable+0xac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <ADC_Enable+0xb0>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	0c9b      	lsrs	r3, r3, #18
 80012ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012bc:	e002      	b.n	80012c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ca:	f7ff fce1 	bl	8000c90 <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012d0:	e01f      	b.n	8001312 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012d2:	f7ff fcdd 	bl	8000c90 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d918      	bls.n	8001312 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d011      	beq.n	8001312 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e007      	b.n	8001322 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d1d8      	bne.n	80012d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83

08001334 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12e      	bne.n	80013ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800135e:	f7ff fc97 	bl	8000c90 <HAL_GetTick>
 8001362:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001364:	e01b      	b.n	800139e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001366:	f7ff fc93 	bl	8000c90 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d914      	bls.n	800139e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10d      	bne.n	800139e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	f043 0210 	orr.w	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e007      	b.n	80013ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d0dc      	beq.n	8001366 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d127      	bne.n	8001420 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013ea:	d115      	bne.n	8001418 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff fb7b 	bl	8000b14 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800141e:	e004      	b.n	800142a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fe13 	bl	800106c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	f043 0204 	orr.w	r2, r3, #4
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fe02 	bl	800107e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <__NVIC_EnableIRQ+0x34>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff2d 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff42 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e043      	b.n	800173e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_DMA_Init+0xa8>)
 80016be:	4413      	add	r3, r2
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <HAL_DMA_Init+0xac>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	009a      	lsls	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_DMA_Init+0xb0>)
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	bffdfff8 	.word	0xbffdfff8
 800174c:	cccccccd 	.word	0xcccccccd
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Start_IT+0x20>
 8001770:	2302      	movs	r3, #2
 8001772:	e04b      	b.n	800180c <HAL_DMA_Start_IT+0xb8>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d13a      	bne.n	80017fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0201 	bic.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f937 	bl	8001a20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d008      	beq.n	80017cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 020e 	orr.w	r2, r2, #14
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00f      	b.n	80017ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 020a 	orr.w	r2, r2, #10
 80017ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e005      	b.n	800180a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001806:	2302      	movs	r3, #2
 8001808:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800180a:	7dfb      	ldrb	r3, [r7, #23]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d04f      	beq.n	80018dc <HAL_DMA_IRQHandler+0xc8>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d04a      	beq.n	80018dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0204 	bic.w	r2, r2, #4
 8001862:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a66      	ldr	r2, [pc, #408]	; (8001a04 <HAL_DMA_IRQHandler+0x1f0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d029      	beq.n	80018c2 <HAL_DMA_IRQHandler+0xae>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_DMA_IRQHandler+0x1f4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_DMA_IRQHandler+0xaa>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_DMA_IRQHandler+0x1f8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01a      	beq.n	80018b8 <HAL_DMA_IRQHandler+0xa4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a62      	ldr	r2, [pc, #392]	; (8001a10 <HAL_DMA_IRQHandler+0x1fc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d012      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x9e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a60      	ldr	r2, [pc, #384]	; (8001a14 <HAL_DMA_IRQHandler+0x200>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00a      	beq.n	80018ac <HAL_DMA_IRQHandler+0x98>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <HAL_DMA_IRQHandler+0x204>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d102      	bne.n	80018a6 <HAL_DMA_IRQHandler+0x92>
 80018a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a4:	e00e      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018aa:	e00b      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018b0:	e008      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b6:	e005      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018bc:	e002      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018be:	2340      	movs	r3, #64	; 0x40
 80018c0:	e000      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018c2:	2304      	movs	r3, #4
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_DMA_IRQHandler+0x208>)
 80018c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8094 	beq.w	80019fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018da:	e08e      	b.n	80019fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2202      	movs	r2, #2
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d056      	beq.n	800199a <HAL_DMA_IRQHandler+0x186>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d051      	beq.n	800199a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10b      	bne.n	800191c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020a 	bic.w	r2, r2, #10
 8001912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_DMA_IRQHandler+0x1f0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d029      	beq.n	800197a <HAL_DMA_IRQHandler+0x166>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a37      	ldr	r2, [pc, #220]	; (8001a08 <HAL_DMA_IRQHandler+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_IRQHandler+0x162>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <HAL_DMA_IRQHandler+0x1f8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01a      	beq.n	8001970 <HAL_DMA_IRQHandler+0x15c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <HAL_DMA_IRQHandler+0x1fc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d012      	beq.n	800196a <HAL_DMA_IRQHandler+0x156>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_DMA_IRQHandler+0x200>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x150>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <HAL_DMA_IRQHandler+0x204>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <HAL_DMA_IRQHandler+0x14a>
 8001958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800195c:	e00e      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 800195e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001962:	e00b      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 8001964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001968:	e008      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 800196a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196e:	e005      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 8001970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001974:	e002      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 8001976:	2320      	movs	r3, #32
 8001978:	e000      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 800197a:	2302      	movs	r3, #2
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <HAL_DMA_IRQHandler+0x208>)
 800197e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	d034      	beq.n	80019fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001998:	e02f      	b.n	80019fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2208      	movs	r2, #8
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d028      	beq.n	80019fc <HAL_DMA_IRQHandler+0x1e8>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020e 	bic.w	r2, r2, #14
 80019c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
    }
  }
  return;
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
}
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40020008 	.word	0x40020008
 8001a08:	4002001c 	.word	0x4002001c
 8001a0c:	40020030 	.word	0x40020030
 8001a10:	40020044 	.word	0x40020044
 8001a14:	40020058 	.word	0x40020058
 8001a18:	4002006c 	.word	0x4002006c
 8001a1c:	40020000 	.word	0x40020000

08001a20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d108      	bne.n	8001a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a5e:	e007      	b.n	8001a70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	; 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e169      	b.n	8001d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8158 	bne.w	8001d5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a9a      	ldr	r2, [pc, #616]	; (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d05e      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d875      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001abe:	4a98      	ldr	r2, [pc, #608]	; (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d058      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a96      	ldr	r2, [pc, #600]	; (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d86f      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aca:	4a96      	ldr	r2, [pc, #600]	; (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d052      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a94      	ldr	r2, [pc, #592]	; (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d869      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ad6:	4a94      	ldr	r2, [pc, #592]	; (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04c      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001adc:	4a92      	ldr	r2, [pc, #584]	; (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d863      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ae2:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d046      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a90      	ldr	r2, [pc, #576]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d85d      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d82a      	bhi.n	8001b48 <HAL_GPIO_Init+0xcc>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d859      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <HAL_GPIO_Init+0x80>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b51 	.word	0x08001b51
 8001b04:	08001b63 	.word	0x08001b63
 8001b08:	08001ba5 	.word	0x08001ba5
 8001b0c:	08001bab 	.word	0x08001bab
 8001b10:	08001bab 	.word	0x08001bab
 8001b14:	08001bab 	.word	0x08001bab
 8001b18:	08001bab 	.word	0x08001bab
 8001b1c:	08001bab 	.word	0x08001bab
 8001b20:	08001bab 	.word	0x08001bab
 8001b24:	08001bab 	.word	0x08001bab
 8001b28:	08001bab 	.word	0x08001bab
 8001b2c:	08001bab 	.word	0x08001bab
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001bab 	.word	0x08001bab
 8001b38:	08001bab 	.word	0x08001bab
 8001b3c:	08001bab 	.word	0x08001bab
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b6d 	.word	0x08001b6d
 8001b48:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <HAL_GPIO_Init+0x2b4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4e:	e02c      	b.n	8001baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e029      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e024      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	3308      	adds	r3, #8
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e01f      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	330c      	adds	r3, #12
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e01a      	b.n	8001bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e013      	b.n	8001bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	611a      	str	r2, [r3, #16]
          break;
 8001b96:	e009      	b.n	8001bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	615a      	str	r2, [r3, #20]
          break;
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x130>
          break;
 8001baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d801      	bhi.n	8001bb6 <HAL_GPIO_Init+0x13a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_Init+0x13e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	; 0xff
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_GPIO_Init+0x14c>
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x152>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	3b08      	subs	r3, #8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80b1 	beq.w	8001d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c14:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1e8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3e      	ldr	r2, [pc, #248]	; (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1e4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3d      	ldr	r2, [pc, #244]	; (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1e0>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7a:	492f      	ldr	r1, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	492c      	ldr	r1, [pc, #176]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4928      	ldr	r1, [pc, #160]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4922      	ldr	r1, [pc, #136]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	491e      	ldr	r1, [pc, #120]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4918      	ldr	r1, [pc, #96]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4914      	ldr	r1, [pc, #80]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d021      	beq.n	8001d50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e021      	b.n	8001d5e <HAL_GPIO_Init+0x2e2>
 8001d1a:	bf00      	nop
 8001d1c:	10320000 	.word	0x10320000
 8001d20:	10310000 	.word	0x10310000
 8001d24:	10220000 	.word	0x10220000
 8001d28:	10210000 	.word	0x10210000
 8001d2c:	10120000 	.word	0x10120000
 8001d30:	10110000 	.word	0x10110000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40011400 	.word	0x40011400
 8001d4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4909      	ldr	r1, [pc, #36]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae8e 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	372c      	adds	r7, #44	; 0x2c
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	40010400 	.word	0x40010400

08001d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43d9      	mvns	r1, r3
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	400b      	ands	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	611a      	str	r2, [r3, #16]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f806 	bl	8001de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e272      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d112      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x12c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d168      	bne.n	8001f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e24c      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76>
 8001e64:	4b80      	ldr	r3, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7f      	ldr	r2, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e02e      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a77      	ldr	r2, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbc>
 8001e9e:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6a      	ldr	r2, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe feda 	bl	8000c90 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe fed6 	bl	8000c90 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e200      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe4>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7fe fec6 	bl	8000c90 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe fec2 	bl	8000c90 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1ec      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x10c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1c0      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4939      	ldr	r1, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fe7b 	bl	8000c90 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fe77 	bl	8000c90 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1a1      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fe5a 	bl	8000c90 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fe56 	bl	8000c90 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e180      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03a      	beq.n	8002080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7fe fe3a 	bl	8000c90 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7fe fe36 	bl	8000c90 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e160      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fad8 	bl	80025f4 <RCC_Delay>
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe fe20 	bl	8000c90 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7fe fe1c 	bl	8000c90 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e146      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b92      	ldr	r3, [pc, #584]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a6 	beq.w	80021da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a87      	ldr	r2, [pc, #540]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7e      	ldr	r2, [pc, #504]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fddd 	bl	8000c90 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7fe fdd9 	bl	8000c90 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e103      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x4c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 8002100:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a6e      	ldr	r2, [pc, #440]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002116:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a69      	ldr	r2, [pc, #420]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a66      	ldr	r2, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x356>
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a5a      	ldr	r2, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe fd8d 	bl	8000c90 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fd89 	bl	8000c90 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0b1      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x37e>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe fd77 	bl	8000c90 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe fd73 	bl	8000c90 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e09b      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fd47 	bl	8000c90 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fd43 	bl	8000c90 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e06d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4921      	ldr	r1, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a19      	ldr	r1, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	430b      	orrs	r3, r1
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fd17 	bl	8000c90 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fd13 	bl	8000c90 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e03d      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
 8002284:	e035      	b.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fd00 	bl	8000c90 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fcfc 	bl	8000c90 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e026      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x498>
 80022b2:	e01e      	b.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e019      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x500>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d0      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4965      	ldr	r1, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e073      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06b      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4936      	ldr	r1, [pc, #216]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fc4e 	bl	8000c90 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fc4a 	bl	8000c90 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e053      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d210      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fbac 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08005af8 	.word	0x08005af8
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b490      	push	{r4, r7}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_GetSysClockFreq+0xac>)
 80024dc:	1d3c      	adds	r4, r7, #4
 80024de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e4:	f240 2301 	movw	r3, #513	; 0x201
 80024e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x46>
 8002512:	e02b      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002516:	623b      	str	r3, [r7, #32]
      break;
 8002518:	e02b      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3328      	adds	r3, #40	; 0x28
 8002524:	443b      	add	r3, r7
 8002526:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800252a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d012      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	0c5b      	lsrs	r3, r3, #17
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	3328      	adds	r3, #40	; 0x28
 8002542:	443b      	add	r3, r7
 8002544:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002548:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	623b      	str	r3, [r7, #32]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800256e:	623b      	str	r3, [r7, #32]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6a3b      	ldr	r3, [r7, #32]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc90      	pop	{r4, r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	08005ae8 	.word	0x08005ae8
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	003d0900 	.word	0x003d0900

08002590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff2 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08005b08 	.word	0x08005b08

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffde 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08005b08 	.word	0x08005b08

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000000 	.word	0x20000000
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e03f      	b.n	80026c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f837 	bl	80026ca <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f90d 	bl	8002894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d17c      	bne.n	80027f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_UART_Transmit+0x2c>
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e075      	b.n	80027f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_UART_Transmit+0x3e>
 8002716:	2302      	movs	r3, #2
 8002718:	e06e      	b.n	80027f8 <HAL_UART_Transmit+0x11c>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2221      	movs	r2, #33	; 0x21
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002730:	f7fe faae 	bl	8000c90 <HAL_GetTick>
 8002734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	88fa      	ldrh	r2, [r7, #6]
 800273a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	d108      	bne.n	800275e <HAL_UART_Transmit+0x82>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	e003      	b.n	8002766 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800276e:	e02a      	b.n	80027c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2200      	movs	r2, #0
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f840 	bl	8002800 <UART_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e036      	b.n	80027f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3302      	adds	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e007      	b.n	80027b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1cf      	bne.n	8002770 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2140      	movs	r1, #64	; 0x40
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f810 	bl	8002800 <UART_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e006      	b.n	80027f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002810:	e02c      	b.n	800286c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d028      	beq.n	800286c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x30>
 8002820:	f7fe fa36 	bl	8000c90 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	429a      	cmp	r2, r3
 800282e:	d21d      	bcs.n	800286c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800283e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e00f      	b.n	800288c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4013      	ands	r3, r2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	429a      	cmp	r2, r3
 8002888:	d0c3      	beq.n	8002812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028ce:	f023 030c 	bic.w	r3, r3, #12
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	430b      	orrs	r3, r1
 80028da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <UART_SetConfig+0x114>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028fc:	f7ff fe66 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	e002      	b.n	800290a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff fe4e 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8002908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	4a22      	ldr	r2, [pc, #136]	; (80029ac <UART_SetConfig+0x118>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	0119      	lsls	r1, r3, #4
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	009a      	lsls	r2, r3, #2
 8002934:	441a      	add	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <UART_SetConfig+0x118>)
 8002942:	fba3 0302 	umull	r0, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2064      	movs	r0, #100	; 0x64
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <UART_SetConfig+0x118>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002960:	4419      	add	r1, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009a      	lsls	r2, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fbb2 f2f3 	udiv	r2, r2, r3
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <UART_SetConfig+0x118>)
 800297a:	fba3 0302 	umull	r0, r3, r3, r2
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2064      	movs	r0, #100	; 0x64
 8002982:	fb00 f303 	mul.w	r3, r0, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	3332      	adds	r3, #50	; 0x32
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <UART_SetConfig+0x118>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	440a      	add	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40013800 	.word	0x40013800
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <adc_GPIO_config>:

/*
// @brief ADC Channels GPIO Configuration
*/
void adc_GPIO_config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_init_struct = {0};
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <adc_GPIO_config+0x4c>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <adc_GPIO_config+0x4c>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <adc_GPIO_config+0x4c>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	687b      	ldr	r3, [r7, #4]

	GPIO_init_struct.Mode = GPIO_MODE_ANALOG;
 80029dc:	2303      	movs	r3, #3
 80029de:	60fb      	str	r3, [r7, #12]
	GPIO_init_struct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 80029e0:	230e      	movs	r3, #14
 80029e2:	60bb      	str	r3, [r7, #8]
	GPIO_init_struct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_init_struct);
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	4619      	mov	r1, r3
 80029ee:	4804      	ldr	r0, [pc, #16]	; (8002a00 <adc_GPIO_config+0x50>)
 80029f0:	f7ff f844 	bl	8001a7c <HAL_GPIO_Init>


}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40010800 	.word	0x40010800

08002a04 <adc_multi_channel_config>:

/*
// @brief ADC Multi-channel configuration
*/
bool adc_multi_channel_config(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <adc_multi_channel_config+0xd0>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <adc_multi_channel_config+0xd0>)
 8002a10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a14:	6193      	str	r3, [r2, #24]
 8002a16:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <adc_multi_channel_config+0xd0>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]

	adc_1_handle.Instance = ADC1;
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <adc_multi_channel_config+0xd8>)
 8002a26:	601a      	str	r2, [r3, #0]
	adc_1_handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
	adc_1_handle.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a34:	609a      	str	r2, [r3, #8]
	adc_1_handle.Init.ContinuousConvMode = DISABLE;
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	731a      	strb	r2, [r3, #12]
	adc_1_handle.Init.NbrOfConversion = 3;
 8002a3c:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a3e:	2203      	movs	r2, #3
 8002a40:	611a      	str	r2, [r3, #16]
	adc_1_handle.Init.DiscontinuousConvMode = DISABLE;
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	751a      	strb	r2, [r3, #20]
	adc_1_handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002a4e:	61da      	str	r2, [r3, #28]
	if(HAL_ADC_Init(&adc_1_handle) != HAL_OK)
 8002a50:	4821      	ldr	r0, [pc, #132]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a52:	f7fe f94b 	bl	8000cec <HAL_ADC_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <adc_multi_channel_config+0x5c>
	{
		return false;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e035      	b.n	8002acc <adc_multi_channel_config+0xc8>
	}
	// ADC channel configuration
	// channel-1 => PA1
	ADC_ChannelConfTypeDef channel_config = {0};
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
	channel_config.Channel = ADC_CHANNEL_1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	607b      	str	r3, [r7, #4]
	channel_config.Rank = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
	channel_config.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002a72:	2303      	movs	r3, #3
 8002a74:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(&adc_1_handle, &channel_config) != HAL_OK)
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4817      	ldr	r0, [pc, #92]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a7c:	f7fe fb08 	bl	8001090 <HAL_ADC_ConfigChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <adc_multi_channel_config+0x86>
	{
		return false;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e020      	b.n	8002acc <adc_multi_channel_config+0xc8>
	}
	// channel-2 => PA2
	channel_config.Channel = ADC_CHANNEL_2;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	607b      	str	r3, [r7, #4]
	channel_config.Rank = 2;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	60bb      	str	r3, [r7, #8]
	channel_config.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002a92:	2303      	movs	r3, #3
 8002a94:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(&adc_1_handle, &channel_config) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480f      	ldr	r0, [pc, #60]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002a9c:	f7fe faf8 	bl	8001090 <HAL_ADC_ConfigChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <adc_multi_channel_config+0xa6>
	{
		return false;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e010      	b.n	8002acc <adc_multi_channel_config+0xc8>
	}
	// channel-3 => PA3
	channel_config.Channel = ADC_CHANNEL_3;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	607b      	str	r3, [r7, #4]
	channel_config.Rank = 3;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	60bb      	str	r3, [r7, #8]
	channel_config.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]
	if(HAL_ADC_ConfigChannel(&adc_1_handle, &channel_config) != HAL_OK)
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <adc_multi_channel_config+0xd4>)
 8002abc:	f7fe fae8 	bl	8001090 <HAL_ADC_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <adc_multi_channel_config+0xc6>
	{
		return false;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <adc_multi_channel_config+0xc8>
	}
	return true;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	20000208 	.word	0x20000208
 8002adc:	40012400 	.word	0x40012400

08002ae0 <adc_dma_config>:

/*
// @brief ADC DMA configuration
*/
void adc_dma_config(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <adc_dma_config+0x80>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <adc_dma_config+0x80>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6153      	str	r3, [r2, #20]
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <adc_dma_config+0x80>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
	static DMA_HandleTypeDef dma_1_handle;
	dma_1_handle.Instance = DMA1_Channel1;
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <adc_dma_config+0x84>)
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <adc_dma_config+0x88>)
 8002b02:	601a      	str	r2, [r3, #0]
	dma_1_handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <adc_dma_config+0x84>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
	dma_1_handle.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <adc_dma_config+0x84>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
	dma_1_handle.Init.MemInc = DMA_MINC_ENABLE;
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <adc_dma_config+0x84>)
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	60da      	str	r2, [r3, #12]
	dma_1_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16 bit
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <adc_dma_config+0x84>)
 8002b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b1c:	611a      	str	r2, [r3, #16]
	dma_1_handle.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <adc_dma_config+0x84>)
 8002b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b24:	615a      	str	r2, [r3, #20]
	dma_1_handle.Init.Mode = DMA_CIRCULAR;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <adc_dma_config+0x84>)
 8002b28:	2220      	movs	r2, #32
 8002b2a:	619a      	str	r2, [r3, #24]
	dma_1_handle.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <adc_dma_config+0x84>)
 8002b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b32:	61da      	str	r2, [r3, #28]
	HAL_DMA_Init(&dma_1_handle);
 8002b34:	480b      	ldr	r0, [pc, #44]	; (8002b64 <adc_dma_config+0x84>)
 8002b36:	f7fe fdb3 	bl	80016a0 <HAL_DMA_Init>
	__HAL_LINKDMA(&adc_1_handle, DMA_Handle, dma_1_handle);
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <adc_dma_config+0x8c>)
 8002b3c:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <adc_dma_config+0x84>)
 8002b3e:	621a      	str	r2, [r3, #32]
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <adc_dma_config+0x84>)
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <adc_dma_config+0x8c>)
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
	// enable DMA interrupt
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2105      	movs	r1, #5
 8002b4a:	200b      	movs	r0, #11
 8002b4c:	f7fe fd71 	bl	8001632 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b50:	200b      	movs	r0, #11
 8002b52:	f7fe fd8a 	bl	800166a <HAL_NVIC_EnableIRQ>



}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	20000238 	.word	0x20000238
 8002b68:	40020008 	.word	0x40020008
 8002b6c:	20000208 	.word	0x20000208

08002b70 <gpio_LED_config>:

/*
// @brief LED GPIO Configuration
*/
void gpio_LED_config(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
	// green LED => PB13
	// red   LED => PB14

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <gpio_LED_config+0x54>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <gpio_LED_config+0x54>)
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	6193      	str	r3, [r2, #24]
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <gpio_LED_config+0x54>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef gpio_init_struct = {0};
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
  gpio_init_struct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8002ba0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ba4:	60bb      	str	r3, [r7, #8]
  gpio_init_struct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2302      	movs	r3, #2
 8002bac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_struct);
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <gpio_LED_config+0x58>)
 8002bb6:	f7fe ff61 	bl	8001a7c <HAL_GPIO_Init>

}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40010c00 	.word	0x40010c00

08002bcc <gpio_LED_toggle_green>:
void gpio_LED_write_red(bool state)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (GPIO_PinState)state);
}
void gpio_LED_toggle_green(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <gpio_LED_toggle_green+0x14>)
 8002bd6:	f7ff f8d5 	bl	8001d84 <HAL_GPIO_TogglePin>
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40010c00 	.word	0x40010c00

08002be4 <gpio_PB_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_PB_config(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
	// user button PA0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <gpio_PB_config+0x50>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <gpio_PB_config+0x50>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6193      	str	r3, [r2, #24]
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <gpio_PB_config+0x50>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8002c02:	f107 0308 	add.w	r3, r7, #8
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pin = GPIO_PIN_0;
 8002c14:	2301      	movs	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	4619      	mov	r1, r3
 8002c26:	4804      	ldr	r0, [pc, #16]	; (8002c38 <gpio_PB_config+0x54>)
 8002c28:	f7fe ff28 	bl	8001a7c <HAL_GPIO_Init>

}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010800 	.word	0x40010800

08002c3c <gpio_SW_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_SW_config(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
	// sw-1 PA8
	// sw-2 PA15

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <gpio_SW_config+0x88>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <gpio_SW_config+0x88>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6193      	str	r3, [r2, #24]
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <gpio_SW_config+0x88>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pin = GPIO_PIN_8 | GPIO_PIN_15;
 8002c6c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002c70:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2302      	movs	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4811      	ldr	r0, [pc, #68]	; (8002cc8 <gpio_SW_config+0x8c>)
 8002c82:	f7fe fefb 	bl	8001a7c <HAL_GPIO_Init>

	// remap
	__HAL_RCC_AFIO_CLK_ENABLE();
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <gpio_SW_config+0x88>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <gpio_SW_config+0x88>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6193      	str	r3, [r2, #24]
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <gpio_SW_config+0x88>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <gpio_SW_config+0x90>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <gpio_SW_config+0x90>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	6053      	str	r3, [r2, #4]
}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40010000 	.word	0x40010000

08002cd0 <rcc_system_clock_config>:
//-----------------------------------------------------------------------//
/*
// rcc clock configuration
*/
bool rcc_system_clock_config(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0

    // APB1 Prescaler = 2 => 36, 72 MHz
    // APB2 Prescaler = 1 => 72, 72 MHz
    // ADC Prescaler = 6 => 12 MHz

    RCC_OscInitTypeDef osc_init_struct = {0};
 8002cd6:	f107 0318 	add.w	r3, r7, #24
 8002cda:	2228      	movs	r2, #40	; 0x28
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f8f2 	bl	8002ec8 <memset>
    RCC_ClkInitTypeDef clk_init_struct = {0};
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	611a      	str	r2, [r3, #16]

    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
    osc_init_struct.HSEState = RCC_HSE_ON;
 8002cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cfa:	61fb      	str	r3, [r7, #28]
    osc_init_struct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
    osc_init_struct.PLL.PLLState = RCC_PLL_ON;
 8002d00:	2302      	movs	r3, #2
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_RCC_OscConfig(&osc_init_struct) != HAL_OK)
 8002d10:	f107 0318 	add.w	r3, r7, #24
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff f871 	bl	8001dfc <HAL_RCC_OscConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <rcc_system_clock_config+0x54>
    {
      return false;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e014      	b.n	8002d4e <rcc_system_clock_config+0x7e>
    }

    // clock initialization
    clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8002d24:	230f      	movs	r3, #15
 8002d26:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1  |
                                RCC_CLOCKTYPE_PCLK2  |
                                RCC_CLOCKTYPE_SYSCLK ;

    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	60bb      	str	r3, [r7, #8]
    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
    clk_init_struct.APB1CLKDivider = RCC_SYSCLK_DIV2;
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	613b      	str	r3, [r7, #16]
    clk_init_struct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
    // 00 - 24MHz => 0
    // 24 - 48MHz => 1
    // 48 - 72MHz => 2
    if(HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2) != HAL_OK)
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fadf 	bl	8002300 <HAL_RCC_ClockConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <rcc_system_clock_config+0x7c>
    {
      return false;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <rcc_system_clock_config+0x7e>
    }

    return true;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3740      	adds	r7, #64	; 0x40
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <uart_UART1_GPIO_config>:
//-----------------------------------------------------------------------//
/*
// @brief UART1 GPIO configuration
*/
void uart_UART1_GPIO_config(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
    // PA9  => TX
    // PA10 => RX
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <uart_UART1_GPIO_config+0x5c>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <uart_UART1_GPIO_config+0x5c>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6193      	str	r3, [r2, #24]
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <uart_UART1_GPIO_config+0x5c>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    // PA9  => TX
    gpio_init_struct.Pin = GPIO_PIN_9;
 8002d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d7a:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480b      	ldr	r0, [pc, #44]	; (8002db8 <uart_UART1_GPIO_config+0x60>)
 8002d8c:	f7fe fe76 	bl	8001a7c <HAL_GPIO_Init>

    // PA10 => RX
    gpio_init_struct.Pin = GPIO_PIN_10;
 8002d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d94:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	4619      	mov	r1, r3
 8002da4:	4804      	ldr	r0, [pc, #16]	; (8002db8 <uart_UART1_GPIO_config+0x60>)
 8002da6:	f7fe fe69 	bl	8001a7c <HAL_GPIO_Init>




}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010800 	.word	0x40010800

08002dbc <uart_UART1_config>:
/*
// @brief UART1 Peripheral configuration
*/
bool uart_UART1_config(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  __HAL_RCC_USART1_CLK_ENABLE();
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <uart_UART1_config+0x6c>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <uart_UART1_config+0x6c>)
 8002dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dcc:	6193      	str	r3, [r2, #24]
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <uart_UART1_config+0x6c>)
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]

  huart1.Instance = USART1;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <uart_UART1_config+0x70>)
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <uart_UART1_config+0x74>)
 8002dde:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <uart_UART1_config+0x70>)
 8002de2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de6:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <uart_UART1_config+0x70>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <uart_UART1_config+0x70>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <uart_UART1_config+0x70>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <uart_UART1_config+0x70>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <uart_UART1_config+0x70>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <uart_UART1_config+0x70>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 8002e0c:	4807      	ldr	r0, [pc, #28]	; (8002e2c <uart_UART1_config+0x70>)
 8002e0e:	f7ff fc0f 	bl	8002630 <HAL_UART_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <uart_UART1_config+0x60>
  {
    return false;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <uart_UART1_config+0x62>
  }

  return true;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	2000027c 	.word	0x2000027c
 8002e30:	40013800 	.word	0x40013800

08002e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e34:	480c      	ldr	r0, [pc, #48]	; (8002e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e36:	490d      	ldr	r1, [pc, #52]	; (8002e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	; (8002e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e5a:	f7fd feb5 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5e:	f000 f80f 	bl	8002e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e62:	f7fd fe11 	bl	8000a88 <main>
  bx lr
 8002e66:	4770      	bx	lr
  ldr r0, =_sdata
 8002e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e70:	08005ef4 	.word	0x08005ef4
  ldr r2, =_sbss
 8002e74:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e78:	200002d4 	.word	0x200002d4

08002e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <ADC1_2_IRQHandler>
	...

08002e80 <__libc_init_array>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	2600      	movs	r6, #0
 8002e84:	4d0c      	ldr	r5, [pc, #48]	; (8002eb8 <__libc_init_array+0x38>)
 8002e86:	4c0d      	ldr	r4, [pc, #52]	; (8002ebc <__libc_init_array+0x3c>)
 8002e88:	1b64      	subs	r4, r4, r5
 8002e8a:	10a4      	asrs	r4, r4, #2
 8002e8c:	42a6      	cmp	r6, r4
 8002e8e:	d109      	bne.n	8002ea4 <__libc_init_array+0x24>
 8002e90:	f002 fe04 	bl	8005a9c <_init>
 8002e94:	2600      	movs	r6, #0
 8002e96:	4d0a      	ldr	r5, [pc, #40]	; (8002ec0 <__libc_init_array+0x40>)
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <__libc_init_array+0x44>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	42a6      	cmp	r6, r4
 8002ea0:	d105      	bne.n	8002eae <__libc_init_array+0x2e>
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea8:	4798      	blx	r3
 8002eaa:	3601      	adds	r6, #1
 8002eac:	e7ee      	b.n	8002e8c <__libc_init_array+0xc>
 8002eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb2:	4798      	blx	r3
 8002eb4:	3601      	adds	r6, #1
 8002eb6:	e7f2      	b.n	8002e9e <__libc_init_array+0x1e>
 8002eb8:	08005eec 	.word	0x08005eec
 8002ebc:	08005eec 	.word	0x08005eec
 8002ec0:	08005eec 	.word	0x08005eec
 8002ec4:	08005ef0 	.word	0x08005ef0

08002ec8 <memset>:
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4402      	add	r2, r0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <memset+0xa>
 8002ed0:	4770      	bx	lr
 8002ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed6:	e7f9      	b.n	8002ecc <memset+0x4>

08002ed8 <__cvt>:
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ede:	461f      	mov	r7, r3
 8002ee0:	bfbb      	ittet	lt
 8002ee2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ee6:	461f      	movlt	r7, r3
 8002ee8:	2300      	movge	r3, #0
 8002eea:	232d      	movlt	r3, #45	; 0x2d
 8002eec:	b088      	sub	sp, #32
 8002eee:	4614      	mov	r4, r2
 8002ef0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ef2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ef4:	7013      	strb	r3, [r2, #0]
 8002ef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ef8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002efc:	f023 0820 	bic.w	r8, r3, #32
 8002f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f04:	d005      	beq.n	8002f12 <__cvt+0x3a>
 8002f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f0a:	d100      	bne.n	8002f0e <__cvt+0x36>
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e000      	b.n	8002f14 <__cvt+0x3c>
 8002f12:	2303      	movs	r3, #3
 8002f14:	aa07      	add	r2, sp, #28
 8002f16:	9204      	str	r2, [sp, #16]
 8002f18:	aa06      	add	r2, sp, #24
 8002f1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002f1e:	e9cd 3500 	strd	r3, r5, [sp]
 8002f22:	4622      	mov	r2, r4
 8002f24:	463b      	mov	r3, r7
 8002f26:	f000 fe13 	bl	8003b50 <_dtoa_r>
 8002f2a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f2e:	4606      	mov	r6, r0
 8002f30:	d102      	bne.n	8002f38 <__cvt+0x60>
 8002f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f34:	07db      	lsls	r3, r3, #31
 8002f36:	d522      	bpl.n	8002f7e <__cvt+0xa6>
 8002f38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f3c:	eb06 0905 	add.w	r9, r6, r5
 8002f40:	d110      	bne.n	8002f64 <__cvt+0x8c>
 8002f42:	7833      	ldrb	r3, [r6, #0]
 8002f44:	2b30      	cmp	r3, #48	; 0x30
 8002f46:	d10a      	bne.n	8002f5e <__cvt+0x86>
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4639      	mov	r1, r7
 8002f50:	f7fd fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8002f54:	b918      	cbnz	r0, 8002f5e <__cvt+0x86>
 8002f56:	f1c5 0501 	rsb	r5, r5, #1
 8002f5a:	f8ca 5000 	str.w	r5, [sl]
 8002f5e:	f8da 3000 	ldr.w	r3, [sl]
 8002f62:	4499      	add	r9, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	2300      	movs	r3, #0
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4639      	mov	r1, r7
 8002f6c:	f7fd fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8002f70:	b108      	cbz	r0, 8002f76 <__cvt+0x9e>
 8002f72:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f76:	2230      	movs	r2, #48	; 0x30
 8002f78:	9b07      	ldr	r3, [sp, #28]
 8002f7a:	454b      	cmp	r3, r9
 8002f7c:	d307      	bcc.n	8002f8e <__cvt+0xb6>
 8002f7e:	4630      	mov	r0, r6
 8002f80:	9b07      	ldr	r3, [sp, #28]
 8002f82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f84:	1b9b      	subs	r3, r3, r6
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	b008      	add	sp, #32
 8002f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	9107      	str	r1, [sp, #28]
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e7f0      	b.n	8002f78 <__cvt+0xa0>

08002f96 <__exponent>:
 8002f96:	4603      	mov	r3, r0
 8002f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	f803 2b02 	strb.w	r2, [r3], #2
 8002fa0:	bfb6      	itet	lt
 8002fa2:	222d      	movlt	r2, #45	; 0x2d
 8002fa4:	222b      	movge	r2, #43	; 0x2b
 8002fa6:	4249      	neglt	r1, r1
 8002fa8:	2909      	cmp	r1, #9
 8002faa:	7042      	strb	r2, [r0, #1]
 8002fac:	dd2b      	ble.n	8003006 <__exponent+0x70>
 8002fae:	f10d 0407 	add.w	r4, sp, #7
 8002fb2:	46a4      	mov	ip, r4
 8002fb4:	270a      	movs	r7, #10
 8002fb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8002fba:	460a      	mov	r2, r1
 8002fbc:	46a6      	mov	lr, r4
 8002fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8002fc2:	2a63      	cmp	r2, #99	; 0x63
 8002fc4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002fc8:	4631      	mov	r1, r6
 8002fca:	f104 34ff 	add.w	r4, r4, #4294967295
 8002fce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002fd2:	dcf0      	bgt.n	8002fb6 <__exponent+0x20>
 8002fd4:	3130      	adds	r1, #48	; 0x30
 8002fd6:	f1ae 0502 	sub.w	r5, lr, #2
 8002fda:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	1c44      	adds	r4, r0, #1
 8002fe2:	4561      	cmp	r1, ip
 8002fe4:	d30a      	bcc.n	8002ffc <__exponent+0x66>
 8002fe6:	f10d 0209 	add.w	r2, sp, #9
 8002fea:	eba2 020e 	sub.w	r2, r2, lr
 8002fee:	4565      	cmp	r5, ip
 8002ff0:	bf88      	it	hi
 8002ff2:	2200      	movhi	r2, #0
 8002ff4:	4413      	add	r3, r2
 8002ff6:	1a18      	subs	r0, r3, r0
 8002ff8:	b003      	add	sp, #12
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003000:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003004:	e7ed      	b.n	8002fe2 <__exponent+0x4c>
 8003006:	2330      	movs	r3, #48	; 0x30
 8003008:	3130      	adds	r1, #48	; 0x30
 800300a:	7083      	strb	r3, [r0, #2]
 800300c:	70c1      	strb	r1, [r0, #3]
 800300e:	1d03      	adds	r3, r0, #4
 8003010:	e7f1      	b.n	8002ff6 <__exponent+0x60>
	...

08003014 <_printf_float>:
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003018:	b091      	sub	sp, #68	; 0x44
 800301a:	460c      	mov	r4, r1
 800301c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003020:	4616      	mov	r6, r2
 8003022:	461f      	mov	r7, r3
 8003024:	4605      	mov	r5, r0
 8003026:	f001 fd35 	bl	8004a94 <_localeconv_r>
 800302a:	6803      	ldr	r3, [r0, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	9309      	str	r3, [sp, #36]	; 0x24
 8003030:	f7fd f88e 	bl	8000150 <strlen>
 8003034:	2300      	movs	r3, #0
 8003036:	930e      	str	r3, [sp, #56]	; 0x38
 8003038:	f8d8 3000 	ldr.w	r3, [r8]
 800303c:	900a      	str	r0, [sp, #40]	; 0x28
 800303e:	3307      	adds	r3, #7
 8003040:	f023 0307 	bic.w	r3, r3, #7
 8003044:	f103 0208 	add.w	r2, r3, #8
 8003048:	f894 9018 	ldrb.w	r9, [r4, #24]
 800304c:	f8d4 b000 	ldr.w	fp, [r4]
 8003050:	f8c8 2000 	str.w	r2, [r8]
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800305c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003060:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003064:	930b      	str	r3, [sp, #44]	; 0x2c
 8003066:	f04f 32ff 	mov.w	r2, #4294967295
 800306a:	4640      	mov	r0, r8
 800306c:	4b9c      	ldr	r3, [pc, #624]	; (80032e0 <_printf_float+0x2cc>)
 800306e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003070:	f7fd fccc 	bl	8000a0c <__aeabi_dcmpun>
 8003074:	bb70      	cbnz	r0, 80030d4 <_printf_float+0xc0>
 8003076:	f04f 32ff 	mov.w	r2, #4294967295
 800307a:	4640      	mov	r0, r8
 800307c:	4b98      	ldr	r3, [pc, #608]	; (80032e0 <_printf_float+0x2cc>)
 800307e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003080:	f7fd fca6 	bl	80009d0 <__aeabi_dcmple>
 8003084:	bb30      	cbnz	r0, 80030d4 <_printf_float+0xc0>
 8003086:	2200      	movs	r2, #0
 8003088:	2300      	movs	r3, #0
 800308a:	4640      	mov	r0, r8
 800308c:	4651      	mov	r1, sl
 800308e:	f7fd fc95 	bl	80009bc <__aeabi_dcmplt>
 8003092:	b110      	cbz	r0, 800309a <_printf_float+0x86>
 8003094:	232d      	movs	r3, #45	; 0x2d
 8003096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800309a:	4b92      	ldr	r3, [pc, #584]	; (80032e4 <_printf_float+0x2d0>)
 800309c:	4892      	ldr	r0, [pc, #584]	; (80032e8 <_printf_float+0x2d4>)
 800309e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80030a2:	bf94      	ite	ls
 80030a4:	4698      	movls	r8, r3
 80030a6:	4680      	movhi	r8, r0
 80030a8:	2303      	movs	r3, #3
 80030aa:	f04f 0a00 	mov.w	sl, #0
 80030ae:	6123      	str	r3, [r4, #16]
 80030b0:	f02b 0304 	bic.w	r3, fp, #4
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	4633      	mov	r3, r6
 80030b8:	4621      	mov	r1, r4
 80030ba:	4628      	mov	r0, r5
 80030bc:	9700      	str	r7, [sp, #0]
 80030be:	aa0f      	add	r2, sp, #60	; 0x3c
 80030c0:	f000 f9d4 	bl	800346c <_printf_common>
 80030c4:	3001      	adds	r0, #1
 80030c6:	f040 8090 	bne.w	80031ea <_printf_float+0x1d6>
 80030ca:	f04f 30ff 	mov.w	r0, #4294967295
 80030ce:	b011      	add	sp, #68	; 0x44
 80030d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d4:	4642      	mov	r2, r8
 80030d6:	4653      	mov	r3, sl
 80030d8:	4640      	mov	r0, r8
 80030da:	4651      	mov	r1, sl
 80030dc:	f7fd fc96 	bl	8000a0c <__aeabi_dcmpun>
 80030e0:	b148      	cbz	r0, 80030f6 <_printf_float+0xe2>
 80030e2:	f1ba 0f00 	cmp.w	sl, #0
 80030e6:	bfb8      	it	lt
 80030e8:	232d      	movlt	r3, #45	; 0x2d
 80030ea:	4880      	ldr	r0, [pc, #512]	; (80032ec <_printf_float+0x2d8>)
 80030ec:	bfb8      	it	lt
 80030ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80030f2:	4b7f      	ldr	r3, [pc, #508]	; (80032f0 <_printf_float+0x2dc>)
 80030f4:	e7d3      	b.n	800309e <_printf_float+0x8a>
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	d142      	bne.n	8003186 <_printf_float+0x172>
 8003100:	2306      	movs	r3, #6
 8003102:	6063      	str	r3, [r4, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	9206      	str	r2, [sp, #24]
 8003108:	aa0e      	add	r2, sp, #56	; 0x38
 800310a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800310e:	aa0d      	add	r2, sp, #52	; 0x34
 8003110:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003114:	9203      	str	r2, [sp, #12]
 8003116:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800311a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	6863      	ldr	r3, [r4, #4]
 8003122:	4642      	mov	r2, r8
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4628      	mov	r0, r5
 8003128:	4653      	mov	r3, sl
 800312a:	910b      	str	r1, [sp, #44]	; 0x2c
 800312c:	f7ff fed4 	bl	8002ed8 <__cvt>
 8003130:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003132:	4680      	mov	r8, r0
 8003134:	2947      	cmp	r1, #71	; 0x47
 8003136:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003138:	d108      	bne.n	800314c <_printf_float+0x138>
 800313a:	1cc8      	adds	r0, r1, #3
 800313c:	db02      	blt.n	8003144 <_printf_float+0x130>
 800313e:	6863      	ldr	r3, [r4, #4]
 8003140:	4299      	cmp	r1, r3
 8003142:	dd40      	ble.n	80031c6 <_printf_float+0x1b2>
 8003144:	f1a9 0902 	sub.w	r9, r9, #2
 8003148:	fa5f f989 	uxtb.w	r9, r9
 800314c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003150:	d81f      	bhi.n	8003192 <_printf_float+0x17e>
 8003152:	464a      	mov	r2, r9
 8003154:	3901      	subs	r1, #1
 8003156:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800315a:	910d      	str	r1, [sp, #52]	; 0x34
 800315c:	f7ff ff1b 	bl	8002f96 <__exponent>
 8003160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003162:	4682      	mov	sl, r0
 8003164:	1813      	adds	r3, r2, r0
 8003166:	2a01      	cmp	r2, #1
 8003168:	6123      	str	r3, [r4, #16]
 800316a:	dc02      	bgt.n	8003172 <_printf_float+0x15e>
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	07d2      	lsls	r2, r2, #31
 8003170:	d501      	bpl.n	8003176 <_printf_float+0x162>
 8003172:	3301      	adds	r3, #1
 8003174:	6123      	str	r3, [r4, #16]
 8003176:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800317a:	2b00      	cmp	r3, #0
 800317c:	d09b      	beq.n	80030b6 <_printf_float+0xa2>
 800317e:	232d      	movs	r3, #45	; 0x2d
 8003180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003184:	e797      	b.n	80030b6 <_printf_float+0xa2>
 8003186:	2947      	cmp	r1, #71	; 0x47
 8003188:	d1bc      	bne.n	8003104 <_printf_float+0xf0>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ba      	bne.n	8003104 <_printf_float+0xf0>
 800318e:	2301      	movs	r3, #1
 8003190:	e7b7      	b.n	8003102 <_printf_float+0xee>
 8003192:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003196:	d118      	bne.n	80031ca <_printf_float+0x1b6>
 8003198:	2900      	cmp	r1, #0
 800319a:	6863      	ldr	r3, [r4, #4]
 800319c:	dd0b      	ble.n	80031b6 <_printf_float+0x1a2>
 800319e:	6121      	str	r1, [r4, #16]
 80031a0:	b913      	cbnz	r3, 80031a8 <_printf_float+0x194>
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	07d0      	lsls	r0, r2, #31
 80031a6:	d502      	bpl.n	80031ae <_printf_float+0x19a>
 80031a8:	3301      	adds	r3, #1
 80031aa:	440b      	add	r3, r1
 80031ac:	6123      	str	r3, [r4, #16]
 80031ae:	f04f 0a00 	mov.w	sl, #0
 80031b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80031b4:	e7df      	b.n	8003176 <_printf_float+0x162>
 80031b6:	b913      	cbnz	r3, 80031be <_printf_float+0x1aa>
 80031b8:	6822      	ldr	r2, [r4, #0]
 80031ba:	07d2      	lsls	r2, r2, #31
 80031bc:	d501      	bpl.n	80031c2 <_printf_float+0x1ae>
 80031be:	3302      	adds	r3, #2
 80031c0:	e7f4      	b.n	80031ac <_printf_float+0x198>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e7f2      	b.n	80031ac <_printf_float+0x198>
 80031c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80031ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031cc:	4299      	cmp	r1, r3
 80031ce:	db05      	blt.n	80031dc <_printf_float+0x1c8>
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	6121      	str	r1, [r4, #16]
 80031d4:	07d8      	lsls	r0, r3, #31
 80031d6:	d5ea      	bpl.n	80031ae <_printf_float+0x19a>
 80031d8:	1c4b      	adds	r3, r1, #1
 80031da:	e7e7      	b.n	80031ac <_printf_float+0x198>
 80031dc:	2900      	cmp	r1, #0
 80031de:	bfcc      	ite	gt
 80031e0:	2201      	movgt	r2, #1
 80031e2:	f1c1 0202 	rsble	r2, r1, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	e7e0      	b.n	80031ac <_printf_float+0x198>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	055a      	lsls	r2, r3, #21
 80031ee:	d407      	bmi.n	8003200 <_printf_float+0x1ec>
 80031f0:	6923      	ldr	r3, [r4, #16]
 80031f2:	4642      	mov	r2, r8
 80031f4:	4631      	mov	r1, r6
 80031f6:	4628      	mov	r0, r5
 80031f8:	47b8      	blx	r7
 80031fa:	3001      	adds	r0, #1
 80031fc:	d12b      	bne.n	8003256 <_printf_float+0x242>
 80031fe:	e764      	b.n	80030ca <_printf_float+0xb6>
 8003200:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003204:	f240 80dd 	bls.w	80033c2 <_printf_float+0x3ae>
 8003208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800320c:	2200      	movs	r2, #0
 800320e:	2300      	movs	r3, #0
 8003210:	f7fd fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8003214:	2800      	cmp	r0, #0
 8003216:	d033      	beq.n	8003280 <_printf_float+0x26c>
 8003218:	2301      	movs	r3, #1
 800321a:	4631      	mov	r1, r6
 800321c:	4628      	mov	r0, r5
 800321e:	4a35      	ldr	r2, [pc, #212]	; (80032f4 <_printf_float+0x2e0>)
 8003220:	47b8      	blx	r7
 8003222:	3001      	adds	r0, #1
 8003224:	f43f af51 	beq.w	80030ca <_printf_float+0xb6>
 8003228:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800322c:	429a      	cmp	r2, r3
 800322e:	db02      	blt.n	8003236 <_printf_float+0x222>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	07d8      	lsls	r0, r3, #31
 8003234:	d50f      	bpl.n	8003256 <_printf_float+0x242>
 8003236:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800323a:	4631      	mov	r1, r6
 800323c:	4628      	mov	r0, r5
 800323e:	47b8      	blx	r7
 8003240:	3001      	adds	r0, #1
 8003242:	f43f af42 	beq.w	80030ca <_printf_float+0xb6>
 8003246:	f04f 0800 	mov.w	r8, #0
 800324a:	f104 091a 	add.w	r9, r4, #26
 800324e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003250:	3b01      	subs	r3, #1
 8003252:	4543      	cmp	r3, r8
 8003254:	dc09      	bgt.n	800326a <_printf_float+0x256>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	079b      	lsls	r3, r3, #30
 800325a:	f100 8102 	bmi.w	8003462 <_printf_float+0x44e>
 800325e:	68e0      	ldr	r0, [r4, #12]
 8003260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003262:	4298      	cmp	r0, r3
 8003264:	bfb8      	it	lt
 8003266:	4618      	movlt	r0, r3
 8003268:	e731      	b.n	80030ce <_printf_float+0xba>
 800326a:	2301      	movs	r3, #1
 800326c:	464a      	mov	r2, r9
 800326e:	4631      	mov	r1, r6
 8003270:	4628      	mov	r0, r5
 8003272:	47b8      	blx	r7
 8003274:	3001      	adds	r0, #1
 8003276:	f43f af28 	beq.w	80030ca <_printf_float+0xb6>
 800327a:	f108 0801 	add.w	r8, r8, #1
 800327e:	e7e6      	b.n	800324e <_printf_float+0x23a>
 8003280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003282:	2b00      	cmp	r3, #0
 8003284:	dc38      	bgt.n	80032f8 <_printf_float+0x2e4>
 8003286:	2301      	movs	r3, #1
 8003288:	4631      	mov	r1, r6
 800328a:	4628      	mov	r0, r5
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <_printf_float+0x2e0>)
 800328e:	47b8      	blx	r7
 8003290:	3001      	adds	r0, #1
 8003292:	f43f af1a 	beq.w	80030ca <_printf_float+0xb6>
 8003296:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800329a:	4313      	orrs	r3, r2
 800329c:	d102      	bne.n	80032a4 <_printf_float+0x290>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	07d9      	lsls	r1, r3, #31
 80032a2:	d5d8      	bpl.n	8003256 <_printf_float+0x242>
 80032a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032a8:	4631      	mov	r1, r6
 80032aa:	4628      	mov	r0, r5
 80032ac:	47b8      	blx	r7
 80032ae:	3001      	adds	r0, #1
 80032b0:	f43f af0b 	beq.w	80030ca <_printf_float+0xb6>
 80032b4:	f04f 0900 	mov.w	r9, #0
 80032b8:	f104 0a1a 	add.w	sl, r4, #26
 80032bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032be:	425b      	negs	r3, r3
 80032c0:	454b      	cmp	r3, r9
 80032c2:	dc01      	bgt.n	80032c8 <_printf_float+0x2b4>
 80032c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032c6:	e794      	b.n	80031f2 <_printf_float+0x1de>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4652      	mov	r2, sl
 80032cc:	4631      	mov	r1, r6
 80032ce:	4628      	mov	r0, r5
 80032d0:	47b8      	blx	r7
 80032d2:	3001      	adds	r0, #1
 80032d4:	f43f aef9 	beq.w	80030ca <_printf_float+0xb6>
 80032d8:	f109 0901 	add.w	r9, r9, #1
 80032dc:	e7ee      	b.n	80032bc <_printf_float+0x2a8>
 80032de:	bf00      	nop
 80032e0:	7fefffff 	.word	0x7fefffff
 80032e4:	08005b14 	.word	0x08005b14
 80032e8:	08005b18 	.word	0x08005b18
 80032ec:	08005b20 	.word	0x08005b20
 80032f0:	08005b1c 	.word	0x08005b1c
 80032f4:	08005b24 	.word	0x08005b24
 80032f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032fc:	429a      	cmp	r2, r3
 80032fe:	bfa8      	it	ge
 8003300:	461a      	movge	r2, r3
 8003302:	2a00      	cmp	r2, #0
 8003304:	4691      	mov	r9, r2
 8003306:	dc37      	bgt.n	8003378 <_printf_float+0x364>
 8003308:	f04f 0b00 	mov.w	fp, #0
 800330c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003310:	f104 021a 	add.w	r2, r4, #26
 8003314:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003318:	ebaa 0309 	sub.w	r3, sl, r9
 800331c:	455b      	cmp	r3, fp
 800331e:	dc33      	bgt.n	8003388 <_printf_float+0x374>
 8003320:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003324:	429a      	cmp	r2, r3
 8003326:	db3b      	blt.n	80033a0 <_printf_float+0x38c>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	07da      	lsls	r2, r3, #31
 800332c:	d438      	bmi.n	80033a0 <_printf_float+0x38c>
 800332e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003330:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003332:	eba3 020a 	sub.w	r2, r3, sl
 8003336:	eba3 0901 	sub.w	r9, r3, r1
 800333a:	4591      	cmp	r9, r2
 800333c:	bfa8      	it	ge
 800333e:	4691      	movge	r9, r2
 8003340:	f1b9 0f00 	cmp.w	r9, #0
 8003344:	dc34      	bgt.n	80033b0 <_printf_float+0x39c>
 8003346:	f04f 0800 	mov.w	r8, #0
 800334a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800334e:	f104 0a1a 	add.w	sl, r4, #26
 8003352:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	eba3 0309 	sub.w	r3, r3, r9
 800335c:	4543      	cmp	r3, r8
 800335e:	f77f af7a 	ble.w	8003256 <_printf_float+0x242>
 8003362:	2301      	movs	r3, #1
 8003364:	4652      	mov	r2, sl
 8003366:	4631      	mov	r1, r6
 8003368:	4628      	mov	r0, r5
 800336a:	47b8      	blx	r7
 800336c:	3001      	adds	r0, #1
 800336e:	f43f aeac 	beq.w	80030ca <_printf_float+0xb6>
 8003372:	f108 0801 	add.w	r8, r8, #1
 8003376:	e7ec      	b.n	8003352 <_printf_float+0x33e>
 8003378:	4613      	mov	r3, r2
 800337a:	4631      	mov	r1, r6
 800337c:	4642      	mov	r2, r8
 800337e:	4628      	mov	r0, r5
 8003380:	47b8      	blx	r7
 8003382:	3001      	adds	r0, #1
 8003384:	d1c0      	bne.n	8003308 <_printf_float+0x2f4>
 8003386:	e6a0      	b.n	80030ca <_printf_float+0xb6>
 8003388:	2301      	movs	r3, #1
 800338a:	4631      	mov	r1, r6
 800338c:	4628      	mov	r0, r5
 800338e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003390:	47b8      	blx	r7
 8003392:	3001      	adds	r0, #1
 8003394:	f43f ae99 	beq.w	80030ca <_printf_float+0xb6>
 8003398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800339a:	f10b 0b01 	add.w	fp, fp, #1
 800339e:	e7b9      	b.n	8003314 <_printf_float+0x300>
 80033a0:	4631      	mov	r1, r6
 80033a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b8      	blx	r7
 80033aa:	3001      	adds	r0, #1
 80033ac:	d1bf      	bne.n	800332e <_printf_float+0x31a>
 80033ae:	e68c      	b.n	80030ca <_printf_float+0xb6>
 80033b0:	464b      	mov	r3, r9
 80033b2:	4631      	mov	r1, r6
 80033b4:	4628      	mov	r0, r5
 80033b6:	eb08 020a 	add.w	r2, r8, sl
 80033ba:	47b8      	blx	r7
 80033bc:	3001      	adds	r0, #1
 80033be:	d1c2      	bne.n	8003346 <_printf_float+0x332>
 80033c0:	e683      	b.n	80030ca <_printf_float+0xb6>
 80033c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033c4:	2a01      	cmp	r2, #1
 80033c6:	dc01      	bgt.n	80033cc <_printf_float+0x3b8>
 80033c8:	07db      	lsls	r3, r3, #31
 80033ca:	d537      	bpl.n	800343c <_printf_float+0x428>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4642      	mov	r2, r8
 80033d0:	4631      	mov	r1, r6
 80033d2:	4628      	mov	r0, r5
 80033d4:	47b8      	blx	r7
 80033d6:	3001      	adds	r0, #1
 80033d8:	f43f ae77 	beq.w	80030ca <_printf_float+0xb6>
 80033dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033e0:	4631      	mov	r1, r6
 80033e2:	4628      	mov	r0, r5
 80033e4:	47b8      	blx	r7
 80033e6:	3001      	adds	r0, #1
 80033e8:	f43f ae6f 	beq.w	80030ca <_printf_float+0xb6>
 80033ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033f0:	2200      	movs	r2, #0
 80033f2:	2300      	movs	r3, #0
 80033f4:	f7fd fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80033f8:	b9d8      	cbnz	r0, 8003432 <_printf_float+0x41e>
 80033fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033fc:	f108 0201 	add.w	r2, r8, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	4631      	mov	r1, r6
 8003404:	4628      	mov	r0, r5
 8003406:	47b8      	blx	r7
 8003408:	3001      	adds	r0, #1
 800340a:	d10e      	bne.n	800342a <_printf_float+0x416>
 800340c:	e65d      	b.n	80030ca <_printf_float+0xb6>
 800340e:	2301      	movs	r3, #1
 8003410:	464a      	mov	r2, r9
 8003412:	4631      	mov	r1, r6
 8003414:	4628      	mov	r0, r5
 8003416:	47b8      	blx	r7
 8003418:	3001      	adds	r0, #1
 800341a:	f43f ae56 	beq.w	80030ca <_printf_float+0xb6>
 800341e:	f108 0801 	add.w	r8, r8, #1
 8003422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003424:	3b01      	subs	r3, #1
 8003426:	4543      	cmp	r3, r8
 8003428:	dcf1      	bgt.n	800340e <_printf_float+0x3fa>
 800342a:	4653      	mov	r3, sl
 800342c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003430:	e6e0      	b.n	80031f4 <_printf_float+0x1e0>
 8003432:	f04f 0800 	mov.w	r8, #0
 8003436:	f104 091a 	add.w	r9, r4, #26
 800343a:	e7f2      	b.n	8003422 <_printf_float+0x40e>
 800343c:	2301      	movs	r3, #1
 800343e:	4642      	mov	r2, r8
 8003440:	e7df      	b.n	8003402 <_printf_float+0x3ee>
 8003442:	2301      	movs	r3, #1
 8003444:	464a      	mov	r2, r9
 8003446:	4631      	mov	r1, r6
 8003448:	4628      	mov	r0, r5
 800344a:	47b8      	blx	r7
 800344c:	3001      	adds	r0, #1
 800344e:	f43f ae3c 	beq.w	80030ca <_printf_float+0xb6>
 8003452:	f108 0801 	add.w	r8, r8, #1
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	4543      	cmp	r3, r8
 800345e:	dcf0      	bgt.n	8003442 <_printf_float+0x42e>
 8003460:	e6fd      	b.n	800325e <_printf_float+0x24a>
 8003462:	f04f 0800 	mov.w	r8, #0
 8003466:	f104 0919 	add.w	r9, r4, #25
 800346a:	e7f4      	b.n	8003456 <_printf_float+0x442>

0800346c <_printf_common>:
 800346c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003470:	4616      	mov	r6, r2
 8003472:	4699      	mov	r9, r3
 8003474:	688a      	ldr	r2, [r1, #8]
 8003476:	690b      	ldr	r3, [r1, #16]
 8003478:	4607      	mov	r7, r0
 800347a:	4293      	cmp	r3, r2
 800347c:	bfb8      	it	lt
 800347e:	4613      	movlt	r3, r2
 8003480:	6033      	str	r3, [r6, #0]
 8003482:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003486:	460c      	mov	r4, r1
 8003488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800348c:	b10a      	cbz	r2, 8003492 <_printf_common+0x26>
 800348e:	3301      	adds	r3, #1
 8003490:	6033      	str	r3, [r6, #0]
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	0699      	lsls	r1, r3, #26
 8003496:	bf42      	ittt	mi
 8003498:	6833      	ldrmi	r3, [r6, #0]
 800349a:	3302      	addmi	r3, #2
 800349c:	6033      	strmi	r3, [r6, #0]
 800349e:	6825      	ldr	r5, [r4, #0]
 80034a0:	f015 0506 	ands.w	r5, r5, #6
 80034a4:	d106      	bne.n	80034b4 <_printf_common+0x48>
 80034a6:	f104 0a19 	add.w	sl, r4, #25
 80034aa:	68e3      	ldr	r3, [r4, #12]
 80034ac:	6832      	ldr	r2, [r6, #0]
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	42ab      	cmp	r3, r5
 80034b2:	dc28      	bgt.n	8003506 <_printf_common+0x9a>
 80034b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034b8:	1e13      	subs	r3, r2, #0
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	bf18      	it	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	0692      	lsls	r2, r2, #26
 80034c2:	d42d      	bmi.n	8003520 <_printf_common+0xb4>
 80034c4:	4649      	mov	r1, r9
 80034c6:	4638      	mov	r0, r7
 80034c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034cc:	47c0      	blx	r8
 80034ce:	3001      	adds	r0, #1
 80034d0:	d020      	beq.n	8003514 <_printf_common+0xa8>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	68e5      	ldr	r5, [r4, #12]
 80034d6:	f003 0306 	and.w	r3, r3, #6
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf18      	it	ne
 80034de:	2500      	movne	r5, #0
 80034e0:	6832      	ldr	r2, [r6, #0]
 80034e2:	f04f 0600 	mov.w	r6, #0
 80034e6:	68a3      	ldr	r3, [r4, #8]
 80034e8:	bf08      	it	eq
 80034ea:	1aad      	subeq	r5, r5, r2
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	bf08      	it	eq
 80034f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bfc4      	itt	gt
 80034f8:	1a9b      	subgt	r3, r3, r2
 80034fa:	18ed      	addgt	r5, r5, r3
 80034fc:	341a      	adds	r4, #26
 80034fe:	42b5      	cmp	r5, r6
 8003500:	d11a      	bne.n	8003538 <_printf_common+0xcc>
 8003502:	2000      	movs	r0, #0
 8003504:	e008      	b.n	8003518 <_printf_common+0xac>
 8003506:	2301      	movs	r3, #1
 8003508:	4652      	mov	r2, sl
 800350a:	4649      	mov	r1, r9
 800350c:	4638      	mov	r0, r7
 800350e:	47c0      	blx	r8
 8003510:	3001      	adds	r0, #1
 8003512:	d103      	bne.n	800351c <_printf_common+0xb0>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	3501      	adds	r5, #1
 800351e:	e7c4      	b.n	80034aa <_printf_common+0x3e>
 8003520:	2030      	movs	r0, #48	; 0x30
 8003522:	18e1      	adds	r1, r4, r3
 8003524:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800352e:	4422      	add	r2, r4
 8003530:	3302      	adds	r3, #2
 8003532:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003536:	e7c5      	b.n	80034c4 <_printf_common+0x58>
 8003538:	2301      	movs	r3, #1
 800353a:	4622      	mov	r2, r4
 800353c:	4649      	mov	r1, r9
 800353e:	4638      	mov	r0, r7
 8003540:	47c0      	blx	r8
 8003542:	3001      	adds	r0, #1
 8003544:	d0e6      	beq.n	8003514 <_printf_common+0xa8>
 8003546:	3601      	adds	r6, #1
 8003548:	e7d9      	b.n	80034fe <_printf_common+0x92>
	...

0800354c <_printf_i>:
 800354c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003550:	7e0f      	ldrb	r7, [r1, #24]
 8003552:	4691      	mov	r9, r2
 8003554:	2f78      	cmp	r7, #120	; 0x78
 8003556:	4680      	mov	r8, r0
 8003558:	460c      	mov	r4, r1
 800355a:	469a      	mov	sl, r3
 800355c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800355e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003562:	d807      	bhi.n	8003574 <_printf_i+0x28>
 8003564:	2f62      	cmp	r7, #98	; 0x62
 8003566:	d80a      	bhi.n	800357e <_printf_i+0x32>
 8003568:	2f00      	cmp	r7, #0
 800356a:	f000 80d9 	beq.w	8003720 <_printf_i+0x1d4>
 800356e:	2f58      	cmp	r7, #88	; 0x58
 8003570:	f000 80a4 	beq.w	80036bc <_printf_i+0x170>
 8003574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800357c:	e03a      	b.n	80035f4 <_printf_i+0xa8>
 800357e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003582:	2b15      	cmp	r3, #21
 8003584:	d8f6      	bhi.n	8003574 <_printf_i+0x28>
 8003586:	a101      	add	r1, pc, #4	; (adr r1, 800358c <_printf_i+0x40>)
 8003588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800358c:	080035e5 	.word	0x080035e5
 8003590:	080035f9 	.word	0x080035f9
 8003594:	08003575 	.word	0x08003575
 8003598:	08003575 	.word	0x08003575
 800359c:	08003575 	.word	0x08003575
 80035a0:	08003575 	.word	0x08003575
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	08003575 	.word	0x08003575
 80035ac:	08003575 	.word	0x08003575
 80035b0:	08003575 	.word	0x08003575
 80035b4:	08003575 	.word	0x08003575
 80035b8:	08003707 	.word	0x08003707
 80035bc:	08003629 	.word	0x08003629
 80035c0:	080036e9 	.word	0x080036e9
 80035c4:	08003575 	.word	0x08003575
 80035c8:	08003575 	.word	0x08003575
 80035cc:	08003729 	.word	0x08003729
 80035d0:	08003575 	.word	0x08003575
 80035d4:	08003629 	.word	0x08003629
 80035d8:	08003575 	.word	0x08003575
 80035dc:	08003575 	.word	0x08003575
 80035e0:	080036f1 	.word	0x080036f1
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	602a      	str	r2, [r5, #0]
 80035ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0a4      	b.n	8003742 <_printf_i+0x1f6>
 80035f8:	6820      	ldr	r0, [r4, #0]
 80035fa:	6829      	ldr	r1, [r5, #0]
 80035fc:	0606      	lsls	r6, r0, #24
 80035fe:	f101 0304 	add.w	r3, r1, #4
 8003602:	d50a      	bpl.n	800361a <_printf_i+0xce>
 8003604:	680e      	ldr	r6, [r1, #0]
 8003606:	602b      	str	r3, [r5, #0]
 8003608:	2e00      	cmp	r6, #0
 800360a:	da03      	bge.n	8003614 <_printf_i+0xc8>
 800360c:	232d      	movs	r3, #45	; 0x2d
 800360e:	4276      	negs	r6, r6
 8003610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003614:	230a      	movs	r3, #10
 8003616:	485e      	ldr	r0, [pc, #376]	; (8003790 <_printf_i+0x244>)
 8003618:	e019      	b.n	800364e <_printf_i+0x102>
 800361a:	680e      	ldr	r6, [r1, #0]
 800361c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	bf18      	it	ne
 8003624:	b236      	sxthne	r6, r6
 8003626:	e7ef      	b.n	8003608 <_printf_i+0xbc>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	1d19      	adds	r1, r3, #4
 800362e:	6029      	str	r1, [r5, #0]
 8003630:	0601      	lsls	r1, r0, #24
 8003632:	d501      	bpl.n	8003638 <_printf_i+0xec>
 8003634:	681e      	ldr	r6, [r3, #0]
 8003636:	e002      	b.n	800363e <_printf_i+0xf2>
 8003638:	0646      	lsls	r6, r0, #25
 800363a:	d5fb      	bpl.n	8003634 <_printf_i+0xe8>
 800363c:	881e      	ldrh	r6, [r3, #0]
 800363e:	2f6f      	cmp	r7, #111	; 0x6f
 8003640:	bf0c      	ite	eq
 8003642:	2308      	moveq	r3, #8
 8003644:	230a      	movne	r3, #10
 8003646:	4852      	ldr	r0, [pc, #328]	; (8003790 <_printf_i+0x244>)
 8003648:	2100      	movs	r1, #0
 800364a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800364e:	6865      	ldr	r5, [r4, #4]
 8003650:	2d00      	cmp	r5, #0
 8003652:	bfa8      	it	ge
 8003654:	6821      	ldrge	r1, [r4, #0]
 8003656:	60a5      	str	r5, [r4, #8]
 8003658:	bfa4      	itt	ge
 800365a:	f021 0104 	bicge.w	r1, r1, #4
 800365e:	6021      	strge	r1, [r4, #0]
 8003660:	b90e      	cbnz	r6, 8003666 <_printf_i+0x11a>
 8003662:	2d00      	cmp	r5, #0
 8003664:	d04d      	beq.n	8003702 <_printf_i+0x1b6>
 8003666:	4615      	mov	r5, r2
 8003668:	fbb6 f1f3 	udiv	r1, r6, r3
 800366c:	fb03 6711 	mls	r7, r3, r1, r6
 8003670:	5dc7      	ldrb	r7, [r0, r7]
 8003672:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003676:	4637      	mov	r7, r6
 8003678:	42bb      	cmp	r3, r7
 800367a:	460e      	mov	r6, r1
 800367c:	d9f4      	bls.n	8003668 <_printf_i+0x11c>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d10b      	bne.n	800369a <_printf_i+0x14e>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	07de      	lsls	r6, r3, #31
 8003686:	d508      	bpl.n	800369a <_printf_i+0x14e>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	6861      	ldr	r1, [r4, #4]
 800368c:	4299      	cmp	r1, r3
 800368e:	bfde      	ittt	le
 8003690:	2330      	movle	r3, #48	; 0x30
 8003692:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003696:	f105 35ff 	addle.w	r5, r5, #4294967295
 800369a:	1b52      	subs	r2, r2, r5
 800369c:	6122      	str	r2, [r4, #16]
 800369e:	464b      	mov	r3, r9
 80036a0:	4621      	mov	r1, r4
 80036a2:	4640      	mov	r0, r8
 80036a4:	f8cd a000 	str.w	sl, [sp]
 80036a8:	aa03      	add	r2, sp, #12
 80036aa:	f7ff fedf 	bl	800346c <_printf_common>
 80036ae:	3001      	adds	r0, #1
 80036b0:	d14c      	bne.n	800374c <_printf_i+0x200>
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	b004      	add	sp, #16
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	4834      	ldr	r0, [pc, #208]	; (8003790 <_printf_i+0x244>)
 80036be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036c2:	6829      	ldr	r1, [r5, #0]
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80036ca:	6029      	str	r1, [r5, #0]
 80036cc:	061d      	lsls	r5, r3, #24
 80036ce:	d514      	bpl.n	80036fa <_printf_i+0x1ae>
 80036d0:	07df      	lsls	r7, r3, #31
 80036d2:	bf44      	itt	mi
 80036d4:	f043 0320 	orrmi.w	r3, r3, #32
 80036d8:	6023      	strmi	r3, [r4, #0]
 80036da:	b91e      	cbnz	r6, 80036e4 <_printf_i+0x198>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	f023 0320 	bic.w	r3, r3, #32
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	2310      	movs	r3, #16
 80036e6:	e7af      	b.n	8003648 <_printf_i+0xfc>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	2378      	movs	r3, #120	; 0x78
 80036f2:	4828      	ldr	r0, [pc, #160]	; (8003794 <_printf_i+0x248>)
 80036f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036f8:	e7e3      	b.n	80036c2 <_printf_i+0x176>
 80036fa:	0659      	lsls	r1, r3, #25
 80036fc:	bf48      	it	mi
 80036fe:	b2b6      	uxthmi	r6, r6
 8003700:	e7e6      	b.n	80036d0 <_printf_i+0x184>
 8003702:	4615      	mov	r5, r2
 8003704:	e7bb      	b.n	800367e <_printf_i+0x132>
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	6826      	ldr	r6, [r4, #0]
 800370a:	1d18      	adds	r0, r3, #4
 800370c:	6961      	ldr	r1, [r4, #20]
 800370e:	6028      	str	r0, [r5, #0]
 8003710:	0635      	lsls	r5, r6, #24
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	d501      	bpl.n	800371a <_printf_i+0x1ce>
 8003716:	6019      	str	r1, [r3, #0]
 8003718:	e002      	b.n	8003720 <_printf_i+0x1d4>
 800371a:	0670      	lsls	r0, r6, #25
 800371c:	d5fb      	bpl.n	8003716 <_printf_i+0x1ca>
 800371e:	8019      	strh	r1, [r3, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	4615      	mov	r5, r2
 8003724:	6123      	str	r3, [r4, #16]
 8003726:	e7ba      	b.n	800369e <_printf_i+0x152>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	1d1a      	adds	r2, r3, #4
 800372e:	602a      	str	r2, [r5, #0]
 8003730:	681d      	ldr	r5, [r3, #0]
 8003732:	6862      	ldr	r2, [r4, #4]
 8003734:	4628      	mov	r0, r5
 8003736:	f001 fa21 	bl	8004b7c <memchr>
 800373a:	b108      	cbz	r0, 8003740 <_printf_i+0x1f4>
 800373c:	1b40      	subs	r0, r0, r5
 800373e:	6060      	str	r0, [r4, #4]
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	2300      	movs	r3, #0
 8003746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374a:	e7a8      	b.n	800369e <_printf_i+0x152>
 800374c:	462a      	mov	r2, r5
 800374e:	4649      	mov	r1, r9
 8003750:	4640      	mov	r0, r8
 8003752:	6923      	ldr	r3, [r4, #16]
 8003754:	47d0      	blx	sl
 8003756:	3001      	adds	r0, #1
 8003758:	d0ab      	beq.n	80036b2 <_printf_i+0x166>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	079b      	lsls	r3, r3, #30
 800375e:	d413      	bmi.n	8003788 <_printf_i+0x23c>
 8003760:	68e0      	ldr	r0, [r4, #12]
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	4298      	cmp	r0, r3
 8003766:	bfb8      	it	lt
 8003768:	4618      	movlt	r0, r3
 800376a:	e7a4      	b.n	80036b6 <_printf_i+0x16a>
 800376c:	2301      	movs	r3, #1
 800376e:	4632      	mov	r2, r6
 8003770:	4649      	mov	r1, r9
 8003772:	4640      	mov	r0, r8
 8003774:	47d0      	blx	sl
 8003776:	3001      	adds	r0, #1
 8003778:	d09b      	beq.n	80036b2 <_printf_i+0x166>
 800377a:	3501      	adds	r5, #1
 800377c:	68e3      	ldr	r3, [r4, #12]
 800377e:	9903      	ldr	r1, [sp, #12]
 8003780:	1a5b      	subs	r3, r3, r1
 8003782:	42ab      	cmp	r3, r5
 8003784:	dcf2      	bgt.n	800376c <_printf_i+0x220>
 8003786:	e7eb      	b.n	8003760 <_printf_i+0x214>
 8003788:	2500      	movs	r5, #0
 800378a:	f104 0619 	add.w	r6, r4, #25
 800378e:	e7f5      	b.n	800377c <_printf_i+0x230>
 8003790:	08005b26 	.word	0x08005b26
 8003794:	08005b37 	.word	0x08005b37

08003798 <iprintf>:
 8003798:	b40f      	push	{r0, r1, r2, r3}
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <iprintf+0x2c>)
 800379c:	b513      	push	{r0, r1, r4, lr}
 800379e:	681c      	ldr	r4, [r3, #0]
 80037a0:	b124      	cbz	r4, 80037ac <iprintf+0x14>
 80037a2:	69a3      	ldr	r3, [r4, #24]
 80037a4:	b913      	cbnz	r3, 80037ac <iprintf+0x14>
 80037a6:	4620      	mov	r0, r4
 80037a8:	f001 f8d6 	bl	8004958 <__sinit>
 80037ac:	ab05      	add	r3, sp, #20
 80037ae:	4620      	mov	r0, r4
 80037b0:	9a04      	ldr	r2, [sp, #16]
 80037b2:	68a1      	ldr	r1, [r4, #8]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	f001 fe97 	bl	80054e8 <_vfiprintf_r>
 80037ba:	b002      	add	sp, #8
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c0:	b004      	add	sp, #16
 80037c2:	4770      	bx	lr
 80037c4:	2000000c 	.word	0x2000000c

080037c8 <_puts_r>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	460e      	mov	r6, r1
 80037cc:	4605      	mov	r5, r0
 80037ce:	b118      	cbz	r0, 80037d8 <_puts_r+0x10>
 80037d0:	6983      	ldr	r3, [r0, #24]
 80037d2:	b90b      	cbnz	r3, 80037d8 <_puts_r+0x10>
 80037d4:	f001 f8c0 	bl	8004958 <__sinit>
 80037d8:	69ab      	ldr	r3, [r5, #24]
 80037da:	68ac      	ldr	r4, [r5, #8]
 80037dc:	b913      	cbnz	r3, 80037e4 <_puts_r+0x1c>
 80037de:	4628      	mov	r0, r5
 80037e0:	f001 f8ba 	bl	8004958 <__sinit>
 80037e4:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <_puts_r+0xd0>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d120      	bne.n	800382c <_puts_r+0x64>
 80037ea:	686c      	ldr	r4, [r5, #4]
 80037ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037ee:	07db      	lsls	r3, r3, #31
 80037f0:	d405      	bmi.n	80037fe <_puts_r+0x36>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	0598      	lsls	r0, r3, #22
 80037f6:	d402      	bmi.n	80037fe <_puts_r+0x36>
 80037f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fa:	f001 f950 	bl	8004a9e <__retarget_lock_acquire_recursive>
 80037fe:	89a3      	ldrh	r3, [r4, #12]
 8003800:	0719      	lsls	r1, r3, #28
 8003802:	d51d      	bpl.n	8003840 <_puts_r+0x78>
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	b1db      	cbz	r3, 8003840 <_puts_r+0x78>
 8003808:	3e01      	subs	r6, #1
 800380a:	68a3      	ldr	r3, [r4, #8]
 800380c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003810:	3b01      	subs	r3, #1
 8003812:	60a3      	str	r3, [r4, #8]
 8003814:	bb39      	cbnz	r1, 8003866 <_puts_r+0x9e>
 8003816:	2b00      	cmp	r3, #0
 8003818:	da38      	bge.n	800388c <_puts_r+0xc4>
 800381a:	4622      	mov	r2, r4
 800381c:	210a      	movs	r1, #10
 800381e:	4628      	mov	r0, r5
 8003820:	f000 f848 	bl	80038b4 <__swbuf_r>
 8003824:	3001      	adds	r0, #1
 8003826:	d011      	beq.n	800384c <_puts_r+0x84>
 8003828:	250a      	movs	r5, #10
 800382a:	e011      	b.n	8003850 <_puts_r+0x88>
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <_puts_r+0xd4>)
 800382e:	429c      	cmp	r4, r3
 8003830:	d101      	bne.n	8003836 <_puts_r+0x6e>
 8003832:	68ac      	ldr	r4, [r5, #8]
 8003834:	e7da      	b.n	80037ec <_puts_r+0x24>
 8003836:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <_puts_r+0xd8>)
 8003838:	429c      	cmp	r4, r3
 800383a:	bf08      	it	eq
 800383c:	68ec      	ldreq	r4, [r5, #12]
 800383e:	e7d5      	b.n	80037ec <_puts_r+0x24>
 8003840:	4621      	mov	r1, r4
 8003842:	4628      	mov	r0, r5
 8003844:	f000 f888 	bl	8003958 <__swsetup_r>
 8003848:	2800      	cmp	r0, #0
 800384a:	d0dd      	beq.n	8003808 <_puts_r+0x40>
 800384c:	f04f 35ff 	mov.w	r5, #4294967295
 8003850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003852:	07da      	lsls	r2, r3, #31
 8003854:	d405      	bmi.n	8003862 <_puts_r+0x9a>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	059b      	lsls	r3, r3, #22
 800385a:	d402      	bmi.n	8003862 <_puts_r+0x9a>
 800385c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800385e:	f001 f91f 	bl	8004aa0 <__retarget_lock_release_recursive>
 8003862:	4628      	mov	r0, r5
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	2b00      	cmp	r3, #0
 8003868:	da04      	bge.n	8003874 <_puts_r+0xac>
 800386a:	69a2      	ldr	r2, [r4, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	dc06      	bgt.n	800387e <_puts_r+0xb6>
 8003870:	290a      	cmp	r1, #10
 8003872:	d004      	beq.n	800387e <_puts_r+0xb6>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	7019      	strb	r1, [r3, #0]
 800387c:	e7c5      	b.n	800380a <_puts_r+0x42>
 800387e:	4622      	mov	r2, r4
 8003880:	4628      	mov	r0, r5
 8003882:	f000 f817 	bl	80038b4 <__swbuf_r>
 8003886:	3001      	adds	r0, #1
 8003888:	d1bf      	bne.n	800380a <_puts_r+0x42>
 800388a:	e7df      	b.n	800384c <_puts_r+0x84>
 800388c:	250a      	movs	r5, #10
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	6022      	str	r2, [r4, #0]
 8003894:	701d      	strb	r5, [r3, #0]
 8003896:	e7db      	b.n	8003850 <_puts_r+0x88>
 8003898:	08005bf8 	.word	0x08005bf8
 800389c:	08005c18 	.word	0x08005c18
 80038a0:	08005bd8 	.word	0x08005bd8

080038a4 <puts>:
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <puts+0xc>)
 80038a6:	4601      	mov	r1, r0
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	f7ff bf8d 	b.w	80037c8 <_puts_r>
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <__swbuf_r>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	460e      	mov	r6, r1
 80038b8:	4614      	mov	r4, r2
 80038ba:	4605      	mov	r5, r0
 80038bc:	b118      	cbz	r0, 80038c6 <__swbuf_r+0x12>
 80038be:	6983      	ldr	r3, [r0, #24]
 80038c0:	b90b      	cbnz	r3, 80038c6 <__swbuf_r+0x12>
 80038c2:	f001 f849 	bl	8004958 <__sinit>
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <__swbuf_r+0x98>)
 80038c8:	429c      	cmp	r4, r3
 80038ca:	d12b      	bne.n	8003924 <__swbuf_r+0x70>
 80038cc:	686c      	ldr	r4, [r5, #4]
 80038ce:	69a3      	ldr	r3, [r4, #24]
 80038d0:	60a3      	str	r3, [r4, #8]
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	071a      	lsls	r2, r3, #28
 80038d6:	d52f      	bpl.n	8003938 <__swbuf_r+0x84>
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	b36b      	cbz	r3, 8003938 <__swbuf_r+0x84>
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	b2f6      	uxtb	r6, r6
 80038e2:	1ac0      	subs	r0, r0, r3
 80038e4:	6963      	ldr	r3, [r4, #20]
 80038e6:	4637      	mov	r7, r6
 80038e8:	4283      	cmp	r3, r0
 80038ea:	dc04      	bgt.n	80038f6 <__swbuf_r+0x42>
 80038ec:	4621      	mov	r1, r4
 80038ee:	4628      	mov	r0, r5
 80038f0:	f000 ff9e 	bl	8004830 <_fflush_r>
 80038f4:	bb30      	cbnz	r0, 8003944 <__swbuf_r+0x90>
 80038f6:	68a3      	ldr	r3, [r4, #8]
 80038f8:	3001      	adds	r0, #1
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	701e      	strb	r6, [r3, #0]
 8003906:	6963      	ldr	r3, [r4, #20]
 8003908:	4283      	cmp	r3, r0
 800390a:	d004      	beq.n	8003916 <__swbuf_r+0x62>
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	07db      	lsls	r3, r3, #31
 8003910:	d506      	bpl.n	8003920 <__swbuf_r+0x6c>
 8003912:	2e0a      	cmp	r6, #10
 8003914:	d104      	bne.n	8003920 <__swbuf_r+0x6c>
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 ff89 	bl	8004830 <_fflush_r>
 800391e:	b988      	cbnz	r0, 8003944 <__swbuf_r+0x90>
 8003920:	4638      	mov	r0, r7
 8003922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <__swbuf_r+0x9c>)
 8003926:	429c      	cmp	r4, r3
 8003928:	d101      	bne.n	800392e <__swbuf_r+0x7a>
 800392a:	68ac      	ldr	r4, [r5, #8]
 800392c:	e7cf      	b.n	80038ce <__swbuf_r+0x1a>
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <__swbuf_r+0xa0>)
 8003930:	429c      	cmp	r4, r3
 8003932:	bf08      	it	eq
 8003934:	68ec      	ldreq	r4, [r5, #12]
 8003936:	e7ca      	b.n	80038ce <__swbuf_r+0x1a>
 8003938:	4621      	mov	r1, r4
 800393a:	4628      	mov	r0, r5
 800393c:	f000 f80c 	bl	8003958 <__swsetup_r>
 8003940:	2800      	cmp	r0, #0
 8003942:	d0cb      	beq.n	80038dc <__swbuf_r+0x28>
 8003944:	f04f 37ff 	mov.w	r7, #4294967295
 8003948:	e7ea      	b.n	8003920 <__swbuf_r+0x6c>
 800394a:	bf00      	nop
 800394c:	08005bf8 	.word	0x08005bf8
 8003950:	08005c18 	.word	0x08005c18
 8003954:	08005bd8 	.word	0x08005bd8

08003958 <__swsetup_r>:
 8003958:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <__swsetup_r+0xcc>)
 800395a:	b570      	push	{r4, r5, r6, lr}
 800395c:	681d      	ldr	r5, [r3, #0]
 800395e:	4606      	mov	r6, r0
 8003960:	460c      	mov	r4, r1
 8003962:	b125      	cbz	r5, 800396e <__swsetup_r+0x16>
 8003964:	69ab      	ldr	r3, [r5, #24]
 8003966:	b913      	cbnz	r3, 800396e <__swsetup_r+0x16>
 8003968:	4628      	mov	r0, r5
 800396a:	f000 fff5 	bl	8004958 <__sinit>
 800396e:	4b2e      	ldr	r3, [pc, #184]	; (8003a28 <__swsetup_r+0xd0>)
 8003970:	429c      	cmp	r4, r3
 8003972:	d10f      	bne.n	8003994 <__swsetup_r+0x3c>
 8003974:	686c      	ldr	r4, [r5, #4]
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800397c:	0719      	lsls	r1, r3, #28
 800397e:	d42c      	bmi.n	80039da <__swsetup_r+0x82>
 8003980:	06dd      	lsls	r5, r3, #27
 8003982:	d411      	bmi.n	80039a8 <__swsetup_r+0x50>
 8003984:	2309      	movs	r3, #9
 8003986:	6033      	str	r3, [r6, #0]
 8003988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	e03e      	b.n	8003a12 <__swsetup_r+0xba>
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <__swsetup_r+0xd4>)
 8003996:	429c      	cmp	r4, r3
 8003998:	d101      	bne.n	800399e <__swsetup_r+0x46>
 800399a:	68ac      	ldr	r4, [r5, #8]
 800399c:	e7eb      	b.n	8003976 <__swsetup_r+0x1e>
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <__swsetup_r+0xd8>)
 80039a0:	429c      	cmp	r4, r3
 80039a2:	bf08      	it	eq
 80039a4:	68ec      	ldreq	r4, [r5, #12]
 80039a6:	e7e6      	b.n	8003976 <__swsetup_r+0x1e>
 80039a8:	0758      	lsls	r0, r3, #29
 80039aa:	d512      	bpl.n	80039d2 <__swsetup_r+0x7a>
 80039ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ae:	b141      	cbz	r1, 80039c2 <__swsetup_r+0x6a>
 80039b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039b4:	4299      	cmp	r1, r3
 80039b6:	d002      	beq.n	80039be <__swsetup_r+0x66>
 80039b8:	4630      	mov	r0, r6
 80039ba:	f001 fc91 	bl	80052e0 <_free_r>
 80039be:	2300      	movs	r3, #0
 80039c0:	6363      	str	r3, [r4, #52]	; 0x34
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	2300      	movs	r3, #0
 80039cc:	6063      	str	r3, [r4, #4]
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	b94b      	cbnz	r3, 80039f2 <__swsetup_r+0x9a>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d003      	beq.n	80039f2 <__swsetup_r+0x9a>
 80039ea:	4621      	mov	r1, r4
 80039ec:	4630      	mov	r0, r6
 80039ee:	f001 f87d 	bl	8004aec <__smakebuf_r>
 80039f2:	89a0      	ldrh	r0, [r4, #12]
 80039f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039f8:	f010 0301 	ands.w	r3, r0, #1
 80039fc:	d00a      	beq.n	8003a14 <__swsetup_r+0xbc>
 80039fe:	2300      	movs	r3, #0
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	6963      	ldr	r3, [r4, #20]
 8003a04:	425b      	negs	r3, r3
 8003a06:	61a3      	str	r3, [r4, #24]
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	b943      	cbnz	r3, 8003a1e <__swsetup_r+0xc6>
 8003a0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a10:	d1ba      	bne.n	8003988 <__swsetup_r+0x30>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	0781      	lsls	r1, r0, #30
 8003a16:	bf58      	it	pl
 8003a18:	6963      	ldrpl	r3, [r4, #20]
 8003a1a:	60a3      	str	r3, [r4, #8]
 8003a1c:	e7f4      	b.n	8003a08 <__swsetup_r+0xb0>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e7f7      	b.n	8003a12 <__swsetup_r+0xba>
 8003a22:	bf00      	nop
 8003a24:	2000000c 	.word	0x2000000c
 8003a28:	08005bf8 	.word	0x08005bf8
 8003a2c:	08005c18 	.word	0x08005c18
 8003a30:	08005bd8 	.word	0x08005bd8

08003a34 <quorem>:
 8003a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	6903      	ldr	r3, [r0, #16]
 8003a3a:	690c      	ldr	r4, [r1, #16]
 8003a3c:	4607      	mov	r7, r0
 8003a3e:	42a3      	cmp	r3, r4
 8003a40:	f2c0 8082 	blt.w	8003b48 <quorem+0x114>
 8003a44:	3c01      	subs	r4, #1
 8003a46:	f100 0514 	add.w	r5, r0, #20
 8003a4a:	f101 0814 	add.w	r8, r1, #20
 8003a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a6c:	d331      	bcc.n	8003ad2 <quorem+0x9e>
 8003a6e:	f04f 0e00 	mov.w	lr, #0
 8003a72:	4640      	mov	r0, r8
 8003a74:	46ac      	mov	ip, r5
 8003a76:	46f2      	mov	sl, lr
 8003a78:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a7c:	b293      	uxth	r3, r2
 8003a7e:	fb06 e303 	mla	r3, r6, r3, lr
 8003a82:	0c12      	lsrs	r2, r2, #16
 8003a84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	fb06 e202 	mla	r2, r6, r2, lr
 8003a8e:	ebaa 0303 	sub.w	r3, sl, r3
 8003a92:	f8dc a000 	ldr.w	sl, [ip]
 8003a96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003a9a:	fa1f fa8a 	uxth.w	sl, sl
 8003a9e:	4453      	add	r3, sl
 8003aa0:	f8dc a000 	ldr.w	sl, [ip]
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ab4:	4581      	cmp	r9, r0
 8003ab6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003aba:	f84c 3b04 	str.w	r3, [ip], #4
 8003abe:	d2db      	bcs.n	8003a78 <quorem+0x44>
 8003ac0:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ac4:	b92b      	cbnz	r3, 8003ad2 <quorem+0x9e>
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	3b04      	subs	r3, #4
 8003aca:	429d      	cmp	r5, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	d32f      	bcc.n	8003b30 <quorem+0xfc>
 8003ad0:	613c      	str	r4, [r7, #16]
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	f001 faec 	bl	80050b0 <__mcmp>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	db25      	blt.n	8003b28 <quorem+0xf4>
 8003adc:	4628      	mov	r0, r5
 8003ade:	f04f 0c00 	mov.w	ip, #0
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	f858 1b04 	ldr.w	r1, [r8], #4
 8003ae8:	f8d0 e000 	ldr.w	lr, [r0]
 8003aec:	b28b      	uxth	r3, r1
 8003aee:	ebac 0303 	sub.w	r3, ip, r3
 8003af2:	fa1f f28e 	uxth.w	r2, lr
 8003af6:	4413      	add	r3, r2
 8003af8:	0c0a      	lsrs	r2, r1, #16
 8003afa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003afe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b08:	45c1      	cmp	r9, r8
 8003b0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b0e:	f840 3b04 	str.w	r3, [r0], #4
 8003b12:	d2e7      	bcs.n	8003ae4 <quorem+0xb0>
 8003b14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b1c:	b922      	cbnz	r2, 8003b28 <quorem+0xf4>
 8003b1e:	3b04      	subs	r3, #4
 8003b20:	429d      	cmp	r5, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	d30a      	bcc.n	8003b3c <quorem+0x108>
 8003b26:	613c      	str	r4, [r7, #16]
 8003b28:	4630      	mov	r0, r6
 8003b2a:	b003      	add	sp, #12
 8003b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	3b04      	subs	r3, #4
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d1cb      	bne.n	8003ad0 <quorem+0x9c>
 8003b38:	3c01      	subs	r4, #1
 8003b3a:	e7c6      	b.n	8003aca <quorem+0x96>
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	2a00      	cmp	r2, #0
 8003b42:	d1f0      	bne.n	8003b26 <quorem+0xf2>
 8003b44:	3c01      	subs	r4, #1
 8003b46:	e7eb      	b.n	8003b20 <quorem+0xec>
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e7ee      	b.n	8003b2a <quorem+0xf6>
 8003b4c:	0000      	movs	r0, r0
	...

08003b50 <_dtoa_r>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	4616      	mov	r6, r2
 8003b56:	461f      	mov	r7, r3
 8003b58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003b5a:	b099      	sub	sp, #100	; 0x64
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003b62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003b66:	b974      	cbnz	r4, 8003b86 <_dtoa_r+0x36>
 8003b68:	2010      	movs	r0, #16
 8003b6a:	f000 ffff 	bl	8004b6c <malloc>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6268      	str	r0, [r5, #36]	; 0x24
 8003b72:	b920      	cbnz	r0, 8003b7e <_dtoa_r+0x2e>
 8003b74:	21ea      	movs	r1, #234	; 0xea
 8003b76:	4ba8      	ldr	r3, [pc, #672]	; (8003e18 <_dtoa_r+0x2c8>)
 8003b78:	48a8      	ldr	r0, [pc, #672]	; (8003e1c <_dtoa_r+0x2cc>)
 8003b7a:	f001 fe4b 	bl	8005814 <__assert_func>
 8003b7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003b82:	6004      	str	r4, [r0, #0]
 8003b84:	60c4      	str	r4, [r0, #12]
 8003b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	b151      	cbz	r1, 8003ba2 <_dtoa_r+0x52>
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4093      	lsls	r3, r2
 8003b92:	604a      	str	r2, [r1, #4]
 8003b94:	608b      	str	r3, [r1, #8]
 8003b96:	4628      	mov	r0, r5
 8003b98:	f001 f84c 	bl	8004c34 <_Bfree>
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	1e3b      	subs	r3, r7, #0
 8003ba4:	bfaf      	iteee	ge
 8003ba6:	2300      	movge	r3, #0
 8003ba8:	2201      	movlt	r2, #1
 8003baa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	9305      	strlt	r3, [sp, #20]
 8003bb0:	bfa8      	it	ge
 8003bb2:	f8c8 3000 	strge.w	r3, [r8]
 8003bb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003bba:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <_dtoa_r+0x2d0>)
 8003bbc:	bfb8      	it	lt
 8003bbe:	f8c8 2000 	strlt.w	r2, [r8]
 8003bc2:	ea33 0309 	bics.w	r3, r3, r9
 8003bc6:	d119      	bne.n	8003bfc <_dtoa_r+0xac>
 8003bc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003bd4:	4333      	orrs	r3, r6
 8003bd6:	f000 857f 	beq.w	80046d8 <_dtoa_r+0xb88>
 8003bda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003bdc:	b953      	cbnz	r3, 8003bf4 <_dtoa_r+0xa4>
 8003bde:	4b91      	ldr	r3, [pc, #580]	; (8003e24 <_dtoa_r+0x2d4>)
 8003be0:	e022      	b.n	8003c28 <_dtoa_r+0xd8>
 8003be2:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <_dtoa_r+0x2d8>)
 8003be4:	9303      	str	r3, [sp, #12]
 8003be6:	3308      	adds	r3, #8
 8003be8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	9803      	ldr	r0, [sp, #12]
 8003bee:	b019      	add	sp, #100	; 0x64
 8003bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf4:	4b8b      	ldr	r3, [pc, #556]	; (8003e24 <_dtoa_r+0x2d4>)
 8003bf6:	9303      	str	r3, [sp, #12]
 8003bf8:	3303      	adds	r3, #3
 8003bfa:	e7f5      	b.n	8003be8 <_dtoa_r+0x98>
 8003bfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f7fc fecc 	bl	80009a8 <__aeabi_dcmpeq>
 8003c10:	4680      	mov	r8, r0
 8003c12:	b158      	cbz	r0, 8003c2c <_dtoa_r+0xdc>
 8003c14:	2301      	movs	r3, #1
 8003c16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8558 	beq.w	80046d2 <_dtoa_r+0xb82>
 8003c22:	4882      	ldr	r0, [pc, #520]	; (8003e2c <_dtoa_r+0x2dc>)
 8003c24:	6018      	str	r0, [r3, #0]
 8003c26:	1e43      	subs	r3, r0, #1
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	e7df      	b.n	8003bec <_dtoa_r+0x9c>
 8003c2c:	ab16      	add	r3, sp, #88	; 0x58
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	ab17      	add	r3, sp, #92	; 0x5c
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	4628      	mov	r0, r5
 8003c36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c3a:	f001 fae1 	bl	8005200 <__d2b>
 8003c3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003c42:	4683      	mov	fp, r0
 8003c44:	2c00      	cmp	r4, #0
 8003c46:	d07f      	beq.n	8003d48 <_dtoa_r+0x1f8>
 8003c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003c5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003c62:	2200      	movs	r2, #0
 8003c64:	4b72      	ldr	r3, [pc, #456]	; (8003e30 <_dtoa_r+0x2e0>)
 8003c66:	f7fc fa7f 	bl	8000168 <__aeabi_dsub>
 8003c6a:	a365      	add	r3, pc, #404	; (adr r3, 8003e00 <_dtoa_r+0x2b0>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f7fc fc32 	bl	80004d8 <__aeabi_dmul>
 8003c74:	a364      	add	r3, pc, #400	; (adr r3, 8003e08 <_dtoa_r+0x2b8>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc fa77 	bl	800016c <__adddf3>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	4620      	mov	r0, r4
 8003c82:	460f      	mov	r7, r1
 8003c84:	f7fc fbbe 	bl	8000404 <__aeabi_i2d>
 8003c88:	a361      	add	r3, pc, #388	; (adr r3, 8003e10 <_dtoa_r+0x2c0>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f7fc fc23 	bl	80004d8 <__aeabi_dmul>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4630      	mov	r0, r6
 8003c98:	4639      	mov	r1, r7
 8003c9a:	f7fc fa67 	bl	800016c <__adddf3>
 8003c9e:	4606      	mov	r6, r0
 8003ca0:	460f      	mov	r7, r1
 8003ca2:	f7fc fec9 	bl	8000a38 <__aeabi_d2iz>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4682      	mov	sl, r0
 8003caa:	2300      	movs	r3, #0
 8003cac:	4630      	mov	r0, r6
 8003cae:	4639      	mov	r1, r7
 8003cb0:	f7fc fe84 	bl	80009bc <__aeabi_dcmplt>
 8003cb4:	b148      	cbz	r0, 8003cca <_dtoa_r+0x17a>
 8003cb6:	4650      	mov	r0, sl
 8003cb8:	f7fc fba4 	bl	8000404 <__aeabi_i2d>
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	463b      	mov	r3, r7
 8003cc0:	f7fc fe72 	bl	80009a8 <__aeabi_dcmpeq>
 8003cc4:	b908      	cbnz	r0, 8003cca <_dtoa_r+0x17a>
 8003cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cca:	f1ba 0f16 	cmp.w	sl, #22
 8003cce:	d858      	bhi.n	8003d82 <_dtoa_r+0x232>
 8003cd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cd4:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <_dtoa_r+0x2e4>)
 8003cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f7fc fe6d 	bl	80009bc <__aeabi_dcmplt>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d04f      	beq.n	8003d86 <_dtoa_r+0x236>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003cf0:	1b1c      	subs	r4, r3, r4
 8003cf2:	1e63      	subs	r3, r4, #1
 8003cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf6:	bf49      	itett	mi
 8003cf8:	f1c4 0301 	rsbmi	r3, r4, #1
 8003cfc:	2300      	movpl	r3, #0
 8003cfe:	9306      	strmi	r3, [sp, #24]
 8003d00:	2300      	movmi	r3, #0
 8003d02:	bf54      	ite	pl
 8003d04:	9306      	strpl	r3, [sp, #24]
 8003d06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003d08:	f1ba 0f00 	cmp.w	sl, #0
 8003d0c:	db3d      	blt.n	8003d8a <_dtoa_r+0x23a>
 8003d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003d14:	4453      	add	r3, sl
 8003d16:	9309      	str	r3, [sp, #36]	; 0x24
 8003d18:	2300      	movs	r3, #0
 8003d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	f200 808c 	bhi.w	8003e3c <_dtoa_r+0x2ec>
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	bfc4      	itt	gt
 8003d28:	3b04      	subgt	r3, #4
 8003d2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d2e:	bfc8      	it	gt
 8003d30:	2400      	movgt	r4, #0
 8003d32:	f1a3 0302 	sub.w	r3, r3, #2
 8003d36:	bfd8      	it	le
 8003d38:	2401      	movle	r4, #1
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	f200 808a 	bhi.w	8003e54 <_dtoa_r+0x304>
 8003d40:	e8df f003 	tbb	[pc, r3]
 8003d44:	5b4d4f2d 	.word	0x5b4d4f2d
 8003d48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003d4c:	441c      	add	r4, r3
 8003d4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	bfc3      	ittte	gt
 8003d56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003d5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003d5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8003d62:	f1c3 0320 	rsble	r3, r3, #32
 8003d66:	bfc6      	itte	gt
 8003d68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d6c:	4318      	orrgt	r0, r3
 8003d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8003d72:	f7fc fb37 	bl	80003e4 <__aeabi_ui2d>
 8003d76:	2301      	movs	r3, #1
 8003d78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d80:	e76f      	b.n	8003c62 <_dtoa_r+0x112>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e7b2      	b.n	8003cec <_dtoa_r+0x19c>
 8003d86:	900f      	str	r0, [sp, #60]	; 0x3c
 8003d88:	e7b1      	b.n	8003cee <_dtoa_r+0x19e>
 8003d8a:	9b06      	ldr	r3, [sp, #24]
 8003d8c:	eba3 030a 	sub.w	r3, r3, sl
 8003d90:	9306      	str	r3, [sp, #24]
 8003d92:	f1ca 0300 	rsb	r3, sl, #0
 8003d96:	930a      	str	r3, [sp, #40]	; 0x28
 8003d98:	2300      	movs	r3, #0
 8003d9a:	930e      	str	r3, [sp, #56]	; 0x38
 8003d9c:	e7be      	b.n	8003d1c <_dtoa_r+0x1cc>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003da2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	dc58      	bgt.n	8003e5a <_dtoa_r+0x30a>
 8003da8:	f04f 0901 	mov.w	r9, #1
 8003dac:	464b      	mov	r3, r9
 8003dae:	f8cd 9020 	str.w	r9, [sp, #32]
 8003db2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003db6:	2200      	movs	r2, #0
 8003db8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003dba:	6042      	str	r2, [r0, #4]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	f102 0614 	add.w	r6, r2, #20
 8003dc2:	429e      	cmp	r6, r3
 8003dc4:	6841      	ldr	r1, [r0, #4]
 8003dc6:	d94e      	bls.n	8003e66 <_dtoa_r+0x316>
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 fef3 	bl	8004bb4 <_Balloc>
 8003dce:	9003      	str	r0, [sp, #12]
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d14c      	bne.n	8003e6e <_dtoa_r+0x31e>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003dda:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <_dtoa_r+0x2e8>)
 8003ddc:	e6cc      	b.n	8003b78 <_dtoa_r+0x28>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e7de      	b.n	8003da0 <_dtoa_r+0x250>
 8003de2:	2300      	movs	r3, #0
 8003de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003de6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003de8:	eb0a 0903 	add.w	r9, sl, r3
 8003dec:	f109 0301 	add.w	r3, r9, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	9308      	str	r3, [sp, #32]
 8003df4:	bfb8      	it	lt
 8003df6:	2301      	movlt	r3, #1
 8003df8:	e7dd      	b.n	8003db6 <_dtoa_r+0x266>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e7f2      	b.n	8003de4 <_dtoa_r+0x294>
 8003dfe:	bf00      	nop
 8003e00:	636f4361 	.word	0x636f4361
 8003e04:	3fd287a7 	.word	0x3fd287a7
 8003e08:	8b60c8b3 	.word	0x8b60c8b3
 8003e0c:	3fc68a28 	.word	0x3fc68a28
 8003e10:	509f79fb 	.word	0x509f79fb
 8003e14:	3fd34413 	.word	0x3fd34413
 8003e18:	08005b55 	.word	0x08005b55
 8003e1c:	08005b6c 	.word	0x08005b6c
 8003e20:	7ff00000 	.word	0x7ff00000
 8003e24:	08005b51 	.word	0x08005b51
 8003e28:	08005b48 	.word	0x08005b48
 8003e2c:	08005b25 	.word	0x08005b25
 8003e30:	3ff80000 	.word	0x3ff80000
 8003e34:	08005cc0 	.word	0x08005cc0
 8003e38:	08005bc7 	.word	0x08005bc7
 8003e3c:	2401      	movs	r4, #1
 8003e3e:	2300      	movs	r3, #0
 8003e40:	940b      	str	r4, [sp, #44]	; 0x2c
 8003e42:	9322      	str	r3, [sp, #136]	; 0x88
 8003e44:	f04f 39ff 	mov.w	r9, #4294967295
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2312      	movs	r3, #18
 8003e4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e50:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e52:	e7b0      	b.n	8003db6 <_dtoa_r+0x266>
 8003e54:	2301      	movs	r3, #1
 8003e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e58:	e7f4      	b.n	8003e44 <_dtoa_r+0x2f4>
 8003e5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003e5e:	464b      	mov	r3, r9
 8003e60:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e64:	e7a7      	b.n	8003db6 <_dtoa_r+0x266>
 8003e66:	3101      	adds	r1, #1
 8003e68:	6041      	str	r1, [r0, #4]
 8003e6a:	0052      	lsls	r2, r2, #1
 8003e6c:	e7a7      	b.n	8003dbe <_dtoa_r+0x26e>
 8003e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e70:	9a03      	ldr	r2, [sp, #12]
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	9b08      	ldr	r3, [sp, #32]
 8003e76:	2b0e      	cmp	r3, #14
 8003e78:	f200 80a8 	bhi.w	8003fcc <_dtoa_r+0x47c>
 8003e7c:	2c00      	cmp	r4, #0
 8003e7e:	f000 80a5 	beq.w	8003fcc <_dtoa_r+0x47c>
 8003e82:	f1ba 0f00 	cmp.w	sl, #0
 8003e86:	dd34      	ble.n	8003ef2 <_dtoa_r+0x3a2>
 8003e88:	4a9a      	ldr	r2, [pc, #616]	; (80040f4 <_dtoa_r+0x5a4>)
 8003e8a:	f00a 030f 	and.w	r3, sl, #15
 8003e8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003e96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003e9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003ea2:	d016      	beq.n	8003ed2 <_dtoa_r+0x382>
 8003ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ea8:	4b93      	ldr	r3, [pc, #588]	; (80040f8 <_dtoa_r+0x5a8>)
 8003eaa:	2703      	movs	r7, #3
 8003eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003eb0:	f7fc fc3c 	bl	800072c <__aeabi_ddiv>
 8003eb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003eb8:	f004 040f 	and.w	r4, r4, #15
 8003ebc:	4e8e      	ldr	r6, [pc, #568]	; (80040f8 <_dtoa_r+0x5a8>)
 8003ebe:	b954      	cbnz	r4, 8003ed6 <_dtoa_r+0x386>
 8003ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ec8:	f7fc fc30 	bl	800072c <__aeabi_ddiv>
 8003ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ed0:	e029      	b.n	8003f26 <_dtoa_r+0x3d6>
 8003ed2:	2702      	movs	r7, #2
 8003ed4:	e7f2      	b.n	8003ebc <_dtoa_r+0x36c>
 8003ed6:	07e1      	lsls	r1, r4, #31
 8003ed8:	d508      	bpl.n	8003eec <_dtoa_r+0x39c>
 8003eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ede:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ee2:	f7fc faf9 	bl	80004d8 <__aeabi_dmul>
 8003ee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003eea:	3701      	adds	r7, #1
 8003eec:	1064      	asrs	r4, r4, #1
 8003eee:	3608      	adds	r6, #8
 8003ef0:	e7e5      	b.n	8003ebe <_dtoa_r+0x36e>
 8003ef2:	f000 80a5 	beq.w	8004040 <_dtoa_r+0x4f0>
 8003ef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003efa:	f1ca 0400 	rsb	r4, sl, #0
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <_dtoa_r+0x5a4>)
 8003f00:	f004 020f 	and.w	r2, r4, #15
 8003f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fae4 	bl	80004d8 <__aeabi_dmul>
 8003f10:	2702      	movs	r7, #2
 8003f12:	2300      	movs	r3, #0
 8003f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f18:	4e77      	ldr	r6, [pc, #476]	; (80040f8 <_dtoa_r+0x5a8>)
 8003f1a:	1124      	asrs	r4, r4, #4
 8003f1c:	2c00      	cmp	r4, #0
 8003f1e:	f040 8084 	bne.w	800402a <_dtoa_r+0x4da>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1d2      	bne.n	8003ecc <_dtoa_r+0x37c>
 8003f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 808b 	beq.w	8004044 <_dtoa_r+0x4f4>
 8003f2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <_dtoa_r+0x5ac>)
 8003f3e:	f7fc fd3d 	bl	80009bc <__aeabi_dcmplt>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d07e      	beq.n	8004044 <_dtoa_r+0x4f4>
 8003f46:	9b08      	ldr	r3, [sp, #32]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d07b      	beq.n	8004044 <_dtoa_r+0x4f4>
 8003f4c:	f1b9 0f00 	cmp.w	r9, #0
 8003f50:	dd38      	ble.n	8003fc4 <_dtoa_r+0x474>
 8003f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f56:	2200      	movs	r2, #0
 8003f58:	4b69      	ldr	r3, [pc, #420]	; (8004100 <_dtoa_r+0x5b0>)
 8003f5a:	f7fc fabd 	bl	80004d8 <__aeabi_dmul>
 8003f5e:	464c      	mov	r4, r9
 8003f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f64:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003f68:	3701      	adds	r7, #1
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f7fc fa4a 	bl	8000404 <__aeabi_i2d>
 8003f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f74:	f7fc fab0 	bl	80004d8 <__aeabi_dmul>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b62      	ldr	r3, [pc, #392]	; (8004104 <_dtoa_r+0x5b4>)
 8003f7c:	f7fc f8f6 	bl	800016c <__adddf3>
 8003f80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003f84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f88:	9611      	str	r6, [sp, #68]	; 0x44
 8003f8a:	2c00      	cmp	r4, #0
 8003f8c:	d15d      	bne.n	800404a <_dtoa_r+0x4fa>
 8003f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f92:	2200      	movs	r2, #0
 8003f94:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <_dtoa_r+0x5b8>)
 8003f96:	f7fc f8e7 	bl	8000168 <__aeabi_dsub>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fa2:	4633      	mov	r3, r6
 8003fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003fa6:	f7fc fd27 	bl	80009f8 <__aeabi_dcmpgt>
 8003faa:	2800      	cmp	r0, #0
 8003fac:	f040 829c 	bne.w	80044e8 <_dtoa_r+0x998>
 8003fb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003fb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003fba:	f7fc fcff 	bl	80009bc <__aeabi_dcmplt>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	f040 8290 	bne.w	80044e4 <_dtoa_r+0x994>
 8003fc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003fc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003fcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f2c0 8152 	blt.w	8004278 <_dtoa_r+0x728>
 8003fd4:	f1ba 0f0e 	cmp.w	sl, #14
 8003fd8:	f300 814e 	bgt.w	8004278 <_dtoa_r+0x728>
 8003fdc:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <_dtoa_r+0x5a4>)
 8003fde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003fe2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fe6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f280 80db 	bge.w	80041a8 <_dtoa_r+0x658>
 8003ff2:	9b08      	ldr	r3, [sp, #32]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f300 80d7 	bgt.w	80041a8 <_dtoa_r+0x658>
 8003ffa:	f040 8272 	bne.w	80044e2 <_dtoa_r+0x992>
 8003ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004002:	2200      	movs	r2, #0
 8004004:	4b40      	ldr	r3, [pc, #256]	; (8004108 <_dtoa_r+0x5b8>)
 8004006:	f7fc fa67 	bl	80004d8 <__aeabi_dmul>
 800400a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800400e:	f7fc fce9 	bl	80009e4 <__aeabi_dcmpge>
 8004012:	9c08      	ldr	r4, [sp, #32]
 8004014:	4626      	mov	r6, r4
 8004016:	2800      	cmp	r0, #0
 8004018:	f040 8248 	bne.w	80044ac <_dtoa_r+0x95c>
 800401c:	2331      	movs	r3, #49	; 0x31
 800401e:	9f03      	ldr	r7, [sp, #12]
 8004020:	f10a 0a01 	add.w	sl, sl, #1
 8004024:	f807 3b01 	strb.w	r3, [r7], #1
 8004028:	e244      	b.n	80044b4 <_dtoa_r+0x964>
 800402a:	07e2      	lsls	r2, r4, #31
 800402c:	d505      	bpl.n	800403a <_dtoa_r+0x4ea>
 800402e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004032:	f7fc fa51 	bl	80004d8 <__aeabi_dmul>
 8004036:	2301      	movs	r3, #1
 8004038:	3701      	adds	r7, #1
 800403a:	1064      	asrs	r4, r4, #1
 800403c:	3608      	adds	r6, #8
 800403e:	e76d      	b.n	8003f1c <_dtoa_r+0x3cc>
 8004040:	2702      	movs	r7, #2
 8004042:	e770      	b.n	8003f26 <_dtoa_r+0x3d6>
 8004044:	46d0      	mov	r8, sl
 8004046:	9c08      	ldr	r4, [sp, #32]
 8004048:	e78f      	b.n	8003f6a <_dtoa_r+0x41a>
 800404a:	9903      	ldr	r1, [sp, #12]
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <_dtoa_r+0x5a4>)
 800404e:	4421      	add	r1, r4
 8004050:	9112      	str	r1, [sp, #72]	; 0x48
 8004052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004058:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800405c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004060:	2900      	cmp	r1, #0
 8004062:	d055      	beq.n	8004110 <_dtoa_r+0x5c0>
 8004064:	2000      	movs	r0, #0
 8004066:	4929      	ldr	r1, [pc, #164]	; (800410c <_dtoa_r+0x5bc>)
 8004068:	f7fc fb60 	bl	800072c <__aeabi_ddiv>
 800406c:	463b      	mov	r3, r7
 800406e:	4632      	mov	r2, r6
 8004070:	f7fc f87a 	bl	8000168 <__aeabi_dsub>
 8004074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004078:	9f03      	ldr	r7, [sp, #12]
 800407a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800407e:	f7fc fcdb 	bl	8000a38 <__aeabi_d2iz>
 8004082:	4604      	mov	r4, r0
 8004084:	f7fc f9be 	bl	8000404 <__aeabi_i2d>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004090:	f7fc f86a 	bl	8000168 <__aeabi_dsub>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	3430      	adds	r4, #48	; 0x30
 800409a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800409e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040a2:	f807 4b01 	strb.w	r4, [r7], #1
 80040a6:	f7fc fc89 	bl	80009bc <__aeabi_dcmplt>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d174      	bne.n	8004198 <_dtoa_r+0x648>
 80040ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040b2:	2000      	movs	r0, #0
 80040b4:	4911      	ldr	r1, [pc, #68]	; (80040fc <_dtoa_r+0x5ac>)
 80040b6:	f7fc f857 	bl	8000168 <__aeabi_dsub>
 80040ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040be:	f7fc fc7d 	bl	80009bc <__aeabi_dcmplt>
 80040c2:	2800      	cmp	r0, #0
 80040c4:	f040 80b7 	bne.w	8004236 <_dtoa_r+0x6e6>
 80040c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040ca:	429f      	cmp	r7, r3
 80040cc:	f43f af7a 	beq.w	8003fc4 <_dtoa_r+0x474>
 80040d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040d4:	2200      	movs	r2, #0
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <_dtoa_r+0x5b0>)
 80040d8:	f7fc f9fe 	bl	80004d8 <__aeabi_dmul>
 80040dc:	2200      	movs	r2, #0
 80040de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <_dtoa_r+0x5b0>)
 80040e8:	f7fc f9f6 	bl	80004d8 <__aeabi_dmul>
 80040ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040f0:	e7c3      	b.n	800407a <_dtoa_r+0x52a>
 80040f2:	bf00      	nop
 80040f4:	08005cc0 	.word	0x08005cc0
 80040f8:	08005c98 	.word	0x08005c98
 80040fc:	3ff00000 	.word	0x3ff00000
 8004100:	40240000 	.word	0x40240000
 8004104:	401c0000 	.word	0x401c0000
 8004108:	40140000 	.word	0x40140000
 800410c:	3fe00000 	.word	0x3fe00000
 8004110:	4630      	mov	r0, r6
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc f9e0 	bl	80004d8 <__aeabi_dmul>
 8004118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800411a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800411e:	9c03      	ldr	r4, [sp, #12]
 8004120:	9314      	str	r3, [sp, #80]	; 0x50
 8004122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004126:	f7fc fc87 	bl	8000a38 <__aeabi_d2iz>
 800412a:	9015      	str	r0, [sp, #84]	; 0x54
 800412c:	f7fc f96a 	bl	8000404 <__aeabi_i2d>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004138:	f7fc f816 	bl	8000168 <__aeabi_dsub>
 800413c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800413e:	4606      	mov	r6, r0
 8004140:	3330      	adds	r3, #48	; 0x30
 8004142:	f804 3b01 	strb.w	r3, [r4], #1
 8004146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004148:	460f      	mov	r7, r1
 800414a:	429c      	cmp	r4, r3
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	d124      	bne.n	800419c <_dtoa_r+0x64c>
 8004152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004156:	4bb0      	ldr	r3, [pc, #704]	; (8004418 <_dtoa_r+0x8c8>)
 8004158:	f7fc f808 	bl	800016c <__adddf3>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4630      	mov	r0, r6
 8004162:	4639      	mov	r1, r7
 8004164:	f7fc fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8004168:	2800      	cmp	r0, #0
 800416a:	d163      	bne.n	8004234 <_dtoa_r+0x6e4>
 800416c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004170:	2000      	movs	r0, #0
 8004172:	49a9      	ldr	r1, [pc, #676]	; (8004418 <_dtoa_r+0x8c8>)
 8004174:	f7fb fff8 	bl	8000168 <__aeabi_dsub>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4630      	mov	r0, r6
 800417e:	4639      	mov	r1, r7
 8004180:	f7fc fc1c 	bl	80009bc <__aeabi_dcmplt>
 8004184:	2800      	cmp	r0, #0
 8004186:	f43f af1d 	beq.w	8003fc4 <_dtoa_r+0x474>
 800418a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800418c:	1e7b      	subs	r3, r7, #1
 800418e:	9314      	str	r3, [sp, #80]	; 0x50
 8004190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004194:	2b30      	cmp	r3, #48	; 0x30
 8004196:	d0f8      	beq.n	800418a <_dtoa_r+0x63a>
 8004198:	46c2      	mov	sl, r8
 800419a:	e03b      	b.n	8004214 <_dtoa_r+0x6c4>
 800419c:	4b9f      	ldr	r3, [pc, #636]	; (800441c <_dtoa_r+0x8cc>)
 800419e:	f7fc f99b 	bl	80004d8 <__aeabi_dmul>
 80041a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041a6:	e7bc      	b.n	8004122 <_dtoa_r+0x5d2>
 80041a8:	9f03      	ldr	r7, [sp, #12]
 80041aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80041ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041b2:	4640      	mov	r0, r8
 80041b4:	4649      	mov	r1, r9
 80041b6:	f7fc fab9 	bl	800072c <__aeabi_ddiv>
 80041ba:	f7fc fc3d 	bl	8000a38 <__aeabi_d2iz>
 80041be:	4604      	mov	r4, r0
 80041c0:	f7fc f920 	bl	8000404 <__aeabi_i2d>
 80041c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041c8:	f7fc f986 	bl	80004d8 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4640      	mov	r0, r8
 80041d2:	4649      	mov	r1, r9
 80041d4:	f7fb ffc8 	bl	8000168 <__aeabi_dsub>
 80041d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80041dc:	f807 6b01 	strb.w	r6, [r7], #1
 80041e0:	9e03      	ldr	r6, [sp, #12]
 80041e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80041e6:	1bbe      	subs	r6, r7, r6
 80041e8:	45b4      	cmp	ip, r6
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	d136      	bne.n	800425e <_dtoa_r+0x70e>
 80041f0:	f7fb ffbc 	bl	800016c <__adddf3>
 80041f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041f8:	4680      	mov	r8, r0
 80041fa:	4689      	mov	r9, r1
 80041fc:	f7fc fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 8004200:	bb58      	cbnz	r0, 800425a <_dtoa_r+0x70a>
 8004202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004206:	4640      	mov	r0, r8
 8004208:	4649      	mov	r1, r9
 800420a:	f7fc fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800420e:	b108      	cbz	r0, 8004214 <_dtoa_r+0x6c4>
 8004210:	07e1      	lsls	r1, r4, #31
 8004212:	d422      	bmi.n	800425a <_dtoa_r+0x70a>
 8004214:	4628      	mov	r0, r5
 8004216:	4659      	mov	r1, fp
 8004218:	f000 fd0c 	bl	8004c34 <_Bfree>
 800421c:	2300      	movs	r3, #0
 800421e:	703b      	strb	r3, [r7, #0]
 8004220:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004222:	f10a 0001 	add.w	r0, sl, #1
 8004226:	6018      	str	r0, [r3, #0]
 8004228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800422a:	2b00      	cmp	r3, #0
 800422c:	f43f acde 	beq.w	8003bec <_dtoa_r+0x9c>
 8004230:	601f      	str	r7, [r3, #0]
 8004232:	e4db      	b.n	8003bec <_dtoa_r+0x9c>
 8004234:	4627      	mov	r7, r4
 8004236:	463b      	mov	r3, r7
 8004238:	461f      	mov	r7, r3
 800423a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800423e:	2a39      	cmp	r2, #57	; 0x39
 8004240:	d107      	bne.n	8004252 <_dtoa_r+0x702>
 8004242:	9a03      	ldr	r2, [sp, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d1f7      	bne.n	8004238 <_dtoa_r+0x6e8>
 8004248:	2230      	movs	r2, #48	; 0x30
 800424a:	9903      	ldr	r1, [sp, #12]
 800424c:	f108 0801 	add.w	r8, r8, #1
 8004250:	700a      	strb	r2, [r1, #0]
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	3201      	adds	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e79e      	b.n	8004198 <_dtoa_r+0x648>
 800425a:	46d0      	mov	r8, sl
 800425c:	e7eb      	b.n	8004236 <_dtoa_r+0x6e6>
 800425e:	2200      	movs	r2, #0
 8004260:	4b6e      	ldr	r3, [pc, #440]	; (800441c <_dtoa_r+0x8cc>)
 8004262:	f7fc f939 	bl	80004d8 <__aeabi_dmul>
 8004266:	2200      	movs	r2, #0
 8004268:	2300      	movs	r3, #0
 800426a:	4680      	mov	r8, r0
 800426c:	4689      	mov	r9, r1
 800426e:	f7fc fb9b 	bl	80009a8 <__aeabi_dcmpeq>
 8004272:	2800      	cmp	r0, #0
 8004274:	d09b      	beq.n	80041ae <_dtoa_r+0x65e>
 8004276:	e7cd      	b.n	8004214 <_dtoa_r+0x6c4>
 8004278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800427a:	2a00      	cmp	r2, #0
 800427c:	f000 80d0 	beq.w	8004420 <_dtoa_r+0x8d0>
 8004280:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004282:	2a01      	cmp	r2, #1
 8004284:	f300 80ae 	bgt.w	80043e4 <_dtoa_r+0x894>
 8004288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800428a:	2a00      	cmp	r2, #0
 800428c:	f000 80a6 	beq.w	80043dc <_dtoa_r+0x88c>
 8004290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004294:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004296:	9f06      	ldr	r7, [sp, #24]
 8004298:	9a06      	ldr	r2, [sp, #24]
 800429a:	2101      	movs	r1, #1
 800429c:	441a      	add	r2, r3
 800429e:	9206      	str	r2, [sp, #24]
 80042a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a2:	4628      	mov	r0, r5
 80042a4:	441a      	add	r2, r3
 80042a6:	9209      	str	r2, [sp, #36]	; 0x24
 80042a8:	f000 fd7a 	bl	8004da0 <__i2b>
 80042ac:	4606      	mov	r6, r0
 80042ae:	2f00      	cmp	r7, #0
 80042b0:	dd0c      	ble.n	80042cc <_dtoa_r+0x77c>
 80042b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dd09      	ble.n	80042cc <_dtoa_r+0x77c>
 80042b8:	42bb      	cmp	r3, r7
 80042ba:	bfa8      	it	ge
 80042bc:	463b      	movge	r3, r7
 80042be:	9a06      	ldr	r2, [sp, #24]
 80042c0:	1aff      	subs	r7, r7, r3
 80042c2:	1ad2      	subs	r2, r2, r3
 80042c4:	9206      	str	r2, [sp, #24]
 80042c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	9309      	str	r3, [sp, #36]	; 0x24
 80042cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ce:	b1f3      	cbz	r3, 800430e <_dtoa_r+0x7be>
 80042d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80a8 	beq.w	8004428 <_dtoa_r+0x8d8>
 80042d8:	2c00      	cmp	r4, #0
 80042da:	dd10      	ble.n	80042fe <_dtoa_r+0x7ae>
 80042dc:	4631      	mov	r1, r6
 80042de:	4622      	mov	r2, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 fe1b 	bl	8004f1c <__pow5mult>
 80042e6:	465a      	mov	r2, fp
 80042e8:	4601      	mov	r1, r0
 80042ea:	4606      	mov	r6, r0
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 fd6d 	bl	8004dcc <__multiply>
 80042f2:	4680      	mov	r8, r0
 80042f4:	4659      	mov	r1, fp
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 fc9c 	bl	8004c34 <_Bfree>
 80042fc:	46c3      	mov	fp, r8
 80042fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004300:	1b1a      	subs	r2, r3, r4
 8004302:	d004      	beq.n	800430e <_dtoa_r+0x7be>
 8004304:	4659      	mov	r1, fp
 8004306:	4628      	mov	r0, r5
 8004308:	f000 fe08 	bl	8004f1c <__pow5mult>
 800430c:	4683      	mov	fp, r0
 800430e:	2101      	movs	r1, #1
 8004310:	4628      	mov	r0, r5
 8004312:	f000 fd45 	bl	8004da0 <__i2b>
 8004316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004318:	4604      	mov	r4, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f340 8086 	ble.w	800442c <_dtoa_r+0x8dc>
 8004320:	461a      	mov	r2, r3
 8004322:	4601      	mov	r1, r0
 8004324:	4628      	mov	r0, r5
 8004326:	f000 fdf9 	bl	8004f1c <__pow5mult>
 800432a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800432c:	4604      	mov	r4, r0
 800432e:	2b01      	cmp	r3, #1
 8004330:	dd7f      	ble.n	8004432 <_dtoa_r+0x8e2>
 8004332:	f04f 0800 	mov.w	r8, #0
 8004336:	6923      	ldr	r3, [r4, #16]
 8004338:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800433c:	6918      	ldr	r0, [r3, #16]
 800433e:	f000 fce1 	bl	8004d04 <__hi0bits>
 8004342:	f1c0 0020 	rsb	r0, r0, #32
 8004346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004348:	4418      	add	r0, r3
 800434a:	f010 001f 	ands.w	r0, r0, #31
 800434e:	f000 8092 	beq.w	8004476 <_dtoa_r+0x926>
 8004352:	f1c0 0320 	rsb	r3, r0, #32
 8004356:	2b04      	cmp	r3, #4
 8004358:	f340 808a 	ble.w	8004470 <_dtoa_r+0x920>
 800435c:	f1c0 001c 	rsb	r0, r0, #28
 8004360:	9b06      	ldr	r3, [sp, #24]
 8004362:	4407      	add	r7, r0
 8004364:	4403      	add	r3, r0
 8004366:	9306      	str	r3, [sp, #24]
 8004368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436a:	4403      	add	r3, r0
 800436c:	9309      	str	r3, [sp, #36]	; 0x24
 800436e:	9b06      	ldr	r3, [sp, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	dd05      	ble.n	8004380 <_dtoa_r+0x830>
 8004374:	4659      	mov	r1, fp
 8004376:	461a      	mov	r2, r3
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fe29 	bl	8004fd0 <__lshift>
 800437e:	4683      	mov	fp, r0
 8004380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	dd05      	ble.n	8004392 <_dtoa_r+0x842>
 8004386:	4621      	mov	r1, r4
 8004388:	461a      	mov	r2, r3
 800438a:	4628      	mov	r0, r5
 800438c:	f000 fe20 	bl	8004fd0 <__lshift>
 8004390:	4604      	mov	r4, r0
 8004392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d070      	beq.n	800447a <_dtoa_r+0x92a>
 8004398:	4621      	mov	r1, r4
 800439a:	4658      	mov	r0, fp
 800439c:	f000 fe88 	bl	80050b0 <__mcmp>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	da6a      	bge.n	800447a <_dtoa_r+0x92a>
 80043a4:	2300      	movs	r3, #0
 80043a6:	4659      	mov	r1, fp
 80043a8:	220a      	movs	r2, #10
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 fc64 	bl	8004c78 <__multadd>
 80043b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043b2:	4683      	mov	fp, r0
 80043b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8194 	beq.w	80046e6 <_dtoa_r+0xb96>
 80043be:	4631      	mov	r1, r6
 80043c0:	2300      	movs	r3, #0
 80043c2:	220a      	movs	r2, #10
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 fc57 	bl	8004c78 <__multadd>
 80043ca:	f1b9 0f00 	cmp.w	r9, #0
 80043ce:	4606      	mov	r6, r0
 80043d0:	f300 8093 	bgt.w	80044fa <_dtoa_r+0x9aa>
 80043d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	dc57      	bgt.n	800448a <_dtoa_r+0x93a>
 80043da:	e08e      	b.n	80044fa <_dtoa_r+0x9aa>
 80043dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80043de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80043e2:	e757      	b.n	8004294 <_dtoa_r+0x744>
 80043e4:	9b08      	ldr	r3, [sp, #32]
 80043e6:	1e5c      	subs	r4, r3, #1
 80043e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	bfb7      	itett	lt
 80043ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80043f0:	1b1c      	subge	r4, r3, r4
 80043f2:	1ae2      	sublt	r2, r4, r3
 80043f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80043f6:	bfbe      	ittt	lt
 80043f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80043fa:	189b      	addlt	r3, r3, r2
 80043fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80043fe:	9b08      	ldr	r3, [sp, #32]
 8004400:	bfb8      	it	lt
 8004402:	2400      	movlt	r4, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	bfbb      	ittet	lt
 8004408:	9b06      	ldrlt	r3, [sp, #24]
 800440a:	9a08      	ldrlt	r2, [sp, #32]
 800440c:	9f06      	ldrge	r7, [sp, #24]
 800440e:	1a9f      	sublt	r7, r3, r2
 8004410:	bfac      	ite	ge
 8004412:	9b08      	ldrge	r3, [sp, #32]
 8004414:	2300      	movlt	r3, #0
 8004416:	e73f      	b.n	8004298 <_dtoa_r+0x748>
 8004418:	3fe00000 	.word	0x3fe00000
 800441c:	40240000 	.word	0x40240000
 8004420:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004422:	9f06      	ldr	r7, [sp, #24]
 8004424:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004426:	e742      	b.n	80042ae <_dtoa_r+0x75e>
 8004428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800442a:	e76b      	b.n	8004304 <_dtoa_r+0x7b4>
 800442c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800442e:	2b01      	cmp	r3, #1
 8004430:	dc19      	bgt.n	8004466 <_dtoa_r+0x916>
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	b9bb      	cbnz	r3, 8004466 <_dtoa_r+0x916>
 8004436:	9b05      	ldr	r3, [sp, #20]
 8004438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800443c:	b99b      	cbnz	r3, 8004466 <_dtoa_r+0x916>
 800443e:	9b05      	ldr	r3, [sp, #20]
 8004440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004444:	0d1b      	lsrs	r3, r3, #20
 8004446:	051b      	lsls	r3, r3, #20
 8004448:	b183      	cbz	r3, 800446c <_dtoa_r+0x91c>
 800444a:	f04f 0801 	mov.w	r8, #1
 800444e:	9b06      	ldr	r3, [sp, #24]
 8004450:	3301      	adds	r3, #1
 8004452:	9306      	str	r3, [sp, #24]
 8004454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004456:	3301      	adds	r3, #1
 8004458:	9309      	str	r3, [sp, #36]	; 0x24
 800445a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800445c:	2b00      	cmp	r3, #0
 800445e:	f47f af6a 	bne.w	8004336 <_dtoa_r+0x7e6>
 8004462:	2001      	movs	r0, #1
 8004464:	e76f      	b.n	8004346 <_dtoa_r+0x7f6>
 8004466:	f04f 0800 	mov.w	r8, #0
 800446a:	e7f6      	b.n	800445a <_dtoa_r+0x90a>
 800446c:	4698      	mov	r8, r3
 800446e:	e7f4      	b.n	800445a <_dtoa_r+0x90a>
 8004470:	f43f af7d 	beq.w	800436e <_dtoa_r+0x81e>
 8004474:	4618      	mov	r0, r3
 8004476:	301c      	adds	r0, #28
 8004478:	e772      	b.n	8004360 <_dtoa_r+0x810>
 800447a:	9b08      	ldr	r3, [sp, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	dc36      	bgt.n	80044ee <_dtoa_r+0x99e>
 8004480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004482:	2b02      	cmp	r3, #2
 8004484:	dd33      	ble.n	80044ee <_dtoa_r+0x99e>
 8004486:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800448a:	f1b9 0f00 	cmp.w	r9, #0
 800448e:	d10d      	bne.n	80044ac <_dtoa_r+0x95c>
 8004490:	4621      	mov	r1, r4
 8004492:	464b      	mov	r3, r9
 8004494:	2205      	movs	r2, #5
 8004496:	4628      	mov	r0, r5
 8004498:	f000 fbee 	bl	8004c78 <__multadd>
 800449c:	4601      	mov	r1, r0
 800449e:	4604      	mov	r4, r0
 80044a0:	4658      	mov	r0, fp
 80044a2:	f000 fe05 	bl	80050b0 <__mcmp>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	f73f adb8 	bgt.w	800401c <_dtoa_r+0x4cc>
 80044ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044ae:	9f03      	ldr	r7, [sp, #12]
 80044b0:	ea6f 0a03 	mvn.w	sl, r3
 80044b4:	f04f 0800 	mov.w	r8, #0
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 fbba 	bl	8004c34 <_Bfree>
 80044c0:	2e00      	cmp	r6, #0
 80044c2:	f43f aea7 	beq.w	8004214 <_dtoa_r+0x6c4>
 80044c6:	f1b8 0f00 	cmp.w	r8, #0
 80044ca:	d005      	beq.n	80044d8 <_dtoa_r+0x988>
 80044cc:	45b0      	cmp	r8, r6
 80044ce:	d003      	beq.n	80044d8 <_dtoa_r+0x988>
 80044d0:	4641      	mov	r1, r8
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 fbae 	bl	8004c34 <_Bfree>
 80044d8:	4631      	mov	r1, r6
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fbaa 	bl	8004c34 <_Bfree>
 80044e0:	e698      	b.n	8004214 <_dtoa_r+0x6c4>
 80044e2:	2400      	movs	r4, #0
 80044e4:	4626      	mov	r6, r4
 80044e6:	e7e1      	b.n	80044ac <_dtoa_r+0x95c>
 80044e8:	46c2      	mov	sl, r8
 80044ea:	4626      	mov	r6, r4
 80044ec:	e596      	b.n	800401c <_dtoa_r+0x4cc>
 80044ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80fd 	beq.w	80046f4 <_dtoa_r+0xba4>
 80044fa:	2f00      	cmp	r7, #0
 80044fc:	dd05      	ble.n	800450a <_dtoa_r+0x9ba>
 80044fe:	4631      	mov	r1, r6
 8004500:	463a      	mov	r2, r7
 8004502:	4628      	mov	r0, r5
 8004504:	f000 fd64 	bl	8004fd0 <__lshift>
 8004508:	4606      	mov	r6, r0
 800450a:	f1b8 0f00 	cmp.w	r8, #0
 800450e:	d05c      	beq.n	80045ca <_dtoa_r+0xa7a>
 8004510:	4628      	mov	r0, r5
 8004512:	6871      	ldr	r1, [r6, #4]
 8004514:	f000 fb4e 	bl	8004bb4 <_Balloc>
 8004518:	4607      	mov	r7, r0
 800451a:	b928      	cbnz	r0, 8004528 <_dtoa_r+0x9d8>
 800451c:	4602      	mov	r2, r0
 800451e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004522:	4b7f      	ldr	r3, [pc, #508]	; (8004720 <_dtoa_r+0xbd0>)
 8004524:	f7ff bb28 	b.w	8003b78 <_dtoa_r+0x28>
 8004528:	6932      	ldr	r2, [r6, #16]
 800452a:	f106 010c 	add.w	r1, r6, #12
 800452e:	3202      	adds	r2, #2
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	300c      	adds	r0, #12
 8004534:	f000 fb30 	bl	8004b98 <memcpy>
 8004538:	2201      	movs	r2, #1
 800453a:	4639      	mov	r1, r7
 800453c:	4628      	mov	r0, r5
 800453e:	f000 fd47 	bl	8004fd0 <__lshift>
 8004542:	46b0      	mov	r8, r6
 8004544:	4606      	mov	r6, r0
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	9308      	str	r3, [sp, #32]
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	444b      	add	r3, r9
 8004550:	930a      	str	r3, [sp, #40]	; 0x28
 8004552:	9b04      	ldr	r3, [sp, #16]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	9309      	str	r3, [sp, #36]	; 0x24
 800455a:	9b08      	ldr	r3, [sp, #32]
 800455c:	4621      	mov	r1, r4
 800455e:	3b01      	subs	r3, #1
 8004560:	4658      	mov	r0, fp
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	f7ff fa66 	bl	8003a34 <quorem>
 8004568:	4603      	mov	r3, r0
 800456a:	4641      	mov	r1, r8
 800456c:	3330      	adds	r3, #48	; 0x30
 800456e:	9006      	str	r0, [sp, #24]
 8004570:	4658      	mov	r0, fp
 8004572:	930b      	str	r3, [sp, #44]	; 0x2c
 8004574:	f000 fd9c 	bl	80050b0 <__mcmp>
 8004578:	4632      	mov	r2, r6
 800457a:	4681      	mov	r9, r0
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fdb2 	bl	80050e8 <__mdiff>
 8004584:	68c2      	ldr	r2, [r0, #12]
 8004586:	4607      	mov	r7, r0
 8004588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800458a:	bb02      	cbnz	r2, 80045ce <_dtoa_r+0xa7e>
 800458c:	4601      	mov	r1, r0
 800458e:	4658      	mov	r0, fp
 8004590:	f000 fd8e 	bl	80050b0 <__mcmp>
 8004594:	4602      	mov	r2, r0
 8004596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004598:	4639      	mov	r1, r7
 800459a:	4628      	mov	r0, r5
 800459c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80045a0:	f000 fb48 	bl	8004c34 <_Bfree>
 80045a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045a8:	9f08      	ldr	r7, [sp, #32]
 80045aa:	ea43 0102 	orr.w	r1, r3, r2
 80045ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b0:	430b      	orrs	r3, r1
 80045b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b4:	d10d      	bne.n	80045d2 <_dtoa_r+0xa82>
 80045b6:	2b39      	cmp	r3, #57	; 0x39
 80045b8:	d029      	beq.n	800460e <_dtoa_r+0xabe>
 80045ba:	f1b9 0f00 	cmp.w	r9, #0
 80045be:	dd01      	ble.n	80045c4 <_dtoa_r+0xa74>
 80045c0:	9b06      	ldr	r3, [sp, #24]
 80045c2:	3331      	adds	r3, #49	; 0x31
 80045c4:	9a04      	ldr	r2, [sp, #16]
 80045c6:	7013      	strb	r3, [r2, #0]
 80045c8:	e776      	b.n	80044b8 <_dtoa_r+0x968>
 80045ca:	4630      	mov	r0, r6
 80045cc:	e7b9      	b.n	8004542 <_dtoa_r+0x9f2>
 80045ce:	2201      	movs	r2, #1
 80045d0:	e7e2      	b.n	8004598 <_dtoa_r+0xa48>
 80045d2:	f1b9 0f00 	cmp.w	r9, #0
 80045d6:	db06      	blt.n	80045e6 <_dtoa_r+0xa96>
 80045d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80045da:	ea41 0909 	orr.w	r9, r1, r9
 80045de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045e0:	ea59 0101 	orrs.w	r1, r9, r1
 80045e4:	d120      	bne.n	8004628 <_dtoa_r+0xad8>
 80045e6:	2a00      	cmp	r2, #0
 80045e8:	ddec      	ble.n	80045c4 <_dtoa_r+0xa74>
 80045ea:	4659      	mov	r1, fp
 80045ec:	2201      	movs	r2, #1
 80045ee:	4628      	mov	r0, r5
 80045f0:	9308      	str	r3, [sp, #32]
 80045f2:	f000 fced 	bl	8004fd0 <__lshift>
 80045f6:	4621      	mov	r1, r4
 80045f8:	4683      	mov	fp, r0
 80045fa:	f000 fd59 	bl	80050b0 <__mcmp>
 80045fe:	2800      	cmp	r0, #0
 8004600:	9b08      	ldr	r3, [sp, #32]
 8004602:	dc02      	bgt.n	800460a <_dtoa_r+0xaba>
 8004604:	d1de      	bne.n	80045c4 <_dtoa_r+0xa74>
 8004606:	07da      	lsls	r2, r3, #31
 8004608:	d5dc      	bpl.n	80045c4 <_dtoa_r+0xa74>
 800460a:	2b39      	cmp	r3, #57	; 0x39
 800460c:	d1d8      	bne.n	80045c0 <_dtoa_r+0xa70>
 800460e:	2339      	movs	r3, #57	; 0x39
 8004610:	9a04      	ldr	r2, [sp, #16]
 8004612:	7013      	strb	r3, [r2, #0]
 8004614:	463b      	mov	r3, r7
 8004616:	461f      	mov	r7, r3
 8004618:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800461c:	3b01      	subs	r3, #1
 800461e:	2a39      	cmp	r2, #57	; 0x39
 8004620:	d050      	beq.n	80046c4 <_dtoa_r+0xb74>
 8004622:	3201      	adds	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e747      	b.n	80044b8 <_dtoa_r+0x968>
 8004628:	2a00      	cmp	r2, #0
 800462a:	dd03      	ble.n	8004634 <_dtoa_r+0xae4>
 800462c:	2b39      	cmp	r3, #57	; 0x39
 800462e:	d0ee      	beq.n	800460e <_dtoa_r+0xabe>
 8004630:	3301      	adds	r3, #1
 8004632:	e7c7      	b.n	80045c4 <_dtoa_r+0xa74>
 8004634:	9a08      	ldr	r2, [sp, #32]
 8004636:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004638:	f802 3c01 	strb.w	r3, [r2, #-1]
 800463c:	428a      	cmp	r2, r1
 800463e:	d02a      	beq.n	8004696 <_dtoa_r+0xb46>
 8004640:	4659      	mov	r1, fp
 8004642:	2300      	movs	r3, #0
 8004644:	220a      	movs	r2, #10
 8004646:	4628      	mov	r0, r5
 8004648:	f000 fb16 	bl	8004c78 <__multadd>
 800464c:	45b0      	cmp	r8, r6
 800464e:	4683      	mov	fp, r0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	f04f 020a 	mov.w	r2, #10
 8004658:	4641      	mov	r1, r8
 800465a:	4628      	mov	r0, r5
 800465c:	d107      	bne.n	800466e <_dtoa_r+0xb1e>
 800465e:	f000 fb0b 	bl	8004c78 <__multadd>
 8004662:	4680      	mov	r8, r0
 8004664:	4606      	mov	r6, r0
 8004666:	9b08      	ldr	r3, [sp, #32]
 8004668:	3301      	adds	r3, #1
 800466a:	9308      	str	r3, [sp, #32]
 800466c:	e775      	b.n	800455a <_dtoa_r+0xa0a>
 800466e:	f000 fb03 	bl	8004c78 <__multadd>
 8004672:	4631      	mov	r1, r6
 8004674:	4680      	mov	r8, r0
 8004676:	2300      	movs	r3, #0
 8004678:	220a      	movs	r2, #10
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fafc 	bl	8004c78 <__multadd>
 8004680:	4606      	mov	r6, r0
 8004682:	e7f0      	b.n	8004666 <_dtoa_r+0xb16>
 8004684:	f1b9 0f00 	cmp.w	r9, #0
 8004688:	bfcc      	ite	gt
 800468a:	464f      	movgt	r7, r9
 800468c:	2701      	movle	r7, #1
 800468e:	f04f 0800 	mov.w	r8, #0
 8004692:	9a03      	ldr	r2, [sp, #12]
 8004694:	4417      	add	r7, r2
 8004696:	4659      	mov	r1, fp
 8004698:	2201      	movs	r2, #1
 800469a:	4628      	mov	r0, r5
 800469c:	9308      	str	r3, [sp, #32]
 800469e:	f000 fc97 	bl	8004fd0 <__lshift>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4683      	mov	fp, r0
 80046a6:	f000 fd03 	bl	80050b0 <__mcmp>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	dcb2      	bgt.n	8004614 <_dtoa_r+0xac4>
 80046ae:	d102      	bne.n	80046b6 <_dtoa_r+0xb66>
 80046b0:	9b08      	ldr	r3, [sp, #32]
 80046b2:	07db      	lsls	r3, r3, #31
 80046b4:	d4ae      	bmi.n	8004614 <_dtoa_r+0xac4>
 80046b6:	463b      	mov	r3, r7
 80046b8:	461f      	mov	r7, r3
 80046ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046be:	2a30      	cmp	r2, #48	; 0x30
 80046c0:	d0fa      	beq.n	80046b8 <_dtoa_r+0xb68>
 80046c2:	e6f9      	b.n	80044b8 <_dtoa_r+0x968>
 80046c4:	9a03      	ldr	r2, [sp, #12]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d1a5      	bne.n	8004616 <_dtoa_r+0xac6>
 80046ca:	2331      	movs	r3, #49	; 0x31
 80046cc:	f10a 0a01 	add.w	sl, sl, #1
 80046d0:	e779      	b.n	80045c6 <_dtoa_r+0xa76>
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <_dtoa_r+0xbd4>)
 80046d4:	f7ff baa8 	b.w	8003c28 <_dtoa_r+0xd8>
 80046d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f aa81 	bne.w	8003be2 <_dtoa_r+0x92>
 80046e0:	4b11      	ldr	r3, [pc, #68]	; (8004728 <_dtoa_r+0xbd8>)
 80046e2:	f7ff baa1 	b.w	8003c28 <_dtoa_r+0xd8>
 80046e6:	f1b9 0f00 	cmp.w	r9, #0
 80046ea:	dc03      	bgt.n	80046f4 <_dtoa_r+0xba4>
 80046ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	f73f aecb 	bgt.w	800448a <_dtoa_r+0x93a>
 80046f4:	9f03      	ldr	r7, [sp, #12]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4658      	mov	r0, fp
 80046fa:	f7ff f99b 	bl	8003a34 <quorem>
 80046fe:	9a03      	ldr	r2, [sp, #12]
 8004700:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004704:	f807 3b01 	strb.w	r3, [r7], #1
 8004708:	1aba      	subs	r2, r7, r2
 800470a:	4591      	cmp	r9, r2
 800470c:	ddba      	ble.n	8004684 <_dtoa_r+0xb34>
 800470e:	4659      	mov	r1, fp
 8004710:	2300      	movs	r3, #0
 8004712:	220a      	movs	r2, #10
 8004714:	4628      	mov	r0, r5
 8004716:	f000 faaf 	bl	8004c78 <__multadd>
 800471a:	4683      	mov	fp, r0
 800471c:	e7eb      	b.n	80046f6 <_dtoa_r+0xba6>
 800471e:	bf00      	nop
 8004720:	08005bc7 	.word	0x08005bc7
 8004724:	08005b24 	.word	0x08005b24
 8004728:	08005b48 	.word	0x08005b48

0800472c <__sflush_r>:
 800472c:	898a      	ldrh	r2, [r1, #12]
 800472e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004730:	4605      	mov	r5, r0
 8004732:	0710      	lsls	r0, r2, #28
 8004734:	460c      	mov	r4, r1
 8004736:	d457      	bmi.n	80047e8 <__sflush_r+0xbc>
 8004738:	684b      	ldr	r3, [r1, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	dc04      	bgt.n	8004748 <__sflush_r+0x1c>
 800473e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	dc01      	bgt.n	8004748 <__sflush_r+0x1c>
 8004744:	2000      	movs	r0, #0
 8004746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800474a:	2e00      	cmp	r6, #0
 800474c:	d0fa      	beq.n	8004744 <__sflush_r+0x18>
 800474e:	2300      	movs	r3, #0
 8004750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004754:	682f      	ldr	r7, [r5, #0]
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	d032      	beq.n	80047c0 <__sflush_r+0x94>
 800475a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	075a      	lsls	r2, r3, #29
 8004760:	d505      	bpl.n	800476e <__sflush_r+0x42>
 8004762:	6863      	ldr	r3, [r4, #4]
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004768:	b10b      	cbz	r3, 800476e <__sflush_r+0x42>
 800476a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800476c:	1ac0      	subs	r0, r0, r3
 800476e:	2300      	movs	r3, #0
 8004770:	4602      	mov	r2, r0
 8004772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004774:	4628      	mov	r0, r5
 8004776:	6a21      	ldr	r1, [r4, #32]
 8004778:	47b0      	blx	r6
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	d106      	bne.n	800478e <__sflush_r+0x62>
 8004780:	6829      	ldr	r1, [r5, #0]
 8004782:	291d      	cmp	r1, #29
 8004784:	d82c      	bhi.n	80047e0 <__sflush_r+0xb4>
 8004786:	4a29      	ldr	r2, [pc, #164]	; (800482c <__sflush_r+0x100>)
 8004788:	40ca      	lsrs	r2, r1
 800478a:	07d6      	lsls	r6, r2, #31
 800478c:	d528      	bpl.n	80047e0 <__sflush_r+0xb4>
 800478e:	2200      	movs	r2, #0
 8004790:	6062      	str	r2, [r4, #4]
 8004792:	6922      	ldr	r2, [r4, #16]
 8004794:	04d9      	lsls	r1, r3, #19
 8004796:	6022      	str	r2, [r4, #0]
 8004798:	d504      	bpl.n	80047a4 <__sflush_r+0x78>
 800479a:	1c42      	adds	r2, r0, #1
 800479c:	d101      	bne.n	80047a2 <__sflush_r+0x76>
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	b903      	cbnz	r3, 80047a4 <__sflush_r+0x78>
 80047a2:	6560      	str	r0, [r4, #84]	; 0x54
 80047a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047a6:	602f      	str	r7, [r5, #0]
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d0cb      	beq.n	8004744 <__sflush_r+0x18>
 80047ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d002      	beq.n	80047ba <__sflush_r+0x8e>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 fd93 	bl	80052e0 <_free_r>
 80047ba:	2000      	movs	r0, #0
 80047bc:	6360      	str	r0, [r4, #52]	; 0x34
 80047be:	e7c2      	b.n	8004746 <__sflush_r+0x1a>
 80047c0:	6a21      	ldr	r1, [r4, #32]
 80047c2:	2301      	movs	r3, #1
 80047c4:	4628      	mov	r0, r5
 80047c6:	47b0      	blx	r6
 80047c8:	1c41      	adds	r1, r0, #1
 80047ca:	d1c7      	bne.n	800475c <__sflush_r+0x30>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0c4      	beq.n	800475c <__sflush_r+0x30>
 80047d2:	2b1d      	cmp	r3, #29
 80047d4:	d001      	beq.n	80047da <__sflush_r+0xae>
 80047d6:	2b16      	cmp	r3, #22
 80047d8:	d101      	bne.n	80047de <__sflush_r+0xb2>
 80047da:	602f      	str	r7, [r5, #0]
 80047dc:	e7b2      	b.n	8004744 <__sflush_r+0x18>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e4:	81a3      	strh	r3, [r4, #12]
 80047e6:	e7ae      	b.n	8004746 <__sflush_r+0x1a>
 80047e8:	690f      	ldr	r7, [r1, #16]
 80047ea:	2f00      	cmp	r7, #0
 80047ec:	d0aa      	beq.n	8004744 <__sflush_r+0x18>
 80047ee:	0793      	lsls	r3, r2, #30
 80047f0:	bf18      	it	ne
 80047f2:	2300      	movne	r3, #0
 80047f4:	680e      	ldr	r6, [r1, #0]
 80047f6:	bf08      	it	eq
 80047f8:	694b      	ldreq	r3, [r1, #20]
 80047fa:	1bf6      	subs	r6, r6, r7
 80047fc:	600f      	str	r7, [r1, #0]
 80047fe:	608b      	str	r3, [r1, #8]
 8004800:	2e00      	cmp	r6, #0
 8004802:	dd9f      	ble.n	8004744 <__sflush_r+0x18>
 8004804:	4633      	mov	r3, r6
 8004806:	463a      	mov	r2, r7
 8004808:	4628      	mov	r0, r5
 800480a:	6a21      	ldr	r1, [r4, #32]
 800480c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004810:	47e0      	blx	ip
 8004812:	2800      	cmp	r0, #0
 8004814:	dc06      	bgt.n	8004824 <__sflush_r+0xf8>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	e790      	b.n	8004746 <__sflush_r+0x1a>
 8004824:	4407      	add	r7, r0
 8004826:	1a36      	subs	r6, r6, r0
 8004828:	e7ea      	b.n	8004800 <__sflush_r+0xd4>
 800482a:	bf00      	nop
 800482c:	20400001 	.word	0x20400001

08004830 <_fflush_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	690b      	ldr	r3, [r1, #16]
 8004834:	4605      	mov	r5, r0
 8004836:	460c      	mov	r4, r1
 8004838:	b913      	cbnz	r3, 8004840 <_fflush_r+0x10>
 800483a:	2500      	movs	r5, #0
 800483c:	4628      	mov	r0, r5
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	b118      	cbz	r0, 800484a <_fflush_r+0x1a>
 8004842:	6983      	ldr	r3, [r0, #24]
 8004844:	b90b      	cbnz	r3, 800484a <_fflush_r+0x1a>
 8004846:	f000 f887 	bl	8004958 <__sinit>
 800484a:	4b14      	ldr	r3, [pc, #80]	; (800489c <_fflush_r+0x6c>)
 800484c:	429c      	cmp	r4, r3
 800484e:	d11b      	bne.n	8004888 <_fflush_r+0x58>
 8004850:	686c      	ldr	r4, [r5, #4]
 8004852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ef      	beq.n	800483a <_fflush_r+0xa>
 800485a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800485c:	07d0      	lsls	r0, r2, #31
 800485e:	d404      	bmi.n	800486a <_fflush_r+0x3a>
 8004860:	0599      	lsls	r1, r3, #22
 8004862:	d402      	bmi.n	800486a <_fflush_r+0x3a>
 8004864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004866:	f000 f91a 	bl	8004a9e <__retarget_lock_acquire_recursive>
 800486a:	4628      	mov	r0, r5
 800486c:	4621      	mov	r1, r4
 800486e:	f7ff ff5d 	bl	800472c <__sflush_r>
 8004872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004874:	4605      	mov	r5, r0
 8004876:	07da      	lsls	r2, r3, #31
 8004878:	d4e0      	bmi.n	800483c <_fflush_r+0xc>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	059b      	lsls	r3, r3, #22
 800487e:	d4dd      	bmi.n	800483c <_fflush_r+0xc>
 8004880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004882:	f000 f90d 	bl	8004aa0 <__retarget_lock_release_recursive>
 8004886:	e7d9      	b.n	800483c <_fflush_r+0xc>
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <_fflush_r+0x70>)
 800488a:	429c      	cmp	r4, r3
 800488c:	d101      	bne.n	8004892 <_fflush_r+0x62>
 800488e:	68ac      	ldr	r4, [r5, #8]
 8004890:	e7df      	b.n	8004852 <_fflush_r+0x22>
 8004892:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <_fflush_r+0x74>)
 8004894:	429c      	cmp	r4, r3
 8004896:	bf08      	it	eq
 8004898:	68ec      	ldreq	r4, [r5, #12]
 800489a:	e7da      	b.n	8004852 <_fflush_r+0x22>
 800489c:	08005bf8 	.word	0x08005bf8
 80048a0:	08005c18 	.word	0x08005c18
 80048a4:	08005bd8 	.word	0x08005bd8

080048a8 <std>:
 80048a8:	2300      	movs	r3, #0
 80048aa:	b510      	push	{r4, lr}
 80048ac:	4604      	mov	r4, r0
 80048ae:	e9c0 3300 	strd	r3, r3, [r0]
 80048b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048b6:	6083      	str	r3, [r0, #8]
 80048b8:	8181      	strh	r1, [r0, #12]
 80048ba:	6643      	str	r3, [r0, #100]	; 0x64
 80048bc:	81c2      	strh	r2, [r0, #14]
 80048be:	6183      	str	r3, [r0, #24]
 80048c0:	4619      	mov	r1, r3
 80048c2:	2208      	movs	r2, #8
 80048c4:	305c      	adds	r0, #92	; 0x5c
 80048c6:	f7fe faff 	bl	8002ec8 <memset>
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <std+0x38>)
 80048cc:	6224      	str	r4, [r4, #32]
 80048ce:	6263      	str	r3, [r4, #36]	; 0x24
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <std+0x3c>)
 80048d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <std+0x40>)
 80048d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048d8:	4b04      	ldr	r3, [pc, #16]	; (80048ec <std+0x44>)
 80048da:	6323      	str	r3, [r4, #48]	; 0x30
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	08005769 	.word	0x08005769
 80048e4:	0800578b 	.word	0x0800578b
 80048e8:	080057c3 	.word	0x080057c3
 80048ec:	080057e7 	.word	0x080057e7

080048f0 <_cleanup_r>:
 80048f0:	4901      	ldr	r1, [pc, #4]	; (80048f8 <_cleanup_r+0x8>)
 80048f2:	f000 b8af 	b.w	8004a54 <_fwalk_reent>
 80048f6:	bf00      	nop
 80048f8:	08004831 	.word	0x08004831

080048fc <__sfmoreglue>:
 80048fc:	2268      	movs	r2, #104	; 0x68
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	1e4d      	subs	r5, r1, #1
 8004902:	4355      	muls	r5, r2
 8004904:	460e      	mov	r6, r1
 8004906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800490a:	f000 fd51 	bl	80053b0 <_malloc_r>
 800490e:	4604      	mov	r4, r0
 8004910:	b140      	cbz	r0, 8004924 <__sfmoreglue+0x28>
 8004912:	2100      	movs	r1, #0
 8004914:	e9c0 1600 	strd	r1, r6, [r0]
 8004918:	300c      	adds	r0, #12
 800491a:	60a0      	str	r0, [r4, #8]
 800491c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004920:	f7fe fad2 	bl	8002ec8 <memset>
 8004924:	4620      	mov	r0, r4
 8004926:	bd70      	pop	{r4, r5, r6, pc}

08004928 <__sfp_lock_acquire>:
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <__sfp_lock_acquire+0x8>)
 800492a:	f000 b8b8 	b.w	8004a9e <__retarget_lock_acquire_recursive>
 800492e:	bf00      	nop
 8004930:	200002c1 	.word	0x200002c1

08004934 <__sfp_lock_release>:
 8004934:	4801      	ldr	r0, [pc, #4]	; (800493c <__sfp_lock_release+0x8>)
 8004936:	f000 b8b3 	b.w	8004aa0 <__retarget_lock_release_recursive>
 800493a:	bf00      	nop
 800493c:	200002c1 	.word	0x200002c1

08004940 <__sinit_lock_acquire>:
 8004940:	4801      	ldr	r0, [pc, #4]	; (8004948 <__sinit_lock_acquire+0x8>)
 8004942:	f000 b8ac 	b.w	8004a9e <__retarget_lock_acquire_recursive>
 8004946:	bf00      	nop
 8004948:	200002c2 	.word	0x200002c2

0800494c <__sinit_lock_release>:
 800494c:	4801      	ldr	r0, [pc, #4]	; (8004954 <__sinit_lock_release+0x8>)
 800494e:	f000 b8a7 	b.w	8004aa0 <__retarget_lock_release_recursive>
 8004952:	bf00      	nop
 8004954:	200002c2 	.word	0x200002c2

08004958 <__sinit>:
 8004958:	b510      	push	{r4, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	f7ff fff0 	bl	8004940 <__sinit_lock_acquire>
 8004960:	69a3      	ldr	r3, [r4, #24]
 8004962:	b11b      	cbz	r3, 800496c <__sinit+0x14>
 8004964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004968:	f7ff bff0 	b.w	800494c <__sinit_lock_release>
 800496c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004970:	6523      	str	r3, [r4, #80]	; 0x50
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <__sinit+0x68>)
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <__sinit+0x6c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62a2      	str	r2, [r4, #40]	; 0x28
 800497a:	42a3      	cmp	r3, r4
 800497c:	bf08      	it	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	4620      	mov	r0, r4
 8004982:	bf08      	it	eq
 8004984:	61a3      	streq	r3, [r4, #24]
 8004986:	f000 f81f 	bl	80049c8 <__sfp>
 800498a:	6060      	str	r0, [r4, #4]
 800498c:	4620      	mov	r0, r4
 800498e:	f000 f81b 	bl	80049c8 <__sfp>
 8004992:	60a0      	str	r0, [r4, #8]
 8004994:	4620      	mov	r0, r4
 8004996:	f000 f817 	bl	80049c8 <__sfp>
 800499a:	2200      	movs	r2, #0
 800499c:	2104      	movs	r1, #4
 800499e:	60e0      	str	r0, [r4, #12]
 80049a0:	6860      	ldr	r0, [r4, #4]
 80049a2:	f7ff ff81 	bl	80048a8 <std>
 80049a6:	2201      	movs	r2, #1
 80049a8:	2109      	movs	r1, #9
 80049aa:	68a0      	ldr	r0, [r4, #8]
 80049ac:	f7ff ff7c 	bl	80048a8 <std>
 80049b0:	2202      	movs	r2, #2
 80049b2:	2112      	movs	r1, #18
 80049b4:	68e0      	ldr	r0, [r4, #12]
 80049b6:	f7ff ff77 	bl	80048a8 <std>
 80049ba:	2301      	movs	r3, #1
 80049bc:	61a3      	str	r3, [r4, #24]
 80049be:	e7d1      	b.n	8004964 <__sinit+0xc>
 80049c0:	08005b10 	.word	0x08005b10
 80049c4:	080048f1 	.word	0x080048f1

080049c8 <__sfp>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	4607      	mov	r7, r0
 80049cc:	f7ff ffac 	bl	8004928 <__sfp_lock_acquire>
 80049d0:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <__sfp+0x84>)
 80049d2:	681e      	ldr	r6, [r3, #0]
 80049d4:	69b3      	ldr	r3, [r6, #24]
 80049d6:	b913      	cbnz	r3, 80049de <__sfp+0x16>
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff ffbd 	bl	8004958 <__sinit>
 80049de:	3648      	adds	r6, #72	; 0x48
 80049e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	d503      	bpl.n	80049f0 <__sfp+0x28>
 80049e8:	6833      	ldr	r3, [r6, #0]
 80049ea:	b30b      	cbz	r3, 8004a30 <__sfp+0x68>
 80049ec:	6836      	ldr	r6, [r6, #0]
 80049ee:	e7f7      	b.n	80049e0 <__sfp+0x18>
 80049f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049f4:	b9d5      	cbnz	r5, 8004a2c <__sfp+0x64>
 80049f6:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <__sfp+0x88>)
 80049f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049fc:	60e3      	str	r3, [r4, #12]
 80049fe:	6665      	str	r5, [r4, #100]	; 0x64
 8004a00:	f000 f84c 	bl	8004a9c <__retarget_lock_init_recursive>
 8004a04:	f7ff ff96 	bl	8004934 <__sfp_lock_release>
 8004a08:	2208      	movs	r2, #8
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a14:	6025      	str	r5, [r4, #0]
 8004a16:	61a5      	str	r5, [r4, #24]
 8004a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a1c:	f7fe fa54 	bl	8002ec8 <memset>
 8004a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a28:	4620      	mov	r0, r4
 8004a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a2c:	3468      	adds	r4, #104	; 0x68
 8004a2e:	e7d9      	b.n	80049e4 <__sfp+0x1c>
 8004a30:	2104      	movs	r1, #4
 8004a32:	4638      	mov	r0, r7
 8004a34:	f7ff ff62 	bl	80048fc <__sfmoreglue>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	6030      	str	r0, [r6, #0]
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1d5      	bne.n	80049ec <__sfp+0x24>
 8004a40:	f7ff ff78 	bl	8004934 <__sfp_lock_release>
 8004a44:	230c      	movs	r3, #12
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	e7ee      	b.n	8004a28 <__sfp+0x60>
 8004a4a:	bf00      	nop
 8004a4c:	08005b10 	.word	0x08005b10
 8004a50:	ffff0001 	.word	0xffff0001

08004a54 <_fwalk_reent>:
 8004a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a58:	4606      	mov	r6, r0
 8004a5a:	4688      	mov	r8, r1
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a66:	f1b9 0901 	subs.w	r9, r9, #1
 8004a6a:	d505      	bpl.n	8004a78 <_fwalk_reent+0x24>
 8004a6c:	6824      	ldr	r4, [r4, #0]
 8004a6e:	2c00      	cmp	r4, #0
 8004a70:	d1f7      	bne.n	8004a62 <_fwalk_reent+0xe>
 8004a72:	4638      	mov	r0, r7
 8004a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a78:	89ab      	ldrh	r3, [r5, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d907      	bls.n	8004a8e <_fwalk_reent+0x3a>
 8004a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a82:	3301      	adds	r3, #1
 8004a84:	d003      	beq.n	8004a8e <_fwalk_reent+0x3a>
 8004a86:	4629      	mov	r1, r5
 8004a88:	4630      	mov	r0, r6
 8004a8a:	47c0      	blx	r8
 8004a8c:	4307      	orrs	r7, r0
 8004a8e:	3568      	adds	r5, #104	; 0x68
 8004a90:	e7e9      	b.n	8004a66 <_fwalk_reent+0x12>
	...

08004a94 <_localeconv_r>:
 8004a94:	4800      	ldr	r0, [pc, #0]	; (8004a98 <_localeconv_r+0x4>)
 8004a96:	4770      	bx	lr
 8004a98:	20000160 	.word	0x20000160

08004a9c <__retarget_lock_init_recursive>:
 8004a9c:	4770      	bx	lr

08004a9e <__retarget_lock_acquire_recursive>:
 8004a9e:	4770      	bx	lr

08004aa0 <__retarget_lock_release_recursive>:
 8004aa0:	4770      	bx	lr

08004aa2 <__swhatbuf_r>:
 8004aa2:	b570      	push	{r4, r5, r6, lr}
 8004aa4:	460e      	mov	r6, r1
 8004aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aaa:	4614      	mov	r4, r2
 8004aac:	2900      	cmp	r1, #0
 8004aae:	461d      	mov	r5, r3
 8004ab0:	b096      	sub	sp, #88	; 0x58
 8004ab2:	da08      	bge.n	8004ac6 <__swhatbuf_r+0x24>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004aba:	602a      	str	r2, [r5, #0]
 8004abc:	061a      	lsls	r2, r3, #24
 8004abe:	d410      	bmi.n	8004ae2 <__swhatbuf_r+0x40>
 8004ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac4:	e00e      	b.n	8004ae4 <__swhatbuf_r+0x42>
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f000 fee4 	bl	8005894 <_fstat_r>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	dbf1      	blt.n	8004ab4 <__swhatbuf_r+0x12>
 8004ad0:	9a01      	ldr	r2, [sp, #4]
 8004ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ada:	425a      	negs	r2, r3
 8004adc:	415a      	adcs	r2, r3
 8004ade:	602a      	str	r2, [r5, #0]
 8004ae0:	e7ee      	b.n	8004ac0 <__swhatbuf_r+0x1e>
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	b016      	add	sp, #88	; 0x58
 8004aea:	bd70      	pop	{r4, r5, r6, pc}

08004aec <__smakebuf_r>:
 8004aec:	898b      	ldrh	r3, [r1, #12]
 8004aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004af0:	079d      	lsls	r5, r3, #30
 8004af2:	4606      	mov	r6, r0
 8004af4:	460c      	mov	r4, r1
 8004af6:	d507      	bpl.n	8004b08 <__smakebuf_r+0x1c>
 8004af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	2301      	movs	r3, #1
 8004b02:	6163      	str	r3, [r4, #20]
 8004b04:	b002      	add	sp, #8
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	466a      	mov	r2, sp
 8004b0a:	ab01      	add	r3, sp, #4
 8004b0c:	f7ff ffc9 	bl	8004aa2 <__swhatbuf_r>
 8004b10:	9900      	ldr	r1, [sp, #0]
 8004b12:	4605      	mov	r5, r0
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 fc4b 	bl	80053b0 <_malloc_r>
 8004b1a:	b948      	cbnz	r0, 8004b30 <__smakebuf_r+0x44>
 8004b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b20:	059a      	lsls	r2, r3, #22
 8004b22:	d4ef      	bmi.n	8004b04 <__smakebuf_r+0x18>
 8004b24:	f023 0303 	bic.w	r3, r3, #3
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	81a3      	strh	r3, [r4, #12]
 8004b2e:	e7e3      	b.n	8004af8 <__smakebuf_r+0xc>
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <__smakebuf_r+0x7c>)
 8004b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	6020      	str	r0, [r4, #0]
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	9b00      	ldr	r3, [sp, #0]
 8004b40:	6120      	str	r0, [r4, #16]
 8004b42:	6163      	str	r3, [r4, #20]
 8004b44:	9b01      	ldr	r3, [sp, #4]
 8004b46:	b15b      	cbz	r3, 8004b60 <__smakebuf_r+0x74>
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b4e:	f000 feb3 	bl	80058b8 <_isatty_r>
 8004b52:	b128      	cbz	r0, 8004b60 <__smakebuf_r+0x74>
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	81a3      	strh	r3, [r4, #12]
 8004b60:	89a0      	ldrh	r0, [r4, #12]
 8004b62:	4305      	orrs	r5, r0
 8004b64:	81a5      	strh	r5, [r4, #12]
 8004b66:	e7cd      	b.n	8004b04 <__smakebuf_r+0x18>
 8004b68:	080048f1 	.word	0x080048f1

08004b6c <malloc>:
 8004b6c:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <malloc+0xc>)
 8004b6e:	4601      	mov	r1, r0
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	f000 bc1d 	b.w	80053b0 <_malloc_r>
 8004b76:	bf00      	nop
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <memchr>:
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	b2c9      	uxtb	r1, r1
 8004b82:	4402      	add	r2, r0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	d101      	bne.n	8004b8e <memchr+0x12>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e003      	b.n	8004b96 <memchr+0x1a>
 8004b8e:	7804      	ldrb	r4, [r0, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	428c      	cmp	r4, r1
 8004b94:	d1f6      	bne.n	8004b84 <memchr+0x8>
 8004b96:	bd10      	pop	{r4, pc}

08004b98 <memcpy>:
 8004b98:	440a      	add	r2, r1
 8004b9a:	4291      	cmp	r1, r2
 8004b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ba0:	d100      	bne.n	8004ba4 <memcpy+0xc>
 8004ba2:	4770      	bx	lr
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004baa:	4291      	cmp	r1, r2
 8004bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bb0:	d1f9      	bne.n	8004ba6 <memcpy+0xe>
 8004bb2:	bd10      	pop	{r4, pc}

08004bb4 <_Balloc>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	b976      	cbnz	r6, 8004bdc <_Balloc+0x28>
 8004bbe:	2010      	movs	r0, #16
 8004bc0:	f7ff ffd4 	bl	8004b6c <malloc>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6260      	str	r0, [r4, #36]	; 0x24
 8004bc8:	b920      	cbnz	r0, 8004bd4 <_Balloc+0x20>
 8004bca:	2166      	movs	r1, #102	; 0x66
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <_Balloc+0x78>)
 8004bce:	4818      	ldr	r0, [pc, #96]	; (8004c30 <_Balloc+0x7c>)
 8004bd0:	f000 fe20 	bl	8005814 <__assert_func>
 8004bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bd8:	6006      	str	r6, [r0, #0]
 8004bda:	60c6      	str	r6, [r0, #12]
 8004bdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bde:	68f3      	ldr	r3, [r6, #12]
 8004be0:	b183      	cbz	r3, 8004c04 <_Balloc+0x50>
 8004be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bea:	b9b8      	cbnz	r0, 8004c1c <_Balloc+0x68>
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f605 	lsl.w	r6, r1, r5
 8004bf2:	1d72      	adds	r2, r6, #5
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	0092      	lsls	r2, r2, #2
 8004bf8:	f000 fb5e 	bl	80052b8 <_calloc_r>
 8004bfc:	b160      	cbz	r0, 8004c18 <_Balloc+0x64>
 8004bfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c02:	e00e      	b.n	8004c22 <_Balloc+0x6e>
 8004c04:	2221      	movs	r2, #33	; 0x21
 8004c06:	2104      	movs	r1, #4
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fb55 	bl	80052b8 <_calloc_r>
 8004c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c10:	60f0      	str	r0, [r6, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e4      	bne.n	8004be2 <_Balloc+0x2e>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	6802      	ldr	r2, [r0, #0]
 8004c1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c22:	2300      	movs	r3, #0
 8004c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c28:	e7f7      	b.n	8004c1a <_Balloc+0x66>
 8004c2a:	bf00      	nop
 8004c2c:	08005b55 	.word	0x08005b55
 8004c30:	08005c38 	.word	0x08005c38

08004c34 <_Bfree>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c38:	4605      	mov	r5, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	b976      	cbnz	r6, 8004c5c <_Bfree+0x28>
 8004c3e:	2010      	movs	r0, #16
 8004c40:	f7ff ff94 	bl	8004b6c <malloc>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6268      	str	r0, [r5, #36]	; 0x24
 8004c48:	b920      	cbnz	r0, 8004c54 <_Bfree+0x20>
 8004c4a:	218a      	movs	r1, #138	; 0x8a
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <_Bfree+0x3c>)
 8004c4e:	4809      	ldr	r0, [pc, #36]	; (8004c74 <_Bfree+0x40>)
 8004c50:	f000 fde0 	bl	8005814 <__assert_func>
 8004c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c58:	6006      	str	r6, [r0, #0]
 8004c5a:	60c6      	str	r6, [r0, #12]
 8004c5c:	b13c      	cbz	r4, 8004c6e <_Bfree+0x3a>
 8004c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c60:	6862      	ldr	r2, [r4, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c68:	6021      	str	r1, [r4, #0]
 8004c6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	08005b55 	.word	0x08005b55
 8004c74:	08005c38 	.word	0x08005c38

08004c78 <__multadd>:
 8004c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	461e      	mov	r6, r3
 8004c82:	2000      	movs	r0, #0
 8004c84:	690d      	ldr	r5, [r1, #16]
 8004c86:	f101 0c14 	add.w	ip, r1, #20
 8004c8a:	f8dc 3000 	ldr.w	r3, [ip]
 8004c8e:	3001      	adds	r0, #1
 8004c90:	b299      	uxth	r1, r3
 8004c92:	fb02 6101 	mla	r1, r2, r1, r6
 8004c96:	0c1e      	lsrs	r6, r3, #16
 8004c98:	0c0b      	lsrs	r3, r1, #16
 8004c9a:	fb02 3306 	mla	r3, r2, r6, r3
 8004c9e:	b289      	uxth	r1, r1
 8004ca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004ca4:	4285      	cmp	r5, r0
 8004ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004caa:	f84c 1b04 	str.w	r1, [ip], #4
 8004cae:	dcec      	bgt.n	8004c8a <__multadd+0x12>
 8004cb0:	b30e      	cbz	r6, 8004cf6 <__multadd+0x7e>
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dc19      	bgt.n	8004cec <__multadd+0x74>
 8004cb8:	6861      	ldr	r1, [r4, #4]
 8004cba:	4638      	mov	r0, r7
 8004cbc:	3101      	adds	r1, #1
 8004cbe:	f7ff ff79 	bl	8004bb4 <_Balloc>
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	b928      	cbnz	r0, 8004cd2 <__multadd+0x5a>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	21b5      	movs	r1, #181	; 0xb5
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <__multadd+0x84>)
 8004ccc:	480c      	ldr	r0, [pc, #48]	; (8004d00 <__multadd+0x88>)
 8004cce:	f000 fda1 	bl	8005814 <__assert_func>
 8004cd2:	6922      	ldr	r2, [r4, #16]
 8004cd4:	f104 010c 	add.w	r1, r4, #12
 8004cd8:	3202      	adds	r2, #2
 8004cda:	0092      	lsls	r2, r2, #2
 8004cdc:	300c      	adds	r0, #12
 8004cde:	f7ff ff5b 	bl	8004b98 <memcpy>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff ffa5 	bl	8004c34 <_Bfree>
 8004cea:	4644      	mov	r4, r8
 8004cec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004cf0:	3501      	adds	r5, #1
 8004cf2:	615e      	str	r6, [r3, #20]
 8004cf4:	6125      	str	r5, [r4, #16]
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cfc:	08005bc7 	.word	0x08005bc7
 8004d00:	08005c38 	.word	0x08005c38

08004d04 <__hi0bits>:
 8004d04:	0c02      	lsrs	r2, r0, #16
 8004d06:	0412      	lsls	r2, r2, #16
 8004d08:	4603      	mov	r3, r0
 8004d0a:	b9ca      	cbnz	r2, 8004d40 <__hi0bits+0x3c>
 8004d0c:	0403      	lsls	r3, r0, #16
 8004d0e:	2010      	movs	r0, #16
 8004d10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004d14:	bf04      	itt	eq
 8004d16:	021b      	lsleq	r3, r3, #8
 8004d18:	3008      	addeq	r0, #8
 8004d1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004d1e:	bf04      	itt	eq
 8004d20:	011b      	lsleq	r3, r3, #4
 8004d22:	3004      	addeq	r0, #4
 8004d24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004d28:	bf04      	itt	eq
 8004d2a:	009b      	lsleq	r3, r3, #2
 8004d2c:	3002      	addeq	r0, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	db05      	blt.n	8004d3e <__hi0bits+0x3a>
 8004d32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004d36:	f100 0001 	add.w	r0, r0, #1
 8004d3a:	bf08      	it	eq
 8004d3c:	2020      	moveq	r0, #32
 8004d3e:	4770      	bx	lr
 8004d40:	2000      	movs	r0, #0
 8004d42:	e7e5      	b.n	8004d10 <__hi0bits+0xc>

08004d44 <__lo0bits>:
 8004d44:	6803      	ldr	r3, [r0, #0]
 8004d46:	4602      	mov	r2, r0
 8004d48:	f013 0007 	ands.w	r0, r3, #7
 8004d4c:	d00b      	beq.n	8004d66 <__lo0bits+0x22>
 8004d4e:	07d9      	lsls	r1, r3, #31
 8004d50:	d421      	bmi.n	8004d96 <__lo0bits+0x52>
 8004d52:	0798      	lsls	r0, r3, #30
 8004d54:	bf49      	itett	mi
 8004d56:	085b      	lsrmi	r3, r3, #1
 8004d58:	089b      	lsrpl	r3, r3, #2
 8004d5a:	2001      	movmi	r0, #1
 8004d5c:	6013      	strmi	r3, [r2, #0]
 8004d5e:	bf5c      	itt	pl
 8004d60:	2002      	movpl	r0, #2
 8004d62:	6013      	strpl	r3, [r2, #0]
 8004d64:	4770      	bx	lr
 8004d66:	b299      	uxth	r1, r3
 8004d68:	b909      	cbnz	r1, 8004d6e <__lo0bits+0x2a>
 8004d6a:	2010      	movs	r0, #16
 8004d6c:	0c1b      	lsrs	r3, r3, #16
 8004d6e:	b2d9      	uxtb	r1, r3
 8004d70:	b909      	cbnz	r1, 8004d76 <__lo0bits+0x32>
 8004d72:	3008      	adds	r0, #8
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	0719      	lsls	r1, r3, #28
 8004d78:	bf04      	itt	eq
 8004d7a:	091b      	lsreq	r3, r3, #4
 8004d7c:	3004      	addeq	r0, #4
 8004d7e:	0799      	lsls	r1, r3, #30
 8004d80:	bf04      	itt	eq
 8004d82:	089b      	lsreq	r3, r3, #2
 8004d84:	3002      	addeq	r0, #2
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d403      	bmi.n	8004d92 <__lo0bits+0x4e>
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	f100 0001 	add.w	r0, r0, #1
 8004d90:	d003      	beq.n	8004d9a <__lo0bits+0x56>
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	4770      	bx	lr
 8004d96:	2000      	movs	r0, #0
 8004d98:	4770      	bx	lr
 8004d9a:	2020      	movs	r0, #32
 8004d9c:	4770      	bx	lr
	...

08004da0 <__i2b>:
 8004da0:	b510      	push	{r4, lr}
 8004da2:	460c      	mov	r4, r1
 8004da4:	2101      	movs	r1, #1
 8004da6:	f7ff ff05 	bl	8004bb4 <_Balloc>
 8004daa:	4602      	mov	r2, r0
 8004dac:	b928      	cbnz	r0, 8004dba <__i2b+0x1a>
 8004dae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004db2:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <__i2b+0x24>)
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <__i2b+0x28>)
 8004db6:	f000 fd2d 	bl	8005814 <__assert_func>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	6144      	str	r4, [r0, #20]
 8004dbe:	6103      	str	r3, [r0, #16]
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08005bc7 	.word	0x08005bc7
 8004dc8:	08005c38 	.word	0x08005c38

08004dcc <__multiply>:
 8004dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd0:	4691      	mov	r9, r2
 8004dd2:	690a      	ldr	r2, [r1, #16]
 8004dd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004dd8:	460c      	mov	r4, r1
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	bfbe      	ittt	lt
 8004dde:	460b      	movlt	r3, r1
 8004de0:	464c      	movlt	r4, r9
 8004de2:	4699      	movlt	r9, r3
 8004de4:	6927      	ldr	r7, [r4, #16]
 8004de6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	6861      	ldr	r1, [r4, #4]
 8004dee:	eb07 060a 	add.w	r6, r7, sl
 8004df2:	42b3      	cmp	r3, r6
 8004df4:	b085      	sub	sp, #20
 8004df6:	bfb8      	it	lt
 8004df8:	3101      	addlt	r1, #1
 8004dfa:	f7ff fedb 	bl	8004bb4 <_Balloc>
 8004dfe:	b930      	cbnz	r0, 8004e0e <__multiply+0x42>
 8004e00:	4602      	mov	r2, r0
 8004e02:	f240 115d 	movw	r1, #349	; 0x15d
 8004e06:	4b43      	ldr	r3, [pc, #268]	; (8004f14 <__multiply+0x148>)
 8004e08:	4843      	ldr	r0, [pc, #268]	; (8004f18 <__multiply+0x14c>)
 8004e0a:	f000 fd03 	bl	8005814 <__assert_func>
 8004e0e:	f100 0514 	add.w	r5, r0, #20
 8004e12:	462b      	mov	r3, r5
 8004e14:	2200      	movs	r2, #0
 8004e16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e1a:	4543      	cmp	r3, r8
 8004e1c:	d321      	bcc.n	8004e62 <__multiply+0x96>
 8004e1e:	f104 0314 	add.w	r3, r4, #20
 8004e22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004e26:	f109 0314 	add.w	r3, r9, #20
 8004e2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004e2e:	9202      	str	r2, [sp, #8]
 8004e30:	1b3a      	subs	r2, r7, r4
 8004e32:	3a15      	subs	r2, #21
 8004e34:	f022 0203 	bic.w	r2, r2, #3
 8004e38:	3204      	adds	r2, #4
 8004e3a:	f104 0115 	add.w	r1, r4, #21
 8004e3e:	428f      	cmp	r7, r1
 8004e40:	bf38      	it	cc
 8004e42:	2204      	movcc	r2, #4
 8004e44:	9201      	str	r2, [sp, #4]
 8004e46:	9a02      	ldr	r2, [sp, #8]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d80c      	bhi.n	8004e68 <__multiply+0x9c>
 8004e4e:	2e00      	cmp	r6, #0
 8004e50:	dd03      	ble.n	8004e5a <__multiply+0x8e>
 8004e52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d059      	beq.n	8004f0e <__multiply+0x142>
 8004e5a:	6106      	str	r6, [r0, #16]
 8004e5c:	b005      	add	sp, #20
 8004e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e62:	f843 2b04 	str.w	r2, [r3], #4
 8004e66:	e7d8      	b.n	8004e1a <__multiply+0x4e>
 8004e68:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e6c:	f1ba 0f00 	cmp.w	sl, #0
 8004e70:	d023      	beq.n	8004eba <__multiply+0xee>
 8004e72:	46a9      	mov	r9, r5
 8004e74:	f04f 0c00 	mov.w	ip, #0
 8004e78:	f104 0e14 	add.w	lr, r4, #20
 8004e7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004e80:	f8d9 1000 	ldr.w	r1, [r9]
 8004e84:	fa1f fb82 	uxth.w	fp, r2
 8004e88:	b289      	uxth	r1, r1
 8004e8a:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e8e:	4461      	add	r1, ip
 8004e90:	f8d9 c000 	ldr.w	ip, [r9]
 8004e94:	0c12      	lsrs	r2, r2, #16
 8004e96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004e9a:	fb0a c202 	mla	r2, sl, r2, ip
 8004e9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004ea2:	b289      	uxth	r1, r1
 8004ea4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ea8:	4577      	cmp	r7, lr
 8004eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004eae:	f849 1b04 	str.w	r1, [r9], #4
 8004eb2:	d8e3      	bhi.n	8004e7c <__multiply+0xb0>
 8004eb4:	9a01      	ldr	r2, [sp, #4]
 8004eb6:	f845 c002 	str.w	ip, [r5, r2]
 8004eba:	9a03      	ldr	r2, [sp, #12]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ec2:	f1b9 0f00 	cmp.w	r9, #0
 8004ec6:	d020      	beq.n	8004f0a <__multiply+0x13e>
 8004ec8:	46ae      	mov	lr, r5
 8004eca:	f04f 0a00 	mov.w	sl, #0
 8004ece:	6829      	ldr	r1, [r5, #0]
 8004ed0:	f104 0c14 	add.w	ip, r4, #20
 8004ed4:	f8bc b000 	ldrh.w	fp, [ip]
 8004ed8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004edc:	b289      	uxth	r1, r1
 8004ede:	fb09 220b 	mla	r2, r9, fp, r2
 8004ee2:	4492      	add	sl, r2
 8004ee4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004ee8:	f84e 1b04 	str.w	r1, [lr], #4
 8004eec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004ef0:	f8be 1000 	ldrh.w	r1, [lr]
 8004ef4:	0c12      	lsrs	r2, r2, #16
 8004ef6:	fb09 1102 	mla	r1, r9, r2, r1
 8004efa:	4567      	cmp	r7, ip
 8004efc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004f00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f04:	d8e6      	bhi.n	8004ed4 <__multiply+0x108>
 8004f06:	9a01      	ldr	r2, [sp, #4]
 8004f08:	50a9      	str	r1, [r5, r2]
 8004f0a:	3504      	adds	r5, #4
 8004f0c:	e79b      	b.n	8004e46 <__multiply+0x7a>
 8004f0e:	3e01      	subs	r6, #1
 8004f10:	e79d      	b.n	8004e4e <__multiply+0x82>
 8004f12:	bf00      	nop
 8004f14:	08005bc7 	.word	0x08005bc7
 8004f18:	08005c38 	.word	0x08005c38

08004f1c <__pow5mult>:
 8004f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f20:	4615      	mov	r5, r2
 8004f22:	f012 0203 	ands.w	r2, r2, #3
 8004f26:	4606      	mov	r6, r0
 8004f28:	460f      	mov	r7, r1
 8004f2a:	d007      	beq.n	8004f3c <__pow5mult+0x20>
 8004f2c:	4c25      	ldr	r4, [pc, #148]	; (8004fc4 <__pow5mult+0xa8>)
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	2300      	movs	r3, #0
 8004f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f36:	f7ff fe9f 	bl	8004c78 <__multadd>
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	10ad      	asrs	r5, r5, #2
 8004f3e:	d03d      	beq.n	8004fbc <__pow5mult+0xa0>
 8004f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f42:	b97c      	cbnz	r4, 8004f64 <__pow5mult+0x48>
 8004f44:	2010      	movs	r0, #16
 8004f46:	f7ff fe11 	bl	8004b6c <malloc>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8004f4e:	b928      	cbnz	r0, 8004f5c <__pow5mult+0x40>
 8004f50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004f54:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <__pow5mult+0xac>)
 8004f56:	481d      	ldr	r0, [pc, #116]	; (8004fcc <__pow5mult+0xb0>)
 8004f58:	f000 fc5c 	bl	8005814 <__assert_func>
 8004f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f60:	6004      	str	r4, [r0, #0]
 8004f62:	60c4      	str	r4, [r0, #12]
 8004f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f6c:	b94c      	cbnz	r4, 8004f82 <__pow5mult+0x66>
 8004f6e:	f240 2171 	movw	r1, #625	; 0x271
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff ff14 	bl	8004da0 <__i2b>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f80:	6003      	str	r3, [r0, #0]
 8004f82:	f04f 0900 	mov.w	r9, #0
 8004f86:	07eb      	lsls	r3, r5, #31
 8004f88:	d50a      	bpl.n	8004fa0 <__pow5mult+0x84>
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff ff1c 	bl	8004dcc <__multiply>
 8004f94:	4680      	mov	r8, r0
 8004f96:	4639      	mov	r1, r7
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff fe4b 	bl	8004c34 <_Bfree>
 8004f9e:	4647      	mov	r7, r8
 8004fa0:	106d      	asrs	r5, r5, #1
 8004fa2:	d00b      	beq.n	8004fbc <__pow5mult+0xa0>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	b938      	cbnz	r0, 8004fb8 <__pow5mult+0x9c>
 8004fa8:	4622      	mov	r2, r4
 8004faa:	4621      	mov	r1, r4
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ff0d 	bl	8004dcc <__multiply>
 8004fb2:	6020      	str	r0, [r4, #0]
 8004fb4:	f8c0 9000 	str.w	r9, [r0]
 8004fb8:	4604      	mov	r4, r0
 8004fba:	e7e4      	b.n	8004f86 <__pow5mult+0x6a>
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc2:	bf00      	nop
 8004fc4:	08005d88 	.word	0x08005d88
 8004fc8:	08005b55 	.word	0x08005b55
 8004fcc:	08005c38 	.word	0x08005c38

08004fd0 <__lshift>:
 8004fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	4607      	mov	r7, r0
 8004fd8:	4691      	mov	r9, r2
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	6849      	ldr	r1, [r1, #4]
 8004fde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fe8:	f108 0601 	add.w	r6, r8, #1
 8004fec:	42b3      	cmp	r3, r6
 8004fee:	db0b      	blt.n	8005008 <__lshift+0x38>
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff fddf 	bl	8004bb4 <_Balloc>
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	b948      	cbnz	r0, 800500e <__lshift+0x3e>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <__lshift+0xd8>)
 8005002:	482a      	ldr	r0, [pc, #168]	; (80050ac <__lshift+0xdc>)
 8005004:	f000 fc06 	bl	8005814 <__assert_func>
 8005008:	3101      	adds	r1, #1
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	e7ee      	b.n	8004fec <__lshift+0x1c>
 800500e:	2300      	movs	r3, #0
 8005010:	f100 0114 	add.w	r1, r0, #20
 8005014:	f100 0210 	add.w	r2, r0, #16
 8005018:	4618      	mov	r0, r3
 800501a:	4553      	cmp	r3, sl
 800501c:	db37      	blt.n	800508e <__lshift+0xbe>
 800501e:	6920      	ldr	r0, [r4, #16]
 8005020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005024:	f104 0314 	add.w	r3, r4, #20
 8005028:	f019 091f 	ands.w	r9, r9, #31
 800502c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005034:	d02f      	beq.n	8005096 <__lshift+0xc6>
 8005036:	468a      	mov	sl, r1
 8005038:	f04f 0c00 	mov.w	ip, #0
 800503c:	f1c9 0e20 	rsb	lr, r9, #32
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	fa02 f209 	lsl.w	r2, r2, r9
 8005046:	ea42 020c 	orr.w	r2, r2, ip
 800504a:	f84a 2b04 	str.w	r2, [sl], #4
 800504e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005052:	4298      	cmp	r0, r3
 8005054:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005058:	d8f2      	bhi.n	8005040 <__lshift+0x70>
 800505a:	1b03      	subs	r3, r0, r4
 800505c:	3b15      	subs	r3, #21
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	3304      	adds	r3, #4
 8005064:	f104 0215 	add.w	r2, r4, #21
 8005068:	4290      	cmp	r0, r2
 800506a:	bf38      	it	cc
 800506c:	2304      	movcc	r3, #4
 800506e:	f841 c003 	str.w	ip, [r1, r3]
 8005072:	f1bc 0f00 	cmp.w	ip, #0
 8005076:	d001      	beq.n	800507c <__lshift+0xac>
 8005078:	f108 0602 	add.w	r6, r8, #2
 800507c:	3e01      	subs	r6, #1
 800507e:	4638      	mov	r0, r7
 8005080:	4621      	mov	r1, r4
 8005082:	612e      	str	r6, [r5, #16]
 8005084:	f7ff fdd6 	bl	8004c34 <_Bfree>
 8005088:	4628      	mov	r0, r5
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005092:	3301      	adds	r3, #1
 8005094:	e7c1      	b.n	800501a <__lshift+0x4a>
 8005096:	3904      	subs	r1, #4
 8005098:	f853 2b04 	ldr.w	r2, [r3], #4
 800509c:	4298      	cmp	r0, r3
 800509e:	f841 2f04 	str.w	r2, [r1, #4]!
 80050a2:	d8f9      	bhi.n	8005098 <__lshift+0xc8>
 80050a4:	e7ea      	b.n	800507c <__lshift+0xac>
 80050a6:	bf00      	nop
 80050a8:	08005bc7 	.word	0x08005bc7
 80050ac:	08005c38 	.word	0x08005c38

080050b0 <__mcmp>:
 80050b0:	4603      	mov	r3, r0
 80050b2:	690a      	ldr	r2, [r1, #16]
 80050b4:	6900      	ldr	r0, [r0, #16]
 80050b6:	b530      	push	{r4, r5, lr}
 80050b8:	1a80      	subs	r0, r0, r2
 80050ba:	d10d      	bne.n	80050d8 <__mcmp+0x28>
 80050bc:	3314      	adds	r3, #20
 80050be:	3114      	adds	r1, #20
 80050c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80050c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80050c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80050cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80050d0:	4295      	cmp	r5, r2
 80050d2:	d002      	beq.n	80050da <__mcmp+0x2a>
 80050d4:	d304      	bcc.n	80050e0 <__mcmp+0x30>
 80050d6:	2001      	movs	r0, #1
 80050d8:	bd30      	pop	{r4, r5, pc}
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d3f4      	bcc.n	80050c8 <__mcmp+0x18>
 80050de:	e7fb      	b.n	80050d8 <__mcmp+0x28>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	e7f8      	b.n	80050d8 <__mcmp+0x28>
	...

080050e8 <__mdiff>:
 80050e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	460d      	mov	r5, r1
 80050ee:	4607      	mov	r7, r0
 80050f0:	4611      	mov	r1, r2
 80050f2:	4628      	mov	r0, r5
 80050f4:	4614      	mov	r4, r2
 80050f6:	f7ff ffdb 	bl	80050b0 <__mcmp>
 80050fa:	1e06      	subs	r6, r0, #0
 80050fc:	d111      	bne.n	8005122 <__mdiff+0x3a>
 80050fe:	4631      	mov	r1, r6
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff fd57 	bl	8004bb4 <_Balloc>
 8005106:	4602      	mov	r2, r0
 8005108:	b928      	cbnz	r0, 8005116 <__mdiff+0x2e>
 800510a:	f240 2132 	movw	r1, #562	; 0x232
 800510e:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <__mdiff+0x110>)
 8005110:	483a      	ldr	r0, [pc, #232]	; (80051fc <__mdiff+0x114>)
 8005112:	f000 fb7f 	bl	8005814 <__assert_func>
 8005116:	2301      	movs	r3, #1
 8005118:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800511c:	4610      	mov	r0, r2
 800511e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005122:	bfa4      	itt	ge
 8005124:	4623      	movge	r3, r4
 8005126:	462c      	movge	r4, r5
 8005128:	4638      	mov	r0, r7
 800512a:	6861      	ldr	r1, [r4, #4]
 800512c:	bfa6      	itte	ge
 800512e:	461d      	movge	r5, r3
 8005130:	2600      	movge	r6, #0
 8005132:	2601      	movlt	r6, #1
 8005134:	f7ff fd3e 	bl	8004bb4 <_Balloc>
 8005138:	4602      	mov	r2, r0
 800513a:	b918      	cbnz	r0, 8005144 <__mdiff+0x5c>
 800513c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <__mdiff+0x110>)
 8005142:	e7e5      	b.n	8005110 <__mdiff+0x28>
 8005144:	f102 0814 	add.w	r8, r2, #20
 8005148:	46c2      	mov	sl, r8
 800514a:	f04f 0c00 	mov.w	ip, #0
 800514e:	6927      	ldr	r7, [r4, #16]
 8005150:	60c6      	str	r6, [r0, #12]
 8005152:	692e      	ldr	r6, [r5, #16]
 8005154:	f104 0014 	add.w	r0, r4, #20
 8005158:	f105 0914 	add.w	r9, r5, #20
 800515c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005160:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005164:	3410      	adds	r4, #16
 8005166:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800516a:	f859 3b04 	ldr.w	r3, [r9], #4
 800516e:	fa1f f18b 	uxth.w	r1, fp
 8005172:	448c      	add	ip, r1
 8005174:	b299      	uxth	r1, r3
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	ebac 0101 	sub.w	r1, ip, r1
 800517c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005180:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005184:	b289      	uxth	r1, r1
 8005186:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800518a:	454e      	cmp	r6, r9
 800518c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005190:	f84a 3b04 	str.w	r3, [sl], #4
 8005194:	d8e7      	bhi.n	8005166 <__mdiff+0x7e>
 8005196:	1b73      	subs	r3, r6, r5
 8005198:	3b15      	subs	r3, #21
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	3515      	adds	r5, #21
 80051a0:	3304      	adds	r3, #4
 80051a2:	42ae      	cmp	r6, r5
 80051a4:	bf38      	it	cc
 80051a6:	2304      	movcc	r3, #4
 80051a8:	4418      	add	r0, r3
 80051aa:	4443      	add	r3, r8
 80051ac:	461e      	mov	r6, r3
 80051ae:	4605      	mov	r5, r0
 80051b0:	4575      	cmp	r5, lr
 80051b2:	d30e      	bcc.n	80051d2 <__mdiff+0xea>
 80051b4:	f10e 0103 	add.w	r1, lr, #3
 80051b8:	1a09      	subs	r1, r1, r0
 80051ba:	f021 0103 	bic.w	r1, r1, #3
 80051be:	3803      	subs	r0, #3
 80051c0:	4586      	cmp	lr, r0
 80051c2:	bf38      	it	cc
 80051c4:	2100      	movcc	r1, #0
 80051c6:	4419      	add	r1, r3
 80051c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80051cc:	b18b      	cbz	r3, 80051f2 <__mdiff+0x10a>
 80051ce:	6117      	str	r7, [r2, #16]
 80051d0:	e7a4      	b.n	800511c <__mdiff+0x34>
 80051d2:	f855 8b04 	ldr.w	r8, [r5], #4
 80051d6:	fa1f f188 	uxth.w	r1, r8
 80051da:	4461      	add	r1, ip
 80051dc:	140c      	asrs	r4, r1, #16
 80051de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80051e2:	b289      	uxth	r1, r1
 80051e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80051e8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80051ec:	f846 1b04 	str.w	r1, [r6], #4
 80051f0:	e7de      	b.n	80051b0 <__mdiff+0xc8>
 80051f2:	3f01      	subs	r7, #1
 80051f4:	e7e8      	b.n	80051c8 <__mdiff+0xe0>
 80051f6:	bf00      	nop
 80051f8:	08005bc7 	.word	0x08005bc7
 80051fc:	08005c38 	.word	0x08005c38

08005200 <__d2b>:
 8005200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005204:	2101      	movs	r1, #1
 8005206:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800520a:	4690      	mov	r8, r2
 800520c:	461d      	mov	r5, r3
 800520e:	f7ff fcd1 	bl	8004bb4 <_Balloc>
 8005212:	4604      	mov	r4, r0
 8005214:	b930      	cbnz	r0, 8005224 <__d2b+0x24>
 8005216:	4602      	mov	r2, r0
 8005218:	f240 310a 	movw	r1, #778	; 0x30a
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <__d2b+0xb0>)
 800521e:	4825      	ldr	r0, [pc, #148]	; (80052b4 <__d2b+0xb4>)
 8005220:	f000 faf8 	bl	8005814 <__assert_func>
 8005224:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005228:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800522c:	bb2d      	cbnz	r5, 800527a <__d2b+0x7a>
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	f1b8 0300 	subs.w	r3, r8, #0
 8005234:	d026      	beq.n	8005284 <__d2b+0x84>
 8005236:	4668      	mov	r0, sp
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f7ff fd83 	bl	8004d44 <__lo0bits>
 800523e:	9900      	ldr	r1, [sp, #0]
 8005240:	b1f0      	cbz	r0, 8005280 <__d2b+0x80>
 8005242:	9a01      	ldr	r2, [sp, #4]
 8005244:	f1c0 0320 	rsb	r3, r0, #32
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	430b      	orrs	r3, r1
 800524e:	40c2      	lsrs	r2, r0
 8005250:	6163      	str	r3, [r4, #20]
 8005252:	9201      	str	r2, [sp, #4]
 8005254:	9b01      	ldr	r3, [sp, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf14      	ite	ne
 800525a:	2102      	movne	r1, #2
 800525c:	2101      	moveq	r1, #1
 800525e:	61a3      	str	r3, [r4, #24]
 8005260:	6121      	str	r1, [r4, #16]
 8005262:	b1c5      	cbz	r5, 8005296 <__d2b+0x96>
 8005264:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005268:	4405      	add	r5, r0
 800526a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800526e:	603d      	str	r5, [r7, #0]
 8005270:	6030      	str	r0, [r6, #0]
 8005272:	4620      	mov	r0, r4
 8005274:	b002      	add	sp, #8
 8005276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	e7d6      	b.n	800522e <__d2b+0x2e>
 8005280:	6161      	str	r1, [r4, #20]
 8005282:	e7e7      	b.n	8005254 <__d2b+0x54>
 8005284:	a801      	add	r0, sp, #4
 8005286:	f7ff fd5d 	bl	8004d44 <__lo0bits>
 800528a:	2101      	movs	r1, #1
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	6121      	str	r1, [r4, #16]
 8005290:	6163      	str	r3, [r4, #20]
 8005292:	3020      	adds	r0, #32
 8005294:	e7e5      	b.n	8005262 <__d2b+0x62>
 8005296:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800529a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800529e:	6038      	str	r0, [r7, #0]
 80052a0:	6918      	ldr	r0, [r3, #16]
 80052a2:	f7ff fd2f 	bl	8004d04 <__hi0bits>
 80052a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80052aa:	6031      	str	r1, [r6, #0]
 80052ac:	e7e1      	b.n	8005272 <__d2b+0x72>
 80052ae:	bf00      	nop
 80052b0:	08005bc7 	.word	0x08005bc7
 80052b4:	08005c38 	.word	0x08005c38

080052b8 <_calloc_r>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	fba1 5402 	umull	r5, r4, r1, r2
 80052be:	b934      	cbnz	r4, 80052ce <_calloc_r+0x16>
 80052c0:	4629      	mov	r1, r5
 80052c2:	f000 f875 	bl	80053b0 <_malloc_r>
 80052c6:	4606      	mov	r6, r0
 80052c8:	b928      	cbnz	r0, 80052d6 <_calloc_r+0x1e>
 80052ca:	4630      	mov	r0, r6
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	220c      	movs	r2, #12
 80052d0:	2600      	movs	r6, #0
 80052d2:	6002      	str	r2, [r0, #0]
 80052d4:	e7f9      	b.n	80052ca <_calloc_r+0x12>
 80052d6:	462a      	mov	r2, r5
 80052d8:	4621      	mov	r1, r4
 80052da:	f7fd fdf5 	bl	8002ec8 <memset>
 80052de:	e7f4      	b.n	80052ca <_calloc_r+0x12>

080052e0 <_free_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4605      	mov	r5, r0
 80052e4:	2900      	cmp	r1, #0
 80052e6:	d040      	beq.n	800536a <_free_r+0x8a>
 80052e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ec:	1f0c      	subs	r4, r1, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bfb8      	it	lt
 80052f2:	18e4      	addlt	r4, r4, r3
 80052f4:	f000 fb14 	bl	8005920 <__malloc_lock>
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <_free_r+0x8c>)
 80052fa:	6813      	ldr	r3, [r2, #0]
 80052fc:	b933      	cbnz	r3, 800530c <_free_r+0x2c>
 80052fe:	6063      	str	r3, [r4, #4]
 8005300:	6014      	str	r4, [r2, #0]
 8005302:	4628      	mov	r0, r5
 8005304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005308:	f000 bb10 	b.w	800592c <__malloc_unlock>
 800530c:	42a3      	cmp	r3, r4
 800530e:	d908      	bls.n	8005322 <_free_r+0x42>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	1821      	adds	r1, r4, r0
 8005314:	428b      	cmp	r3, r1
 8005316:	bf01      	itttt	eq
 8005318:	6819      	ldreq	r1, [r3, #0]
 800531a:	685b      	ldreq	r3, [r3, #4]
 800531c:	1809      	addeq	r1, r1, r0
 800531e:	6021      	streq	r1, [r4, #0]
 8005320:	e7ed      	b.n	80052fe <_free_r+0x1e>
 8005322:	461a      	mov	r2, r3
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b10b      	cbz	r3, 800532c <_free_r+0x4c>
 8005328:	42a3      	cmp	r3, r4
 800532a:	d9fa      	bls.n	8005322 <_free_r+0x42>
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	1850      	adds	r0, r2, r1
 8005330:	42a0      	cmp	r0, r4
 8005332:	d10b      	bne.n	800534c <_free_r+0x6c>
 8005334:	6820      	ldr	r0, [r4, #0]
 8005336:	4401      	add	r1, r0
 8005338:	1850      	adds	r0, r2, r1
 800533a:	4283      	cmp	r3, r0
 800533c:	6011      	str	r1, [r2, #0]
 800533e:	d1e0      	bne.n	8005302 <_free_r+0x22>
 8005340:	6818      	ldr	r0, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4401      	add	r1, r0
 8005346:	6011      	str	r1, [r2, #0]
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	e7da      	b.n	8005302 <_free_r+0x22>
 800534c:	d902      	bls.n	8005354 <_free_r+0x74>
 800534e:	230c      	movs	r3, #12
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	e7d6      	b.n	8005302 <_free_r+0x22>
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	1821      	adds	r1, r4, r0
 8005358:	428b      	cmp	r3, r1
 800535a:	bf01      	itttt	eq
 800535c:	6819      	ldreq	r1, [r3, #0]
 800535e:	685b      	ldreq	r3, [r3, #4]
 8005360:	1809      	addeq	r1, r1, r0
 8005362:	6021      	streq	r1, [r4, #0]
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	6054      	str	r4, [r2, #4]
 8005368:	e7cb      	b.n	8005302 <_free_r+0x22>
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200002c4 	.word	0x200002c4

08005370 <sbrk_aligned>:
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	4e0e      	ldr	r6, [pc, #56]	; (80053ac <sbrk_aligned+0x3c>)
 8005374:	460c      	mov	r4, r1
 8005376:	6831      	ldr	r1, [r6, #0]
 8005378:	4605      	mov	r5, r0
 800537a:	b911      	cbnz	r1, 8005382 <sbrk_aligned+0x12>
 800537c:	f000 f9e4 	bl	8005748 <_sbrk_r>
 8005380:	6030      	str	r0, [r6, #0]
 8005382:	4621      	mov	r1, r4
 8005384:	4628      	mov	r0, r5
 8005386:	f000 f9df 	bl	8005748 <_sbrk_r>
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	d00a      	beq.n	80053a4 <sbrk_aligned+0x34>
 800538e:	1cc4      	adds	r4, r0, #3
 8005390:	f024 0403 	bic.w	r4, r4, #3
 8005394:	42a0      	cmp	r0, r4
 8005396:	d007      	beq.n	80053a8 <sbrk_aligned+0x38>
 8005398:	1a21      	subs	r1, r4, r0
 800539a:	4628      	mov	r0, r5
 800539c:	f000 f9d4 	bl	8005748 <_sbrk_r>
 80053a0:	3001      	adds	r0, #1
 80053a2:	d101      	bne.n	80053a8 <sbrk_aligned+0x38>
 80053a4:	f04f 34ff 	mov.w	r4, #4294967295
 80053a8:	4620      	mov	r0, r4
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	200002c8 	.word	0x200002c8

080053b0 <_malloc_r>:
 80053b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b4:	1ccd      	adds	r5, r1, #3
 80053b6:	f025 0503 	bic.w	r5, r5, #3
 80053ba:	3508      	adds	r5, #8
 80053bc:	2d0c      	cmp	r5, #12
 80053be:	bf38      	it	cc
 80053c0:	250c      	movcc	r5, #12
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	4607      	mov	r7, r0
 80053c6:	db01      	blt.n	80053cc <_malloc_r+0x1c>
 80053c8:	42a9      	cmp	r1, r5
 80053ca:	d905      	bls.n	80053d8 <_malloc_r+0x28>
 80053cc:	230c      	movs	r3, #12
 80053ce:	2600      	movs	r6, #0
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4630      	mov	r0, r6
 80053d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d8:	4e2e      	ldr	r6, [pc, #184]	; (8005494 <_malloc_r+0xe4>)
 80053da:	f000 faa1 	bl	8005920 <__malloc_lock>
 80053de:	6833      	ldr	r3, [r6, #0]
 80053e0:	461c      	mov	r4, r3
 80053e2:	bb34      	cbnz	r4, 8005432 <_malloc_r+0x82>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4638      	mov	r0, r7
 80053e8:	f7ff ffc2 	bl	8005370 <sbrk_aligned>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	4604      	mov	r4, r0
 80053f0:	d14d      	bne.n	800548e <_malloc_r+0xde>
 80053f2:	6834      	ldr	r4, [r6, #0]
 80053f4:	4626      	mov	r6, r4
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	d140      	bne.n	800547c <_malloc_r+0xcc>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	4631      	mov	r1, r6
 80053fe:	4638      	mov	r0, r7
 8005400:	eb04 0803 	add.w	r8, r4, r3
 8005404:	f000 f9a0 	bl	8005748 <_sbrk_r>
 8005408:	4580      	cmp	r8, r0
 800540a:	d13a      	bne.n	8005482 <_malloc_r+0xd2>
 800540c:	6821      	ldr	r1, [r4, #0]
 800540e:	3503      	adds	r5, #3
 8005410:	1a6d      	subs	r5, r5, r1
 8005412:	f025 0503 	bic.w	r5, r5, #3
 8005416:	3508      	adds	r5, #8
 8005418:	2d0c      	cmp	r5, #12
 800541a:	bf38      	it	cc
 800541c:	250c      	movcc	r5, #12
 800541e:	4638      	mov	r0, r7
 8005420:	4629      	mov	r1, r5
 8005422:	f7ff ffa5 	bl	8005370 <sbrk_aligned>
 8005426:	3001      	adds	r0, #1
 8005428:	d02b      	beq.n	8005482 <_malloc_r+0xd2>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	442b      	add	r3, r5
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	e00e      	b.n	8005450 <_malloc_r+0xa0>
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	1b52      	subs	r2, r2, r5
 8005436:	d41e      	bmi.n	8005476 <_malloc_r+0xc6>
 8005438:	2a0b      	cmp	r2, #11
 800543a:	d916      	bls.n	800546a <_malloc_r+0xba>
 800543c:	1961      	adds	r1, r4, r5
 800543e:	42a3      	cmp	r3, r4
 8005440:	6025      	str	r5, [r4, #0]
 8005442:	bf18      	it	ne
 8005444:	6059      	strne	r1, [r3, #4]
 8005446:	6863      	ldr	r3, [r4, #4]
 8005448:	bf08      	it	eq
 800544a:	6031      	streq	r1, [r6, #0]
 800544c:	5162      	str	r2, [r4, r5]
 800544e:	604b      	str	r3, [r1, #4]
 8005450:	4638      	mov	r0, r7
 8005452:	f104 060b 	add.w	r6, r4, #11
 8005456:	f000 fa69 	bl	800592c <__malloc_unlock>
 800545a:	f026 0607 	bic.w	r6, r6, #7
 800545e:	1d23      	adds	r3, r4, #4
 8005460:	1af2      	subs	r2, r6, r3
 8005462:	d0b6      	beq.n	80053d2 <_malloc_r+0x22>
 8005464:	1b9b      	subs	r3, r3, r6
 8005466:	50a3      	str	r3, [r4, r2]
 8005468:	e7b3      	b.n	80053d2 <_malloc_r+0x22>
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	42a3      	cmp	r3, r4
 800546e:	bf0c      	ite	eq
 8005470:	6032      	streq	r2, [r6, #0]
 8005472:	605a      	strne	r2, [r3, #4]
 8005474:	e7ec      	b.n	8005450 <_malloc_r+0xa0>
 8005476:	4623      	mov	r3, r4
 8005478:	6864      	ldr	r4, [r4, #4]
 800547a:	e7b2      	b.n	80053e2 <_malloc_r+0x32>
 800547c:	4634      	mov	r4, r6
 800547e:	6876      	ldr	r6, [r6, #4]
 8005480:	e7b9      	b.n	80053f6 <_malloc_r+0x46>
 8005482:	230c      	movs	r3, #12
 8005484:	4638      	mov	r0, r7
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	f000 fa50 	bl	800592c <__malloc_unlock>
 800548c:	e7a1      	b.n	80053d2 <_malloc_r+0x22>
 800548e:	6025      	str	r5, [r4, #0]
 8005490:	e7de      	b.n	8005450 <_malloc_r+0xa0>
 8005492:	bf00      	nop
 8005494:	200002c4 	.word	0x200002c4

08005498 <__sfputc_r>:
 8005498:	6893      	ldr	r3, [r2, #8]
 800549a:	b410      	push	{r4}
 800549c:	3b01      	subs	r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	6093      	str	r3, [r2, #8]
 80054a2:	da07      	bge.n	80054b4 <__sfputc_r+0x1c>
 80054a4:	6994      	ldr	r4, [r2, #24]
 80054a6:	42a3      	cmp	r3, r4
 80054a8:	db01      	blt.n	80054ae <__sfputc_r+0x16>
 80054aa:	290a      	cmp	r1, #10
 80054ac:	d102      	bne.n	80054b4 <__sfputc_r+0x1c>
 80054ae:	bc10      	pop	{r4}
 80054b0:	f7fe ba00 	b.w	80038b4 <__swbuf_r>
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	1c58      	adds	r0, r3, #1
 80054b8:	6010      	str	r0, [r2, #0]
 80054ba:	7019      	strb	r1, [r3, #0]
 80054bc:	4608      	mov	r0, r1
 80054be:	bc10      	pop	{r4}
 80054c0:	4770      	bx	lr

080054c2 <__sfputs_r>:
 80054c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	4614      	mov	r4, r2
 80054ca:	18d5      	adds	r5, r2, r3
 80054cc:	42ac      	cmp	r4, r5
 80054ce:	d101      	bne.n	80054d4 <__sfputs_r+0x12>
 80054d0:	2000      	movs	r0, #0
 80054d2:	e007      	b.n	80054e4 <__sfputs_r+0x22>
 80054d4:	463a      	mov	r2, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054dc:	f7ff ffdc 	bl	8005498 <__sfputc_r>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d1f3      	bne.n	80054cc <__sfputs_r+0xa>
 80054e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054e8 <_vfiprintf_r>:
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	460d      	mov	r5, r1
 80054ee:	4614      	mov	r4, r2
 80054f0:	4698      	mov	r8, r3
 80054f2:	4606      	mov	r6, r0
 80054f4:	b09d      	sub	sp, #116	; 0x74
 80054f6:	b118      	cbz	r0, 8005500 <_vfiprintf_r+0x18>
 80054f8:	6983      	ldr	r3, [r0, #24]
 80054fa:	b90b      	cbnz	r3, 8005500 <_vfiprintf_r+0x18>
 80054fc:	f7ff fa2c 	bl	8004958 <__sinit>
 8005500:	4b89      	ldr	r3, [pc, #548]	; (8005728 <_vfiprintf_r+0x240>)
 8005502:	429d      	cmp	r5, r3
 8005504:	d11b      	bne.n	800553e <_vfiprintf_r+0x56>
 8005506:	6875      	ldr	r5, [r6, #4]
 8005508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800550a:	07d9      	lsls	r1, r3, #31
 800550c:	d405      	bmi.n	800551a <_vfiprintf_r+0x32>
 800550e:	89ab      	ldrh	r3, [r5, #12]
 8005510:	059a      	lsls	r2, r3, #22
 8005512:	d402      	bmi.n	800551a <_vfiprintf_r+0x32>
 8005514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005516:	f7ff fac2 	bl	8004a9e <__retarget_lock_acquire_recursive>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	071b      	lsls	r3, r3, #28
 800551e:	d501      	bpl.n	8005524 <_vfiprintf_r+0x3c>
 8005520:	692b      	ldr	r3, [r5, #16]
 8005522:	b9eb      	cbnz	r3, 8005560 <_vfiprintf_r+0x78>
 8005524:	4629      	mov	r1, r5
 8005526:	4630      	mov	r0, r6
 8005528:	f7fe fa16 	bl	8003958 <__swsetup_r>
 800552c:	b1c0      	cbz	r0, 8005560 <_vfiprintf_r+0x78>
 800552e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005530:	07dc      	lsls	r4, r3, #31
 8005532:	d50e      	bpl.n	8005552 <_vfiprintf_r+0x6a>
 8005534:	f04f 30ff 	mov.w	r0, #4294967295
 8005538:	b01d      	add	sp, #116	; 0x74
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	4b7b      	ldr	r3, [pc, #492]	; (800572c <_vfiprintf_r+0x244>)
 8005540:	429d      	cmp	r5, r3
 8005542:	d101      	bne.n	8005548 <_vfiprintf_r+0x60>
 8005544:	68b5      	ldr	r5, [r6, #8]
 8005546:	e7df      	b.n	8005508 <_vfiprintf_r+0x20>
 8005548:	4b79      	ldr	r3, [pc, #484]	; (8005730 <_vfiprintf_r+0x248>)
 800554a:	429d      	cmp	r5, r3
 800554c:	bf08      	it	eq
 800554e:	68f5      	ldreq	r5, [r6, #12]
 8005550:	e7da      	b.n	8005508 <_vfiprintf_r+0x20>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	0598      	lsls	r0, r3, #22
 8005556:	d4ed      	bmi.n	8005534 <_vfiprintf_r+0x4c>
 8005558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800555a:	f7ff faa1 	bl	8004aa0 <__retarget_lock_release_recursive>
 800555e:	e7e9      	b.n	8005534 <_vfiprintf_r+0x4c>
 8005560:	2300      	movs	r3, #0
 8005562:	9309      	str	r3, [sp, #36]	; 0x24
 8005564:	2320      	movs	r3, #32
 8005566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800556a:	2330      	movs	r3, #48	; 0x30
 800556c:	f04f 0901 	mov.w	r9, #1
 8005570:	f8cd 800c 	str.w	r8, [sp, #12]
 8005574:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005734 <_vfiprintf_r+0x24c>
 8005578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800557c:	4623      	mov	r3, r4
 800557e:	469a      	mov	sl, r3
 8005580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005584:	b10a      	cbz	r2, 800558a <_vfiprintf_r+0xa2>
 8005586:	2a25      	cmp	r2, #37	; 0x25
 8005588:	d1f9      	bne.n	800557e <_vfiprintf_r+0x96>
 800558a:	ebba 0b04 	subs.w	fp, sl, r4
 800558e:	d00b      	beq.n	80055a8 <_vfiprintf_r+0xc0>
 8005590:	465b      	mov	r3, fp
 8005592:	4622      	mov	r2, r4
 8005594:	4629      	mov	r1, r5
 8005596:	4630      	mov	r0, r6
 8005598:	f7ff ff93 	bl	80054c2 <__sfputs_r>
 800559c:	3001      	adds	r0, #1
 800559e:	f000 80aa 	beq.w	80056f6 <_vfiprintf_r+0x20e>
 80055a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a4:	445a      	add	r2, fp
 80055a6:	9209      	str	r2, [sp, #36]	; 0x24
 80055a8:	f89a 3000 	ldrb.w	r3, [sl]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80a2 	beq.w	80056f6 <_vfiprintf_r+0x20e>
 80055b2:	2300      	movs	r3, #0
 80055b4:	f04f 32ff 	mov.w	r2, #4294967295
 80055b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055bc:	f10a 0a01 	add.w	sl, sl, #1
 80055c0:	9304      	str	r3, [sp, #16]
 80055c2:	9307      	str	r3, [sp, #28]
 80055c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c8:	931a      	str	r3, [sp, #104]	; 0x68
 80055ca:	4654      	mov	r4, sl
 80055cc:	2205      	movs	r2, #5
 80055ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d2:	4858      	ldr	r0, [pc, #352]	; (8005734 <_vfiprintf_r+0x24c>)
 80055d4:	f7ff fad2 	bl	8004b7c <memchr>
 80055d8:	9a04      	ldr	r2, [sp, #16]
 80055da:	b9d8      	cbnz	r0, 8005614 <_vfiprintf_r+0x12c>
 80055dc:	06d1      	lsls	r1, r2, #27
 80055de:	bf44      	itt	mi
 80055e0:	2320      	movmi	r3, #32
 80055e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e6:	0713      	lsls	r3, r2, #28
 80055e8:	bf44      	itt	mi
 80055ea:	232b      	movmi	r3, #43	; 0x2b
 80055ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f0:	f89a 3000 	ldrb.w	r3, [sl]
 80055f4:	2b2a      	cmp	r3, #42	; 0x2a
 80055f6:	d015      	beq.n	8005624 <_vfiprintf_r+0x13c>
 80055f8:	4654      	mov	r4, sl
 80055fa:	2000      	movs	r0, #0
 80055fc:	f04f 0c0a 	mov.w	ip, #10
 8005600:	9a07      	ldr	r2, [sp, #28]
 8005602:	4621      	mov	r1, r4
 8005604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005608:	3b30      	subs	r3, #48	; 0x30
 800560a:	2b09      	cmp	r3, #9
 800560c:	d94e      	bls.n	80056ac <_vfiprintf_r+0x1c4>
 800560e:	b1b0      	cbz	r0, 800563e <_vfiprintf_r+0x156>
 8005610:	9207      	str	r2, [sp, #28]
 8005612:	e014      	b.n	800563e <_vfiprintf_r+0x156>
 8005614:	eba0 0308 	sub.w	r3, r0, r8
 8005618:	fa09 f303 	lsl.w	r3, r9, r3
 800561c:	4313      	orrs	r3, r2
 800561e:	46a2      	mov	sl, r4
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	e7d2      	b.n	80055ca <_vfiprintf_r+0xe2>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	1d19      	adds	r1, r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	9103      	str	r1, [sp, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	bfbb      	ittet	lt
 8005630:	425b      	neglt	r3, r3
 8005632:	f042 0202 	orrlt.w	r2, r2, #2
 8005636:	9307      	strge	r3, [sp, #28]
 8005638:	9307      	strlt	r3, [sp, #28]
 800563a:	bfb8      	it	lt
 800563c:	9204      	strlt	r2, [sp, #16]
 800563e:	7823      	ldrb	r3, [r4, #0]
 8005640:	2b2e      	cmp	r3, #46	; 0x2e
 8005642:	d10c      	bne.n	800565e <_vfiprintf_r+0x176>
 8005644:	7863      	ldrb	r3, [r4, #1]
 8005646:	2b2a      	cmp	r3, #42	; 0x2a
 8005648:	d135      	bne.n	80056b6 <_vfiprintf_r+0x1ce>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	3402      	adds	r4, #2
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	bfb8      	it	lt
 8005658:	f04f 33ff 	movlt.w	r3, #4294967295
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005738 <_vfiprintf_r+0x250>
 8005662:	2203      	movs	r2, #3
 8005664:	4650      	mov	r0, sl
 8005666:	7821      	ldrb	r1, [r4, #0]
 8005668:	f7ff fa88 	bl	8004b7c <memchr>
 800566c:	b140      	cbz	r0, 8005680 <_vfiprintf_r+0x198>
 800566e:	2340      	movs	r3, #64	; 0x40
 8005670:	eba0 000a 	sub.w	r0, r0, sl
 8005674:	fa03 f000 	lsl.w	r0, r3, r0
 8005678:	9b04      	ldr	r3, [sp, #16]
 800567a:	3401      	adds	r4, #1
 800567c:	4303      	orrs	r3, r0
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	2206      	movs	r2, #6
 8005686:	482d      	ldr	r0, [pc, #180]	; (800573c <_vfiprintf_r+0x254>)
 8005688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800568c:	f7ff fa76 	bl	8004b7c <memchr>
 8005690:	2800      	cmp	r0, #0
 8005692:	d03f      	beq.n	8005714 <_vfiprintf_r+0x22c>
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <_vfiprintf_r+0x258>)
 8005696:	bb1b      	cbnz	r3, 80056e0 <_vfiprintf_r+0x1f8>
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	3307      	adds	r3, #7
 800569c:	f023 0307 	bic.w	r3, r3, #7
 80056a0:	3308      	adds	r3, #8
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a6:	443b      	add	r3, r7
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	e767      	b.n	800557c <_vfiprintf_r+0x94>
 80056ac:	460c      	mov	r4, r1
 80056ae:	2001      	movs	r0, #1
 80056b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b4:	e7a5      	b.n	8005602 <_vfiprintf_r+0x11a>
 80056b6:	2300      	movs	r3, #0
 80056b8:	f04f 0c0a 	mov.w	ip, #10
 80056bc:	4619      	mov	r1, r3
 80056be:	3401      	adds	r4, #1
 80056c0:	9305      	str	r3, [sp, #20]
 80056c2:	4620      	mov	r0, r4
 80056c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c8:	3a30      	subs	r2, #48	; 0x30
 80056ca:	2a09      	cmp	r2, #9
 80056cc:	d903      	bls.n	80056d6 <_vfiprintf_r+0x1ee>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0c5      	beq.n	800565e <_vfiprintf_r+0x176>
 80056d2:	9105      	str	r1, [sp, #20]
 80056d4:	e7c3      	b.n	800565e <_vfiprintf_r+0x176>
 80056d6:	4604      	mov	r4, r0
 80056d8:	2301      	movs	r3, #1
 80056da:	fb0c 2101 	mla	r1, ip, r1, r2
 80056de:	e7f0      	b.n	80056c2 <_vfiprintf_r+0x1da>
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	462a      	mov	r2, r5
 80056e6:	4630      	mov	r0, r6
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <_vfiprintf_r+0x25c>)
 80056ea:	a904      	add	r1, sp, #16
 80056ec:	f7fd fc92 	bl	8003014 <_printf_float>
 80056f0:	4607      	mov	r7, r0
 80056f2:	1c78      	adds	r0, r7, #1
 80056f4:	d1d6      	bne.n	80056a4 <_vfiprintf_r+0x1bc>
 80056f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f8:	07d9      	lsls	r1, r3, #31
 80056fa:	d405      	bmi.n	8005708 <_vfiprintf_r+0x220>
 80056fc:	89ab      	ldrh	r3, [r5, #12]
 80056fe:	059a      	lsls	r2, r3, #22
 8005700:	d402      	bmi.n	8005708 <_vfiprintf_r+0x220>
 8005702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005704:	f7ff f9cc 	bl	8004aa0 <__retarget_lock_release_recursive>
 8005708:	89ab      	ldrh	r3, [r5, #12]
 800570a:	065b      	lsls	r3, r3, #25
 800570c:	f53f af12 	bmi.w	8005534 <_vfiprintf_r+0x4c>
 8005710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005712:	e711      	b.n	8005538 <_vfiprintf_r+0x50>
 8005714:	ab03      	add	r3, sp, #12
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	462a      	mov	r2, r5
 800571a:	4630      	mov	r0, r6
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <_vfiprintf_r+0x25c>)
 800571e:	a904      	add	r1, sp, #16
 8005720:	f7fd ff14 	bl	800354c <_printf_i>
 8005724:	e7e4      	b.n	80056f0 <_vfiprintf_r+0x208>
 8005726:	bf00      	nop
 8005728:	08005bf8 	.word	0x08005bf8
 800572c:	08005c18 	.word	0x08005c18
 8005730:	08005bd8 	.word	0x08005bd8
 8005734:	08005d94 	.word	0x08005d94
 8005738:	08005d9a 	.word	0x08005d9a
 800573c:	08005d9e 	.word	0x08005d9e
 8005740:	08003015 	.word	0x08003015
 8005744:	080054c3 	.word	0x080054c3

08005748 <_sbrk_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	2300      	movs	r3, #0
 800574c:	4d05      	ldr	r5, [pc, #20]	; (8005764 <_sbrk_r+0x1c>)
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f000 f992 	bl	8005a7c <_sbrk>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_sbrk_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_sbrk_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	200002cc 	.word	0x200002cc

08005768 <__sread>:
 8005768:	b510      	push	{r4, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005770:	f000 f8e2 	bl	8005938 <_read_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	bfab      	itete	ge
 8005778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800577a:	89a3      	ldrhlt	r3, [r4, #12]
 800577c:	181b      	addge	r3, r3, r0
 800577e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005782:	bfac      	ite	ge
 8005784:	6563      	strge	r3, [r4, #84]	; 0x54
 8005786:	81a3      	strhlt	r3, [r4, #12]
 8005788:	bd10      	pop	{r4, pc}

0800578a <__swrite>:
 800578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578e:	461f      	mov	r7, r3
 8005790:	898b      	ldrh	r3, [r1, #12]
 8005792:	4605      	mov	r5, r0
 8005794:	05db      	lsls	r3, r3, #23
 8005796:	460c      	mov	r4, r1
 8005798:	4616      	mov	r6, r2
 800579a:	d505      	bpl.n	80057a8 <__swrite+0x1e>
 800579c:	2302      	movs	r3, #2
 800579e:	2200      	movs	r2, #0
 80057a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a4:	f000 f898 	bl	80058d8 <_lseek_r>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	4632      	mov	r2, r6
 80057ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	4628      	mov	r0, r5
 80057b4:	463b      	mov	r3, r7
 80057b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	f000 b817 	b.w	80057f0 <_write_r>

080057c2 <__sseek>:
 80057c2:	b510      	push	{r4, lr}
 80057c4:	460c      	mov	r4, r1
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 f885 	bl	80058d8 <_lseek_r>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	bf15      	itete	ne
 80057d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057de:	81a3      	strheq	r3, [r4, #12]
 80057e0:	bf18      	it	ne
 80057e2:	81a3      	strhne	r3, [r4, #12]
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <__sclose>:
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 b831 	b.w	8005850 <_close_r>
	...

080057f0 <_write_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	2200      	movs	r2, #0
 80057fa:	4d05      	ldr	r5, [pc, #20]	; (8005810 <_write_r+0x20>)
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f7fb f9ac 	bl	8000b5c <_write>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_write_r+0x1e>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_write_r+0x1e>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	200002cc 	.word	0x200002cc

08005814 <__assert_func>:
 8005814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005816:	4614      	mov	r4, r2
 8005818:	461a      	mov	r2, r3
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <__assert_func+0x2c>)
 800581c:	4605      	mov	r5, r0
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68d8      	ldr	r0, [r3, #12]
 8005822:	b14c      	cbz	r4, 8005838 <__assert_func+0x24>
 8005824:	4b07      	ldr	r3, [pc, #28]	; (8005844 <__assert_func+0x30>)
 8005826:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800582a:	9100      	str	r1, [sp, #0]
 800582c:	462b      	mov	r3, r5
 800582e:	4906      	ldr	r1, [pc, #24]	; (8005848 <__assert_func+0x34>)
 8005830:	f000 f81e 	bl	8005870 <fiprintf>
 8005834:	f000 f89f 	bl	8005976 <abort>
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <__assert_func+0x38>)
 800583a:	461c      	mov	r4, r3
 800583c:	e7f3      	b.n	8005826 <__assert_func+0x12>
 800583e:	bf00      	nop
 8005840:	2000000c 	.word	0x2000000c
 8005844:	08005da5 	.word	0x08005da5
 8005848:	08005db2 	.word	0x08005db2
 800584c:	08005de0 	.word	0x08005de0

08005850 <_close_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	2300      	movs	r3, #0
 8005854:	4d05      	ldr	r5, [pc, #20]	; (800586c <_close_r+0x1c>)
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	f000 f8d6 	bl	8005a0c <_close>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_close_r+0x1a>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b103      	cbz	r3, 800586a <_close_r+0x1a>
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	200002cc 	.word	0x200002cc

08005870 <fiprintf>:
 8005870:	b40e      	push	{r1, r2, r3}
 8005872:	b503      	push	{r0, r1, lr}
 8005874:	4601      	mov	r1, r0
 8005876:	ab03      	add	r3, sp, #12
 8005878:	4805      	ldr	r0, [pc, #20]	; (8005890 <fiprintf+0x20>)
 800587a:	f853 2b04 	ldr.w	r2, [r3], #4
 800587e:	6800      	ldr	r0, [r0, #0]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f7ff fe31 	bl	80054e8 <_vfiprintf_r>
 8005886:	b002      	add	sp, #8
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b003      	add	sp, #12
 800588e:	4770      	bx	lr
 8005890:	2000000c 	.word	0x2000000c

08005894 <_fstat_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	2300      	movs	r3, #0
 8005898:	4d06      	ldr	r5, [pc, #24]	; (80058b4 <_fstat_r+0x20>)
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	f000 f8bb 	bl	8005a1c <_fstat>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d102      	bne.n	80058b0 <_fstat_r+0x1c>
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	b103      	cbz	r3, 80058b0 <_fstat_r+0x1c>
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	200002cc 	.word	0x200002cc

080058b8 <_isatty_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	2300      	movs	r3, #0
 80058bc:	4d05      	ldr	r5, [pc, #20]	; (80058d4 <_isatty_r+0x1c>)
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f000 f8ba 	bl	8005a3c <_isatty>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_isatty_r+0x1a>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_isatty_r+0x1a>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200002cc 	.word	0x200002cc

080058d8 <_lseek_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	4611      	mov	r1, r2
 80058e0:	2200      	movs	r2, #0
 80058e2:	4d05      	ldr	r5, [pc, #20]	; (80058f8 <_lseek_r+0x20>)
 80058e4:	602a      	str	r2, [r5, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 f8b8 	bl	8005a5c <_lseek>
 80058ec:	1c43      	adds	r3, r0, #1
 80058ee:	d102      	bne.n	80058f6 <_lseek_r+0x1e>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b103      	cbz	r3, 80058f6 <_lseek_r+0x1e>
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	bd38      	pop	{r3, r4, r5, pc}
 80058f8:	200002cc 	.word	0x200002cc

080058fc <__ascii_mbtowc>:
 80058fc:	b082      	sub	sp, #8
 80058fe:	b901      	cbnz	r1, 8005902 <__ascii_mbtowc+0x6>
 8005900:	a901      	add	r1, sp, #4
 8005902:	b142      	cbz	r2, 8005916 <__ascii_mbtowc+0x1a>
 8005904:	b14b      	cbz	r3, 800591a <__ascii_mbtowc+0x1e>
 8005906:	7813      	ldrb	r3, [r2, #0]
 8005908:	600b      	str	r3, [r1, #0]
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	1e10      	subs	r0, r2, #0
 800590e:	bf18      	it	ne
 8005910:	2001      	movne	r0, #1
 8005912:	b002      	add	sp, #8
 8005914:	4770      	bx	lr
 8005916:	4610      	mov	r0, r2
 8005918:	e7fb      	b.n	8005912 <__ascii_mbtowc+0x16>
 800591a:	f06f 0001 	mvn.w	r0, #1
 800591e:	e7f8      	b.n	8005912 <__ascii_mbtowc+0x16>

08005920 <__malloc_lock>:
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <__malloc_lock+0x8>)
 8005922:	f7ff b8bc 	b.w	8004a9e <__retarget_lock_acquire_recursive>
 8005926:	bf00      	nop
 8005928:	200002c0 	.word	0x200002c0

0800592c <__malloc_unlock>:
 800592c:	4801      	ldr	r0, [pc, #4]	; (8005934 <__malloc_unlock+0x8>)
 800592e:	f7ff b8b7 	b.w	8004aa0 <__retarget_lock_release_recursive>
 8005932:	bf00      	nop
 8005934:	200002c0 	.word	0x200002c0

08005938 <_read_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4604      	mov	r4, r0
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	2200      	movs	r2, #0
 8005942:	4d05      	ldr	r5, [pc, #20]	; (8005958 <_read_r+0x20>)
 8005944:	602a      	str	r2, [r5, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f000 f890 	bl	8005a6c <_read>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_read_r+0x1e>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_read_r+0x1e>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	200002cc 	.word	0x200002cc

0800595c <__ascii_wctomb>:
 800595c:	4603      	mov	r3, r0
 800595e:	4608      	mov	r0, r1
 8005960:	b141      	cbz	r1, 8005974 <__ascii_wctomb+0x18>
 8005962:	2aff      	cmp	r2, #255	; 0xff
 8005964:	d904      	bls.n	8005970 <__ascii_wctomb+0x14>
 8005966:	228a      	movs	r2, #138	; 0x8a
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	4770      	bx	lr
 8005970:	2001      	movs	r0, #1
 8005972:	700a      	strb	r2, [r1, #0]
 8005974:	4770      	bx	lr

08005976 <abort>:
 8005976:	2006      	movs	r0, #6
 8005978:	b508      	push	{r3, lr}
 800597a:	f000 f82b 	bl	80059d4 <raise>
 800597e:	2001      	movs	r0, #1
 8005980:	f000 f88a 	bl	8005a98 <_exit>

08005984 <_raise_r>:
 8005984:	291f      	cmp	r1, #31
 8005986:	b538      	push	{r3, r4, r5, lr}
 8005988:	4604      	mov	r4, r0
 800598a:	460d      	mov	r5, r1
 800598c:	d904      	bls.n	8005998 <_raise_r+0x14>
 800598e:	2316      	movs	r3, #22
 8005990:	6003      	str	r3, [r0, #0]
 8005992:	f04f 30ff 	mov.w	r0, #4294967295
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800599a:	b112      	cbz	r2, 80059a2 <_raise_r+0x1e>
 800599c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059a0:	b94b      	cbnz	r3, 80059b6 <_raise_r+0x32>
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 f830 	bl	8005a08 <_getpid_r>
 80059a8:	462a      	mov	r2, r5
 80059aa:	4601      	mov	r1, r0
 80059ac:	4620      	mov	r0, r4
 80059ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b2:	f000 b817 	b.w	80059e4 <_kill_r>
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d00a      	beq.n	80059d0 <_raise_r+0x4c>
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	d103      	bne.n	80059c6 <_raise_r+0x42>
 80059be:	2316      	movs	r3, #22
 80059c0:	6003      	str	r3, [r0, #0]
 80059c2:	2001      	movs	r0, #1
 80059c4:	e7e7      	b.n	8005996 <_raise_r+0x12>
 80059c6:	2400      	movs	r4, #0
 80059c8:	4628      	mov	r0, r5
 80059ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80059ce:	4798      	blx	r3
 80059d0:	2000      	movs	r0, #0
 80059d2:	e7e0      	b.n	8005996 <_raise_r+0x12>

080059d4 <raise>:
 80059d4:	4b02      	ldr	r3, [pc, #8]	; (80059e0 <raise+0xc>)
 80059d6:	4601      	mov	r1, r0
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f7ff bfd3 	b.w	8005984 <_raise_r>
 80059de:	bf00      	nop
 80059e0:	2000000c 	.word	0x2000000c

080059e4 <_kill_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	2300      	movs	r3, #0
 80059e8:	4d06      	ldr	r5, [pc, #24]	; (8005a04 <_kill_r+0x20>)
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	f000 f82b 	bl	8005a4c <_kill>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	d102      	bne.n	8005a00 <_kill_r+0x1c>
 80059fa:	682b      	ldr	r3, [r5, #0]
 80059fc:	b103      	cbz	r3, 8005a00 <_kill_r+0x1c>
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	bd38      	pop	{r3, r4, r5, pc}
 8005a02:	bf00      	nop
 8005a04:	200002cc 	.word	0x200002cc

08005a08 <_getpid_r>:
 8005a08:	f000 b810 	b.w	8005a2c <_getpid>

08005a0c <_close>:
 8005a0c:	2258      	movs	r2, #88	; 0x58
 8005a0e:	4b02      	ldr	r3, [pc, #8]	; (8005a18 <_close+0xc>)
 8005a10:	f04f 30ff 	mov.w	r0, #4294967295
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	4770      	bx	lr
 8005a18:	200002cc 	.word	0x200002cc

08005a1c <_fstat>:
 8005a1c:	2258      	movs	r2, #88	; 0x58
 8005a1e:	4b02      	ldr	r3, [pc, #8]	; (8005a28 <_fstat+0xc>)
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	4770      	bx	lr
 8005a28:	200002cc 	.word	0x200002cc

08005a2c <_getpid>:
 8005a2c:	2258      	movs	r2, #88	; 0x58
 8005a2e:	4b02      	ldr	r3, [pc, #8]	; (8005a38 <_getpid+0xc>)
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4770      	bx	lr
 8005a38:	200002cc 	.word	0x200002cc

08005a3c <_isatty>:
 8005a3c:	2258      	movs	r2, #88	; 0x58
 8005a3e:	4b02      	ldr	r3, [pc, #8]	; (8005a48 <_isatty+0xc>)
 8005a40:	2000      	movs	r0, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	200002cc 	.word	0x200002cc

08005a4c <_kill>:
 8005a4c:	2258      	movs	r2, #88	; 0x58
 8005a4e:	4b02      	ldr	r3, [pc, #8]	; (8005a58 <_kill+0xc>)
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	4770      	bx	lr
 8005a58:	200002cc 	.word	0x200002cc

08005a5c <_lseek>:
 8005a5c:	2258      	movs	r2, #88	; 0x58
 8005a5e:	4b02      	ldr	r3, [pc, #8]	; (8005a68 <_lseek+0xc>)
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	4770      	bx	lr
 8005a68:	200002cc 	.word	0x200002cc

08005a6c <_read>:
 8005a6c:	2258      	movs	r2, #88	; 0x58
 8005a6e:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <_read+0xc>)
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	4770      	bx	lr
 8005a78:	200002cc 	.word	0x200002cc

08005a7c <_sbrk>:
 8005a7c:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <_sbrk+0x14>)
 8005a7e:	4603      	mov	r3, r0
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	b909      	cbnz	r1, 8005a88 <_sbrk+0xc>
 8005a84:	4903      	ldr	r1, [pc, #12]	; (8005a94 <_sbrk+0x18>)
 8005a86:	6011      	str	r1, [r2, #0]
 8005a88:	6810      	ldr	r0, [r2, #0]
 8005a8a:	4403      	add	r3, r0
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4770      	bx	lr
 8005a90:	200002d0 	.word	0x200002d0
 8005a94:	200002d8 	.word	0x200002d8

08005a98 <_exit>:
 8005a98:	e7fe      	b.n	8005a98 <_exit>
	...

08005a9c <_init>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr

08005aa8 <_fini>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr
