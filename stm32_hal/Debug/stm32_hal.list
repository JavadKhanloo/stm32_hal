
stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004ad0  08004ad0  00014ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004efc  08004efc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004efc  08004efc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004efc  08004efc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200001dc  080050e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080050e0  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b37  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000128d  00000000  00000000  00024d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00025fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  00026598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149e6  00000000  00000000  00026ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c47  00000000  00000000  0003b4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007267a  00000000  00000000  00043105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b577f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b8  00000000  00000000  000b57d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000b7f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000b803c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ab4 	.word	0x08004ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004ab4 	.word	0x08004ab4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:

//-----------------------------------------------------------------------//
// main function                                                         //
//-----------------------------------------------------------------------//
int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a8e:	f000 f85d 	bl	8000b4c <HAL_Init>
  // clock
  rcc_system_clock_config();
 8000a92:	f001 f929 	bl	8001ce8 <rcc_system_clock_config>

  // uart
  uart_UART1_GPIO_config();
 8000a96:	f001 f96b 	bl	8001d70 <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000a9a:	f001 f99b 	bl	8001dd4 <uart_UART1_config>

  HAL_Delay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f000 f8bb 	bl	8000c1c <HAL_Delay>
  printf("program is starting...\r\n");
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <main+0x40>)
 8000aa8:	f001 ff08 	bl	80028bc <puts>
  int counter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]

  while (1)
  {
    printf("counter : %d\r\n", counter++);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <main+0x44>)
 8000aba:	f001 fe79 	bl	80027b0 <iprintf>
    HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f000 f8ab 	bl	8000c1c <HAL_Delay>
    printf("counter : %d\r\n", counter++);
 8000ac6:	e7f3      	b.n	8000ab0 <main+0x28>
 8000ac8:	08004ad0 	.word	0x08004ad0
 8000acc:	08004ae8 	.word	0x08004ae8

08000ad0 <__io_putchar>:
//-----------------------------------------------------------------------//
int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    uint8_t c[1];
    c[0] = ch & 0x00FF;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <__io_putchar+0x28>)
 8000ae8:	f000 ff94 	bl	8001a14 <HAL_UART_Transmit>
    return ch;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001fc 	.word	0x200001fc

08000afc <_write>:

int _write(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e009      	b.n	8000b22 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffda 	bl	8000ad0 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbf1      	blt.n	8000b0e <_write+0x12>
    }
    return len;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SysTick_Handler>:

//-----------------------------------------------------------------------//
// function definition                                                   //
//-----------------------------------------------------------------------//
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b38:	f000 f854 	bl	8000be4 <HAL_IncTick>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x28>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f931 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f80e 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f000 f806 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x54>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x58>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f935 	bl	8000e12 <HAL_SYSTICK_Config>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00e      	b.n	8000bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d80a      	bhi.n	8000bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f000 f90b 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <HAL_InitTick+0x5c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000008 	.word	0x20000008
 8000c04:	200001f8 	.word	0x200001f8

08000c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	200001f8 	.word	0x200001f8

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff fff0 	bl	8000c08 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffe0 	bl	8000c08 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff90 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff49 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff5e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff90 	bl	8000d1c <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5f 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffb0 	bl	8000d80 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b08b      	sub	sp, #44	; 0x2c
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3e:	e169      	b.n	8001114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e40:	2201      	movs	r2, #1
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8158 	bne.w	800110e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a9a      	ldr	r2, [pc, #616]	; (80010cc <HAL_GPIO_Init+0x2a0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d05e      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e68:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_GPIO_Init+0x2a0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d875      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e6e:	4a98      	ldr	r2, [pc, #608]	; (80010d0 <HAL_GPIO_Init+0x2a4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d058      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e74:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_GPIO_Init+0x2a4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d86f      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e7a:	4a96      	ldr	r2, [pc, #600]	; (80010d4 <HAL_GPIO_Init+0x2a8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d052      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e80:	4a94      	ldr	r2, [pc, #592]	; (80010d4 <HAL_GPIO_Init+0x2a8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d869      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e86:	4a94      	ldr	r2, [pc, #592]	; (80010d8 <HAL_GPIO_Init+0x2ac>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d04c      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e8c:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <HAL_GPIO_Init+0x2ac>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d863      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e92:	4a92      	ldr	r2, [pc, #584]	; (80010dc <HAL_GPIO_Init+0x2b0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d046      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
 8000e98:	4a90      	ldr	r2, [pc, #576]	; (80010dc <HAL_GPIO_Init+0x2b0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d85d      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d82a      	bhi.n	8000ef8 <HAL_GPIO_Init+0xcc>
 8000ea2:	2b12      	cmp	r3, #18
 8000ea4:	d859      	bhi.n	8000f5a <HAL_GPIO_Init+0x12e>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <HAL_GPIO_Init+0x80>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000f27 	.word	0x08000f27
 8000eb0:	08000f01 	.word	0x08000f01
 8000eb4:	08000f13 	.word	0x08000f13
 8000eb8:	08000f55 	.word	0x08000f55
 8000ebc:	08000f5b 	.word	0x08000f5b
 8000ec0:	08000f5b 	.word	0x08000f5b
 8000ec4:	08000f5b 	.word	0x08000f5b
 8000ec8:	08000f5b 	.word	0x08000f5b
 8000ecc:	08000f5b 	.word	0x08000f5b
 8000ed0:	08000f5b 	.word	0x08000f5b
 8000ed4:	08000f5b 	.word	0x08000f5b
 8000ed8:	08000f5b 	.word	0x08000f5b
 8000edc:	08000f5b 	.word	0x08000f5b
 8000ee0:	08000f5b 	.word	0x08000f5b
 8000ee4:	08000f5b 	.word	0x08000f5b
 8000ee8:	08000f5b 	.word	0x08000f5b
 8000eec:	08000f5b 	.word	0x08000f5b
 8000ef0:	08000f09 	.word	0x08000f09
 8000ef4:	08000f1d 	.word	0x08000f1d
 8000ef8:	4a79      	ldr	r2, [pc, #484]	; (80010e0 <HAL_GPIO_Init+0x2b4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efe:	e02c      	b.n	8000f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e029      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e024      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	3308      	adds	r3, #8
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e01f      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	330c      	adds	r3, #12
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e01a      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e013      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d105      	bne.n	8000f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	611a      	str	r2, [r3, #16]
          break;
 8000f46:	e009      	b.n	8000f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	615a      	str	r2, [r3, #20]
          break;
 8000f52:	e003      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x130>
          break;
 8000f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d801      	bhi.n	8000f66 <HAL_GPIO_Init+0x13a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	e001      	b.n	8000f6a <HAL_GPIO_Init+0x13e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2bff      	cmp	r3, #255	; 0xff
 8000f70:	d802      	bhi.n	8000f78 <HAL_GPIO_Init+0x14c>
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x152>
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	210f      	movs	r1, #15
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	6a39      	ldr	r1, [r7, #32]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80b1 	beq.w	800110e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x2b8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_GPIO_Init+0x2b8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <HAL_GPIO_Init+0x2b8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc4:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_GPIO_Init+0x2bc>)
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a40      	ldr	r2, [pc, #256]	; (80010ec <HAL_GPIO_Init+0x2c0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d013      	beq.n	8001018 <HAL_GPIO_Init+0x1ec>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3f      	ldr	r2, [pc, #252]	; (80010f0 <HAL_GPIO_Init+0x2c4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d00d      	beq.n	8001014 <HAL_GPIO_Init+0x1e8>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3e      	ldr	r2, [pc, #248]	; (80010f4 <HAL_GPIO_Init+0x2c8>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d007      	beq.n	8001010 <HAL_GPIO_Init+0x1e4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d101      	bne.n	800100c <HAL_GPIO_Init+0x1e0>
 8001008:	2303      	movs	r3, #3
 800100a:	e006      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 800100c:	2304      	movs	r3, #4
 800100e:	e004      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001010:	2302      	movs	r3, #2
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001018:	2300      	movs	r3, #0
 800101a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101c:	f002 0203 	and.w	r2, r2, #3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4093      	lsls	r3, r2
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800102a:	492f      	ldr	r1, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x2bc>)
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	492c      	ldr	r1, [pc, #176]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	4928      	ldr	r1, [pc, #160]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4922      	ldr	r1, [pc, #136]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	43db      	mvns	r3, r3
 8001082:	491e      	ldr	r1, [pc, #120]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001084:	4013      	ands	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	4918      	ldr	r1, [pc, #96]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4914      	ldr	r1, [pc, #80]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d021      	beq.n	8001100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60cb      	str	r3, [r1, #12]
 80010c8:	e021      	b.n	800110e <HAL_GPIO_Init+0x2e2>
 80010ca:	bf00      	nop
 80010cc:	10320000 	.word	0x10320000
 80010d0:	10310000 	.word	0x10310000
 80010d4:	10220000 	.word	0x10220000
 80010d8:	10210000 	.word	0x10210000
 80010dc:	10120000 	.word	0x10120000
 80010e0:	10110000 	.word	0x10110000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40011400 	.word	0x40011400
 80010fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_GPIO_Init+0x304>)
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	43db      	mvns	r3, r3
 8001108:	4909      	ldr	r1, [pc, #36]	; (8001130 <HAL_GPIO_Init+0x304>)
 800110a:	4013      	ands	r3, r2
 800110c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	3301      	adds	r3, #1
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	fa22 f303 	lsr.w	r3, r2, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	f47f ae8e 	bne.w	8000e40 <HAL_GPIO_Init+0x14>
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	372c      	adds	r7, #44	; 0x2c
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40010400 	.word	0x40010400

08001134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e272      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8087 	beq.w	8001262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001154:	4b92      	ldr	r3, [pc, #584]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b04      	cmp	r3, #4
 800115e:	d00c      	beq.n	800117a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001160:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b08      	cmp	r3, #8
 800116a:	d112      	bne.n	8001192 <HAL_RCC_OscConfig+0x5e>
 800116c:	4b8c      	ldr	r3, [pc, #560]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d10b      	bne.n	8001192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117a:	4b89      	ldr	r3, [pc, #548]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d06c      	beq.n	8001260 <HAL_RCC_OscConfig+0x12c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d168      	bne.n	8001260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e24c      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x76>
 800119c:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e02e      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x98>
 80011b2:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7a      	ldr	r2, [pc, #488]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b78      	ldr	r3, [pc, #480]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a77      	ldr	r2, [pc, #476]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0xbc>
 80011d6:	4b72      	ldr	r3, [pc, #456]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a71      	ldr	r2, [pc, #452]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011f0:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a67      	ldr	r2, [pc, #412]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcfa 	bl	8000c08 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcf6 	bl	8000c08 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e200      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xe4>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fce6 	bl	8000c08 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fce2 	bl	8000c08 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1ec      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x10c>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x18c>
 8001286:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x176>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c0      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4939      	ldr	r1, [pc, #228]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc9b 	bl	8000c08 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc97 	bl	8000c08 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a1      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fc7a 	bl	8000c08 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc76 	bl	8000c08 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e180      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03a      	beq.n	80013b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d019      	beq.n	800137e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_RCC_OscConfig+0x274>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff fc5a 	bl	8000c08 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fc56 	bl	8000c08 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e160      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fad8 	bl	800192c <RCC_Delay>
 800137c:	e01c      	b.n	80013b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_RCC_OscConfig+0x274>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fc40 	bl	8000c08 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138a:	e00f      	b.n	80013ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc3c 	bl	8000c08 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d908      	bls.n	80013ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e146      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	42420000 	.word	0x42420000
 80013a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e9      	bne.n	800138c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a6 	beq.w	8001512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10d      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a87      	ldr	r2, [pc, #540]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b85      	ldr	r3, [pc, #532]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d118      	bne.n	8001430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fe:	4b7f      	ldr	r3, [pc, #508]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7e      	ldr	r2, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140a:	f7ff fbfd 	bl	8000c08 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001412:	f7ff fbf9 	bl	8000c08 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e103      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x312>
 8001438:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	e02d      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x334>
 800144e:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a69      	ldr	r2, [pc, #420]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a66      	ldr	r2, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	e01c      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x356>
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a60      	ldr	r2, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a5d      	ldr	r2, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a57      	ldr	r2, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d015      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbad 	bl	8000c08 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fba9 	bl	8000c08 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0b1      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ee      	beq.n	80014b2 <HAL_RCC_OscConfig+0x37e>
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb97 	bl	8000c08 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb93 	bl	8000c08 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e09b      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d061      	beq.n	80015ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d146      	bne.n	80015be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x4cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb67 	bl	8000c08 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb63 	bl	8000c08 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e06d      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d108      	bne.n	8001578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4921      	ldr	r1, [pc, #132]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a19      	ldr	r1, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	430b      	orrs	r3, r1
 800158a:	491b      	ldr	r1, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb37 	bl	8000c08 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fb33 	bl	8000c08 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x46a>
 80015bc:	e035      	b.n	800162a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x4cc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb20 	bl	8000c08 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff fb1c 	bl	8000c08 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e026      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x498>
 80015ea:	e01e      	b.n	800162a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e019      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
 8001600:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x500>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	429a      	cmp	r2, r3
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4965      	ldr	r1, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800169e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff fa6e 	bl	8000c08 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff fa6a 	bl	8000c08 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9cc 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08004b08 	.word	0x08004b08
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b490      	push	{r4, r7}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001814:	1d3c      	adds	r4, r7, #4
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800181c:	f240 2301 	movw	r3, #513	; 0x201
 8001820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d002      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d003      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x46>
 800184a:	e02b      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800184e:	623b      	str	r3, [r7, #32]
      break;
 8001850:	e02b      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	0c9b      	lsrs	r3, r3, #18
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3328      	adds	r3, #40	; 0x28
 800185c:	443b      	add	r3, r7
 800185e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001862:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d012      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0c5b      	lsrs	r3, r3, #17
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	3328      	adds	r3, #40	; 0x28
 800187a:	443b      	add	r3, r7
 800187c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001880:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001886:	fb03 f202 	mul.w	r2, r3, r2
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	e004      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	623b      	str	r3, [r7, #32]
      break;
 80018a2:	e002      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a6:	623b      	str	r3, [r7, #32]
      break;
 80018a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018aa:	6a3b      	ldr	r3, [r7, #32]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc90      	pop	{r4, r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	08004af8 	.word	0x08004af8
 80018bc:	40021000 	.word	0x40021000
 80018c0:	007a1200 	.word	0x007a1200
 80018c4:	003d0900 	.word	0x003d0900

080018c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000000 	.word	0x20000000

080018dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018e0:	f7ff fff2 	bl	80018c8 <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4903      	ldr	r1, [pc, #12]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	08004b18 	.word	0x08004b18

08001904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001908:	f7ff ffde 	bl	80018c8 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0adb      	lsrs	r3, r3, #11
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	08004b18 	.word	0x08004b18

0800192c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <RCC_Delay+0x34>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <RCC_Delay+0x38>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0a5b      	lsrs	r3, r3, #9
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001948:	bf00      	nop
  }
  while (Delay --);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	60fa      	str	r2, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f9      	bne.n	8001948 <RCC_Delay+0x1c>
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000000 	.word	0x20000000
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e03f      	b.n	80019fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f837 	bl	8001a02 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f90d 	bl	8001bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d17c      	bne.n	8001b2e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_UART_Transmit+0x2c>
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e075      	b.n	8001b30 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_UART_Transmit+0x3e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e06e      	b.n	8001b30 <HAL_UART_Transmit+0x11c>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2221      	movs	r2, #33	; 0x21
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a68:	f7ff f8ce 	bl	8000c08 <HAL_GetTick>
 8001a6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a82:	d108      	bne.n	8001a96 <HAL_UART_Transmit+0x82>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e003      	b.n	8001a9e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001aa6:	e02a      	b.n	8001afe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f840 	bl	8001b38 <UART_WaitOnFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e036      	b.n	8001b30 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ad6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3302      	adds	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e007      	b.n	8001af0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1cf      	bne.n	8001aa8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f810 	bl	8001b38 <UART_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e006      	b.n	8001b30 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
  }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b48:	e02c      	b.n	8001ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d028      	beq.n	8001ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b58:	f7ff f856 	bl	8000c08 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d21d      	bcs.n	8001ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e00f      	b.n	8001bc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4013      	ands	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d0c3      	beq.n	8001b4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c06:	f023 030c 	bic.w	r3, r3, #12
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ce0 <UART_SetConfig+0x114>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d103      	bne.n	8001c3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c34:	f7ff fe66 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	e002      	b.n	8001c42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c3c:	f7ff fe4e 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8001c40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	009a      	lsls	r2, r3, #2
 8001c4c:	441a      	add	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <UART_SetConfig+0x118>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	0119      	lsls	r1, r3, #4
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	009a      	lsls	r2, r3, #2
 8001c6c:	441a      	add	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <UART_SetConfig+0x118>)
 8001c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2064      	movs	r0, #100	; 0x64
 8001c82:	fb00 f303 	mul.w	r3, r0, r3
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	3332      	adds	r3, #50	; 0x32
 8001c8c:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <UART_SetConfig+0x118>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c98:	4419      	add	r1, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009a      	lsls	r2, r3, #2
 8001ca4:	441a      	add	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <UART_SetConfig+0x118>)
 8001cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2064      	movs	r0, #100	; 0x64
 8001cba:	fb00 f303 	mul.w	r3, r0, r3
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	3332      	adds	r3, #50	; 0x32
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <UART_SetConfig+0x118>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	51eb851f 	.word	0x51eb851f

08001ce8 <rcc_system_clock_config>:
//-----------------------------------------------------------------------//
/*
// rcc clock configuration
*/
bool rcc_system_clock_config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b090      	sub	sp, #64	; 0x40
 8001cec:	af00      	add	r7, sp, #0

    // APB1 Prescaler = 2 => 36, 72 MHz
    // APB2 Prescaler = 1 => 72, 72 MHz
    // ADC Prescaler = 6 => 12 MHz

    RCC_OscInitTypeDef osc_init_struct = {0};
 8001cee:	f107 0318 	add.w	r3, r7, #24
 8001cf2:	2228      	movs	r2, #40	; 0x28
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f8f2 	bl	8001ee0 <memset>
    RCC_ClkInitTypeDef clk_init_struct = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]

    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	61bb      	str	r3, [r7, #24]
    osc_init_struct.HSEState = RCC_HSE_ON;
 8001d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d12:	61fb      	str	r3, [r7, #28]
    osc_init_struct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
    osc_init_struct.PLL.PLLState = RCC_PLL_ON;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d22:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_RCC_OscConfig(&osc_init_struct) != HAL_OK)
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fa01 	bl	8001134 <HAL_RCC_OscConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <rcc_system_clock_config+0x54>
    {
      return false;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e014      	b.n	8001d66 <rcc_system_clock_config+0x7e>
    }

    // clock initialization
    clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1  |
                                RCC_CLOCKTYPE_PCLK2  |
                                RCC_CLOCKTYPE_SYSCLK ;

    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d40:	2302      	movs	r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
    clk_init_struct.APB1CLKDivider = RCC_SYSCLK_DIV2;
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	613b      	str	r3, [r7, #16]
    clk_init_struct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
    // 00 - 24MHz => 0
    // 24 - 48MHz => 1
    // 48 - 72MHz => 2
    if(HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2102      	movs	r1, #2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc6f 	bl	8001638 <HAL_RCC_ClockConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <rcc_system_clock_config+0x7c>
    {
      return false;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <rcc_system_clock_config+0x7e>
    }

    return true;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3740      	adds	r7, #64	; 0x40
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <uart_UART1_GPIO_config>:
//-----------------------------------------------------------------------//
/*
// @brief UART1 GPIO configuration
*/
void uart_UART1_GPIO_config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
    // PA9  => TX
    // PA10 => RX
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <uart_UART1_GPIO_config+0x5c>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <uart_UART1_GPIO_config+0x5c>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <uart_UART1_GPIO_config+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    // PA9  => TX
    gpio_init_struct.Pin = GPIO_PIN_9;
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d92:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	4619      	mov	r1, r3
 8001da2:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <uart_UART1_GPIO_config+0x60>)
 8001da4:	f7ff f842 	bl	8000e2c <HAL_GPIO_Init>

    // PA10 => RX
    gpio_init_struct.Pin = GPIO_PIN_10;
 8001da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dac:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <uart_UART1_GPIO_config+0x60>)
 8001dbe:	f7ff f835 	bl	8000e2c <HAL_GPIO_Init>




}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010800 	.word	0x40010800

08001dd4 <uart_UART1_config>:
/*
// @brief UART1 Peripheral configuration
*/
bool uart_UART1_config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  __HAL_RCC_USART1_CLK_ENABLE();
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <uart_UART1_config+0x6c>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <uart_UART1_config+0x6c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6193      	str	r3, [r2, #24]
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <uart_UART1_config+0x6c>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

  huart1.Instance = USART1;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <uart_UART1_config+0x70>)
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <uart_UART1_config+0x74>)
 8001df6:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <uart_UART1_config+0x70>)
 8001dfa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dfe:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <uart_UART1_config+0x70>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <uart_UART1_config+0x70>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <uart_UART1_config+0x70>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <uart_UART1_config+0x70>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <uart_UART1_config+0x70>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <uart_UART1_config+0x70>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <uart_UART1_config+0x70>)
 8001e26:	f7ff fd9f 	bl	8001968 <HAL_UART_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <uart_UART1_config+0x60>
  {
    return false;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <uart_UART1_config+0x62>
  }

  return true;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	200001fc 	.word	0x200001fc
 8001e48:	40013800 	.word	0x40013800

08001e4c <Reset_Handler>:
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <LoopFillZerobss+0x12>)
 8001e4e:	490d      	ldr	r1, [pc, #52]	; (8001e84 <LoopFillZerobss+0x16>)
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <LoopFillZerobss+0x1a>)
 8001e52:	2300      	movs	r3, #0
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:
 8001e56:	58d4      	ldr	r4, [r2, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:
 8001e5c:	18c4      	adds	r4, r0, r3
 8001e5e:	428c      	cmp	r4, r1
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <LoopFillZerobss+0x1e>)
 8001e64:	4c0a      	ldr	r4, [pc, #40]	; (8001e90 <LoopFillZerobss+0x22>)
 8001e66:	2300      	movs	r3, #0
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>
 8001e72:	f7fe fe65 	bl	8000b40 <SystemInit>
 8001e76:	f000 f80f 	bl	8001e98 <__libc_init_array>
 8001e7a:	f7fe fe05 	bl	8000a88 <main>
 8001e7e:	4770      	bx	lr
 8001e80:	20000000 	.word	0x20000000
 8001e84:	200001dc 	.word	0x200001dc
 8001e88:	08004f04 	.word	0x08004f04
 8001e8c:	200001dc 	.word	0x200001dc
 8001e90:	20000254 	.word	0x20000254

08001e94 <ADC1_2_IRQHandler>:
 8001e94:	e7fe      	b.n	8001e94 <ADC1_2_IRQHandler>
	...

08001e98 <__libc_init_array>:
 8001e98:	b570      	push	{r4, r5, r6, lr}
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	4d0c      	ldr	r5, [pc, #48]	; (8001ed0 <__libc_init_array+0x38>)
 8001e9e:	4c0d      	ldr	r4, [pc, #52]	; (8001ed4 <__libc_init_array+0x3c>)
 8001ea0:	1b64      	subs	r4, r4, r5
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	42a6      	cmp	r6, r4
 8001ea6:	d109      	bne.n	8001ebc <__libc_init_array+0x24>
 8001ea8:	f002 fe04 	bl	8004ab4 <_init>
 8001eac:	2600      	movs	r6, #0
 8001eae:	4d0a      	ldr	r5, [pc, #40]	; (8001ed8 <__libc_init_array+0x40>)
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <__libc_init_array+0x44>)
 8001eb2:	1b64      	subs	r4, r4, r5
 8001eb4:	10a4      	asrs	r4, r4, #2
 8001eb6:	42a6      	cmp	r6, r4
 8001eb8:	d105      	bne.n	8001ec6 <__libc_init_array+0x2e>
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec0:	4798      	blx	r3
 8001ec2:	3601      	adds	r6, #1
 8001ec4:	e7ee      	b.n	8001ea4 <__libc_init_array+0xc>
 8001ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eca:	4798      	blx	r3
 8001ecc:	3601      	adds	r6, #1
 8001ece:	e7f2      	b.n	8001eb6 <__libc_init_array+0x1e>
 8001ed0:	08004efc 	.word	0x08004efc
 8001ed4:	08004efc 	.word	0x08004efc
 8001ed8:	08004efc 	.word	0x08004efc
 8001edc:	08004f00 	.word	0x08004f00

08001ee0 <memset>:
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4402      	add	r2, r0
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d100      	bne.n	8001eea <memset+0xa>
 8001ee8:	4770      	bx	lr
 8001eea:	f803 1b01 	strb.w	r1, [r3], #1
 8001eee:	e7f9      	b.n	8001ee4 <memset+0x4>

08001ef0 <__cvt>:
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef6:	461f      	mov	r7, r3
 8001ef8:	bfbb      	ittet	lt
 8001efa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001efe:	461f      	movlt	r7, r3
 8001f00:	2300      	movge	r3, #0
 8001f02:	232d      	movlt	r3, #45	; 0x2d
 8001f04:	b088      	sub	sp, #32
 8001f06:	4614      	mov	r4, r2
 8001f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001f0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001f0c:	7013      	strb	r3, [r2, #0]
 8001f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001f10:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001f14:	f023 0820 	bic.w	r8, r3, #32
 8001f18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001f1c:	d005      	beq.n	8001f2a <__cvt+0x3a>
 8001f1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001f22:	d100      	bne.n	8001f26 <__cvt+0x36>
 8001f24:	3501      	adds	r5, #1
 8001f26:	2302      	movs	r3, #2
 8001f28:	e000      	b.n	8001f2c <__cvt+0x3c>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	aa07      	add	r2, sp, #28
 8001f2e:	9204      	str	r2, [sp, #16]
 8001f30:	aa06      	add	r2, sp, #24
 8001f32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001f36:	e9cd 3500 	strd	r3, r5, [sp]
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	f000 fe13 	bl	8002b68 <_dtoa_r>
 8001f42:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001f46:	4606      	mov	r6, r0
 8001f48:	d102      	bne.n	8001f50 <__cvt+0x60>
 8001f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f4c:	07db      	lsls	r3, r3, #31
 8001f4e:	d522      	bpl.n	8001f96 <__cvt+0xa6>
 8001f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001f54:	eb06 0905 	add.w	r9, r6, r5
 8001f58:	d110      	bne.n	8001f7c <__cvt+0x8c>
 8001f5a:	7833      	ldrb	r3, [r6, #0]
 8001f5c:	2b30      	cmp	r3, #48	; 0x30
 8001f5e:	d10a      	bne.n	8001f76 <__cvt+0x86>
 8001f60:	2200      	movs	r2, #0
 8001f62:	2300      	movs	r3, #0
 8001f64:	4620      	mov	r0, r4
 8001f66:	4639      	mov	r1, r7
 8001f68:	f7fe fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8001f6c:	b918      	cbnz	r0, 8001f76 <__cvt+0x86>
 8001f6e:	f1c5 0501 	rsb	r5, r5, #1
 8001f72:	f8ca 5000 	str.w	r5, [sl]
 8001f76:	f8da 3000 	ldr.w	r3, [sl]
 8001f7a:	4499      	add	r9, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2300      	movs	r3, #0
 8001f80:	4620      	mov	r0, r4
 8001f82:	4639      	mov	r1, r7
 8001f84:	f7fe fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8001f88:	b108      	cbz	r0, 8001f8e <__cvt+0x9e>
 8001f8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8001f8e:	2230      	movs	r2, #48	; 0x30
 8001f90:	9b07      	ldr	r3, [sp, #28]
 8001f92:	454b      	cmp	r3, r9
 8001f94:	d307      	bcc.n	8001fa6 <__cvt+0xb6>
 8001f96:	4630      	mov	r0, r6
 8001f98:	9b07      	ldr	r3, [sp, #28]
 8001f9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001f9c:	1b9b      	subs	r3, r3, r6
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	b008      	add	sp, #32
 8001fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	9107      	str	r1, [sp, #28]
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e7f0      	b.n	8001f90 <__cvt+0xa0>

08001fae <__exponent>:
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb2:	2900      	cmp	r1, #0
 8001fb4:	f803 2b02 	strb.w	r2, [r3], #2
 8001fb8:	bfb6      	itet	lt
 8001fba:	222d      	movlt	r2, #45	; 0x2d
 8001fbc:	222b      	movge	r2, #43	; 0x2b
 8001fbe:	4249      	neglt	r1, r1
 8001fc0:	2909      	cmp	r1, #9
 8001fc2:	7042      	strb	r2, [r0, #1]
 8001fc4:	dd2b      	ble.n	800201e <__exponent+0x70>
 8001fc6:	f10d 0407 	add.w	r4, sp, #7
 8001fca:	46a4      	mov	ip, r4
 8001fcc:	270a      	movs	r7, #10
 8001fce:	fb91 f6f7 	sdiv	r6, r1, r7
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	46a6      	mov	lr, r4
 8001fd6:	fb07 1516 	mls	r5, r7, r6, r1
 8001fda:	2a63      	cmp	r2, #99	; 0x63
 8001fdc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8001fe0:	4631      	mov	r1, r6
 8001fe2:	f104 34ff 	add.w	r4, r4, #4294967295
 8001fe6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8001fea:	dcf0      	bgt.n	8001fce <__exponent+0x20>
 8001fec:	3130      	adds	r1, #48	; 0x30
 8001fee:	f1ae 0502 	sub.w	r5, lr, #2
 8001ff2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	1c44      	adds	r4, r0, #1
 8001ffa:	4561      	cmp	r1, ip
 8001ffc:	d30a      	bcc.n	8002014 <__exponent+0x66>
 8001ffe:	f10d 0209 	add.w	r2, sp, #9
 8002002:	eba2 020e 	sub.w	r2, r2, lr
 8002006:	4565      	cmp	r5, ip
 8002008:	bf88      	it	hi
 800200a:	2200      	movhi	r2, #0
 800200c:	4413      	add	r3, r2
 800200e:	1a18      	subs	r0, r3, r0
 8002010:	b003      	add	sp, #12
 8002012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002014:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002018:	f804 2f01 	strb.w	r2, [r4, #1]!
 800201c:	e7ed      	b.n	8001ffa <__exponent+0x4c>
 800201e:	2330      	movs	r3, #48	; 0x30
 8002020:	3130      	adds	r1, #48	; 0x30
 8002022:	7083      	strb	r3, [r0, #2]
 8002024:	70c1      	strb	r1, [r0, #3]
 8002026:	1d03      	adds	r3, r0, #4
 8002028:	e7f1      	b.n	800200e <__exponent+0x60>
	...

0800202c <_printf_float>:
 800202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002030:	b091      	sub	sp, #68	; 0x44
 8002032:	460c      	mov	r4, r1
 8002034:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002038:	4616      	mov	r6, r2
 800203a:	461f      	mov	r7, r3
 800203c:	4605      	mov	r5, r0
 800203e:	f001 fd35 	bl	8003aac <_localeconv_r>
 8002042:	6803      	ldr	r3, [r0, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	9309      	str	r3, [sp, #36]	; 0x24
 8002048:	f7fe f882 	bl	8000150 <strlen>
 800204c:	2300      	movs	r3, #0
 800204e:	930e      	str	r3, [sp, #56]	; 0x38
 8002050:	f8d8 3000 	ldr.w	r3, [r8]
 8002054:	900a      	str	r0, [sp, #40]	; 0x28
 8002056:	3307      	adds	r3, #7
 8002058:	f023 0307 	bic.w	r3, r3, #7
 800205c:	f103 0208 	add.w	r2, r3, #8
 8002060:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002064:	f8d4 b000 	ldr.w	fp, [r4]
 8002068:	f8c8 2000 	str.w	r2, [r8]
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002074:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002078:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800207c:	930b      	str	r3, [sp, #44]	; 0x2c
 800207e:	f04f 32ff 	mov.w	r2, #4294967295
 8002082:	4640      	mov	r0, r8
 8002084:	4b9c      	ldr	r3, [pc, #624]	; (80022f8 <_printf_float+0x2cc>)
 8002086:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002088:	f7fe fcc0 	bl	8000a0c <__aeabi_dcmpun>
 800208c:	bb70      	cbnz	r0, 80020ec <_printf_float+0xc0>
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	4640      	mov	r0, r8
 8002094:	4b98      	ldr	r3, [pc, #608]	; (80022f8 <_printf_float+0x2cc>)
 8002096:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002098:	f7fe fc9a 	bl	80009d0 <__aeabi_dcmple>
 800209c:	bb30      	cbnz	r0, 80020ec <_printf_float+0xc0>
 800209e:	2200      	movs	r2, #0
 80020a0:	2300      	movs	r3, #0
 80020a2:	4640      	mov	r0, r8
 80020a4:	4651      	mov	r1, sl
 80020a6:	f7fe fc89 	bl	80009bc <__aeabi_dcmplt>
 80020aa:	b110      	cbz	r0, 80020b2 <_printf_float+0x86>
 80020ac:	232d      	movs	r3, #45	; 0x2d
 80020ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020b2:	4b92      	ldr	r3, [pc, #584]	; (80022fc <_printf_float+0x2d0>)
 80020b4:	4892      	ldr	r0, [pc, #584]	; (8002300 <_printf_float+0x2d4>)
 80020b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80020ba:	bf94      	ite	ls
 80020bc:	4698      	movls	r8, r3
 80020be:	4680      	movhi	r8, r0
 80020c0:	2303      	movs	r3, #3
 80020c2:	f04f 0a00 	mov.w	sl, #0
 80020c6:	6123      	str	r3, [r4, #16]
 80020c8:	f02b 0304 	bic.w	r3, fp, #4
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	4633      	mov	r3, r6
 80020d0:	4621      	mov	r1, r4
 80020d2:	4628      	mov	r0, r5
 80020d4:	9700      	str	r7, [sp, #0]
 80020d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80020d8:	f000 f9d4 	bl	8002484 <_printf_common>
 80020dc:	3001      	adds	r0, #1
 80020de:	f040 8090 	bne.w	8002202 <_printf_float+0x1d6>
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
 80020e6:	b011      	add	sp, #68	; 0x44
 80020e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020ec:	4642      	mov	r2, r8
 80020ee:	4653      	mov	r3, sl
 80020f0:	4640      	mov	r0, r8
 80020f2:	4651      	mov	r1, sl
 80020f4:	f7fe fc8a 	bl	8000a0c <__aeabi_dcmpun>
 80020f8:	b148      	cbz	r0, 800210e <_printf_float+0xe2>
 80020fa:	f1ba 0f00 	cmp.w	sl, #0
 80020fe:	bfb8      	it	lt
 8002100:	232d      	movlt	r3, #45	; 0x2d
 8002102:	4880      	ldr	r0, [pc, #512]	; (8002304 <_printf_float+0x2d8>)
 8002104:	bfb8      	it	lt
 8002106:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800210a:	4b7f      	ldr	r3, [pc, #508]	; (8002308 <_printf_float+0x2dc>)
 800210c:	e7d3      	b.n	80020b6 <_printf_float+0x8a>
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	d142      	bne.n	800219e <_printf_float+0x172>
 8002118:	2306      	movs	r3, #6
 800211a:	6063      	str	r3, [r4, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	9206      	str	r2, [sp, #24]
 8002120:	aa0e      	add	r2, sp, #56	; 0x38
 8002122:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002126:	aa0d      	add	r2, sp, #52	; 0x34
 8002128:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800212c:	9203      	str	r2, [sp, #12]
 800212e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002132:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002136:	6023      	str	r3, [r4, #0]
 8002138:	6863      	ldr	r3, [r4, #4]
 800213a:	4642      	mov	r2, r8
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4628      	mov	r0, r5
 8002140:	4653      	mov	r3, sl
 8002142:	910b      	str	r1, [sp, #44]	; 0x2c
 8002144:	f7ff fed4 	bl	8001ef0 <__cvt>
 8002148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800214a:	4680      	mov	r8, r0
 800214c:	2947      	cmp	r1, #71	; 0x47
 800214e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002150:	d108      	bne.n	8002164 <_printf_float+0x138>
 8002152:	1cc8      	adds	r0, r1, #3
 8002154:	db02      	blt.n	800215c <_printf_float+0x130>
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	4299      	cmp	r1, r3
 800215a:	dd40      	ble.n	80021de <_printf_float+0x1b2>
 800215c:	f1a9 0902 	sub.w	r9, r9, #2
 8002160:	fa5f f989 	uxtb.w	r9, r9
 8002164:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002168:	d81f      	bhi.n	80021aa <_printf_float+0x17e>
 800216a:	464a      	mov	r2, r9
 800216c:	3901      	subs	r1, #1
 800216e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002172:	910d      	str	r1, [sp, #52]	; 0x34
 8002174:	f7ff ff1b 	bl	8001fae <__exponent>
 8002178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800217a:	4682      	mov	sl, r0
 800217c:	1813      	adds	r3, r2, r0
 800217e:	2a01      	cmp	r2, #1
 8002180:	6123      	str	r3, [r4, #16]
 8002182:	dc02      	bgt.n	800218a <_printf_float+0x15e>
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	07d2      	lsls	r2, r2, #31
 8002188:	d501      	bpl.n	800218e <_printf_float+0x162>
 800218a:	3301      	adds	r3, #1
 800218c:	6123      	str	r3, [r4, #16]
 800218e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002192:	2b00      	cmp	r3, #0
 8002194:	d09b      	beq.n	80020ce <_printf_float+0xa2>
 8002196:	232d      	movs	r3, #45	; 0x2d
 8002198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800219c:	e797      	b.n	80020ce <_printf_float+0xa2>
 800219e:	2947      	cmp	r1, #71	; 0x47
 80021a0:	d1bc      	bne.n	800211c <_printf_float+0xf0>
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ba      	bne.n	800211c <_printf_float+0xf0>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e7b7      	b.n	800211a <_printf_float+0xee>
 80021aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80021ae:	d118      	bne.n	80021e2 <_printf_float+0x1b6>
 80021b0:	2900      	cmp	r1, #0
 80021b2:	6863      	ldr	r3, [r4, #4]
 80021b4:	dd0b      	ble.n	80021ce <_printf_float+0x1a2>
 80021b6:	6121      	str	r1, [r4, #16]
 80021b8:	b913      	cbnz	r3, 80021c0 <_printf_float+0x194>
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	07d0      	lsls	r0, r2, #31
 80021be:	d502      	bpl.n	80021c6 <_printf_float+0x19a>
 80021c0:	3301      	adds	r3, #1
 80021c2:	440b      	add	r3, r1
 80021c4:	6123      	str	r3, [r4, #16]
 80021c6:	f04f 0a00 	mov.w	sl, #0
 80021ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80021cc:	e7df      	b.n	800218e <_printf_float+0x162>
 80021ce:	b913      	cbnz	r3, 80021d6 <_printf_float+0x1aa>
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	07d2      	lsls	r2, r2, #31
 80021d4:	d501      	bpl.n	80021da <_printf_float+0x1ae>
 80021d6:	3302      	adds	r3, #2
 80021d8:	e7f4      	b.n	80021c4 <_printf_float+0x198>
 80021da:	2301      	movs	r3, #1
 80021dc:	e7f2      	b.n	80021c4 <_printf_float+0x198>
 80021de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80021e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021e4:	4299      	cmp	r1, r3
 80021e6:	db05      	blt.n	80021f4 <_printf_float+0x1c8>
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	6121      	str	r1, [r4, #16]
 80021ec:	07d8      	lsls	r0, r3, #31
 80021ee:	d5ea      	bpl.n	80021c6 <_printf_float+0x19a>
 80021f0:	1c4b      	adds	r3, r1, #1
 80021f2:	e7e7      	b.n	80021c4 <_printf_float+0x198>
 80021f4:	2900      	cmp	r1, #0
 80021f6:	bfcc      	ite	gt
 80021f8:	2201      	movgt	r2, #1
 80021fa:	f1c1 0202 	rsble	r2, r1, #2
 80021fe:	4413      	add	r3, r2
 8002200:	e7e0      	b.n	80021c4 <_printf_float+0x198>
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	055a      	lsls	r2, r3, #21
 8002206:	d407      	bmi.n	8002218 <_printf_float+0x1ec>
 8002208:	6923      	ldr	r3, [r4, #16]
 800220a:	4642      	mov	r2, r8
 800220c:	4631      	mov	r1, r6
 800220e:	4628      	mov	r0, r5
 8002210:	47b8      	blx	r7
 8002212:	3001      	adds	r0, #1
 8002214:	d12b      	bne.n	800226e <_printf_float+0x242>
 8002216:	e764      	b.n	80020e2 <_printf_float+0xb6>
 8002218:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800221c:	f240 80dd 	bls.w	80023da <_printf_float+0x3ae>
 8002220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002224:	2200      	movs	r2, #0
 8002226:	2300      	movs	r3, #0
 8002228:	f7fe fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800222c:	2800      	cmp	r0, #0
 800222e:	d033      	beq.n	8002298 <_printf_float+0x26c>
 8002230:	2301      	movs	r3, #1
 8002232:	4631      	mov	r1, r6
 8002234:	4628      	mov	r0, r5
 8002236:	4a35      	ldr	r2, [pc, #212]	; (800230c <_printf_float+0x2e0>)
 8002238:	47b8      	blx	r7
 800223a:	3001      	adds	r0, #1
 800223c:	f43f af51 	beq.w	80020e2 <_printf_float+0xb6>
 8002240:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002244:	429a      	cmp	r2, r3
 8002246:	db02      	blt.n	800224e <_printf_float+0x222>
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	07d8      	lsls	r0, r3, #31
 800224c:	d50f      	bpl.n	800226e <_printf_float+0x242>
 800224e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002252:	4631      	mov	r1, r6
 8002254:	4628      	mov	r0, r5
 8002256:	47b8      	blx	r7
 8002258:	3001      	adds	r0, #1
 800225a:	f43f af42 	beq.w	80020e2 <_printf_float+0xb6>
 800225e:	f04f 0800 	mov.w	r8, #0
 8002262:	f104 091a 	add.w	r9, r4, #26
 8002266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002268:	3b01      	subs	r3, #1
 800226a:	4543      	cmp	r3, r8
 800226c:	dc09      	bgt.n	8002282 <_printf_float+0x256>
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	079b      	lsls	r3, r3, #30
 8002272:	f100 8102 	bmi.w	800247a <_printf_float+0x44e>
 8002276:	68e0      	ldr	r0, [r4, #12]
 8002278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800227a:	4298      	cmp	r0, r3
 800227c:	bfb8      	it	lt
 800227e:	4618      	movlt	r0, r3
 8002280:	e731      	b.n	80020e6 <_printf_float+0xba>
 8002282:	2301      	movs	r3, #1
 8002284:	464a      	mov	r2, r9
 8002286:	4631      	mov	r1, r6
 8002288:	4628      	mov	r0, r5
 800228a:	47b8      	blx	r7
 800228c:	3001      	adds	r0, #1
 800228e:	f43f af28 	beq.w	80020e2 <_printf_float+0xb6>
 8002292:	f108 0801 	add.w	r8, r8, #1
 8002296:	e7e6      	b.n	8002266 <_printf_float+0x23a>
 8002298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800229a:	2b00      	cmp	r3, #0
 800229c:	dc38      	bgt.n	8002310 <_printf_float+0x2e4>
 800229e:	2301      	movs	r3, #1
 80022a0:	4631      	mov	r1, r6
 80022a2:	4628      	mov	r0, r5
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <_printf_float+0x2e0>)
 80022a6:	47b8      	blx	r7
 80022a8:	3001      	adds	r0, #1
 80022aa:	f43f af1a 	beq.w	80020e2 <_printf_float+0xb6>
 80022ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80022b2:	4313      	orrs	r3, r2
 80022b4:	d102      	bne.n	80022bc <_printf_float+0x290>
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	07d9      	lsls	r1, r3, #31
 80022ba:	d5d8      	bpl.n	800226e <_printf_float+0x242>
 80022bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022c0:	4631      	mov	r1, r6
 80022c2:	4628      	mov	r0, r5
 80022c4:	47b8      	blx	r7
 80022c6:	3001      	adds	r0, #1
 80022c8:	f43f af0b 	beq.w	80020e2 <_printf_float+0xb6>
 80022cc:	f04f 0900 	mov.w	r9, #0
 80022d0:	f104 0a1a 	add.w	sl, r4, #26
 80022d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022d6:	425b      	negs	r3, r3
 80022d8:	454b      	cmp	r3, r9
 80022da:	dc01      	bgt.n	80022e0 <_printf_float+0x2b4>
 80022dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022de:	e794      	b.n	800220a <_printf_float+0x1de>
 80022e0:	2301      	movs	r3, #1
 80022e2:	4652      	mov	r2, sl
 80022e4:	4631      	mov	r1, r6
 80022e6:	4628      	mov	r0, r5
 80022e8:	47b8      	blx	r7
 80022ea:	3001      	adds	r0, #1
 80022ec:	f43f aef9 	beq.w	80020e2 <_printf_float+0xb6>
 80022f0:	f109 0901 	add.w	r9, r9, #1
 80022f4:	e7ee      	b.n	80022d4 <_printf_float+0x2a8>
 80022f6:	bf00      	nop
 80022f8:	7fefffff 	.word	0x7fefffff
 80022fc:	08004b24 	.word	0x08004b24
 8002300:	08004b28 	.word	0x08004b28
 8002304:	08004b30 	.word	0x08004b30
 8002308:	08004b2c 	.word	0x08004b2c
 800230c:	08004b34 	.word	0x08004b34
 8002310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002314:	429a      	cmp	r2, r3
 8002316:	bfa8      	it	ge
 8002318:	461a      	movge	r2, r3
 800231a:	2a00      	cmp	r2, #0
 800231c:	4691      	mov	r9, r2
 800231e:	dc37      	bgt.n	8002390 <_printf_float+0x364>
 8002320:	f04f 0b00 	mov.w	fp, #0
 8002324:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002328:	f104 021a 	add.w	r2, r4, #26
 800232c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002330:	ebaa 0309 	sub.w	r3, sl, r9
 8002334:	455b      	cmp	r3, fp
 8002336:	dc33      	bgt.n	80023a0 <_printf_float+0x374>
 8002338:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800233c:	429a      	cmp	r2, r3
 800233e:	db3b      	blt.n	80023b8 <_printf_float+0x38c>
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	07da      	lsls	r2, r3, #31
 8002344:	d438      	bmi.n	80023b8 <_printf_float+0x38c>
 8002346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002348:	990d      	ldr	r1, [sp, #52]	; 0x34
 800234a:	eba3 020a 	sub.w	r2, r3, sl
 800234e:	eba3 0901 	sub.w	r9, r3, r1
 8002352:	4591      	cmp	r9, r2
 8002354:	bfa8      	it	ge
 8002356:	4691      	movge	r9, r2
 8002358:	f1b9 0f00 	cmp.w	r9, #0
 800235c:	dc34      	bgt.n	80023c8 <_printf_float+0x39c>
 800235e:	f04f 0800 	mov.w	r8, #0
 8002362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002366:	f104 0a1a 	add.w	sl, r4, #26
 800236a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	eba3 0309 	sub.w	r3, r3, r9
 8002374:	4543      	cmp	r3, r8
 8002376:	f77f af7a 	ble.w	800226e <_printf_float+0x242>
 800237a:	2301      	movs	r3, #1
 800237c:	4652      	mov	r2, sl
 800237e:	4631      	mov	r1, r6
 8002380:	4628      	mov	r0, r5
 8002382:	47b8      	blx	r7
 8002384:	3001      	adds	r0, #1
 8002386:	f43f aeac 	beq.w	80020e2 <_printf_float+0xb6>
 800238a:	f108 0801 	add.w	r8, r8, #1
 800238e:	e7ec      	b.n	800236a <_printf_float+0x33e>
 8002390:	4613      	mov	r3, r2
 8002392:	4631      	mov	r1, r6
 8002394:	4642      	mov	r2, r8
 8002396:	4628      	mov	r0, r5
 8002398:	47b8      	blx	r7
 800239a:	3001      	adds	r0, #1
 800239c:	d1c0      	bne.n	8002320 <_printf_float+0x2f4>
 800239e:	e6a0      	b.n	80020e2 <_printf_float+0xb6>
 80023a0:	2301      	movs	r3, #1
 80023a2:	4631      	mov	r1, r6
 80023a4:	4628      	mov	r0, r5
 80023a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80023a8:	47b8      	blx	r7
 80023aa:	3001      	adds	r0, #1
 80023ac:	f43f ae99 	beq.w	80020e2 <_printf_float+0xb6>
 80023b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80023b2:	f10b 0b01 	add.w	fp, fp, #1
 80023b6:	e7b9      	b.n	800232c <_printf_float+0x300>
 80023b8:	4631      	mov	r1, r6
 80023ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023be:	4628      	mov	r0, r5
 80023c0:	47b8      	blx	r7
 80023c2:	3001      	adds	r0, #1
 80023c4:	d1bf      	bne.n	8002346 <_printf_float+0x31a>
 80023c6:	e68c      	b.n	80020e2 <_printf_float+0xb6>
 80023c8:	464b      	mov	r3, r9
 80023ca:	4631      	mov	r1, r6
 80023cc:	4628      	mov	r0, r5
 80023ce:	eb08 020a 	add.w	r2, r8, sl
 80023d2:	47b8      	blx	r7
 80023d4:	3001      	adds	r0, #1
 80023d6:	d1c2      	bne.n	800235e <_printf_float+0x332>
 80023d8:	e683      	b.n	80020e2 <_printf_float+0xb6>
 80023da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023dc:	2a01      	cmp	r2, #1
 80023de:	dc01      	bgt.n	80023e4 <_printf_float+0x3b8>
 80023e0:	07db      	lsls	r3, r3, #31
 80023e2:	d537      	bpl.n	8002454 <_printf_float+0x428>
 80023e4:	2301      	movs	r3, #1
 80023e6:	4642      	mov	r2, r8
 80023e8:	4631      	mov	r1, r6
 80023ea:	4628      	mov	r0, r5
 80023ec:	47b8      	blx	r7
 80023ee:	3001      	adds	r0, #1
 80023f0:	f43f ae77 	beq.w	80020e2 <_printf_float+0xb6>
 80023f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023f8:	4631      	mov	r1, r6
 80023fa:	4628      	mov	r0, r5
 80023fc:	47b8      	blx	r7
 80023fe:	3001      	adds	r0, #1
 8002400:	f43f ae6f 	beq.w	80020e2 <_printf_float+0xb6>
 8002404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002408:	2200      	movs	r2, #0
 800240a:	2300      	movs	r3, #0
 800240c:	f7fe facc 	bl	80009a8 <__aeabi_dcmpeq>
 8002410:	b9d8      	cbnz	r0, 800244a <_printf_float+0x41e>
 8002412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002414:	f108 0201 	add.w	r2, r8, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	4631      	mov	r1, r6
 800241c:	4628      	mov	r0, r5
 800241e:	47b8      	blx	r7
 8002420:	3001      	adds	r0, #1
 8002422:	d10e      	bne.n	8002442 <_printf_float+0x416>
 8002424:	e65d      	b.n	80020e2 <_printf_float+0xb6>
 8002426:	2301      	movs	r3, #1
 8002428:	464a      	mov	r2, r9
 800242a:	4631      	mov	r1, r6
 800242c:	4628      	mov	r0, r5
 800242e:	47b8      	blx	r7
 8002430:	3001      	adds	r0, #1
 8002432:	f43f ae56 	beq.w	80020e2 <_printf_float+0xb6>
 8002436:	f108 0801 	add.w	r8, r8, #1
 800243a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800243c:	3b01      	subs	r3, #1
 800243e:	4543      	cmp	r3, r8
 8002440:	dcf1      	bgt.n	8002426 <_printf_float+0x3fa>
 8002442:	4653      	mov	r3, sl
 8002444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002448:	e6e0      	b.n	800220c <_printf_float+0x1e0>
 800244a:	f04f 0800 	mov.w	r8, #0
 800244e:	f104 091a 	add.w	r9, r4, #26
 8002452:	e7f2      	b.n	800243a <_printf_float+0x40e>
 8002454:	2301      	movs	r3, #1
 8002456:	4642      	mov	r2, r8
 8002458:	e7df      	b.n	800241a <_printf_float+0x3ee>
 800245a:	2301      	movs	r3, #1
 800245c:	464a      	mov	r2, r9
 800245e:	4631      	mov	r1, r6
 8002460:	4628      	mov	r0, r5
 8002462:	47b8      	blx	r7
 8002464:	3001      	adds	r0, #1
 8002466:	f43f ae3c 	beq.w	80020e2 <_printf_float+0xb6>
 800246a:	f108 0801 	add.w	r8, r8, #1
 800246e:	68e3      	ldr	r3, [r4, #12]
 8002470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002472:	1a5b      	subs	r3, r3, r1
 8002474:	4543      	cmp	r3, r8
 8002476:	dcf0      	bgt.n	800245a <_printf_float+0x42e>
 8002478:	e6fd      	b.n	8002276 <_printf_float+0x24a>
 800247a:	f04f 0800 	mov.w	r8, #0
 800247e:	f104 0919 	add.w	r9, r4, #25
 8002482:	e7f4      	b.n	800246e <_printf_float+0x442>

08002484 <_printf_common>:
 8002484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002488:	4616      	mov	r6, r2
 800248a:	4699      	mov	r9, r3
 800248c:	688a      	ldr	r2, [r1, #8]
 800248e:	690b      	ldr	r3, [r1, #16]
 8002490:	4607      	mov	r7, r0
 8002492:	4293      	cmp	r3, r2
 8002494:	bfb8      	it	lt
 8002496:	4613      	movlt	r3, r2
 8002498:	6033      	str	r3, [r6, #0]
 800249a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800249e:	460c      	mov	r4, r1
 80024a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024a4:	b10a      	cbz	r2, 80024aa <_printf_common+0x26>
 80024a6:	3301      	adds	r3, #1
 80024a8:	6033      	str	r3, [r6, #0]
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	0699      	lsls	r1, r3, #26
 80024ae:	bf42      	ittt	mi
 80024b0:	6833      	ldrmi	r3, [r6, #0]
 80024b2:	3302      	addmi	r3, #2
 80024b4:	6033      	strmi	r3, [r6, #0]
 80024b6:	6825      	ldr	r5, [r4, #0]
 80024b8:	f015 0506 	ands.w	r5, r5, #6
 80024bc:	d106      	bne.n	80024cc <_printf_common+0x48>
 80024be:	f104 0a19 	add.w	sl, r4, #25
 80024c2:	68e3      	ldr	r3, [r4, #12]
 80024c4:	6832      	ldr	r2, [r6, #0]
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	42ab      	cmp	r3, r5
 80024ca:	dc28      	bgt.n	800251e <_printf_common+0x9a>
 80024cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024d0:	1e13      	subs	r3, r2, #0
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	bf18      	it	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	0692      	lsls	r2, r2, #26
 80024da:	d42d      	bmi.n	8002538 <_printf_common+0xb4>
 80024dc:	4649      	mov	r1, r9
 80024de:	4638      	mov	r0, r7
 80024e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024e4:	47c0      	blx	r8
 80024e6:	3001      	adds	r0, #1
 80024e8:	d020      	beq.n	800252c <_printf_common+0xa8>
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	68e5      	ldr	r5, [r4, #12]
 80024ee:	f003 0306 	and.w	r3, r3, #6
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf18      	it	ne
 80024f6:	2500      	movne	r5, #0
 80024f8:	6832      	ldr	r2, [r6, #0]
 80024fa:	f04f 0600 	mov.w	r6, #0
 80024fe:	68a3      	ldr	r3, [r4, #8]
 8002500:	bf08      	it	eq
 8002502:	1aad      	subeq	r5, r5, r2
 8002504:	6922      	ldr	r2, [r4, #16]
 8002506:	bf08      	it	eq
 8002508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800250c:	4293      	cmp	r3, r2
 800250e:	bfc4      	itt	gt
 8002510:	1a9b      	subgt	r3, r3, r2
 8002512:	18ed      	addgt	r5, r5, r3
 8002514:	341a      	adds	r4, #26
 8002516:	42b5      	cmp	r5, r6
 8002518:	d11a      	bne.n	8002550 <_printf_common+0xcc>
 800251a:	2000      	movs	r0, #0
 800251c:	e008      	b.n	8002530 <_printf_common+0xac>
 800251e:	2301      	movs	r3, #1
 8002520:	4652      	mov	r2, sl
 8002522:	4649      	mov	r1, r9
 8002524:	4638      	mov	r0, r7
 8002526:	47c0      	blx	r8
 8002528:	3001      	adds	r0, #1
 800252a:	d103      	bne.n	8002534 <_printf_common+0xb0>
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002534:	3501      	adds	r5, #1
 8002536:	e7c4      	b.n	80024c2 <_printf_common+0x3e>
 8002538:	2030      	movs	r0, #48	; 0x30
 800253a:	18e1      	adds	r1, r4, r3
 800253c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002546:	4422      	add	r2, r4
 8002548:	3302      	adds	r3, #2
 800254a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800254e:	e7c5      	b.n	80024dc <_printf_common+0x58>
 8002550:	2301      	movs	r3, #1
 8002552:	4622      	mov	r2, r4
 8002554:	4649      	mov	r1, r9
 8002556:	4638      	mov	r0, r7
 8002558:	47c0      	blx	r8
 800255a:	3001      	adds	r0, #1
 800255c:	d0e6      	beq.n	800252c <_printf_common+0xa8>
 800255e:	3601      	adds	r6, #1
 8002560:	e7d9      	b.n	8002516 <_printf_common+0x92>
	...

08002564 <_printf_i>:
 8002564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002568:	7e0f      	ldrb	r7, [r1, #24]
 800256a:	4691      	mov	r9, r2
 800256c:	2f78      	cmp	r7, #120	; 0x78
 800256e:	4680      	mov	r8, r0
 8002570:	460c      	mov	r4, r1
 8002572:	469a      	mov	sl, r3
 8002574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800257a:	d807      	bhi.n	800258c <_printf_i+0x28>
 800257c:	2f62      	cmp	r7, #98	; 0x62
 800257e:	d80a      	bhi.n	8002596 <_printf_i+0x32>
 8002580:	2f00      	cmp	r7, #0
 8002582:	f000 80d9 	beq.w	8002738 <_printf_i+0x1d4>
 8002586:	2f58      	cmp	r7, #88	; 0x58
 8002588:	f000 80a4 	beq.w	80026d4 <_printf_i+0x170>
 800258c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002594:	e03a      	b.n	800260c <_printf_i+0xa8>
 8002596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800259a:	2b15      	cmp	r3, #21
 800259c:	d8f6      	bhi.n	800258c <_printf_i+0x28>
 800259e:	a101      	add	r1, pc, #4	; (adr r1, 80025a4 <_printf_i+0x40>)
 80025a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025a4:	080025fd 	.word	0x080025fd
 80025a8:	08002611 	.word	0x08002611
 80025ac:	0800258d 	.word	0x0800258d
 80025b0:	0800258d 	.word	0x0800258d
 80025b4:	0800258d 	.word	0x0800258d
 80025b8:	0800258d 	.word	0x0800258d
 80025bc:	08002611 	.word	0x08002611
 80025c0:	0800258d 	.word	0x0800258d
 80025c4:	0800258d 	.word	0x0800258d
 80025c8:	0800258d 	.word	0x0800258d
 80025cc:	0800258d 	.word	0x0800258d
 80025d0:	0800271f 	.word	0x0800271f
 80025d4:	08002641 	.word	0x08002641
 80025d8:	08002701 	.word	0x08002701
 80025dc:	0800258d 	.word	0x0800258d
 80025e0:	0800258d 	.word	0x0800258d
 80025e4:	08002741 	.word	0x08002741
 80025e8:	0800258d 	.word	0x0800258d
 80025ec:	08002641 	.word	0x08002641
 80025f0:	0800258d 	.word	0x0800258d
 80025f4:	0800258d 	.word	0x0800258d
 80025f8:	08002709 	.word	0x08002709
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	1d1a      	adds	r2, r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	602a      	str	r2, [r5, #0]
 8002604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800260c:	2301      	movs	r3, #1
 800260e:	e0a4      	b.n	800275a <_printf_i+0x1f6>
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	6829      	ldr	r1, [r5, #0]
 8002614:	0606      	lsls	r6, r0, #24
 8002616:	f101 0304 	add.w	r3, r1, #4
 800261a:	d50a      	bpl.n	8002632 <_printf_i+0xce>
 800261c:	680e      	ldr	r6, [r1, #0]
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	2e00      	cmp	r6, #0
 8002622:	da03      	bge.n	800262c <_printf_i+0xc8>
 8002624:	232d      	movs	r3, #45	; 0x2d
 8002626:	4276      	negs	r6, r6
 8002628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800262c:	230a      	movs	r3, #10
 800262e:	485e      	ldr	r0, [pc, #376]	; (80027a8 <_printf_i+0x244>)
 8002630:	e019      	b.n	8002666 <_printf_i+0x102>
 8002632:	680e      	ldr	r6, [r1, #0]
 8002634:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002638:	602b      	str	r3, [r5, #0]
 800263a:	bf18      	it	ne
 800263c:	b236      	sxthne	r6, r6
 800263e:	e7ef      	b.n	8002620 <_printf_i+0xbc>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	6820      	ldr	r0, [r4, #0]
 8002644:	1d19      	adds	r1, r3, #4
 8002646:	6029      	str	r1, [r5, #0]
 8002648:	0601      	lsls	r1, r0, #24
 800264a:	d501      	bpl.n	8002650 <_printf_i+0xec>
 800264c:	681e      	ldr	r6, [r3, #0]
 800264e:	e002      	b.n	8002656 <_printf_i+0xf2>
 8002650:	0646      	lsls	r6, r0, #25
 8002652:	d5fb      	bpl.n	800264c <_printf_i+0xe8>
 8002654:	881e      	ldrh	r6, [r3, #0]
 8002656:	2f6f      	cmp	r7, #111	; 0x6f
 8002658:	bf0c      	ite	eq
 800265a:	2308      	moveq	r3, #8
 800265c:	230a      	movne	r3, #10
 800265e:	4852      	ldr	r0, [pc, #328]	; (80027a8 <_printf_i+0x244>)
 8002660:	2100      	movs	r1, #0
 8002662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002666:	6865      	ldr	r5, [r4, #4]
 8002668:	2d00      	cmp	r5, #0
 800266a:	bfa8      	it	ge
 800266c:	6821      	ldrge	r1, [r4, #0]
 800266e:	60a5      	str	r5, [r4, #8]
 8002670:	bfa4      	itt	ge
 8002672:	f021 0104 	bicge.w	r1, r1, #4
 8002676:	6021      	strge	r1, [r4, #0]
 8002678:	b90e      	cbnz	r6, 800267e <_printf_i+0x11a>
 800267a:	2d00      	cmp	r5, #0
 800267c:	d04d      	beq.n	800271a <_printf_i+0x1b6>
 800267e:	4615      	mov	r5, r2
 8002680:	fbb6 f1f3 	udiv	r1, r6, r3
 8002684:	fb03 6711 	mls	r7, r3, r1, r6
 8002688:	5dc7      	ldrb	r7, [r0, r7]
 800268a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800268e:	4637      	mov	r7, r6
 8002690:	42bb      	cmp	r3, r7
 8002692:	460e      	mov	r6, r1
 8002694:	d9f4      	bls.n	8002680 <_printf_i+0x11c>
 8002696:	2b08      	cmp	r3, #8
 8002698:	d10b      	bne.n	80026b2 <_printf_i+0x14e>
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	07de      	lsls	r6, r3, #31
 800269e:	d508      	bpl.n	80026b2 <_printf_i+0x14e>
 80026a0:	6923      	ldr	r3, [r4, #16]
 80026a2:	6861      	ldr	r1, [r4, #4]
 80026a4:	4299      	cmp	r1, r3
 80026a6:	bfde      	ittt	le
 80026a8:	2330      	movle	r3, #48	; 0x30
 80026aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026b2:	1b52      	subs	r2, r2, r5
 80026b4:	6122      	str	r2, [r4, #16]
 80026b6:	464b      	mov	r3, r9
 80026b8:	4621      	mov	r1, r4
 80026ba:	4640      	mov	r0, r8
 80026bc:	f8cd a000 	str.w	sl, [sp]
 80026c0:	aa03      	add	r2, sp, #12
 80026c2:	f7ff fedf 	bl	8002484 <_printf_common>
 80026c6:	3001      	adds	r0, #1
 80026c8:	d14c      	bne.n	8002764 <_printf_i+0x200>
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295
 80026ce:	b004      	add	sp, #16
 80026d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026d4:	4834      	ldr	r0, [pc, #208]	; (80027a8 <_printf_i+0x244>)
 80026d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026da:	6829      	ldr	r1, [r5, #0]
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f851 6b04 	ldr.w	r6, [r1], #4
 80026e2:	6029      	str	r1, [r5, #0]
 80026e4:	061d      	lsls	r5, r3, #24
 80026e6:	d514      	bpl.n	8002712 <_printf_i+0x1ae>
 80026e8:	07df      	lsls	r7, r3, #31
 80026ea:	bf44      	itt	mi
 80026ec:	f043 0320 	orrmi.w	r3, r3, #32
 80026f0:	6023      	strmi	r3, [r4, #0]
 80026f2:	b91e      	cbnz	r6, 80026fc <_printf_i+0x198>
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	f023 0320 	bic.w	r3, r3, #32
 80026fa:	6023      	str	r3, [r4, #0]
 80026fc:	2310      	movs	r3, #16
 80026fe:	e7af      	b.n	8002660 <_printf_i+0xfc>
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f043 0320 	orr.w	r3, r3, #32
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	2378      	movs	r3, #120	; 0x78
 800270a:	4828      	ldr	r0, [pc, #160]	; (80027ac <_printf_i+0x248>)
 800270c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002710:	e7e3      	b.n	80026da <_printf_i+0x176>
 8002712:	0659      	lsls	r1, r3, #25
 8002714:	bf48      	it	mi
 8002716:	b2b6      	uxthmi	r6, r6
 8002718:	e7e6      	b.n	80026e8 <_printf_i+0x184>
 800271a:	4615      	mov	r5, r2
 800271c:	e7bb      	b.n	8002696 <_printf_i+0x132>
 800271e:	682b      	ldr	r3, [r5, #0]
 8002720:	6826      	ldr	r6, [r4, #0]
 8002722:	1d18      	adds	r0, r3, #4
 8002724:	6961      	ldr	r1, [r4, #20]
 8002726:	6028      	str	r0, [r5, #0]
 8002728:	0635      	lsls	r5, r6, #24
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	d501      	bpl.n	8002732 <_printf_i+0x1ce>
 800272e:	6019      	str	r1, [r3, #0]
 8002730:	e002      	b.n	8002738 <_printf_i+0x1d4>
 8002732:	0670      	lsls	r0, r6, #25
 8002734:	d5fb      	bpl.n	800272e <_printf_i+0x1ca>
 8002736:	8019      	strh	r1, [r3, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	4615      	mov	r5, r2
 800273c:	6123      	str	r3, [r4, #16]
 800273e:	e7ba      	b.n	80026b6 <_printf_i+0x152>
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	2100      	movs	r1, #0
 8002744:	1d1a      	adds	r2, r3, #4
 8002746:	602a      	str	r2, [r5, #0]
 8002748:	681d      	ldr	r5, [r3, #0]
 800274a:	6862      	ldr	r2, [r4, #4]
 800274c:	4628      	mov	r0, r5
 800274e:	f001 fa21 	bl	8003b94 <memchr>
 8002752:	b108      	cbz	r0, 8002758 <_printf_i+0x1f4>
 8002754:	1b40      	subs	r0, r0, r5
 8002756:	6060      	str	r0, [r4, #4]
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	6123      	str	r3, [r4, #16]
 800275c:	2300      	movs	r3, #0
 800275e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002762:	e7a8      	b.n	80026b6 <_printf_i+0x152>
 8002764:	462a      	mov	r2, r5
 8002766:	4649      	mov	r1, r9
 8002768:	4640      	mov	r0, r8
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	47d0      	blx	sl
 800276e:	3001      	adds	r0, #1
 8002770:	d0ab      	beq.n	80026ca <_printf_i+0x166>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	079b      	lsls	r3, r3, #30
 8002776:	d413      	bmi.n	80027a0 <_printf_i+0x23c>
 8002778:	68e0      	ldr	r0, [r4, #12]
 800277a:	9b03      	ldr	r3, [sp, #12]
 800277c:	4298      	cmp	r0, r3
 800277e:	bfb8      	it	lt
 8002780:	4618      	movlt	r0, r3
 8002782:	e7a4      	b.n	80026ce <_printf_i+0x16a>
 8002784:	2301      	movs	r3, #1
 8002786:	4632      	mov	r2, r6
 8002788:	4649      	mov	r1, r9
 800278a:	4640      	mov	r0, r8
 800278c:	47d0      	blx	sl
 800278e:	3001      	adds	r0, #1
 8002790:	d09b      	beq.n	80026ca <_printf_i+0x166>
 8002792:	3501      	adds	r5, #1
 8002794:	68e3      	ldr	r3, [r4, #12]
 8002796:	9903      	ldr	r1, [sp, #12]
 8002798:	1a5b      	subs	r3, r3, r1
 800279a:	42ab      	cmp	r3, r5
 800279c:	dcf2      	bgt.n	8002784 <_printf_i+0x220>
 800279e:	e7eb      	b.n	8002778 <_printf_i+0x214>
 80027a0:	2500      	movs	r5, #0
 80027a2:	f104 0619 	add.w	r6, r4, #25
 80027a6:	e7f5      	b.n	8002794 <_printf_i+0x230>
 80027a8:	08004b36 	.word	0x08004b36
 80027ac:	08004b47 	.word	0x08004b47

080027b0 <iprintf>:
 80027b0:	b40f      	push	{r0, r1, r2, r3}
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <iprintf+0x2c>)
 80027b4:	b513      	push	{r0, r1, r4, lr}
 80027b6:	681c      	ldr	r4, [r3, #0]
 80027b8:	b124      	cbz	r4, 80027c4 <iprintf+0x14>
 80027ba:	69a3      	ldr	r3, [r4, #24]
 80027bc:	b913      	cbnz	r3, 80027c4 <iprintf+0x14>
 80027be:	4620      	mov	r0, r4
 80027c0:	f001 f8d6 	bl	8003970 <__sinit>
 80027c4:	ab05      	add	r3, sp, #20
 80027c6:	4620      	mov	r0, r4
 80027c8:	9a04      	ldr	r2, [sp, #16]
 80027ca:	68a1      	ldr	r1, [r4, #8]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f001 fe97 	bl	8004500 <_vfiprintf_r>
 80027d2:	b002      	add	sp, #8
 80027d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d8:	b004      	add	sp, #16
 80027da:	4770      	bx	lr
 80027dc:	2000000c 	.word	0x2000000c

080027e0 <_puts_r>:
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	460e      	mov	r6, r1
 80027e4:	4605      	mov	r5, r0
 80027e6:	b118      	cbz	r0, 80027f0 <_puts_r+0x10>
 80027e8:	6983      	ldr	r3, [r0, #24]
 80027ea:	b90b      	cbnz	r3, 80027f0 <_puts_r+0x10>
 80027ec:	f001 f8c0 	bl	8003970 <__sinit>
 80027f0:	69ab      	ldr	r3, [r5, #24]
 80027f2:	68ac      	ldr	r4, [r5, #8]
 80027f4:	b913      	cbnz	r3, 80027fc <_puts_r+0x1c>
 80027f6:	4628      	mov	r0, r5
 80027f8:	f001 f8ba 	bl	8003970 <__sinit>
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <_puts_r+0xd0>)
 80027fe:	429c      	cmp	r4, r3
 8002800:	d120      	bne.n	8002844 <_puts_r+0x64>
 8002802:	686c      	ldr	r4, [r5, #4]
 8002804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002806:	07db      	lsls	r3, r3, #31
 8002808:	d405      	bmi.n	8002816 <_puts_r+0x36>
 800280a:	89a3      	ldrh	r3, [r4, #12]
 800280c:	0598      	lsls	r0, r3, #22
 800280e:	d402      	bmi.n	8002816 <_puts_r+0x36>
 8002810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002812:	f001 f950 	bl	8003ab6 <__retarget_lock_acquire_recursive>
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	0719      	lsls	r1, r3, #28
 800281a:	d51d      	bpl.n	8002858 <_puts_r+0x78>
 800281c:	6923      	ldr	r3, [r4, #16]
 800281e:	b1db      	cbz	r3, 8002858 <_puts_r+0x78>
 8002820:	3e01      	subs	r6, #1
 8002822:	68a3      	ldr	r3, [r4, #8]
 8002824:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002828:	3b01      	subs	r3, #1
 800282a:	60a3      	str	r3, [r4, #8]
 800282c:	bb39      	cbnz	r1, 800287e <_puts_r+0x9e>
 800282e:	2b00      	cmp	r3, #0
 8002830:	da38      	bge.n	80028a4 <_puts_r+0xc4>
 8002832:	4622      	mov	r2, r4
 8002834:	210a      	movs	r1, #10
 8002836:	4628      	mov	r0, r5
 8002838:	f000 f848 	bl	80028cc <__swbuf_r>
 800283c:	3001      	adds	r0, #1
 800283e:	d011      	beq.n	8002864 <_puts_r+0x84>
 8002840:	250a      	movs	r5, #10
 8002842:	e011      	b.n	8002868 <_puts_r+0x88>
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <_puts_r+0xd4>)
 8002846:	429c      	cmp	r4, r3
 8002848:	d101      	bne.n	800284e <_puts_r+0x6e>
 800284a:	68ac      	ldr	r4, [r5, #8]
 800284c:	e7da      	b.n	8002804 <_puts_r+0x24>
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <_puts_r+0xd8>)
 8002850:	429c      	cmp	r4, r3
 8002852:	bf08      	it	eq
 8002854:	68ec      	ldreq	r4, [r5, #12]
 8002856:	e7d5      	b.n	8002804 <_puts_r+0x24>
 8002858:	4621      	mov	r1, r4
 800285a:	4628      	mov	r0, r5
 800285c:	f000 f888 	bl	8002970 <__swsetup_r>
 8002860:	2800      	cmp	r0, #0
 8002862:	d0dd      	beq.n	8002820 <_puts_r+0x40>
 8002864:	f04f 35ff 	mov.w	r5, #4294967295
 8002868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800286a:	07da      	lsls	r2, r3, #31
 800286c:	d405      	bmi.n	800287a <_puts_r+0x9a>
 800286e:	89a3      	ldrh	r3, [r4, #12]
 8002870:	059b      	lsls	r3, r3, #22
 8002872:	d402      	bmi.n	800287a <_puts_r+0x9a>
 8002874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002876:	f001 f91f 	bl	8003ab8 <__retarget_lock_release_recursive>
 800287a:	4628      	mov	r0, r5
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	2b00      	cmp	r3, #0
 8002880:	da04      	bge.n	800288c <_puts_r+0xac>
 8002882:	69a2      	ldr	r2, [r4, #24]
 8002884:	429a      	cmp	r2, r3
 8002886:	dc06      	bgt.n	8002896 <_puts_r+0xb6>
 8002888:	290a      	cmp	r1, #10
 800288a:	d004      	beq.n	8002896 <_puts_r+0xb6>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	6022      	str	r2, [r4, #0]
 8002892:	7019      	strb	r1, [r3, #0]
 8002894:	e7c5      	b.n	8002822 <_puts_r+0x42>
 8002896:	4622      	mov	r2, r4
 8002898:	4628      	mov	r0, r5
 800289a:	f000 f817 	bl	80028cc <__swbuf_r>
 800289e:	3001      	adds	r0, #1
 80028a0:	d1bf      	bne.n	8002822 <_puts_r+0x42>
 80028a2:	e7df      	b.n	8002864 <_puts_r+0x84>
 80028a4:	250a      	movs	r5, #10
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	6022      	str	r2, [r4, #0]
 80028ac:	701d      	strb	r5, [r3, #0]
 80028ae:	e7db      	b.n	8002868 <_puts_r+0x88>
 80028b0:	08004c08 	.word	0x08004c08
 80028b4:	08004c28 	.word	0x08004c28
 80028b8:	08004be8 	.word	0x08004be8

080028bc <puts>:
 80028bc:	4b02      	ldr	r3, [pc, #8]	; (80028c8 <puts+0xc>)
 80028be:	4601      	mov	r1, r0
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	f7ff bf8d 	b.w	80027e0 <_puts_r>
 80028c6:	bf00      	nop
 80028c8:	2000000c 	.word	0x2000000c

080028cc <__swbuf_r>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	460e      	mov	r6, r1
 80028d0:	4614      	mov	r4, r2
 80028d2:	4605      	mov	r5, r0
 80028d4:	b118      	cbz	r0, 80028de <__swbuf_r+0x12>
 80028d6:	6983      	ldr	r3, [r0, #24]
 80028d8:	b90b      	cbnz	r3, 80028de <__swbuf_r+0x12>
 80028da:	f001 f849 	bl	8003970 <__sinit>
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <__swbuf_r+0x98>)
 80028e0:	429c      	cmp	r4, r3
 80028e2:	d12b      	bne.n	800293c <__swbuf_r+0x70>
 80028e4:	686c      	ldr	r4, [r5, #4]
 80028e6:	69a3      	ldr	r3, [r4, #24]
 80028e8:	60a3      	str	r3, [r4, #8]
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	071a      	lsls	r2, r3, #28
 80028ee:	d52f      	bpl.n	8002950 <__swbuf_r+0x84>
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	b36b      	cbz	r3, 8002950 <__swbuf_r+0x84>
 80028f4:	6923      	ldr	r3, [r4, #16]
 80028f6:	6820      	ldr	r0, [r4, #0]
 80028f8:	b2f6      	uxtb	r6, r6
 80028fa:	1ac0      	subs	r0, r0, r3
 80028fc:	6963      	ldr	r3, [r4, #20]
 80028fe:	4637      	mov	r7, r6
 8002900:	4283      	cmp	r3, r0
 8002902:	dc04      	bgt.n	800290e <__swbuf_r+0x42>
 8002904:	4621      	mov	r1, r4
 8002906:	4628      	mov	r0, r5
 8002908:	f000 ff9e 	bl	8003848 <_fflush_r>
 800290c:	bb30      	cbnz	r0, 800295c <__swbuf_r+0x90>
 800290e:	68a3      	ldr	r3, [r4, #8]
 8002910:	3001      	adds	r0, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	60a3      	str	r3, [r4, #8]
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	6022      	str	r2, [r4, #0]
 800291c:	701e      	strb	r6, [r3, #0]
 800291e:	6963      	ldr	r3, [r4, #20]
 8002920:	4283      	cmp	r3, r0
 8002922:	d004      	beq.n	800292e <__swbuf_r+0x62>
 8002924:	89a3      	ldrh	r3, [r4, #12]
 8002926:	07db      	lsls	r3, r3, #31
 8002928:	d506      	bpl.n	8002938 <__swbuf_r+0x6c>
 800292a:	2e0a      	cmp	r6, #10
 800292c:	d104      	bne.n	8002938 <__swbuf_r+0x6c>
 800292e:	4621      	mov	r1, r4
 8002930:	4628      	mov	r0, r5
 8002932:	f000 ff89 	bl	8003848 <_fflush_r>
 8002936:	b988      	cbnz	r0, 800295c <__swbuf_r+0x90>
 8002938:	4638      	mov	r0, r7
 800293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <__swbuf_r+0x9c>)
 800293e:	429c      	cmp	r4, r3
 8002940:	d101      	bne.n	8002946 <__swbuf_r+0x7a>
 8002942:	68ac      	ldr	r4, [r5, #8]
 8002944:	e7cf      	b.n	80028e6 <__swbuf_r+0x1a>
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <__swbuf_r+0xa0>)
 8002948:	429c      	cmp	r4, r3
 800294a:	bf08      	it	eq
 800294c:	68ec      	ldreq	r4, [r5, #12]
 800294e:	e7ca      	b.n	80028e6 <__swbuf_r+0x1a>
 8002950:	4621      	mov	r1, r4
 8002952:	4628      	mov	r0, r5
 8002954:	f000 f80c 	bl	8002970 <__swsetup_r>
 8002958:	2800      	cmp	r0, #0
 800295a:	d0cb      	beq.n	80028f4 <__swbuf_r+0x28>
 800295c:	f04f 37ff 	mov.w	r7, #4294967295
 8002960:	e7ea      	b.n	8002938 <__swbuf_r+0x6c>
 8002962:	bf00      	nop
 8002964:	08004c08 	.word	0x08004c08
 8002968:	08004c28 	.word	0x08004c28
 800296c:	08004be8 	.word	0x08004be8

08002970 <__swsetup_r>:
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <__swsetup_r+0xcc>)
 8002972:	b570      	push	{r4, r5, r6, lr}
 8002974:	681d      	ldr	r5, [r3, #0]
 8002976:	4606      	mov	r6, r0
 8002978:	460c      	mov	r4, r1
 800297a:	b125      	cbz	r5, 8002986 <__swsetup_r+0x16>
 800297c:	69ab      	ldr	r3, [r5, #24]
 800297e:	b913      	cbnz	r3, 8002986 <__swsetup_r+0x16>
 8002980:	4628      	mov	r0, r5
 8002982:	f000 fff5 	bl	8003970 <__sinit>
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <__swsetup_r+0xd0>)
 8002988:	429c      	cmp	r4, r3
 800298a:	d10f      	bne.n	80029ac <__swsetup_r+0x3c>
 800298c:	686c      	ldr	r4, [r5, #4]
 800298e:	89a3      	ldrh	r3, [r4, #12]
 8002990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002994:	0719      	lsls	r1, r3, #28
 8002996:	d42c      	bmi.n	80029f2 <__swsetup_r+0x82>
 8002998:	06dd      	lsls	r5, r3, #27
 800299a:	d411      	bmi.n	80029c0 <__swsetup_r+0x50>
 800299c:	2309      	movs	r3, #9
 800299e:	6033      	str	r3, [r6, #0]
 80029a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	81a3      	strh	r3, [r4, #12]
 80029aa:	e03e      	b.n	8002a2a <__swsetup_r+0xba>
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <__swsetup_r+0xd4>)
 80029ae:	429c      	cmp	r4, r3
 80029b0:	d101      	bne.n	80029b6 <__swsetup_r+0x46>
 80029b2:	68ac      	ldr	r4, [r5, #8]
 80029b4:	e7eb      	b.n	800298e <__swsetup_r+0x1e>
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <__swsetup_r+0xd8>)
 80029b8:	429c      	cmp	r4, r3
 80029ba:	bf08      	it	eq
 80029bc:	68ec      	ldreq	r4, [r5, #12]
 80029be:	e7e6      	b.n	800298e <__swsetup_r+0x1e>
 80029c0:	0758      	lsls	r0, r3, #29
 80029c2:	d512      	bpl.n	80029ea <__swsetup_r+0x7a>
 80029c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029c6:	b141      	cbz	r1, 80029da <__swsetup_r+0x6a>
 80029c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029cc:	4299      	cmp	r1, r3
 80029ce:	d002      	beq.n	80029d6 <__swsetup_r+0x66>
 80029d0:	4630      	mov	r0, r6
 80029d2:	f001 fc91 	bl	80042f8 <_free_r>
 80029d6:	2300      	movs	r3, #0
 80029d8:	6363      	str	r3, [r4, #52]	; 0x34
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029e0:	81a3      	strh	r3, [r4, #12]
 80029e2:	2300      	movs	r3, #0
 80029e4:	6063      	str	r3, [r4, #4]
 80029e6:	6923      	ldr	r3, [r4, #16]
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	81a3      	strh	r3, [r4, #12]
 80029f2:	6923      	ldr	r3, [r4, #16]
 80029f4:	b94b      	cbnz	r3, 8002a0a <__swsetup_r+0x9a>
 80029f6:	89a3      	ldrh	r3, [r4, #12]
 80029f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a00:	d003      	beq.n	8002a0a <__swsetup_r+0x9a>
 8002a02:	4621      	mov	r1, r4
 8002a04:	4630      	mov	r0, r6
 8002a06:	f001 f87d 	bl	8003b04 <__smakebuf_r>
 8002a0a:	89a0      	ldrh	r0, [r4, #12]
 8002a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a10:	f010 0301 	ands.w	r3, r0, #1
 8002a14:	d00a      	beq.n	8002a2c <__swsetup_r+0xbc>
 8002a16:	2300      	movs	r3, #0
 8002a18:	60a3      	str	r3, [r4, #8]
 8002a1a:	6963      	ldr	r3, [r4, #20]
 8002a1c:	425b      	negs	r3, r3
 8002a1e:	61a3      	str	r3, [r4, #24]
 8002a20:	6923      	ldr	r3, [r4, #16]
 8002a22:	b943      	cbnz	r3, 8002a36 <__swsetup_r+0xc6>
 8002a24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a28:	d1ba      	bne.n	80029a0 <__swsetup_r+0x30>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	0781      	lsls	r1, r0, #30
 8002a2e:	bf58      	it	pl
 8002a30:	6963      	ldrpl	r3, [r4, #20]
 8002a32:	60a3      	str	r3, [r4, #8]
 8002a34:	e7f4      	b.n	8002a20 <__swsetup_r+0xb0>
 8002a36:	2000      	movs	r0, #0
 8002a38:	e7f7      	b.n	8002a2a <__swsetup_r+0xba>
 8002a3a:	bf00      	nop
 8002a3c:	2000000c 	.word	0x2000000c
 8002a40:	08004c08 	.word	0x08004c08
 8002a44:	08004c28 	.word	0x08004c28
 8002a48:	08004be8 	.word	0x08004be8

08002a4c <quorem>:
 8002a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a50:	6903      	ldr	r3, [r0, #16]
 8002a52:	690c      	ldr	r4, [r1, #16]
 8002a54:	4607      	mov	r7, r0
 8002a56:	42a3      	cmp	r3, r4
 8002a58:	f2c0 8082 	blt.w	8002b60 <quorem+0x114>
 8002a5c:	3c01      	subs	r4, #1
 8002a5e:	f100 0514 	add.w	r5, r0, #20
 8002a62:	f101 0814 	add.w	r8, r1, #20
 8002a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a74:	3301      	adds	r3, #1
 8002a76:	429a      	cmp	r2, r3
 8002a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a84:	d331      	bcc.n	8002aea <quorem+0x9e>
 8002a86:	f04f 0e00 	mov.w	lr, #0
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	46ac      	mov	ip, r5
 8002a8e:	46f2      	mov	sl, lr
 8002a90:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a94:	b293      	uxth	r3, r2
 8002a96:	fb06 e303 	mla	r3, r6, r3, lr
 8002a9a:	0c12      	lsrs	r2, r2, #16
 8002a9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	fb06 e202 	mla	r2, r6, r2, lr
 8002aa6:	ebaa 0303 	sub.w	r3, sl, r3
 8002aaa:	f8dc a000 	ldr.w	sl, [ip]
 8002aae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002ab2:	fa1f fa8a 	uxth.w	sl, sl
 8002ab6:	4453      	add	r3, sl
 8002ab8:	f8dc a000 	ldr.w	sl, [ip]
 8002abc:	b292      	uxth	r2, r2
 8002abe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002ac2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002acc:	4581      	cmp	r9, r0
 8002ace:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002ad2:	f84c 3b04 	str.w	r3, [ip], #4
 8002ad6:	d2db      	bcs.n	8002a90 <quorem+0x44>
 8002ad8:	f855 300b 	ldr.w	r3, [r5, fp]
 8002adc:	b92b      	cbnz	r3, 8002aea <quorem+0x9e>
 8002ade:	9b01      	ldr	r3, [sp, #4]
 8002ae0:	3b04      	subs	r3, #4
 8002ae2:	429d      	cmp	r5, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	d32f      	bcc.n	8002b48 <quorem+0xfc>
 8002ae8:	613c      	str	r4, [r7, #16]
 8002aea:	4638      	mov	r0, r7
 8002aec:	f001 faec 	bl	80040c8 <__mcmp>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	db25      	blt.n	8002b40 <quorem+0xf4>
 8002af4:	4628      	mov	r0, r5
 8002af6:	f04f 0c00 	mov.w	ip, #0
 8002afa:	3601      	adds	r6, #1
 8002afc:	f858 1b04 	ldr.w	r1, [r8], #4
 8002b00:	f8d0 e000 	ldr.w	lr, [r0]
 8002b04:	b28b      	uxth	r3, r1
 8002b06:	ebac 0303 	sub.w	r3, ip, r3
 8002b0a:	fa1f f28e 	uxth.w	r2, lr
 8002b0e:	4413      	add	r3, r2
 8002b10:	0c0a      	lsrs	r2, r1, #16
 8002b12:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b20:	45c1      	cmp	r9, r8
 8002b22:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b26:	f840 3b04 	str.w	r3, [r0], #4
 8002b2a:	d2e7      	bcs.n	8002afc <quorem+0xb0>
 8002b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b34:	b922      	cbnz	r2, 8002b40 <quorem+0xf4>
 8002b36:	3b04      	subs	r3, #4
 8002b38:	429d      	cmp	r5, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	d30a      	bcc.n	8002b54 <quorem+0x108>
 8002b3e:	613c      	str	r4, [r7, #16]
 8002b40:	4630      	mov	r0, r6
 8002b42:	b003      	add	sp, #12
 8002b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	3b04      	subs	r3, #4
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d1cb      	bne.n	8002ae8 <quorem+0x9c>
 8002b50:	3c01      	subs	r4, #1
 8002b52:	e7c6      	b.n	8002ae2 <quorem+0x96>
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	3b04      	subs	r3, #4
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	d1f0      	bne.n	8002b3e <quorem+0xf2>
 8002b5c:	3c01      	subs	r4, #1
 8002b5e:	e7eb      	b.n	8002b38 <quorem+0xec>
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7ee      	b.n	8002b42 <quorem+0xf6>
 8002b64:	0000      	movs	r0, r0
	...

08002b68 <_dtoa_r>:
 8002b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	461f      	mov	r7, r3
 8002b70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002b72:	b099      	sub	sp, #100	; 0x64
 8002b74:	4605      	mov	r5, r0
 8002b76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002b7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002b7e:	b974      	cbnz	r4, 8002b9e <_dtoa_r+0x36>
 8002b80:	2010      	movs	r0, #16
 8002b82:	f000 ffff 	bl	8003b84 <malloc>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6268      	str	r0, [r5, #36]	; 0x24
 8002b8a:	b920      	cbnz	r0, 8002b96 <_dtoa_r+0x2e>
 8002b8c:	21ea      	movs	r1, #234	; 0xea
 8002b8e:	4ba8      	ldr	r3, [pc, #672]	; (8002e30 <_dtoa_r+0x2c8>)
 8002b90:	48a8      	ldr	r0, [pc, #672]	; (8002e34 <_dtoa_r+0x2cc>)
 8002b92:	f001 fe4b 	bl	800482c <__assert_func>
 8002b96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002b9a:	6004      	str	r4, [r0, #0]
 8002b9c:	60c4      	str	r4, [r0, #12]
 8002b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	b151      	cbz	r1, 8002bba <_dtoa_r+0x52>
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	4093      	lsls	r3, r2
 8002baa:	604a      	str	r2, [r1, #4]
 8002bac:	608b      	str	r3, [r1, #8]
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f001 f84c 	bl	8003c4c <_Bfree>
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	1e3b      	subs	r3, r7, #0
 8002bbc:	bfaf      	iteee	ge
 8002bbe:	2300      	movge	r3, #0
 8002bc0:	2201      	movlt	r2, #1
 8002bc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	9305      	strlt	r3, [sp, #20]
 8002bc8:	bfa8      	it	ge
 8002bca:	f8c8 3000 	strge.w	r3, [r8]
 8002bce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002bd2:	4b99      	ldr	r3, [pc, #612]	; (8002e38 <_dtoa_r+0x2d0>)
 8002bd4:	bfb8      	it	lt
 8002bd6:	f8c8 2000 	strlt.w	r2, [r8]
 8002bda:	ea33 0309 	bics.w	r3, r3, r9
 8002bde:	d119      	bne.n	8002c14 <_dtoa_r+0xac>
 8002be0:	f242 730f 	movw	r3, #9999	; 0x270f
 8002be4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002bec:	4333      	orrs	r3, r6
 8002bee:	f000 857f 	beq.w	80036f0 <_dtoa_r+0xb88>
 8002bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002bf4:	b953      	cbnz	r3, 8002c0c <_dtoa_r+0xa4>
 8002bf6:	4b91      	ldr	r3, [pc, #580]	; (8002e3c <_dtoa_r+0x2d4>)
 8002bf8:	e022      	b.n	8002c40 <_dtoa_r+0xd8>
 8002bfa:	4b91      	ldr	r3, [pc, #580]	; (8002e40 <_dtoa_r+0x2d8>)
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	9803      	ldr	r0, [sp, #12]
 8002c06:	b019      	add	sp, #100	; 0x64
 8002c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c0c:	4b8b      	ldr	r3, [pc, #556]	; (8002e3c <_dtoa_r+0x2d4>)
 8002c0e:	9303      	str	r3, [sp, #12]
 8002c10:	3303      	adds	r3, #3
 8002c12:	e7f5      	b.n	8002c00 <_dtoa_r+0x98>
 8002c14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002c18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	2300      	movs	r3, #0
 8002c24:	f7fd fec0 	bl	80009a8 <__aeabi_dcmpeq>
 8002c28:	4680      	mov	r8, r0
 8002c2a:	b158      	cbz	r0, 8002c44 <_dtoa_r+0xdc>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8558 	beq.w	80036ea <_dtoa_r+0xb82>
 8002c3a:	4882      	ldr	r0, [pc, #520]	; (8002e44 <_dtoa_r+0x2dc>)
 8002c3c:	6018      	str	r0, [r3, #0]
 8002c3e:	1e43      	subs	r3, r0, #1
 8002c40:	9303      	str	r3, [sp, #12]
 8002c42:	e7df      	b.n	8002c04 <_dtoa_r+0x9c>
 8002c44:	ab16      	add	r3, sp, #88	; 0x58
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	ab17      	add	r3, sp, #92	; 0x5c
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002c52:	f001 fae1 	bl	8004218 <__d2b>
 8002c56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002c5a:	4683      	mov	fp, r0
 8002c5c:	2c00      	cmp	r4, #0
 8002c5e:	d07f      	beq.n	8002d60 <_dtoa_r+0x1f8>
 8002c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002c72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002c76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4b72      	ldr	r3, [pc, #456]	; (8002e48 <_dtoa_r+0x2e0>)
 8002c7e:	f7fd fa73 	bl	8000168 <__aeabi_dsub>
 8002c82:	a365      	add	r3, pc, #404	; (adr r3, 8002e18 <_dtoa_r+0x2b0>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fc26 	bl	80004d8 <__aeabi_dmul>
 8002c8c:	a364      	add	r3, pc, #400	; (adr r3, 8002e20 <_dtoa_r+0x2b8>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fa6b 	bl	800016c <__adddf3>
 8002c96:	4606      	mov	r6, r0
 8002c98:	4620      	mov	r0, r4
 8002c9a:	460f      	mov	r7, r1
 8002c9c:	f7fd fbb2 	bl	8000404 <__aeabi_i2d>
 8002ca0:	a361      	add	r3, pc, #388	; (adr r3, 8002e28 <_dtoa_r+0x2c0>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd fc17 	bl	80004d8 <__aeabi_dmul>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4630      	mov	r0, r6
 8002cb0:	4639      	mov	r1, r7
 8002cb2:	f7fd fa5b 	bl	800016c <__adddf3>
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	460f      	mov	r7, r1
 8002cba:	f7fd febd 	bl	8000a38 <__aeabi_d2iz>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	4682      	mov	sl, r0
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	4639      	mov	r1, r7
 8002cc8:	f7fd fe78 	bl	80009bc <__aeabi_dcmplt>
 8002ccc:	b148      	cbz	r0, 8002ce2 <_dtoa_r+0x17a>
 8002cce:	4650      	mov	r0, sl
 8002cd0:	f7fd fb98 	bl	8000404 <__aeabi_i2d>
 8002cd4:	4632      	mov	r2, r6
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	f7fd fe66 	bl	80009a8 <__aeabi_dcmpeq>
 8002cdc:	b908      	cbnz	r0, 8002ce2 <_dtoa_r+0x17a>
 8002cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002ce2:	f1ba 0f16 	cmp.w	sl, #22
 8002ce6:	d858      	bhi.n	8002d9a <_dtoa_r+0x232>
 8002ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002cec:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <_dtoa_r+0x2e4>)
 8002cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fe61 	bl	80009bc <__aeabi_dcmplt>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d04f      	beq.n	8002d9e <_dtoa_r+0x236>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002d08:	1b1c      	subs	r4, r3, r4
 8002d0a:	1e63      	subs	r3, r4, #1
 8002d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d0e:	bf49      	itett	mi
 8002d10:	f1c4 0301 	rsbmi	r3, r4, #1
 8002d14:	2300      	movpl	r3, #0
 8002d16:	9306      	strmi	r3, [sp, #24]
 8002d18:	2300      	movmi	r3, #0
 8002d1a:	bf54      	ite	pl
 8002d1c:	9306      	strpl	r3, [sp, #24]
 8002d1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002d20:	f1ba 0f00 	cmp.w	sl, #0
 8002d24:	db3d      	blt.n	8002da2 <_dtoa_r+0x23a>
 8002d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002d2c:	4453      	add	r3, sl
 8002d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d30:	2300      	movs	r3, #0
 8002d32:	930a      	str	r3, [sp, #40]	; 0x28
 8002d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	f200 808c 	bhi.w	8002e54 <_dtoa_r+0x2ec>
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	bfc4      	itt	gt
 8002d40:	3b04      	subgt	r3, #4
 8002d42:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d46:	bfc8      	it	gt
 8002d48:	2400      	movgt	r4, #0
 8002d4a:	f1a3 0302 	sub.w	r3, r3, #2
 8002d4e:	bfd8      	it	le
 8002d50:	2401      	movle	r4, #1
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	f200 808a 	bhi.w	8002e6c <_dtoa_r+0x304>
 8002d58:	e8df f003 	tbb	[pc, r3]
 8002d5c:	5b4d4f2d 	.word	0x5b4d4f2d
 8002d60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002d64:	441c      	add	r4, r3
 8002d66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	bfc3      	ittte	gt
 8002d6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002d76:	fa09 f303 	lslgt.w	r3, r9, r3
 8002d7a:	f1c3 0320 	rsble	r3, r3, #32
 8002d7e:	bfc6      	itte	gt
 8002d80:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d84:	4318      	orrgt	r0, r3
 8002d86:	fa06 f003 	lslle.w	r0, r6, r3
 8002d8a:	f7fd fb2b 	bl	80003e4 <__aeabi_ui2d>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002d94:	3c01      	subs	r4, #1
 8002d96:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d98:	e76f      	b.n	8002c7a <_dtoa_r+0x112>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e7b2      	b.n	8002d04 <_dtoa_r+0x19c>
 8002d9e:	900f      	str	r0, [sp, #60]	; 0x3c
 8002da0:	e7b1      	b.n	8002d06 <_dtoa_r+0x19e>
 8002da2:	9b06      	ldr	r3, [sp, #24]
 8002da4:	eba3 030a 	sub.w	r3, r3, sl
 8002da8:	9306      	str	r3, [sp, #24]
 8002daa:	f1ca 0300 	rsb	r3, sl, #0
 8002dae:	930a      	str	r3, [sp, #40]	; 0x28
 8002db0:	2300      	movs	r3, #0
 8002db2:	930e      	str	r3, [sp, #56]	; 0x38
 8002db4:	e7be      	b.n	8002d34 <_dtoa_r+0x1cc>
 8002db6:	2300      	movs	r3, #0
 8002db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc58      	bgt.n	8002e72 <_dtoa_r+0x30a>
 8002dc0:	f04f 0901 	mov.w	r9, #1
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8002dca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002dce:	2200      	movs	r2, #0
 8002dd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002dd2:	6042      	str	r2, [r0, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	f102 0614 	add.w	r6, r2, #20
 8002dda:	429e      	cmp	r6, r3
 8002ddc:	6841      	ldr	r1, [r0, #4]
 8002dde:	d94e      	bls.n	8002e7e <_dtoa_r+0x316>
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 fef3 	bl	8003bcc <_Balloc>
 8002de6:	9003      	str	r0, [sp, #12]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d14c      	bne.n	8002e86 <_dtoa_r+0x31e>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002df2:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <_dtoa_r+0x2e8>)
 8002df4:	e6cc      	b.n	8002b90 <_dtoa_r+0x28>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e7de      	b.n	8002db8 <_dtoa_r+0x250>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002e00:	eb0a 0903 	add.w	r9, sl, r3
 8002e04:	f109 0301 	add.w	r3, r9, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	9308      	str	r3, [sp, #32]
 8002e0c:	bfb8      	it	lt
 8002e0e:	2301      	movlt	r3, #1
 8002e10:	e7dd      	b.n	8002dce <_dtoa_r+0x266>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e7f2      	b.n	8002dfc <_dtoa_r+0x294>
 8002e16:	bf00      	nop
 8002e18:	636f4361 	.word	0x636f4361
 8002e1c:	3fd287a7 	.word	0x3fd287a7
 8002e20:	8b60c8b3 	.word	0x8b60c8b3
 8002e24:	3fc68a28 	.word	0x3fc68a28
 8002e28:	509f79fb 	.word	0x509f79fb
 8002e2c:	3fd34413 	.word	0x3fd34413
 8002e30:	08004b65 	.word	0x08004b65
 8002e34:	08004b7c 	.word	0x08004b7c
 8002e38:	7ff00000 	.word	0x7ff00000
 8002e3c:	08004b61 	.word	0x08004b61
 8002e40:	08004b58 	.word	0x08004b58
 8002e44:	08004b35 	.word	0x08004b35
 8002e48:	3ff80000 	.word	0x3ff80000
 8002e4c:	08004cd0 	.word	0x08004cd0
 8002e50:	08004bd7 	.word	0x08004bd7
 8002e54:	2401      	movs	r4, #1
 8002e56:	2300      	movs	r3, #0
 8002e58:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e5a:	9322      	str	r3, [sp, #136]	; 0x88
 8002e5c:	f04f 39ff 	mov.w	r9, #4294967295
 8002e60:	2200      	movs	r2, #0
 8002e62:	2312      	movs	r3, #18
 8002e64:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e68:	9223      	str	r2, [sp, #140]	; 0x8c
 8002e6a:	e7b0      	b.n	8002dce <_dtoa_r+0x266>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e70:	e7f4      	b.n	8002e5c <_dtoa_r+0x2f4>
 8002e72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002e76:	464b      	mov	r3, r9
 8002e78:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e7c:	e7a7      	b.n	8002dce <_dtoa_r+0x266>
 8002e7e:	3101      	adds	r1, #1
 8002e80:	6041      	str	r1, [r0, #4]
 8002e82:	0052      	lsls	r2, r2, #1
 8002e84:	e7a7      	b.n	8002dd6 <_dtoa_r+0x26e>
 8002e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e88:	9a03      	ldr	r2, [sp, #12]
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	9b08      	ldr	r3, [sp, #32]
 8002e8e:	2b0e      	cmp	r3, #14
 8002e90:	f200 80a8 	bhi.w	8002fe4 <_dtoa_r+0x47c>
 8002e94:	2c00      	cmp	r4, #0
 8002e96:	f000 80a5 	beq.w	8002fe4 <_dtoa_r+0x47c>
 8002e9a:	f1ba 0f00 	cmp.w	sl, #0
 8002e9e:	dd34      	ble.n	8002f0a <_dtoa_r+0x3a2>
 8002ea0:	4a9a      	ldr	r2, [pc, #616]	; (800310c <_dtoa_r+0x5a4>)
 8002ea2:	f00a 030f 	and.w	r3, sl, #15
 8002ea6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002eaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002eb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002eb6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8002eba:	d016      	beq.n	8002eea <_dtoa_r+0x382>
 8002ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002ec0:	4b93      	ldr	r3, [pc, #588]	; (8003110 <_dtoa_r+0x5a8>)
 8002ec2:	2703      	movs	r7, #3
 8002ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ec8:	f7fd fc30 	bl	800072c <__aeabi_ddiv>
 8002ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ed0:	f004 040f 	and.w	r4, r4, #15
 8002ed4:	4e8e      	ldr	r6, [pc, #568]	; (8003110 <_dtoa_r+0x5a8>)
 8002ed6:	b954      	cbnz	r4, 8002eee <_dtoa_r+0x386>
 8002ed8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ee0:	f7fd fc24 	bl	800072c <__aeabi_ddiv>
 8002ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ee8:	e029      	b.n	8002f3e <_dtoa_r+0x3d6>
 8002eea:	2702      	movs	r7, #2
 8002eec:	e7f2      	b.n	8002ed4 <_dtoa_r+0x36c>
 8002eee:	07e1      	lsls	r1, r4, #31
 8002ef0:	d508      	bpl.n	8002f04 <_dtoa_r+0x39c>
 8002ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002ef6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002efa:	f7fd faed 	bl	80004d8 <__aeabi_dmul>
 8002efe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f02:	3701      	adds	r7, #1
 8002f04:	1064      	asrs	r4, r4, #1
 8002f06:	3608      	adds	r6, #8
 8002f08:	e7e5      	b.n	8002ed6 <_dtoa_r+0x36e>
 8002f0a:	f000 80a5 	beq.w	8003058 <_dtoa_r+0x4f0>
 8002f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002f12:	f1ca 0400 	rsb	r4, sl, #0
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <_dtoa_r+0x5a4>)
 8002f18:	f004 020f 	and.w	r2, r4, #15
 8002f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fad8 	bl	80004d8 <__aeabi_dmul>
 8002f28:	2702      	movs	r7, #2
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f30:	4e77      	ldr	r6, [pc, #476]	; (8003110 <_dtoa_r+0x5a8>)
 8002f32:	1124      	asrs	r4, r4, #4
 8002f34:	2c00      	cmp	r4, #0
 8002f36:	f040 8084 	bne.w	8003042 <_dtoa_r+0x4da>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1d2      	bne.n	8002ee4 <_dtoa_r+0x37c>
 8002f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 808b 	beq.w	800305c <_dtoa_r+0x4f4>
 8002f46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002f4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f52:	2200      	movs	r2, #0
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <_dtoa_r+0x5ac>)
 8002f56:	f7fd fd31 	bl	80009bc <__aeabi_dcmplt>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d07e      	beq.n	800305c <_dtoa_r+0x4f4>
 8002f5e:	9b08      	ldr	r3, [sp, #32]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d07b      	beq.n	800305c <_dtoa_r+0x4f4>
 8002f64:	f1b9 0f00 	cmp.w	r9, #0
 8002f68:	dd38      	ble.n	8002fdc <_dtoa_r+0x474>
 8002f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4b69      	ldr	r3, [pc, #420]	; (8003118 <_dtoa_r+0x5b0>)
 8002f72:	f7fd fab1 	bl	80004d8 <__aeabi_dmul>
 8002f76:	464c      	mov	r4, r9
 8002f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8002f80:	3701      	adds	r7, #1
 8002f82:	4638      	mov	r0, r7
 8002f84:	f7fd fa3e 	bl	8000404 <__aeabi_i2d>
 8002f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f8c:	f7fd faa4 	bl	80004d8 <__aeabi_dmul>
 8002f90:	2200      	movs	r2, #0
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <_dtoa_r+0x5b4>)
 8002f94:	f7fd f8ea 	bl	800016c <__adddf3>
 8002f98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002f9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002fa0:	9611      	str	r6, [sp, #68]	; 0x44
 8002fa2:	2c00      	cmp	r4, #0
 8002fa4:	d15d      	bne.n	8003062 <_dtoa_r+0x4fa>
 8002fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002faa:	2200      	movs	r2, #0
 8002fac:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <_dtoa_r+0x5b8>)
 8002fae:	f7fd f8db 	bl	8000168 <__aeabi_dsub>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fba:	4633      	mov	r3, r6
 8002fbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002fbe:	f7fd fd1b 	bl	80009f8 <__aeabi_dcmpgt>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f040 829c 	bne.w	8003500 <_dtoa_r+0x998>
 8002fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002fce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002fd2:	f7fd fcf3 	bl	80009bc <__aeabi_dcmplt>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f040 8290 	bne.w	80034fc <_dtoa_r+0x994>
 8002fdc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8002fe0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002fe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f2c0 8152 	blt.w	8003290 <_dtoa_r+0x728>
 8002fec:	f1ba 0f0e 	cmp.w	sl, #14
 8002ff0:	f300 814e 	bgt.w	8003290 <_dtoa_r+0x728>
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <_dtoa_r+0x5a4>)
 8002ff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002ffa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ffe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003004:	2b00      	cmp	r3, #0
 8003006:	f280 80db 	bge.w	80031c0 <_dtoa_r+0x658>
 800300a:	9b08      	ldr	r3, [sp, #32]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f300 80d7 	bgt.w	80031c0 <_dtoa_r+0x658>
 8003012:	f040 8272 	bne.w	80034fa <_dtoa_r+0x992>
 8003016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800301a:	2200      	movs	r2, #0
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <_dtoa_r+0x5b8>)
 800301e:	f7fd fa5b 	bl	80004d8 <__aeabi_dmul>
 8003022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003026:	f7fd fcdd 	bl	80009e4 <__aeabi_dcmpge>
 800302a:	9c08      	ldr	r4, [sp, #32]
 800302c:	4626      	mov	r6, r4
 800302e:	2800      	cmp	r0, #0
 8003030:	f040 8248 	bne.w	80034c4 <_dtoa_r+0x95c>
 8003034:	2331      	movs	r3, #49	; 0x31
 8003036:	9f03      	ldr	r7, [sp, #12]
 8003038:	f10a 0a01 	add.w	sl, sl, #1
 800303c:	f807 3b01 	strb.w	r3, [r7], #1
 8003040:	e244      	b.n	80034cc <_dtoa_r+0x964>
 8003042:	07e2      	lsls	r2, r4, #31
 8003044:	d505      	bpl.n	8003052 <_dtoa_r+0x4ea>
 8003046:	e9d6 2300 	ldrd	r2, r3, [r6]
 800304a:	f7fd fa45 	bl	80004d8 <__aeabi_dmul>
 800304e:	2301      	movs	r3, #1
 8003050:	3701      	adds	r7, #1
 8003052:	1064      	asrs	r4, r4, #1
 8003054:	3608      	adds	r6, #8
 8003056:	e76d      	b.n	8002f34 <_dtoa_r+0x3cc>
 8003058:	2702      	movs	r7, #2
 800305a:	e770      	b.n	8002f3e <_dtoa_r+0x3d6>
 800305c:	46d0      	mov	r8, sl
 800305e:	9c08      	ldr	r4, [sp, #32]
 8003060:	e78f      	b.n	8002f82 <_dtoa_r+0x41a>
 8003062:	9903      	ldr	r1, [sp, #12]
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <_dtoa_r+0x5a4>)
 8003066:	4421      	add	r1, r4
 8003068:	9112      	str	r1, [sp, #72]	; 0x48
 800306a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800306c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003070:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003074:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003078:	2900      	cmp	r1, #0
 800307a:	d055      	beq.n	8003128 <_dtoa_r+0x5c0>
 800307c:	2000      	movs	r0, #0
 800307e:	4929      	ldr	r1, [pc, #164]	; (8003124 <_dtoa_r+0x5bc>)
 8003080:	f7fd fb54 	bl	800072c <__aeabi_ddiv>
 8003084:	463b      	mov	r3, r7
 8003086:	4632      	mov	r2, r6
 8003088:	f7fd f86e 	bl	8000168 <__aeabi_dsub>
 800308c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003090:	9f03      	ldr	r7, [sp, #12]
 8003092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003096:	f7fd fccf 	bl	8000a38 <__aeabi_d2iz>
 800309a:	4604      	mov	r4, r0
 800309c:	f7fd f9b2 	bl	8000404 <__aeabi_i2d>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030a8:	f7fd f85e 	bl	8000168 <__aeabi_dsub>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	3430      	adds	r4, #48	; 0x30
 80030b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80030ba:	f807 4b01 	strb.w	r4, [r7], #1
 80030be:	f7fd fc7d 	bl	80009bc <__aeabi_dcmplt>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d174      	bne.n	80031b0 <_dtoa_r+0x648>
 80030c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030ca:	2000      	movs	r0, #0
 80030cc:	4911      	ldr	r1, [pc, #68]	; (8003114 <_dtoa_r+0x5ac>)
 80030ce:	f7fd f84b 	bl	8000168 <__aeabi_dsub>
 80030d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80030d6:	f7fd fc71 	bl	80009bc <__aeabi_dcmplt>
 80030da:	2800      	cmp	r0, #0
 80030dc:	f040 80b7 	bne.w	800324e <_dtoa_r+0x6e6>
 80030e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030e2:	429f      	cmp	r7, r3
 80030e4:	f43f af7a 	beq.w	8002fdc <_dtoa_r+0x474>
 80030e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80030ec:	2200      	movs	r2, #0
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <_dtoa_r+0x5b0>)
 80030f0:	f7fd f9f2 	bl	80004d8 <__aeabi_dmul>
 80030f4:	2200      	movs	r2, #0
 80030f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <_dtoa_r+0x5b0>)
 8003100:	f7fd f9ea 	bl	80004d8 <__aeabi_dmul>
 8003104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003108:	e7c3      	b.n	8003092 <_dtoa_r+0x52a>
 800310a:	bf00      	nop
 800310c:	08004cd0 	.word	0x08004cd0
 8003110:	08004ca8 	.word	0x08004ca8
 8003114:	3ff00000 	.word	0x3ff00000
 8003118:	40240000 	.word	0x40240000
 800311c:	401c0000 	.word	0x401c0000
 8003120:	40140000 	.word	0x40140000
 8003124:	3fe00000 	.word	0x3fe00000
 8003128:	4630      	mov	r0, r6
 800312a:	4639      	mov	r1, r7
 800312c:	f7fd f9d4 	bl	80004d8 <__aeabi_dmul>
 8003130:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003132:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003136:	9c03      	ldr	r4, [sp, #12]
 8003138:	9314      	str	r3, [sp, #80]	; 0x50
 800313a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800313e:	f7fd fc7b 	bl	8000a38 <__aeabi_d2iz>
 8003142:	9015      	str	r0, [sp, #84]	; 0x54
 8003144:	f7fd f95e 	bl	8000404 <__aeabi_i2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003150:	f7fd f80a 	bl	8000168 <__aeabi_dsub>
 8003154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003156:	4606      	mov	r6, r0
 8003158:	3330      	adds	r3, #48	; 0x30
 800315a:	f804 3b01 	strb.w	r3, [r4], #1
 800315e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003160:	460f      	mov	r7, r1
 8003162:	429c      	cmp	r4, r3
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	d124      	bne.n	80031b4 <_dtoa_r+0x64c>
 800316a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800316e:	4bb0      	ldr	r3, [pc, #704]	; (8003430 <_dtoa_r+0x8c8>)
 8003170:	f7fc fffc 	bl	800016c <__adddf3>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4630      	mov	r0, r6
 800317a:	4639      	mov	r1, r7
 800317c:	f7fd fc3c 	bl	80009f8 <__aeabi_dcmpgt>
 8003180:	2800      	cmp	r0, #0
 8003182:	d163      	bne.n	800324c <_dtoa_r+0x6e4>
 8003184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003188:	2000      	movs	r0, #0
 800318a:	49a9      	ldr	r1, [pc, #676]	; (8003430 <_dtoa_r+0x8c8>)
 800318c:	f7fc ffec 	bl	8000168 <__aeabi_dsub>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4630      	mov	r0, r6
 8003196:	4639      	mov	r1, r7
 8003198:	f7fd fc10 	bl	80009bc <__aeabi_dcmplt>
 800319c:	2800      	cmp	r0, #0
 800319e:	f43f af1d 	beq.w	8002fdc <_dtoa_r+0x474>
 80031a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80031a4:	1e7b      	subs	r3, r7, #1
 80031a6:	9314      	str	r3, [sp, #80]	; 0x50
 80031a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d0f8      	beq.n	80031a2 <_dtoa_r+0x63a>
 80031b0:	46c2      	mov	sl, r8
 80031b2:	e03b      	b.n	800322c <_dtoa_r+0x6c4>
 80031b4:	4b9f      	ldr	r3, [pc, #636]	; (8003434 <_dtoa_r+0x8cc>)
 80031b6:	f7fd f98f 	bl	80004d8 <__aeabi_dmul>
 80031ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80031be:	e7bc      	b.n	800313a <_dtoa_r+0x5d2>
 80031c0:	9f03      	ldr	r7, [sp, #12]
 80031c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80031c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031ca:	4640      	mov	r0, r8
 80031cc:	4649      	mov	r1, r9
 80031ce:	f7fd faad 	bl	800072c <__aeabi_ddiv>
 80031d2:	f7fd fc31 	bl	8000a38 <__aeabi_d2iz>
 80031d6:	4604      	mov	r4, r0
 80031d8:	f7fd f914 	bl	8000404 <__aeabi_i2d>
 80031dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031e0:	f7fd f97a 	bl	80004d8 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4640      	mov	r0, r8
 80031ea:	4649      	mov	r1, r9
 80031ec:	f7fc ffbc 	bl	8000168 <__aeabi_dsub>
 80031f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80031f4:	f807 6b01 	strb.w	r6, [r7], #1
 80031f8:	9e03      	ldr	r6, [sp, #12]
 80031fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80031fe:	1bbe      	subs	r6, r7, r6
 8003200:	45b4      	cmp	ip, r6
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	d136      	bne.n	8003276 <_dtoa_r+0x70e>
 8003208:	f7fc ffb0 	bl	800016c <__adddf3>
 800320c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003210:	4680      	mov	r8, r0
 8003212:	4689      	mov	r9, r1
 8003214:	f7fd fbf0 	bl	80009f8 <__aeabi_dcmpgt>
 8003218:	bb58      	cbnz	r0, 8003272 <_dtoa_r+0x70a>
 800321a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800321e:	4640      	mov	r0, r8
 8003220:	4649      	mov	r1, r9
 8003222:	f7fd fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8003226:	b108      	cbz	r0, 800322c <_dtoa_r+0x6c4>
 8003228:	07e1      	lsls	r1, r4, #31
 800322a:	d422      	bmi.n	8003272 <_dtoa_r+0x70a>
 800322c:	4628      	mov	r0, r5
 800322e:	4659      	mov	r1, fp
 8003230:	f000 fd0c 	bl	8003c4c <_Bfree>
 8003234:	2300      	movs	r3, #0
 8003236:	703b      	strb	r3, [r7, #0]
 8003238:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800323a:	f10a 0001 	add.w	r0, sl, #1
 800323e:	6018      	str	r0, [r3, #0]
 8003240:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003242:	2b00      	cmp	r3, #0
 8003244:	f43f acde 	beq.w	8002c04 <_dtoa_r+0x9c>
 8003248:	601f      	str	r7, [r3, #0]
 800324a:	e4db      	b.n	8002c04 <_dtoa_r+0x9c>
 800324c:	4627      	mov	r7, r4
 800324e:	463b      	mov	r3, r7
 8003250:	461f      	mov	r7, r3
 8003252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003256:	2a39      	cmp	r2, #57	; 0x39
 8003258:	d107      	bne.n	800326a <_dtoa_r+0x702>
 800325a:	9a03      	ldr	r2, [sp, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d1f7      	bne.n	8003250 <_dtoa_r+0x6e8>
 8003260:	2230      	movs	r2, #48	; 0x30
 8003262:	9903      	ldr	r1, [sp, #12]
 8003264:	f108 0801 	add.w	r8, r8, #1
 8003268:	700a      	strb	r2, [r1, #0]
 800326a:	781a      	ldrb	r2, [r3, #0]
 800326c:	3201      	adds	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e79e      	b.n	80031b0 <_dtoa_r+0x648>
 8003272:	46d0      	mov	r8, sl
 8003274:	e7eb      	b.n	800324e <_dtoa_r+0x6e6>
 8003276:	2200      	movs	r2, #0
 8003278:	4b6e      	ldr	r3, [pc, #440]	; (8003434 <_dtoa_r+0x8cc>)
 800327a:	f7fd f92d 	bl	80004d8 <__aeabi_dmul>
 800327e:	2200      	movs	r2, #0
 8003280:	2300      	movs	r3, #0
 8003282:	4680      	mov	r8, r0
 8003284:	4689      	mov	r9, r1
 8003286:	f7fd fb8f 	bl	80009a8 <__aeabi_dcmpeq>
 800328a:	2800      	cmp	r0, #0
 800328c:	d09b      	beq.n	80031c6 <_dtoa_r+0x65e>
 800328e:	e7cd      	b.n	800322c <_dtoa_r+0x6c4>
 8003290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003292:	2a00      	cmp	r2, #0
 8003294:	f000 80d0 	beq.w	8003438 <_dtoa_r+0x8d0>
 8003298:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800329a:	2a01      	cmp	r2, #1
 800329c:	f300 80ae 	bgt.w	80033fc <_dtoa_r+0x894>
 80032a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80032a2:	2a00      	cmp	r2, #0
 80032a4:	f000 80a6 	beq.w	80033f4 <_dtoa_r+0x88c>
 80032a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80032ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80032ae:	9f06      	ldr	r7, [sp, #24]
 80032b0:	9a06      	ldr	r2, [sp, #24]
 80032b2:	2101      	movs	r1, #1
 80032b4:	441a      	add	r2, r3
 80032b6:	9206      	str	r2, [sp, #24]
 80032b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ba:	4628      	mov	r0, r5
 80032bc:	441a      	add	r2, r3
 80032be:	9209      	str	r2, [sp, #36]	; 0x24
 80032c0:	f000 fd7a 	bl	8003db8 <__i2b>
 80032c4:	4606      	mov	r6, r0
 80032c6:	2f00      	cmp	r7, #0
 80032c8:	dd0c      	ble.n	80032e4 <_dtoa_r+0x77c>
 80032ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	dd09      	ble.n	80032e4 <_dtoa_r+0x77c>
 80032d0:	42bb      	cmp	r3, r7
 80032d2:	bfa8      	it	ge
 80032d4:	463b      	movge	r3, r7
 80032d6:	9a06      	ldr	r2, [sp, #24]
 80032d8:	1aff      	subs	r7, r7, r3
 80032da:	1ad2      	subs	r2, r2, r3
 80032dc:	9206      	str	r2, [sp, #24]
 80032de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	9309      	str	r3, [sp, #36]	; 0x24
 80032e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032e6:	b1f3      	cbz	r3, 8003326 <_dtoa_r+0x7be>
 80032e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80a8 	beq.w	8003440 <_dtoa_r+0x8d8>
 80032f0:	2c00      	cmp	r4, #0
 80032f2:	dd10      	ble.n	8003316 <_dtoa_r+0x7ae>
 80032f4:	4631      	mov	r1, r6
 80032f6:	4622      	mov	r2, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 fe1b 	bl	8003f34 <__pow5mult>
 80032fe:	465a      	mov	r2, fp
 8003300:	4601      	mov	r1, r0
 8003302:	4606      	mov	r6, r0
 8003304:	4628      	mov	r0, r5
 8003306:	f000 fd6d 	bl	8003de4 <__multiply>
 800330a:	4680      	mov	r8, r0
 800330c:	4659      	mov	r1, fp
 800330e:	4628      	mov	r0, r5
 8003310:	f000 fc9c 	bl	8003c4c <_Bfree>
 8003314:	46c3      	mov	fp, r8
 8003316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003318:	1b1a      	subs	r2, r3, r4
 800331a:	d004      	beq.n	8003326 <_dtoa_r+0x7be>
 800331c:	4659      	mov	r1, fp
 800331e:	4628      	mov	r0, r5
 8003320:	f000 fe08 	bl	8003f34 <__pow5mult>
 8003324:	4683      	mov	fp, r0
 8003326:	2101      	movs	r1, #1
 8003328:	4628      	mov	r0, r5
 800332a:	f000 fd45 	bl	8003db8 <__i2b>
 800332e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003330:	4604      	mov	r4, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f340 8086 	ble.w	8003444 <_dtoa_r+0x8dc>
 8003338:	461a      	mov	r2, r3
 800333a:	4601      	mov	r1, r0
 800333c:	4628      	mov	r0, r5
 800333e:	f000 fdf9 	bl	8003f34 <__pow5mult>
 8003342:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003344:	4604      	mov	r4, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	dd7f      	ble.n	800344a <_dtoa_r+0x8e2>
 800334a:	f04f 0800 	mov.w	r8, #0
 800334e:	6923      	ldr	r3, [r4, #16]
 8003350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003354:	6918      	ldr	r0, [r3, #16]
 8003356:	f000 fce1 	bl	8003d1c <__hi0bits>
 800335a:	f1c0 0020 	rsb	r0, r0, #32
 800335e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003360:	4418      	add	r0, r3
 8003362:	f010 001f 	ands.w	r0, r0, #31
 8003366:	f000 8092 	beq.w	800348e <_dtoa_r+0x926>
 800336a:	f1c0 0320 	rsb	r3, r0, #32
 800336e:	2b04      	cmp	r3, #4
 8003370:	f340 808a 	ble.w	8003488 <_dtoa_r+0x920>
 8003374:	f1c0 001c 	rsb	r0, r0, #28
 8003378:	9b06      	ldr	r3, [sp, #24]
 800337a:	4407      	add	r7, r0
 800337c:	4403      	add	r3, r0
 800337e:	9306      	str	r3, [sp, #24]
 8003380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003382:	4403      	add	r3, r0
 8003384:	9309      	str	r3, [sp, #36]	; 0x24
 8003386:	9b06      	ldr	r3, [sp, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	dd05      	ble.n	8003398 <_dtoa_r+0x830>
 800338c:	4659      	mov	r1, fp
 800338e:	461a      	mov	r2, r3
 8003390:	4628      	mov	r0, r5
 8003392:	f000 fe29 	bl	8003fe8 <__lshift>
 8003396:	4683      	mov	fp, r0
 8003398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	dd05      	ble.n	80033aa <_dtoa_r+0x842>
 800339e:	4621      	mov	r1, r4
 80033a0:	461a      	mov	r2, r3
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 fe20 	bl	8003fe8 <__lshift>
 80033a8:	4604      	mov	r4, r0
 80033aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d070      	beq.n	8003492 <_dtoa_r+0x92a>
 80033b0:	4621      	mov	r1, r4
 80033b2:	4658      	mov	r0, fp
 80033b4:	f000 fe88 	bl	80040c8 <__mcmp>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	da6a      	bge.n	8003492 <_dtoa_r+0x92a>
 80033bc:	2300      	movs	r3, #0
 80033be:	4659      	mov	r1, fp
 80033c0:	220a      	movs	r2, #10
 80033c2:	4628      	mov	r0, r5
 80033c4:	f000 fc64 	bl	8003c90 <__multadd>
 80033c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033ca:	4683      	mov	fp, r0
 80033cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8194 	beq.w	80036fe <_dtoa_r+0xb96>
 80033d6:	4631      	mov	r1, r6
 80033d8:	2300      	movs	r3, #0
 80033da:	220a      	movs	r2, #10
 80033dc:	4628      	mov	r0, r5
 80033de:	f000 fc57 	bl	8003c90 <__multadd>
 80033e2:	f1b9 0f00 	cmp.w	r9, #0
 80033e6:	4606      	mov	r6, r0
 80033e8:	f300 8093 	bgt.w	8003512 <_dtoa_r+0x9aa>
 80033ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	dc57      	bgt.n	80034a2 <_dtoa_r+0x93a>
 80033f2:	e08e      	b.n	8003512 <_dtoa_r+0x9aa>
 80033f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80033f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80033fa:	e757      	b.n	80032ac <_dtoa_r+0x744>
 80033fc:	9b08      	ldr	r3, [sp, #32]
 80033fe:	1e5c      	subs	r4, r3, #1
 8003400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003402:	42a3      	cmp	r3, r4
 8003404:	bfb7      	itett	lt
 8003406:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003408:	1b1c      	subge	r4, r3, r4
 800340a:	1ae2      	sublt	r2, r4, r3
 800340c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800340e:	bfbe      	ittt	lt
 8003410:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003412:	189b      	addlt	r3, r3, r2
 8003414:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003416:	9b08      	ldr	r3, [sp, #32]
 8003418:	bfb8      	it	lt
 800341a:	2400      	movlt	r4, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	bfbb      	ittet	lt
 8003420:	9b06      	ldrlt	r3, [sp, #24]
 8003422:	9a08      	ldrlt	r2, [sp, #32]
 8003424:	9f06      	ldrge	r7, [sp, #24]
 8003426:	1a9f      	sublt	r7, r3, r2
 8003428:	bfac      	ite	ge
 800342a:	9b08      	ldrge	r3, [sp, #32]
 800342c:	2300      	movlt	r3, #0
 800342e:	e73f      	b.n	80032b0 <_dtoa_r+0x748>
 8003430:	3fe00000 	.word	0x3fe00000
 8003434:	40240000 	.word	0x40240000
 8003438:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800343a:	9f06      	ldr	r7, [sp, #24]
 800343c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800343e:	e742      	b.n	80032c6 <_dtoa_r+0x75e>
 8003440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003442:	e76b      	b.n	800331c <_dtoa_r+0x7b4>
 8003444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003446:	2b01      	cmp	r3, #1
 8003448:	dc19      	bgt.n	800347e <_dtoa_r+0x916>
 800344a:	9b04      	ldr	r3, [sp, #16]
 800344c:	b9bb      	cbnz	r3, 800347e <_dtoa_r+0x916>
 800344e:	9b05      	ldr	r3, [sp, #20]
 8003450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003454:	b99b      	cbnz	r3, 800347e <_dtoa_r+0x916>
 8003456:	9b05      	ldr	r3, [sp, #20]
 8003458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800345c:	0d1b      	lsrs	r3, r3, #20
 800345e:	051b      	lsls	r3, r3, #20
 8003460:	b183      	cbz	r3, 8003484 <_dtoa_r+0x91c>
 8003462:	f04f 0801 	mov.w	r8, #1
 8003466:	9b06      	ldr	r3, [sp, #24]
 8003468:	3301      	adds	r3, #1
 800346a:	9306      	str	r3, [sp, #24]
 800346c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800346e:	3301      	adds	r3, #1
 8003470:	9309      	str	r3, [sp, #36]	; 0x24
 8003472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f af6a 	bne.w	800334e <_dtoa_r+0x7e6>
 800347a:	2001      	movs	r0, #1
 800347c:	e76f      	b.n	800335e <_dtoa_r+0x7f6>
 800347e:	f04f 0800 	mov.w	r8, #0
 8003482:	e7f6      	b.n	8003472 <_dtoa_r+0x90a>
 8003484:	4698      	mov	r8, r3
 8003486:	e7f4      	b.n	8003472 <_dtoa_r+0x90a>
 8003488:	f43f af7d 	beq.w	8003386 <_dtoa_r+0x81e>
 800348c:	4618      	mov	r0, r3
 800348e:	301c      	adds	r0, #28
 8003490:	e772      	b.n	8003378 <_dtoa_r+0x810>
 8003492:	9b08      	ldr	r3, [sp, #32]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dc36      	bgt.n	8003506 <_dtoa_r+0x99e>
 8003498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800349a:	2b02      	cmp	r3, #2
 800349c:	dd33      	ble.n	8003506 <_dtoa_r+0x99e>
 800349e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034a2:	f1b9 0f00 	cmp.w	r9, #0
 80034a6:	d10d      	bne.n	80034c4 <_dtoa_r+0x95c>
 80034a8:	4621      	mov	r1, r4
 80034aa:	464b      	mov	r3, r9
 80034ac:	2205      	movs	r2, #5
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 fbee 	bl	8003c90 <__multadd>
 80034b4:	4601      	mov	r1, r0
 80034b6:	4604      	mov	r4, r0
 80034b8:	4658      	mov	r0, fp
 80034ba:	f000 fe05 	bl	80040c8 <__mcmp>
 80034be:	2800      	cmp	r0, #0
 80034c0:	f73f adb8 	bgt.w	8003034 <_dtoa_r+0x4cc>
 80034c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034c6:	9f03      	ldr	r7, [sp, #12]
 80034c8:	ea6f 0a03 	mvn.w	sl, r3
 80034cc:	f04f 0800 	mov.w	r8, #0
 80034d0:	4621      	mov	r1, r4
 80034d2:	4628      	mov	r0, r5
 80034d4:	f000 fbba 	bl	8003c4c <_Bfree>
 80034d8:	2e00      	cmp	r6, #0
 80034da:	f43f aea7 	beq.w	800322c <_dtoa_r+0x6c4>
 80034de:	f1b8 0f00 	cmp.w	r8, #0
 80034e2:	d005      	beq.n	80034f0 <_dtoa_r+0x988>
 80034e4:	45b0      	cmp	r8, r6
 80034e6:	d003      	beq.n	80034f0 <_dtoa_r+0x988>
 80034e8:	4641      	mov	r1, r8
 80034ea:	4628      	mov	r0, r5
 80034ec:	f000 fbae 	bl	8003c4c <_Bfree>
 80034f0:	4631      	mov	r1, r6
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 fbaa 	bl	8003c4c <_Bfree>
 80034f8:	e698      	b.n	800322c <_dtoa_r+0x6c4>
 80034fa:	2400      	movs	r4, #0
 80034fc:	4626      	mov	r6, r4
 80034fe:	e7e1      	b.n	80034c4 <_dtoa_r+0x95c>
 8003500:	46c2      	mov	sl, r8
 8003502:	4626      	mov	r6, r4
 8003504:	e596      	b.n	8003034 <_dtoa_r+0x4cc>
 8003506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80fd 	beq.w	800370c <_dtoa_r+0xba4>
 8003512:	2f00      	cmp	r7, #0
 8003514:	dd05      	ble.n	8003522 <_dtoa_r+0x9ba>
 8003516:	4631      	mov	r1, r6
 8003518:	463a      	mov	r2, r7
 800351a:	4628      	mov	r0, r5
 800351c:	f000 fd64 	bl	8003fe8 <__lshift>
 8003520:	4606      	mov	r6, r0
 8003522:	f1b8 0f00 	cmp.w	r8, #0
 8003526:	d05c      	beq.n	80035e2 <_dtoa_r+0xa7a>
 8003528:	4628      	mov	r0, r5
 800352a:	6871      	ldr	r1, [r6, #4]
 800352c:	f000 fb4e 	bl	8003bcc <_Balloc>
 8003530:	4607      	mov	r7, r0
 8003532:	b928      	cbnz	r0, 8003540 <_dtoa_r+0x9d8>
 8003534:	4602      	mov	r2, r0
 8003536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <_dtoa_r+0xbd0>)
 800353c:	f7ff bb28 	b.w	8002b90 <_dtoa_r+0x28>
 8003540:	6932      	ldr	r2, [r6, #16]
 8003542:	f106 010c 	add.w	r1, r6, #12
 8003546:	3202      	adds	r2, #2
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	300c      	adds	r0, #12
 800354c:	f000 fb30 	bl	8003bb0 <memcpy>
 8003550:	2201      	movs	r2, #1
 8003552:	4639      	mov	r1, r7
 8003554:	4628      	mov	r0, r5
 8003556:	f000 fd47 	bl	8003fe8 <__lshift>
 800355a:	46b0      	mov	r8, r6
 800355c:	4606      	mov	r6, r0
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	3301      	adds	r3, #1
 8003562:	9308      	str	r3, [sp, #32]
 8003564:	9b03      	ldr	r3, [sp, #12]
 8003566:	444b      	add	r3, r9
 8003568:	930a      	str	r3, [sp, #40]	; 0x28
 800356a:	9b04      	ldr	r3, [sp, #16]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	9309      	str	r3, [sp, #36]	; 0x24
 8003572:	9b08      	ldr	r3, [sp, #32]
 8003574:	4621      	mov	r1, r4
 8003576:	3b01      	subs	r3, #1
 8003578:	4658      	mov	r0, fp
 800357a:	9304      	str	r3, [sp, #16]
 800357c:	f7ff fa66 	bl	8002a4c <quorem>
 8003580:	4603      	mov	r3, r0
 8003582:	4641      	mov	r1, r8
 8003584:	3330      	adds	r3, #48	; 0x30
 8003586:	9006      	str	r0, [sp, #24]
 8003588:	4658      	mov	r0, fp
 800358a:	930b      	str	r3, [sp, #44]	; 0x2c
 800358c:	f000 fd9c 	bl	80040c8 <__mcmp>
 8003590:	4632      	mov	r2, r6
 8003592:	4681      	mov	r9, r0
 8003594:	4621      	mov	r1, r4
 8003596:	4628      	mov	r0, r5
 8003598:	f000 fdb2 	bl	8004100 <__mdiff>
 800359c:	68c2      	ldr	r2, [r0, #12]
 800359e:	4607      	mov	r7, r0
 80035a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035a2:	bb02      	cbnz	r2, 80035e6 <_dtoa_r+0xa7e>
 80035a4:	4601      	mov	r1, r0
 80035a6:	4658      	mov	r0, fp
 80035a8:	f000 fd8e 	bl	80040c8 <__mcmp>
 80035ac:	4602      	mov	r2, r0
 80035ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035b0:	4639      	mov	r1, r7
 80035b2:	4628      	mov	r0, r5
 80035b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80035b8:	f000 fb48 	bl	8003c4c <_Bfree>
 80035bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035c0:	9f08      	ldr	r7, [sp, #32]
 80035c2:	ea43 0102 	orr.w	r1, r3, r2
 80035c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c8:	430b      	orrs	r3, r1
 80035ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035cc:	d10d      	bne.n	80035ea <_dtoa_r+0xa82>
 80035ce:	2b39      	cmp	r3, #57	; 0x39
 80035d0:	d029      	beq.n	8003626 <_dtoa_r+0xabe>
 80035d2:	f1b9 0f00 	cmp.w	r9, #0
 80035d6:	dd01      	ble.n	80035dc <_dtoa_r+0xa74>
 80035d8:	9b06      	ldr	r3, [sp, #24]
 80035da:	3331      	adds	r3, #49	; 0x31
 80035dc:	9a04      	ldr	r2, [sp, #16]
 80035de:	7013      	strb	r3, [r2, #0]
 80035e0:	e776      	b.n	80034d0 <_dtoa_r+0x968>
 80035e2:	4630      	mov	r0, r6
 80035e4:	e7b9      	b.n	800355a <_dtoa_r+0x9f2>
 80035e6:	2201      	movs	r2, #1
 80035e8:	e7e2      	b.n	80035b0 <_dtoa_r+0xa48>
 80035ea:	f1b9 0f00 	cmp.w	r9, #0
 80035ee:	db06      	blt.n	80035fe <_dtoa_r+0xa96>
 80035f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80035f2:	ea41 0909 	orr.w	r9, r1, r9
 80035f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035f8:	ea59 0101 	orrs.w	r1, r9, r1
 80035fc:	d120      	bne.n	8003640 <_dtoa_r+0xad8>
 80035fe:	2a00      	cmp	r2, #0
 8003600:	ddec      	ble.n	80035dc <_dtoa_r+0xa74>
 8003602:	4659      	mov	r1, fp
 8003604:	2201      	movs	r2, #1
 8003606:	4628      	mov	r0, r5
 8003608:	9308      	str	r3, [sp, #32]
 800360a:	f000 fced 	bl	8003fe8 <__lshift>
 800360e:	4621      	mov	r1, r4
 8003610:	4683      	mov	fp, r0
 8003612:	f000 fd59 	bl	80040c8 <__mcmp>
 8003616:	2800      	cmp	r0, #0
 8003618:	9b08      	ldr	r3, [sp, #32]
 800361a:	dc02      	bgt.n	8003622 <_dtoa_r+0xaba>
 800361c:	d1de      	bne.n	80035dc <_dtoa_r+0xa74>
 800361e:	07da      	lsls	r2, r3, #31
 8003620:	d5dc      	bpl.n	80035dc <_dtoa_r+0xa74>
 8003622:	2b39      	cmp	r3, #57	; 0x39
 8003624:	d1d8      	bne.n	80035d8 <_dtoa_r+0xa70>
 8003626:	2339      	movs	r3, #57	; 0x39
 8003628:	9a04      	ldr	r2, [sp, #16]
 800362a:	7013      	strb	r3, [r2, #0]
 800362c:	463b      	mov	r3, r7
 800362e:	461f      	mov	r7, r3
 8003630:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003634:	3b01      	subs	r3, #1
 8003636:	2a39      	cmp	r2, #57	; 0x39
 8003638:	d050      	beq.n	80036dc <_dtoa_r+0xb74>
 800363a:	3201      	adds	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e747      	b.n	80034d0 <_dtoa_r+0x968>
 8003640:	2a00      	cmp	r2, #0
 8003642:	dd03      	ble.n	800364c <_dtoa_r+0xae4>
 8003644:	2b39      	cmp	r3, #57	; 0x39
 8003646:	d0ee      	beq.n	8003626 <_dtoa_r+0xabe>
 8003648:	3301      	adds	r3, #1
 800364a:	e7c7      	b.n	80035dc <_dtoa_r+0xa74>
 800364c:	9a08      	ldr	r2, [sp, #32]
 800364e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003650:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003654:	428a      	cmp	r2, r1
 8003656:	d02a      	beq.n	80036ae <_dtoa_r+0xb46>
 8003658:	4659      	mov	r1, fp
 800365a:	2300      	movs	r3, #0
 800365c:	220a      	movs	r2, #10
 800365e:	4628      	mov	r0, r5
 8003660:	f000 fb16 	bl	8003c90 <__multadd>
 8003664:	45b0      	cmp	r8, r6
 8003666:	4683      	mov	fp, r0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f04f 020a 	mov.w	r2, #10
 8003670:	4641      	mov	r1, r8
 8003672:	4628      	mov	r0, r5
 8003674:	d107      	bne.n	8003686 <_dtoa_r+0xb1e>
 8003676:	f000 fb0b 	bl	8003c90 <__multadd>
 800367a:	4680      	mov	r8, r0
 800367c:	4606      	mov	r6, r0
 800367e:	9b08      	ldr	r3, [sp, #32]
 8003680:	3301      	adds	r3, #1
 8003682:	9308      	str	r3, [sp, #32]
 8003684:	e775      	b.n	8003572 <_dtoa_r+0xa0a>
 8003686:	f000 fb03 	bl	8003c90 <__multadd>
 800368a:	4631      	mov	r1, r6
 800368c:	4680      	mov	r8, r0
 800368e:	2300      	movs	r3, #0
 8003690:	220a      	movs	r2, #10
 8003692:	4628      	mov	r0, r5
 8003694:	f000 fafc 	bl	8003c90 <__multadd>
 8003698:	4606      	mov	r6, r0
 800369a:	e7f0      	b.n	800367e <_dtoa_r+0xb16>
 800369c:	f1b9 0f00 	cmp.w	r9, #0
 80036a0:	bfcc      	ite	gt
 80036a2:	464f      	movgt	r7, r9
 80036a4:	2701      	movle	r7, #1
 80036a6:	f04f 0800 	mov.w	r8, #0
 80036aa:	9a03      	ldr	r2, [sp, #12]
 80036ac:	4417      	add	r7, r2
 80036ae:	4659      	mov	r1, fp
 80036b0:	2201      	movs	r2, #1
 80036b2:	4628      	mov	r0, r5
 80036b4:	9308      	str	r3, [sp, #32]
 80036b6:	f000 fc97 	bl	8003fe8 <__lshift>
 80036ba:	4621      	mov	r1, r4
 80036bc:	4683      	mov	fp, r0
 80036be:	f000 fd03 	bl	80040c8 <__mcmp>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	dcb2      	bgt.n	800362c <_dtoa_r+0xac4>
 80036c6:	d102      	bne.n	80036ce <_dtoa_r+0xb66>
 80036c8:	9b08      	ldr	r3, [sp, #32]
 80036ca:	07db      	lsls	r3, r3, #31
 80036cc:	d4ae      	bmi.n	800362c <_dtoa_r+0xac4>
 80036ce:	463b      	mov	r3, r7
 80036d0:	461f      	mov	r7, r3
 80036d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80036d6:	2a30      	cmp	r2, #48	; 0x30
 80036d8:	d0fa      	beq.n	80036d0 <_dtoa_r+0xb68>
 80036da:	e6f9      	b.n	80034d0 <_dtoa_r+0x968>
 80036dc:	9a03      	ldr	r2, [sp, #12]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d1a5      	bne.n	800362e <_dtoa_r+0xac6>
 80036e2:	2331      	movs	r3, #49	; 0x31
 80036e4:	f10a 0a01 	add.w	sl, sl, #1
 80036e8:	e779      	b.n	80035de <_dtoa_r+0xa76>
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <_dtoa_r+0xbd4>)
 80036ec:	f7ff baa8 	b.w	8002c40 <_dtoa_r+0xd8>
 80036f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f47f aa81 	bne.w	8002bfa <_dtoa_r+0x92>
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <_dtoa_r+0xbd8>)
 80036fa:	f7ff baa1 	b.w	8002c40 <_dtoa_r+0xd8>
 80036fe:	f1b9 0f00 	cmp.w	r9, #0
 8003702:	dc03      	bgt.n	800370c <_dtoa_r+0xba4>
 8003704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003706:	2b02      	cmp	r3, #2
 8003708:	f73f aecb 	bgt.w	80034a2 <_dtoa_r+0x93a>
 800370c:	9f03      	ldr	r7, [sp, #12]
 800370e:	4621      	mov	r1, r4
 8003710:	4658      	mov	r0, fp
 8003712:	f7ff f99b 	bl	8002a4c <quorem>
 8003716:	9a03      	ldr	r2, [sp, #12]
 8003718:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800371c:	f807 3b01 	strb.w	r3, [r7], #1
 8003720:	1aba      	subs	r2, r7, r2
 8003722:	4591      	cmp	r9, r2
 8003724:	ddba      	ble.n	800369c <_dtoa_r+0xb34>
 8003726:	4659      	mov	r1, fp
 8003728:	2300      	movs	r3, #0
 800372a:	220a      	movs	r2, #10
 800372c:	4628      	mov	r0, r5
 800372e:	f000 faaf 	bl	8003c90 <__multadd>
 8003732:	4683      	mov	fp, r0
 8003734:	e7eb      	b.n	800370e <_dtoa_r+0xba6>
 8003736:	bf00      	nop
 8003738:	08004bd7 	.word	0x08004bd7
 800373c:	08004b34 	.word	0x08004b34
 8003740:	08004b58 	.word	0x08004b58

08003744 <__sflush_r>:
 8003744:	898a      	ldrh	r2, [r1, #12]
 8003746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003748:	4605      	mov	r5, r0
 800374a:	0710      	lsls	r0, r2, #28
 800374c:	460c      	mov	r4, r1
 800374e:	d457      	bmi.n	8003800 <__sflush_r+0xbc>
 8003750:	684b      	ldr	r3, [r1, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	dc04      	bgt.n	8003760 <__sflush_r+0x1c>
 8003756:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	dc01      	bgt.n	8003760 <__sflush_r+0x1c>
 800375c:	2000      	movs	r0, #0
 800375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003762:	2e00      	cmp	r6, #0
 8003764:	d0fa      	beq.n	800375c <__sflush_r+0x18>
 8003766:	2300      	movs	r3, #0
 8003768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800376c:	682f      	ldr	r7, [r5, #0]
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	d032      	beq.n	80037d8 <__sflush_r+0x94>
 8003772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	075a      	lsls	r2, r3, #29
 8003778:	d505      	bpl.n	8003786 <__sflush_r+0x42>
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	1ac0      	subs	r0, r0, r3
 800377e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003780:	b10b      	cbz	r3, 8003786 <__sflush_r+0x42>
 8003782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003784:	1ac0      	subs	r0, r0, r3
 8003786:	2300      	movs	r3, #0
 8003788:	4602      	mov	r2, r0
 800378a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800378c:	4628      	mov	r0, r5
 800378e:	6a21      	ldr	r1, [r4, #32]
 8003790:	47b0      	blx	r6
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	d106      	bne.n	80037a6 <__sflush_r+0x62>
 8003798:	6829      	ldr	r1, [r5, #0]
 800379a:	291d      	cmp	r1, #29
 800379c:	d82c      	bhi.n	80037f8 <__sflush_r+0xb4>
 800379e:	4a29      	ldr	r2, [pc, #164]	; (8003844 <__sflush_r+0x100>)
 80037a0:	40ca      	lsrs	r2, r1
 80037a2:	07d6      	lsls	r6, r2, #31
 80037a4:	d528      	bpl.n	80037f8 <__sflush_r+0xb4>
 80037a6:	2200      	movs	r2, #0
 80037a8:	6062      	str	r2, [r4, #4]
 80037aa:	6922      	ldr	r2, [r4, #16]
 80037ac:	04d9      	lsls	r1, r3, #19
 80037ae:	6022      	str	r2, [r4, #0]
 80037b0:	d504      	bpl.n	80037bc <__sflush_r+0x78>
 80037b2:	1c42      	adds	r2, r0, #1
 80037b4:	d101      	bne.n	80037ba <__sflush_r+0x76>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	b903      	cbnz	r3, 80037bc <__sflush_r+0x78>
 80037ba:	6560      	str	r0, [r4, #84]	; 0x54
 80037bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037be:	602f      	str	r7, [r5, #0]
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d0cb      	beq.n	800375c <__sflush_r+0x18>
 80037c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c8:	4299      	cmp	r1, r3
 80037ca:	d002      	beq.n	80037d2 <__sflush_r+0x8e>
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 fd93 	bl	80042f8 <_free_r>
 80037d2:	2000      	movs	r0, #0
 80037d4:	6360      	str	r0, [r4, #52]	; 0x34
 80037d6:	e7c2      	b.n	800375e <__sflush_r+0x1a>
 80037d8:	6a21      	ldr	r1, [r4, #32]
 80037da:	2301      	movs	r3, #1
 80037dc:	4628      	mov	r0, r5
 80037de:	47b0      	blx	r6
 80037e0:	1c41      	adds	r1, r0, #1
 80037e2:	d1c7      	bne.n	8003774 <__sflush_r+0x30>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c4      	beq.n	8003774 <__sflush_r+0x30>
 80037ea:	2b1d      	cmp	r3, #29
 80037ec:	d001      	beq.n	80037f2 <__sflush_r+0xae>
 80037ee:	2b16      	cmp	r3, #22
 80037f0:	d101      	bne.n	80037f6 <__sflush_r+0xb2>
 80037f2:	602f      	str	r7, [r5, #0]
 80037f4:	e7b2      	b.n	800375c <__sflush_r+0x18>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	e7ae      	b.n	800375e <__sflush_r+0x1a>
 8003800:	690f      	ldr	r7, [r1, #16]
 8003802:	2f00      	cmp	r7, #0
 8003804:	d0aa      	beq.n	800375c <__sflush_r+0x18>
 8003806:	0793      	lsls	r3, r2, #30
 8003808:	bf18      	it	ne
 800380a:	2300      	movne	r3, #0
 800380c:	680e      	ldr	r6, [r1, #0]
 800380e:	bf08      	it	eq
 8003810:	694b      	ldreq	r3, [r1, #20]
 8003812:	1bf6      	subs	r6, r6, r7
 8003814:	600f      	str	r7, [r1, #0]
 8003816:	608b      	str	r3, [r1, #8]
 8003818:	2e00      	cmp	r6, #0
 800381a:	dd9f      	ble.n	800375c <__sflush_r+0x18>
 800381c:	4633      	mov	r3, r6
 800381e:	463a      	mov	r2, r7
 8003820:	4628      	mov	r0, r5
 8003822:	6a21      	ldr	r1, [r4, #32]
 8003824:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003828:	47e0      	blx	ip
 800382a:	2800      	cmp	r0, #0
 800382c:	dc06      	bgt.n	800383c <__sflush_r+0xf8>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	e790      	b.n	800375e <__sflush_r+0x1a>
 800383c:	4407      	add	r7, r0
 800383e:	1a36      	subs	r6, r6, r0
 8003840:	e7ea      	b.n	8003818 <__sflush_r+0xd4>
 8003842:	bf00      	nop
 8003844:	20400001 	.word	0x20400001

08003848 <_fflush_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	690b      	ldr	r3, [r1, #16]
 800384c:	4605      	mov	r5, r0
 800384e:	460c      	mov	r4, r1
 8003850:	b913      	cbnz	r3, 8003858 <_fflush_r+0x10>
 8003852:	2500      	movs	r5, #0
 8003854:	4628      	mov	r0, r5
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	b118      	cbz	r0, 8003862 <_fflush_r+0x1a>
 800385a:	6983      	ldr	r3, [r0, #24]
 800385c:	b90b      	cbnz	r3, 8003862 <_fflush_r+0x1a>
 800385e:	f000 f887 	bl	8003970 <__sinit>
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <_fflush_r+0x6c>)
 8003864:	429c      	cmp	r4, r3
 8003866:	d11b      	bne.n	80038a0 <_fflush_r+0x58>
 8003868:	686c      	ldr	r4, [r5, #4]
 800386a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ef      	beq.n	8003852 <_fflush_r+0xa>
 8003872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003874:	07d0      	lsls	r0, r2, #31
 8003876:	d404      	bmi.n	8003882 <_fflush_r+0x3a>
 8003878:	0599      	lsls	r1, r3, #22
 800387a:	d402      	bmi.n	8003882 <_fflush_r+0x3a>
 800387c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800387e:	f000 f91a 	bl	8003ab6 <__retarget_lock_acquire_recursive>
 8003882:	4628      	mov	r0, r5
 8003884:	4621      	mov	r1, r4
 8003886:	f7ff ff5d 	bl	8003744 <__sflush_r>
 800388a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800388c:	4605      	mov	r5, r0
 800388e:	07da      	lsls	r2, r3, #31
 8003890:	d4e0      	bmi.n	8003854 <_fflush_r+0xc>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	059b      	lsls	r3, r3, #22
 8003896:	d4dd      	bmi.n	8003854 <_fflush_r+0xc>
 8003898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800389a:	f000 f90d 	bl	8003ab8 <__retarget_lock_release_recursive>
 800389e:	e7d9      	b.n	8003854 <_fflush_r+0xc>
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <_fflush_r+0x70>)
 80038a2:	429c      	cmp	r4, r3
 80038a4:	d101      	bne.n	80038aa <_fflush_r+0x62>
 80038a6:	68ac      	ldr	r4, [r5, #8]
 80038a8:	e7df      	b.n	800386a <_fflush_r+0x22>
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <_fflush_r+0x74>)
 80038ac:	429c      	cmp	r4, r3
 80038ae:	bf08      	it	eq
 80038b0:	68ec      	ldreq	r4, [r5, #12]
 80038b2:	e7da      	b.n	800386a <_fflush_r+0x22>
 80038b4:	08004c08 	.word	0x08004c08
 80038b8:	08004c28 	.word	0x08004c28
 80038bc:	08004be8 	.word	0x08004be8

080038c0 <std>:
 80038c0:	2300      	movs	r3, #0
 80038c2:	b510      	push	{r4, lr}
 80038c4:	4604      	mov	r4, r0
 80038c6:	e9c0 3300 	strd	r3, r3, [r0]
 80038ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ce:	6083      	str	r3, [r0, #8]
 80038d0:	8181      	strh	r1, [r0, #12]
 80038d2:	6643      	str	r3, [r0, #100]	; 0x64
 80038d4:	81c2      	strh	r2, [r0, #14]
 80038d6:	6183      	str	r3, [r0, #24]
 80038d8:	4619      	mov	r1, r3
 80038da:	2208      	movs	r2, #8
 80038dc:	305c      	adds	r0, #92	; 0x5c
 80038de:	f7fe faff 	bl	8001ee0 <memset>
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <std+0x38>)
 80038e4:	6224      	str	r4, [r4, #32]
 80038e6:	6263      	str	r3, [r4, #36]	; 0x24
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <std+0x3c>)
 80038ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <std+0x40>)
 80038ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <std+0x44>)
 80038f2:	6323      	str	r3, [r4, #48]	; 0x30
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	bf00      	nop
 80038f8:	08004781 	.word	0x08004781
 80038fc:	080047a3 	.word	0x080047a3
 8003900:	080047db 	.word	0x080047db
 8003904:	080047ff 	.word	0x080047ff

08003908 <_cleanup_r>:
 8003908:	4901      	ldr	r1, [pc, #4]	; (8003910 <_cleanup_r+0x8>)
 800390a:	f000 b8af 	b.w	8003a6c <_fwalk_reent>
 800390e:	bf00      	nop
 8003910:	08003849 	.word	0x08003849

08003914 <__sfmoreglue>:
 8003914:	2268      	movs	r2, #104	; 0x68
 8003916:	b570      	push	{r4, r5, r6, lr}
 8003918:	1e4d      	subs	r5, r1, #1
 800391a:	4355      	muls	r5, r2
 800391c:	460e      	mov	r6, r1
 800391e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003922:	f000 fd51 	bl	80043c8 <_malloc_r>
 8003926:	4604      	mov	r4, r0
 8003928:	b140      	cbz	r0, 800393c <__sfmoreglue+0x28>
 800392a:	2100      	movs	r1, #0
 800392c:	e9c0 1600 	strd	r1, r6, [r0]
 8003930:	300c      	adds	r0, #12
 8003932:	60a0      	str	r0, [r4, #8]
 8003934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003938:	f7fe fad2 	bl	8001ee0 <memset>
 800393c:	4620      	mov	r0, r4
 800393e:	bd70      	pop	{r4, r5, r6, pc}

08003940 <__sfp_lock_acquire>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__sfp_lock_acquire+0x8>)
 8003942:	f000 b8b8 	b.w	8003ab6 <__retarget_lock_acquire_recursive>
 8003946:	bf00      	nop
 8003948:	20000241 	.word	0x20000241

0800394c <__sfp_lock_release>:
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <__sfp_lock_release+0x8>)
 800394e:	f000 b8b3 	b.w	8003ab8 <__retarget_lock_release_recursive>
 8003952:	bf00      	nop
 8003954:	20000241 	.word	0x20000241

08003958 <__sinit_lock_acquire>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__sinit_lock_acquire+0x8>)
 800395a:	f000 b8ac 	b.w	8003ab6 <__retarget_lock_acquire_recursive>
 800395e:	bf00      	nop
 8003960:	20000242 	.word	0x20000242

08003964 <__sinit_lock_release>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__sinit_lock_release+0x8>)
 8003966:	f000 b8a7 	b.w	8003ab8 <__retarget_lock_release_recursive>
 800396a:	bf00      	nop
 800396c:	20000242 	.word	0x20000242

08003970 <__sinit>:
 8003970:	b510      	push	{r4, lr}
 8003972:	4604      	mov	r4, r0
 8003974:	f7ff fff0 	bl	8003958 <__sinit_lock_acquire>
 8003978:	69a3      	ldr	r3, [r4, #24]
 800397a:	b11b      	cbz	r3, 8003984 <__sinit+0x14>
 800397c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003980:	f7ff bff0 	b.w	8003964 <__sinit_lock_release>
 8003984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003988:	6523      	str	r3, [r4, #80]	; 0x50
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <__sinit+0x68>)
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <__sinit+0x6c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	62a2      	str	r2, [r4, #40]	; 0x28
 8003992:	42a3      	cmp	r3, r4
 8003994:	bf08      	it	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	4620      	mov	r0, r4
 800399a:	bf08      	it	eq
 800399c:	61a3      	streq	r3, [r4, #24]
 800399e:	f000 f81f 	bl	80039e0 <__sfp>
 80039a2:	6060      	str	r0, [r4, #4]
 80039a4:	4620      	mov	r0, r4
 80039a6:	f000 f81b 	bl	80039e0 <__sfp>
 80039aa:	60a0      	str	r0, [r4, #8]
 80039ac:	4620      	mov	r0, r4
 80039ae:	f000 f817 	bl	80039e0 <__sfp>
 80039b2:	2200      	movs	r2, #0
 80039b4:	2104      	movs	r1, #4
 80039b6:	60e0      	str	r0, [r4, #12]
 80039b8:	6860      	ldr	r0, [r4, #4]
 80039ba:	f7ff ff81 	bl	80038c0 <std>
 80039be:	2201      	movs	r2, #1
 80039c0:	2109      	movs	r1, #9
 80039c2:	68a0      	ldr	r0, [r4, #8]
 80039c4:	f7ff ff7c 	bl	80038c0 <std>
 80039c8:	2202      	movs	r2, #2
 80039ca:	2112      	movs	r1, #18
 80039cc:	68e0      	ldr	r0, [r4, #12]
 80039ce:	f7ff ff77 	bl	80038c0 <std>
 80039d2:	2301      	movs	r3, #1
 80039d4:	61a3      	str	r3, [r4, #24]
 80039d6:	e7d1      	b.n	800397c <__sinit+0xc>
 80039d8:	08004b20 	.word	0x08004b20
 80039dc:	08003909 	.word	0x08003909

080039e0 <__sfp>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	4607      	mov	r7, r0
 80039e4:	f7ff ffac 	bl	8003940 <__sfp_lock_acquire>
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <__sfp+0x84>)
 80039ea:	681e      	ldr	r6, [r3, #0]
 80039ec:	69b3      	ldr	r3, [r6, #24]
 80039ee:	b913      	cbnz	r3, 80039f6 <__sfp+0x16>
 80039f0:	4630      	mov	r0, r6
 80039f2:	f7ff ffbd 	bl	8003970 <__sinit>
 80039f6:	3648      	adds	r6, #72	; 0x48
 80039f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	d503      	bpl.n	8003a08 <__sfp+0x28>
 8003a00:	6833      	ldr	r3, [r6, #0]
 8003a02:	b30b      	cbz	r3, 8003a48 <__sfp+0x68>
 8003a04:	6836      	ldr	r6, [r6, #0]
 8003a06:	e7f7      	b.n	80039f8 <__sfp+0x18>
 8003a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a0c:	b9d5      	cbnz	r5, 8003a44 <__sfp+0x64>
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <__sfp+0x88>)
 8003a10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a14:	60e3      	str	r3, [r4, #12]
 8003a16:	6665      	str	r5, [r4, #100]	; 0x64
 8003a18:	f000 f84c 	bl	8003ab4 <__retarget_lock_init_recursive>
 8003a1c:	f7ff ff96 	bl	800394c <__sfp_lock_release>
 8003a20:	2208      	movs	r2, #8
 8003a22:	4629      	mov	r1, r5
 8003a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a2c:	6025      	str	r5, [r4, #0]
 8003a2e:	61a5      	str	r5, [r4, #24]
 8003a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a34:	f7fe fa54 	bl	8001ee0 <memset>
 8003a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a40:	4620      	mov	r0, r4
 8003a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a44:	3468      	adds	r4, #104	; 0x68
 8003a46:	e7d9      	b.n	80039fc <__sfp+0x1c>
 8003a48:	2104      	movs	r1, #4
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	f7ff ff62 	bl	8003914 <__sfmoreglue>
 8003a50:	4604      	mov	r4, r0
 8003a52:	6030      	str	r0, [r6, #0]
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d1d5      	bne.n	8003a04 <__sfp+0x24>
 8003a58:	f7ff ff78 	bl	800394c <__sfp_lock_release>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	e7ee      	b.n	8003a40 <__sfp+0x60>
 8003a62:	bf00      	nop
 8003a64:	08004b20 	.word	0x08004b20
 8003a68:	ffff0001 	.word	0xffff0001

08003a6c <_fwalk_reent>:
 8003a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a70:	4606      	mov	r6, r0
 8003a72:	4688      	mov	r8, r1
 8003a74:	2700      	movs	r7, #0
 8003a76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8003a82:	d505      	bpl.n	8003a90 <_fwalk_reent+0x24>
 8003a84:	6824      	ldr	r4, [r4, #0]
 8003a86:	2c00      	cmp	r4, #0
 8003a88:	d1f7      	bne.n	8003a7a <_fwalk_reent+0xe>
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a90:	89ab      	ldrh	r3, [r5, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d907      	bls.n	8003aa6 <_fwalk_reent+0x3a>
 8003a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	d003      	beq.n	8003aa6 <_fwalk_reent+0x3a>
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	47c0      	blx	r8
 8003aa4:	4307      	orrs	r7, r0
 8003aa6:	3568      	adds	r5, #104	; 0x68
 8003aa8:	e7e9      	b.n	8003a7e <_fwalk_reent+0x12>
	...

08003aac <_localeconv_r>:
 8003aac:	4800      	ldr	r0, [pc, #0]	; (8003ab0 <_localeconv_r+0x4>)
 8003aae:	4770      	bx	lr
 8003ab0:	20000160 	.word	0x20000160

08003ab4 <__retarget_lock_init_recursive>:
 8003ab4:	4770      	bx	lr

08003ab6 <__retarget_lock_acquire_recursive>:
 8003ab6:	4770      	bx	lr

08003ab8 <__retarget_lock_release_recursive>:
 8003ab8:	4770      	bx	lr

08003aba <__swhatbuf_r>:
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	460e      	mov	r6, r1
 8003abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac2:	4614      	mov	r4, r2
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	461d      	mov	r5, r3
 8003ac8:	b096      	sub	sp, #88	; 0x58
 8003aca:	da08      	bge.n	8003ade <__swhatbuf_r+0x24>
 8003acc:	2200      	movs	r2, #0
 8003ace:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ad2:	602a      	str	r2, [r5, #0]
 8003ad4:	061a      	lsls	r2, r3, #24
 8003ad6:	d410      	bmi.n	8003afa <__swhatbuf_r+0x40>
 8003ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003adc:	e00e      	b.n	8003afc <__swhatbuf_r+0x42>
 8003ade:	466a      	mov	r2, sp
 8003ae0:	f000 fee4 	bl	80048ac <_fstat_r>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	dbf1      	blt.n	8003acc <__swhatbuf_r+0x12>
 8003ae8:	9a01      	ldr	r2, [sp, #4]
 8003aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003af2:	425a      	negs	r2, r3
 8003af4:	415a      	adcs	r2, r3
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	e7ee      	b.n	8003ad8 <__swhatbuf_r+0x1e>
 8003afa:	2340      	movs	r3, #64	; 0x40
 8003afc:	2000      	movs	r0, #0
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	b016      	add	sp, #88	; 0x58
 8003b02:	bd70      	pop	{r4, r5, r6, pc}

08003b04 <__smakebuf_r>:
 8003b04:	898b      	ldrh	r3, [r1, #12]
 8003b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b08:	079d      	lsls	r5, r3, #30
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	d507      	bpl.n	8003b20 <__smakebuf_r+0x1c>
 8003b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	6163      	str	r3, [r4, #20]
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	466a      	mov	r2, sp
 8003b22:	ab01      	add	r3, sp, #4
 8003b24:	f7ff ffc9 	bl	8003aba <__swhatbuf_r>
 8003b28:	9900      	ldr	r1, [sp, #0]
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 fc4b 	bl	80043c8 <_malloc_r>
 8003b32:	b948      	cbnz	r0, 8003b48 <__smakebuf_r+0x44>
 8003b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b38:	059a      	lsls	r2, r3, #22
 8003b3a:	d4ef      	bmi.n	8003b1c <__smakebuf_r+0x18>
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	e7e3      	b.n	8003b10 <__smakebuf_r+0xc>
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <__smakebuf_r+0x7c>)
 8003b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	6120      	str	r0, [r4, #16]
 8003b5a:	6163      	str	r3, [r4, #20]
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	b15b      	cbz	r3, 8003b78 <__smakebuf_r+0x74>
 8003b60:	4630      	mov	r0, r6
 8003b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b66:	f000 feb3 	bl	80048d0 <_isatty_r>
 8003b6a:	b128      	cbz	r0, 8003b78 <__smakebuf_r+0x74>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	89a0      	ldrh	r0, [r4, #12]
 8003b7a:	4305      	orrs	r5, r0
 8003b7c:	81a5      	strh	r5, [r4, #12]
 8003b7e:	e7cd      	b.n	8003b1c <__smakebuf_r+0x18>
 8003b80:	08003909 	.word	0x08003909

08003b84 <malloc>:
 8003b84:	4b02      	ldr	r3, [pc, #8]	; (8003b90 <malloc+0xc>)
 8003b86:	4601      	mov	r1, r0
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	f000 bc1d 	b.w	80043c8 <_malloc_r>
 8003b8e:	bf00      	nop
 8003b90:	2000000c 	.word	0x2000000c

08003b94 <memchr>:
 8003b94:	4603      	mov	r3, r0
 8003b96:	b510      	push	{r4, lr}
 8003b98:	b2c9      	uxtb	r1, r1
 8003b9a:	4402      	add	r2, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	d101      	bne.n	8003ba6 <memchr+0x12>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e003      	b.n	8003bae <memchr+0x1a>
 8003ba6:	7804      	ldrb	r4, [r0, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	428c      	cmp	r4, r1
 8003bac:	d1f6      	bne.n	8003b9c <memchr+0x8>
 8003bae:	bd10      	pop	{r4, pc}

08003bb0 <memcpy>:
 8003bb0:	440a      	add	r2, r1
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bb8:	d100      	bne.n	8003bbc <memcpy+0xc>
 8003bba:	4770      	bx	lr
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bc2:	4291      	cmp	r1, r2
 8003bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bc8:	d1f9      	bne.n	8003bbe <memcpy+0xe>
 8003bca:	bd10      	pop	{r4, pc}

08003bcc <_Balloc>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	460d      	mov	r5, r1
 8003bd4:	b976      	cbnz	r6, 8003bf4 <_Balloc+0x28>
 8003bd6:	2010      	movs	r0, #16
 8003bd8:	f7ff ffd4 	bl	8003b84 <malloc>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6260      	str	r0, [r4, #36]	; 0x24
 8003be0:	b920      	cbnz	r0, 8003bec <_Balloc+0x20>
 8003be2:	2166      	movs	r1, #102	; 0x66
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <_Balloc+0x78>)
 8003be6:	4818      	ldr	r0, [pc, #96]	; (8003c48 <_Balloc+0x7c>)
 8003be8:	f000 fe20 	bl	800482c <__assert_func>
 8003bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bf0:	6006      	str	r6, [r0, #0]
 8003bf2:	60c6      	str	r6, [r0, #12]
 8003bf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003bf6:	68f3      	ldr	r3, [r6, #12]
 8003bf8:	b183      	cbz	r3, 8003c1c <_Balloc+0x50>
 8003bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003c02:	b9b8      	cbnz	r0, 8003c34 <_Balloc+0x68>
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f605 	lsl.w	r6, r1, r5
 8003c0a:	1d72      	adds	r2, r6, #5
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	f000 fb5e 	bl	80042d0 <_calloc_r>
 8003c14:	b160      	cbz	r0, 8003c30 <_Balloc+0x64>
 8003c16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003c1a:	e00e      	b.n	8003c3a <_Balloc+0x6e>
 8003c1c:	2221      	movs	r2, #33	; 0x21
 8003c1e:	2104      	movs	r1, #4
 8003c20:	4620      	mov	r0, r4
 8003c22:	f000 fb55 	bl	80042d0 <_calloc_r>
 8003c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c28:	60f0      	str	r0, [r6, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e4      	bne.n	8003bfa <_Balloc+0x2e>
 8003c30:	2000      	movs	r0, #0
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	6802      	ldr	r2, [r0, #0]
 8003c36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003c40:	e7f7      	b.n	8003c32 <_Balloc+0x66>
 8003c42:	bf00      	nop
 8003c44:	08004b65 	.word	0x08004b65
 8003c48:	08004c48 	.word	0x08004c48

08003c4c <_Bfree>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c50:	4605      	mov	r5, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	b976      	cbnz	r6, 8003c74 <_Bfree+0x28>
 8003c56:	2010      	movs	r0, #16
 8003c58:	f7ff ff94 	bl	8003b84 <malloc>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6268      	str	r0, [r5, #36]	; 0x24
 8003c60:	b920      	cbnz	r0, 8003c6c <_Bfree+0x20>
 8003c62:	218a      	movs	r1, #138	; 0x8a
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <_Bfree+0x3c>)
 8003c66:	4809      	ldr	r0, [pc, #36]	; (8003c8c <_Bfree+0x40>)
 8003c68:	f000 fde0 	bl	800482c <__assert_func>
 8003c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c70:	6006      	str	r6, [r0, #0]
 8003c72:	60c6      	str	r6, [r0, #12]
 8003c74:	b13c      	cbz	r4, 8003c86 <_Bfree+0x3a>
 8003c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c78:	6862      	ldr	r2, [r4, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c80:	6021      	str	r1, [r4, #0]
 8003c82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	08004b65 	.word	0x08004b65
 8003c8c:	08004c48 	.word	0x08004c48

08003c90 <__multadd>:
 8003c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c94:	4607      	mov	r7, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	461e      	mov	r6, r3
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	690d      	ldr	r5, [r1, #16]
 8003c9e:	f101 0c14 	add.w	ip, r1, #20
 8003ca2:	f8dc 3000 	ldr.w	r3, [ip]
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	b299      	uxth	r1, r3
 8003caa:	fb02 6101 	mla	r1, r2, r1, r6
 8003cae:	0c1e      	lsrs	r6, r3, #16
 8003cb0:	0c0b      	lsrs	r3, r1, #16
 8003cb2:	fb02 3306 	mla	r3, r2, r6, r3
 8003cb6:	b289      	uxth	r1, r1
 8003cb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003cbc:	4285      	cmp	r5, r0
 8003cbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003cc2:	f84c 1b04 	str.w	r1, [ip], #4
 8003cc6:	dcec      	bgt.n	8003ca2 <__multadd+0x12>
 8003cc8:	b30e      	cbz	r6, 8003d0e <__multadd+0x7e>
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	42ab      	cmp	r3, r5
 8003cce:	dc19      	bgt.n	8003d04 <__multadd+0x74>
 8003cd0:	6861      	ldr	r1, [r4, #4]
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	3101      	adds	r1, #1
 8003cd6:	f7ff ff79 	bl	8003bcc <_Balloc>
 8003cda:	4680      	mov	r8, r0
 8003cdc:	b928      	cbnz	r0, 8003cea <__multadd+0x5a>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	21b5      	movs	r1, #181	; 0xb5
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <__multadd+0x84>)
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <__multadd+0x88>)
 8003ce6:	f000 fda1 	bl	800482c <__assert_func>
 8003cea:	6922      	ldr	r2, [r4, #16]
 8003cec:	f104 010c 	add.w	r1, r4, #12
 8003cf0:	3202      	adds	r2, #2
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	300c      	adds	r0, #12
 8003cf6:	f7ff ff5b 	bl	8003bb0 <memcpy>
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f7ff ffa5 	bl	8003c4c <_Bfree>
 8003d02:	4644      	mov	r4, r8
 8003d04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003d08:	3501      	adds	r5, #1
 8003d0a:	615e      	str	r6, [r3, #20]
 8003d0c:	6125      	str	r5, [r4, #16]
 8003d0e:	4620      	mov	r0, r4
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d14:	08004bd7 	.word	0x08004bd7
 8003d18:	08004c48 	.word	0x08004c48

08003d1c <__hi0bits>:
 8003d1c:	0c02      	lsrs	r2, r0, #16
 8003d1e:	0412      	lsls	r2, r2, #16
 8003d20:	4603      	mov	r3, r0
 8003d22:	b9ca      	cbnz	r2, 8003d58 <__hi0bits+0x3c>
 8003d24:	0403      	lsls	r3, r0, #16
 8003d26:	2010      	movs	r0, #16
 8003d28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003d2c:	bf04      	itt	eq
 8003d2e:	021b      	lsleq	r3, r3, #8
 8003d30:	3008      	addeq	r0, #8
 8003d32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003d36:	bf04      	itt	eq
 8003d38:	011b      	lsleq	r3, r3, #4
 8003d3a:	3004      	addeq	r0, #4
 8003d3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003d40:	bf04      	itt	eq
 8003d42:	009b      	lsleq	r3, r3, #2
 8003d44:	3002      	addeq	r0, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db05      	blt.n	8003d56 <__hi0bits+0x3a>
 8003d4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003d4e:	f100 0001 	add.w	r0, r0, #1
 8003d52:	bf08      	it	eq
 8003d54:	2020      	moveq	r0, #32
 8003d56:	4770      	bx	lr
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e7e5      	b.n	8003d28 <__hi0bits+0xc>

08003d5c <__lo0bits>:
 8003d5c:	6803      	ldr	r3, [r0, #0]
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f013 0007 	ands.w	r0, r3, #7
 8003d64:	d00b      	beq.n	8003d7e <__lo0bits+0x22>
 8003d66:	07d9      	lsls	r1, r3, #31
 8003d68:	d421      	bmi.n	8003dae <__lo0bits+0x52>
 8003d6a:	0798      	lsls	r0, r3, #30
 8003d6c:	bf49      	itett	mi
 8003d6e:	085b      	lsrmi	r3, r3, #1
 8003d70:	089b      	lsrpl	r3, r3, #2
 8003d72:	2001      	movmi	r0, #1
 8003d74:	6013      	strmi	r3, [r2, #0]
 8003d76:	bf5c      	itt	pl
 8003d78:	2002      	movpl	r0, #2
 8003d7a:	6013      	strpl	r3, [r2, #0]
 8003d7c:	4770      	bx	lr
 8003d7e:	b299      	uxth	r1, r3
 8003d80:	b909      	cbnz	r1, 8003d86 <__lo0bits+0x2a>
 8003d82:	2010      	movs	r0, #16
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2d9      	uxtb	r1, r3
 8003d88:	b909      	cbnz	r1, 8003d8e <__lo0bits+0x32>
 8003d8a:	3008      	adds	r0, #8
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	0719      	lsls	r1, r3, #28
 8003d90:	bf04      	itt	eq
 8003d92:	091b      	lsreq	r3, r3, #4
 8003d94:	3004      	addeq	r0, #4
 8003d96:	0799      	lsls	r1, r3, #30
 8003d98:	bf04      	itt	eq
 8003d9a:	089b      	lsreq	r3, r3, #2
 8003d9c:	3002      	addeq	r0, #2
 8003d9e:	07d9      	lsls	r1, r3, #31
 8003da0:	d403      	bmi.n	8003daa <__lo0bits+0x4e>
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	f100 0001 	add.w	r0, r0, #1
 8003da8:	d003      	beq.n	8003db2 <__lo0bits+0x56>
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4770      	bx	lr
 8003dae:	2000      	movs	r0, #0
 8003db0:	4770      	bx	lr
 8003db2:	2020      	movs	r0, #32
 8003db4:	4770      	bx	lr
	...

08003db8 <__i2b>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	460c      	mov	r4, r1
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	f7ff ff05 	bl	8003bcc <_Balloc>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	b928      	cbnz	r0, 8003dd2 <__i2b+0x1a>
 8003dc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <__i2b+0x24>)
 8003dcc:	4804      	ldr	r0, [pc, #16]	; (8003de0 <__i2b+0x28>)
 8003dce:	f000 fd2d 	bl	800482c <__assert_func>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	6144      	str	r4, [r0, #20]
 8003dd6:	6103      	str	r3, [r0, #16]
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	bf00      	nop
 8003ddc:	08004bd7 	.word	0x08004bd7
 8003de0:	08004c48 	.word	0x08004c48

08003de4 <__multiply>:
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	4691      	mov	r9, r2
 8003dea:	690a      	ldr	r2, [r1, #16]
 8003dec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003df0:	460c      	mov	r4, r1
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bfbe      	ittt	lt
 8003df6:	460b      	movlt	r3, r1
 8003df8:	464c      	movlt	r4, r9
 8003dfa:	4699      	movlt	r9, r3
 8003dfc:	6927      	ldr	r7, [r4, #16]
 8003dfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	6861      	ldr	r1, [r4, #4]
 8003e06:	eb07 060a 	add.w	r6, r7, sl
 8003e0a:	42b3      	cmp	r3, r6
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	bfb8      	it	lt
 8003e10:	3101      	addlt	r1, #1
 8003e12:	f7ff fedb 	bl	8003bcc <_Balloc>
 8003e16:	b930      	cbnz	r0, 8003e26 <__multiply+0x42>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f240 115d 	movw	r1, #349	; 0x15d
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <__multiply+0x148>)
 8003e20:	4843      	ldr	r0, [pc, #268]	; (8003f30 <__multiply+0x14c>)
 8003e22:	f000 fd03 	bl	800482c <__assert_func>
 8003e26:	f100 0514 	add.w	r5, r0, #20
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003e32:	4543      	cmp	r3, r8
 8003e34:	d321      	bcc.n	8003e7a <__multiply+0x96>
 8003e36:	f104 0314 	add.w	r3, r4, #20
 8003e3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003e3e:	f109 0314 	add.w	r3, r9, #20
 8003e42:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003e46:	9202      	str	r2, [sp, #8]
 8003e48:	1b3a      	subs	r2, r7, r4
 8003e4a:	3a15      	subs	r2, #21
 8003e4c:	f022 0203 	bic.w	r2, r2, #3
 8003e50:	3204      	adds	r2, #4
 8003e52:	f104 0115 	add.w	r1, r4, #21
 8003e56:	428f      	cmp	r7, r1
 8003e58:	bf38      	it	cc
 8003e5a:	2204      	movcc	r2, #4
 8003e5c:	9201      	str	r2, [sp, #4]
 8003e5e:	9a02      	ldr	r2, [sp, #8]
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d80c      	bhi.n	8003e80 <__multiply+0x9c>
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	dd03      	ble.n	8003e72 <__multiply+0x8e>
 8003e6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d059      	beq.n	8003f26 <__multiply+0x142>
 8003e72:	6106      	str	r6, [r0, #16]
 8003e74:	b005      	add	sp, #20
 8003e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7a:	f843 2b04 	str.w	r2, [r3], #4
 8003e7e:	e7d8      	b.n	8003e32 <__multiply+0x4e>
 8003e80:	f8b3 a000 	ldrh.w	sl, [r3]
 8003e84:	f1ba 0f00 	cmp.w	sl, #0
 8003e88:	d023      	beq.n	8003ed2 <__multiply+0xee>
 8003e8a:	46a9      	mov	r9, r5
 8003e8c:	f04f 0c00 	mov.w	ip, #0
 8003e90:	f104 0e14 	add.w	lr, r4, #20
 8003e94:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003e98:	f8d9 1000 	ldr.w	r1, [r9]
 8003e9c:	fa1f fb82 	uxth.w	fp, r2
 8003ea0:	b289      	uxth	r1, r1
 8003ea2:	fb0a 110b 	mla	r1, sl, fp, r1
 8003ea6:	4461      	add	r1, ip
 8003ea8:	f8d9 c000 	ldr.w	ip, [r9]
 8003eac:	0c12      	lsrs	r2, r2, #16
 8003eae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003eb2:	fb0a c202 	mla	r2, sl, r2, ip
 8003eb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003eba:	b289      	uxth	r1, r1
 8003ebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003ec0:	4577      	cmp	r7, lr
 8003ec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003ec6:	f849 1b04 	str.w	r1, [r9], #4
 8003eca:	d8e3      	bhi.n	8003e94 <__multiply+0xb0>
 8003ecc:	9a01      	ldr	r2, [sp, #4]
 8003ece:	f845 c002 	str.w	ip, [r5, r2]
 8003ed2:	9a03      	ldr	r2, [sp, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003eda:	f1b9 0f00 	cmp.w	r9, #0
 8003ede:	d020      	beq.n	8003f22 <__multiply+0x13e>
 8003ee0:	46ae      	mov	lr, r5
 8003ee2:	f04f 0a00 	mov.w	sl, #0
 8003ee6:	6829      	ldr	r1, [r5, #0]
 8003ee8:	f104 0c14 	add.w	ip, r4, #20
 8003eec:	f8bc b000 	ldrh.w	fp, [ip]
 8003ef0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003ef4:	b289      	uxth	r1, r1
 8003ef6:	fb09 220b 	mla	r2, r9, fp, r2
 8003efa:	4492      	add	sl, r2
 8003efc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003f00:	f84e 1b04 	str.w	r1, [lr], #4
 8003f04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003f08:	f8be 1000 	ldrh.w	r1, [lr]
 8003f0c:	0c12      	lsrs	r2, r2, #16
 8003f0e:	fb09 1102 	mla	r1, r9, r2, r1
 8003f12:	4567      	cmp	r7, ip
 8003f14:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003f18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003f1c:	d8e6      	bhi.n	8003eec <__multiply+0x108>
 8003f1e:	9a01      	ldr	r2, [sp, #4]
 8003f20:	50a9      	str	r1, [r5, r2]
 8003f22:	3504      	adds	r5, #4
 8003f24:	e79b      	b.n	8003e5e <__multiply+0x7a>
 8003f26:	3e01      	subs	r6, #1
 8003f28:	e79d      	b.n	8003e66 <__multiply+0x82>
 8003f2a:	bf00      	nop
 8003f2c:	08004bd7 	.word	0x08004bd7
 8003f30:	08004c48 	.word	0x08004c48

08003f34 <__pow5mult>:
 8003f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f38:	4615      	mov	r5, r2
 8003f3a:	f012 0203 	ands.w	r2, r2, #3
 8003f3e:	4606      	mov	r6, r0
 8003f40:	460f      	mov	r7, r1
 8003f42:	d007      	beq.n	8003f54 <__pow5mult+0x20>
 8003f44:	4c25      	ldr	r4, [pc, #148]	; (8003fdc <__pow5mult+0xa8>)
 8003f46:	3a01      	subs	r2, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003f4e:	f7ff fe9f 	bl	8003c90 <__multadd>
 8003f52:	4607      	mov	r7, r0
 8003f54:	10ad      	asrs	r5, r5, #2
 8003f56:	d03d      	beq.n	8003fd4 <__pow5mult+0xa0>
 8003f58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003f5a:	b97c      	cbnz	r4, 8003f7c <__pow5mult+0x48>
 8003f5c:	2010      	movs	r0, #16
 8003f5e:	f7ff fe11 	bl	8003b84 <malloc>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6270      	str	r0, [r6, #36]	; 0x24
 8003f66:	b928      	cbnz	r0, 8003f74 <__pow5mult+0x40>
 8003f68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <__pow5mult+0xac>)
 8003f6e:	481d      	ldr	r0, [pc, #116]	; (8003fe4 <__pow5mult+0xb0>)
 8003f70:	f000 fc5c 	bl	800482c <__assert_func>
 8003f74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f78:	6004      	str	r4, [r0, #0]
 8003f7a:	60c4      	str	r4, [r0, #12]
 8003f7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003f80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f84:	b94c      	cbnz	r4, 8003f9a <__pow5mult+0x66>
 8003f86:	f240 2171 	movw	r1, #625	; 0x271
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff ff14 	bl	8003db8 <__i2b>
 8003f90:	2300      	movs	r3, #0
 8003f92:	4604      	mov	r4, r0
 8003f94:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	f04f 0900 	mov.w	r9, #0
 8003f9e:	07eb      	lsls	r3, r5, #31
 8003fa0:	d50a      	bpl.n	8003fb8 <__pow5mult+0x84>
 8003fa2:	4639      	mov	r1, r7
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7ff ff1c 	bl	8003de4 <__multiply>
 8003fac:	4680      	mov	r8, r0
 8003fae:	4639      	mov	r1, r7
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f7ff fe4b 	bl	8003c4c <_Bfree>
 8003fb6:	4647      	mov	r7, r8
 8003fb8:	106d      	asrs	r5, r5, #1
 8003fba:	d00b      	beq.n	8003fd4 <__pow5mult+0xa0>
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	b938      	cbnz	r0, 8003fd0 <__pow5mult+0x9c>
 8003fc0:	4622      	mov	r2, r4
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff ff0d 	bl	8003de4 <__multiply>
 8003fca:	6020      	str	r0, [r4, #0]
 8003fcc:	f8c0 9000 	str.w	r9, [r0]
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	e7e4      	b.n	8003f9e <__pow5mult+0x6a>
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fda:	bf00      	nop
 8003fdc:	08004d98 	.word	0x08004d98
 8003fe0:	08004b65 	.word	0x08004b65
 8003fe4:	08004c48 	.word	0x08004c48

08003fe8 <__lshift>:
 8003fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	460c      	mov	r4, r1
 8003fee:	4607      	mov	r7, r0
 8003ff0:	4691      	mov	r9, r2
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	6849      	ldr	r1, [r1, #4]
 8003ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004000:	f108 0601 	add.w	r6, r8, #1
 8004004:	42b3      	cmp	r3, r6
 8004006:	db0b      	blt.n	8004020 <__lshift+0x38>
 8004008:	4638      	mov	r0, r7
 800400a:	f7ff fddf 	bl	8003bcc <_Balloc>
 800400e:	4605      	mov	r5, r0
 8004010:	b948      	cbnz	r0, 8004026 <__lshift+0x3e>
 8004012:	4602      	mov	r2, r0
 8004014:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <__lshift+0xd8>)
 800401a:	482a      	ldr	r0, [pc, #168]	; (80040c4 <__lshift+0xdc>)
 800401c:	f000 fc06 	bl	800482c <__assert_func>
 8004020:	3101      	adds	r1, #1
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	e7ee      	b.n	8004004 <__lshift+0x1c>
 8004026:	2300      	movs	r3, #0
 8004028:	f100 0114 	add.w	r1, r0, #20
 800402c:	f100 0210 	add.w	r2, r0, #16
 8004030:	4618      	mov	r0, r3
 8004032:	4553      	cmp	r3, sl
 8004034:	db37      	blt.n	80040a6 <__lshift+0xbe>
 8004036:	6920      	ldr	r0, [r4, #16]
 8004038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800403c:	f104 0314 	add.w	r3, r4, #20
 8004040:	f019 091f 	ands.w	r9, r9, #31
 8004044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004048:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800404c:	d02f      	beq.n	80040ae <__lshift+0xc6>
 800404e:	468a      	mov	sl, r1
 8004050:	f04f 0c00 	mov.w	ip, #0
 8004054:	f1c9 0e20 	rsb	lr, r9, #32
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	fa02 f209 	lsl.w	r2, r2, r9
 800405e:	ea42 020c 	orr.w	r2, r2, ip
 8004062:	f84a 2b04 	str.w	r2, [sl], #4
 8004066:	f853 2b04 	ldr.w	r2, [r3], #4
 800406a:	4298      	cmp	r0, r3
 800406c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004070:	d8f2      	bhi.n	8004058 <__lshift+0x70>
 8004072:	1b03      	subs	r3, r0, r4
 8004074:	3b15      	subs	r3, #21
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	3304      	adds	r3, #4
 800407c:	f104 0215 	add.w	r2, r4, #21
 8004080:	4290      	cmp	r0, r2
 8004082:	bf38      	it	cc
 8004084:	2304      	movcc	r3, #4
 8004086:	f841 c003 	str.w	ip, [r1, r3]
 800408a:	f1bc 0f00 	cmp.w	ip, #0
 800408e:	d001      	beq.n	8004094 <__lshift+0xac>
 8004090:	f108 0602 	add.w	r6, r8, #2
 8004094:	3e01      	subs	r6, #1
 8004096:	4638      	mov	r0, r7
 8004098:	4621      	mov	r1, r4
 800409a:	612e      	str	r6, [r5, #16]
 800409c:	f7ff fdd6 	bl	8003c4c <_Bfree>
 80040a0:	4628      	mov	r0, r5
 80040a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80040aa:	3301      	adds	r3, #1
 80040ac:	e7c1      	b.n	8004032 <__lshift+0x4a>
 80040ae:	3904      	subs	r1, #4
 80040b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b4:	4298      	cmp	r0, r3
 80040b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80040ba:	d8f9      	bhi.n	80040b0 <__lshift+0xc8>
 80040bc:	e7ea      	b.n	8004094 <__lshift+0xac>
 80040be:	bf00      	nop
 80040c0:	08004bd7 	.word	0x08004bd7
 80040c4:	08004c48 	.word	0x08004c48

080040c8 <__mcmp>:
 80040c8:	4603      	mov	r3, r0
 80040ca:	690a      	ldr	r2, [r1, #16]
 80040cc:	6900      	ldr	r0, [r0, #16]
 80040ce:	b530      	push	{r4, r5, lr}
 80040d0:	1a80      	subs	r0, r0, r2
 80040d2:	d10d      	bne.n	80040f0 <__mcmp+0x28>
 80040d4:	3314      	adds	r3, #20
 80040d6:	3114      	adds	r1, #20
 80040d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80040dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80040e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80040e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80040e8:	4295      	cmp	r5, r2
 80040ea:	d002      	beq.n	80040f2 <__mcmp+0x2a>
 80040ec:	d304      	bcc.n	80040f8 <__mcmp+0x30>
 80040ee:	2001      	movs	r0, #1
 80040f0:	bd30      	pop	{r4, r5, pc}
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	d3f4      	bcc.n	80040e0 <__mcmp+0x18>
 80040f6:	e7fb      	b.n	80040f0 <__mcmp+0x28>
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	e7f8      	b.n	80040f0 <__mcmp+0x28>
	...

08004100 <__mdiff>:
 8004100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004104:	460d      	mov	r5, r1
 8004106:	4607      	mov	r7, r0
 8004108:	4611      	mov	r1, r2
 800410a:	4628      	mov	r0, r5
 800410c:	4614      	mov	r4, r2
 800410e:	f7ff ffdb 	bl	80040c8 <__mcmp>
 8004112:	1e06      	subs	r6, r0, #0
 8004114:	d111      	bne.n	800413a <__mdiff+0x3a>
 8004116:	4631      	mov	r1, r6
 8004118:	4638      	mov	r0, r7
 800411a:	f7ff fd57 	bl	8003bcc <_Balloc>
 800411e:	4602      	mov	r2, r0
 8004120:	b928      	cbnz	r0, 800412e <__mdiff+0x2e>
 8004122:	f240 2132 	movw	r1, #562	; 0x232
 8004126:	4b3a      	ldr	r3, [pc, #232]	; (8004210 <__mdiff+0x110>)
 8004128:	483a      	ldr	r0, [pc, #232]	; (8004214 <__mdiff+0x114>)
 800412a:	f000 fb7f 	bl	800482c <__assert_func>
 800412e:	2301      	movs	r3, #1
 8004130:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004134:	4610      	mov	r0, r2
 8004136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413a:	bfa4      	itt	ge
 800413c:	4623      	movge	r3, r4
 800413e:	462c      	movge	r4, r5
 8004140:	4638      	mov	r0, r7
 8004142:	6861      	ldr	r1, [r4, #4]
 8004144:	bfa6      	itte	ge
 8004146:	461d      	movge	r5, r3
 8004148:	2600      	movge	r6, #0
 800414a:	2601      	movlt	r6, #1
 800414c:	f7ff fd3e 	bl	8003bcc <_Balloc>
 8004150:	4602      	mov	r2, r0
 8004152:	b918      	cbnz	r0, 800415c <__mdiff+0x5c>
 8004154:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <__mdiff+0x110>)
 800415a:	e7e5      	b.n	8004128 <__mdiff+0x28>
 800415c:	f102 0814 	add.w	r8, r2, #20
 8004160:	46c2      	mov	sl, r8
 8004162:	f04f 0c00 	mov.w	ip, #0
 8004166:	6927      	ldr	r7, [r4, #16]
 8004168:	60c6      	str	r6, [r0, #12]
 800416a:	692e      	ldr	r6, [r5, #16]
 800416c:	f104 0014 	add.w	r0, r4, #20
 8004170:	f105 0914 	add.w	r9, r5, #20
 8004174:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004178:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800417c:	3410      	adds	r4, #16
 800417e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004182:	f859 3b04 	ldr.w	r3, [r9], #4
 8004186:	fa1f f18b 	uxth.w	r1, fp
 800418a:	448c      	add	ip, r1
 800418c:	b299      	uxth	r1, r3
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	ebac 0101 	sub.w	r1, ip, r1
 8004194:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004198:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800419c:	b289      	uxth	r1, r1
 800419e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80041a2:	454e      	cmp	r6, r9
 80041a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80041a8:	f84a 3b04 	str.w	r3, [sl], #4
 80041ac:	d8e7      	bhi.n	800417e <__mdiff+0x7e>
 80041ae:	1b73      	subs	r3, r6, r5
 80041b0:	3b15      	subs	r3, #21
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	3515      	adds	r5, #21
 80041b8:	3304      	adds	r3, #4
 80041ba:	42ae      	cmp	r6, r5
 80041bc:	bf38      	it	cc
 80041be:	2304      	movcc	r3, #4
 80041c0:	4418      	add	r0, r3
 80041c2:	4443      	add	r3, r8
 80041c4:	461e      	mov	r6, r3
 80041c6:	4605      	mov	r5, r0
 80041c8:	4575      	cmp	r5, lr
 80041ca:	d30e      	bcc.n	80041ea <__mdiff+0xea>
 80041cc:	f10e 0103 	add.w	r1, lr, #3
 80041d0:	1a09      	subs	r1, r1, r0
 80041d2:	f021 0103 	bic.w	r1, r1, #3
 80041d6:	3803      	subs	r0, #3
 80041d8:	4586      	cmp	lr, r0
 80041da:	bf38      	it	cc
 80041dc:	2100      	movcc	r1, #0
 80041de:	4419      	add	r1, r3
 80041e0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80041e4:	b18b      	cbz	r3, 800420a <__mdiff+0x10a>
 80041e6:	6117      	str	r7, [r2, #16]
 80041e8:	e7a4      	b.n	8004134 <__mdiff+0x34>
 80041ea:	f855 8b04 	ldr.w	r8, [r5], #4
 80041ee:	fa1f f188 	uxth.w	r1, r8
 80041f2:	4461      	add	r1, ip
 80041f4:	140c      	asrs	r4, r1, #16
 80041f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80041fa:	b289      	uxth	r1, r1
 80041fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004200:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004204:	f846 1b04 	str.w	r1, [r6], #4
 8004208:	e7de      	b.n	80041c8 <__mdiff+0xc8>
 800420a:	3f01      	subs	r7, #1
 800420c:	e7e8      	b.n	80041e0 <__mdiff+0xe0>
 800420e:	bf00      	nop
 8004210:	08004bd7 	.word	0x08004bd7
 8004214:	08004c48 	.word	0x08004c48

08004218 <__d2b>:
 8004218:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800421c:	2101      	movs	r1, #1
 800421e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004222:	4690      	mov	r8, r2
 8004224:	461d      	mov	r5, r3
 8004226:	f7ff fcd1 	bl	8003bcc <_Balloc>
 800422a:	4604      	mov	r4, r0
 800422c:	b930      	cbnz	r0, 800423c <__d2b+0x24>
 800422e:	4602      	mov	r2, r0
 8004230:	f240 310a 	movw	r1, #778	; 0x30a
 8004234:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <__d2b+0xb0>)
 8004236:	4825      	ldr	r0, [pc, #148]	; (80042cc <__d2b+0xb4>)
 8004238:	f000 faf8 	bl	800482c <__assert_func>
 800423c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004240:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004244:	bb2d      	cbnz	r5, 8004292 <__d2b+0x7a>
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	f1b8 0300 	subs.w	r3, r8, #0
 800424c:	d026      	beq.n	800429c <__d2b+0x84>
 800424e:	4668      	mov	r0, sp
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	f7ff fd83 	bl	8003d5c <__lo0bits>
 8004256:	9900      	ldr	r1, [sp, #0]
 8004258:	b1f0      	cbz	r0, 8004298 <__d2b+0x80>
 800425a:	9a01      	ldr	r2, [sp, #4]
 800425c:	f1c0 0320 	rsb	r3, r0, #32
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	430b      	orrs	r3, r1
 8004266:	40c2      	lsrs	r2, r0
 8004268:	6163      	str	r3, [r4, #20]
 800426a:	9201      	str	r2, [sp, #4]
 800426c:	9b01      	ldr	r3, [sp, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2102      	movne	r1, #2
 8004274:	2101      	moveq	r1, #1
 8004276:	61a3      	str	r3, [r4, #24]
 8004278:	6121      	str	r1, [r4, #16]
 800427a:	b1c5      	cbz	r5, 80042ae <__d2b+0x96>
 800427c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004280:	4405      	add	r5, r0
 8004282:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004286:	603d      	str	r5, [r7, #0]
 8004288:	6030      	str	r0, [r6, #0]
 800428a:	4620      	mov	r0, r4
 800428c:	b002      	add	sp, #8
 800428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	e7d6      	b.n	8004246 <__d2b+0x2e>
 8004298:	6161      	str	r1, [r4, #20]
 800429a:	e7e7      	b.n	800426c <__d2b+0x54>
 800429c:	a801      	add	r0, sp, #4
 800429e:	f7ff fd5d 	bl	8003d5c <__lo0bits>
 80042a2:	2101      	movs	r1, #1
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	6121      	str	r1, [r4, #16]
 80042a8:	6163      	str	r3, [r4, #20]
 80042aa:	3020      	adds	r0, #32
 80042ac:	e7e5      	b.n	800427a <__d2b+0x62>
 80042ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80042b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80042b6:	6038      	str	r0, [r7, #0]
 80042b8:	6918      	ldr	r0, [r3, #16]
 80042ba:	f7ff fd2f 	bl	8003d1c <__hi0bits>
 80042be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80042c2:	6031      	str	r1, [r6, #0]
 80042c4:	e7e1      	b.n	800428a <__d2b+0x72>
 80042c6:	bf00      	nop
 80042c8:	08004bd7 	.word	0x08004bd7
 80042cc:	08004c48 	.word	0x08004c48

080042d0 <_calloc_r>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	fba1 5402 	umull	r5, r4, r1, r2
 80042d6:	b934      	cbnz	r4, 80042e6 <_calloc_r+0x16>
 80042d8:	4629      	mov	r1, r5
 80042da:	f000 f875 	bl	80043c8 <_malloc_r>
 80042de:	4606      	mov	r6, r0
 80042e0:	b928      	cbnz	r0, 80042ee <_calloc_r+0x1e>
 80042e2:	4630      	mov	r0, r6
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	220c      	movs	r2, #12
 80042e8:	2600      	movs	r6, #0
 80042ea:	6002      	str	r2, [r0, #0]
 80042ec:	e7f9      	b.n	80042e2 <_calloc_r+0x12>
 80042ee:	462a      	mov	r2, r5
 80042f0:	4621      	mov	r1, r4
 80042f2:	f7fd fdf5 	bl	8001ee0 <memset>
 80042f6:	e7f4      	b.n	80042e2 <_calloc_r+0x12>

080042f8 <_free_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4605      	mov	r5, r0
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d040      	beq.n	8004382 <_free_r+0x8a>
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f0c      	subs	r4, r1, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb8      	it	lt
 800430a:	18e4      	addlt	r4, r4, r3
 800430c:	f000 fb14 	bl	8004938 <__malloc_lock>
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <_free_r+0x8c>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	b933      	cbnz	r3, 8004324 <_free_r+0x2c>
 8004316:	6063      	str	r3, [r4, #4]
 8004318:	6014      	str	r4, [r2, #0]
 800431a:	4628      	mov	r0, r5
 800431c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004320:	f000 bb10 	b.w	8004944 <__malloc_unlock>
 8004324:	42a3      	cmp	r3, r4
 8004326:	d908      	bls.n	800433a <_free_r+0x42>
 8004328:	6820      	ldr	r0, [r4, #0]
 800432a:	1821      	adds	r1, r4, r0
 800432c:	428b      	cmp	r3, r1
 800432e:	bf01      	itttt	eq
 8004330:	6819      	ldreq	r1, [r3, #0]
 8004332:	685b      	ldreq	r3, [r3, #4]
 8004334:	1809      	addeq	r1, r1, r0
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	e7ed      	b.n	8004316 <_free_r+0x1e>
 800433a:	461a      	mov	r2, r3
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	b10b      	cbz	r3, 8004344 <_free_r+0x4c>
 8004340:	42a3      	cmp	r3, r4
 8004342:	d9fa      	bls.n	800433a <_free_r+0x42>
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	1850      	adds	r0, r2, r1
 8004348:	42a0      	cmp	r0, r4
 800434a:	d10b      	bne.n	8004364 <_free_r+0x6c>
 800434c:	6820      	ldr	r0, [r4, #0]
 800434e:	4401      	add	r1, r0
 8004350:	1850      	adds	r0, r2, r1
 8004352:	4283      	cmp	r3, r0
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	d1e0      	bne.n	800431a <_free_r+0x22>
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4401      	add	r1, r0
 800435e:	6011      	str	r1, [r2, #0]
 8004360:	6053      	str	r3, [r2, #4]
 8004362:	e7da      	b.n	800431a <_free_r+0x22>
 8004364:	d902      	bls.n	800436c <_free_r+0x74>
 8004366:	230c      	movs	r3, #12
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	e7d6      	b.n	800431a <_free_r+0x22>
 800436c:	6820      	ldr	r0, [r4, #0]
 800436e:	1821      	adds	r1, r4, r0
 8004370:	428b      	cmp	r3, r1
 8004372:	bf01      	itttt	eq
 8004374:	6819      	ldreq	r1, [r3, #0]
 8004376:	685b      	ldreq	r3, [r3, #4]
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	6063      	str	r3, [r4, #4]
 800437e:	6054      	str	r4, [r2, #4]
 8004380:	e7cb      	b.n	800431a <_free_r+0x22>
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	20000244 	.word	0x20000244

08004388 <sbrk_aligned>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4e0e      	ldr	r6, [pc, #56]	; (80043c4 <sbrk_aligned+0x3c>)
 800438c:	460c      	mov	r4, r1
 800438e:	6831      	ldr	r1, [r6, #0]
 8004390:	4605      	mov	r5, r0
 8004392:	b911      	cbnz	r1, 800439a <sbrk_aligned+0x12>
 8004394:	f000 f9e4 	bl	8004760 <_sbrk_r>
 8004398:	6030      	str	r0, [r6, #0]
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 f9df 	bl	8004760 <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d00a      	beq.n	80043bc <sbrk_aligned+0x34>
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	f024 0403 	bic.w	r4, r4, #3
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d007      	beq.n	80043c0 <sbrk_aligned+0x38>
 80043b0:	1a21      	subs	r1, r4, r0
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 f9d4 	bl	8004760 <_sbrk_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d101      	bne.n	80043c0 <sbrk_aligned+0x38>
 80043bc:	f04f 34ff 	mov.w	r4, #4294967295
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd70      	pop	{r4, r5, r6, pc}
 80043c4:	20000248 	.word	0x20000248

080043c8 <_malloc_r>:
 80043c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043cc:	1ccd      	adds	r5, r1, #3
 80043ce:	f025 0503 	bic.w	r5, r5, #3
 80043d2:	3508      	adds	r5, #8
 80043d4:	2d0c      	cmp	r5, #12
 80043d6:	bf38      	it	cc
 80043d8:	250c      	movcc	r5, #12
 80043da:	2d00      	cmp	r5, #0
 80043dc:	4607      	mov	r7, r0
 80043de:	db01      	blt.n	80043e4 <_malloc_r+0x1c>
 80043e0:	42a9      	cmp	r1, r5
 80043e2:	d905      	bls.n	80043f0 <_malloc_r+0x28>
 80043e4:	230c      	movs	r3, #12
 80043e6:	2600      	movs	r6, #0
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	4630      	mov	r0, r6
 80043ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043f0:	4e2e      	ldr	r6, [pc, #184]	; (80044ac <_malloc_r+0xe4>)
 80043f2:	f000 faa1 	bl	8004938 <__malloc_lock>
 80043f6:	6833      	ldr	r3, [r6, #0]
 80043f8:	461c      	mov	r4, r3
 80043fa:	bb34      	cbnz	r4, 800444a <_malloc_r+0x82>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4638      	mov	r0, r7
 8004400:	f7ff ffc2 	bl	8004388 <sbrk_aligned>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	4604      	mov	r4, r0
 8004408:	d14d      	bne.n	80044a6 <_malloc_r+0xde>
 800440a:	6834      	ldr	r4, [r6, #0]
 800440c:	4626      	mov	r6, r4
 800440e:	2e00      	cmp	r6, #0
 8004410:	d140      	bne.n	8004494 <_malloc_r+0xcc>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	4631      	mov	r1, r6
 8004416:	4638      	mov	r0, r7
 8004418:	eb04 0803 	add.w	r8, r4, r3
 800441c:	f000 f9a0 	bl	8004760 <_sbrk_r>
 8004420:	4580      	cmp	r8, r0
 8004422:	d13a      	bne.n	800449a <_malloc_r+0xd2>
 8004424:	6821      	ldr	r1, [r4, #0]
 8004426:	3503      	adds	r5, #3
 8004428:	1a6d      	subs	r5, r5, r1
 800442a:	f025 0503 	bic.w	r5, r5, #3
 800442e:	3508      	adds	r5, #8
 8004430:	2d0c      	cmp	r5, #12
 8004432:	bf38      	it	cc
 8004434:	250c      	movcc	r5, #12
 8004436:	4638      	mov	r0, r7
 8004438:	4629      	mov	r1, r5
 800443a:	f7ff ffa5 	bl	8004388 <sbrk_aligned>
 800443e:	3001      	adds	r0, #1
 8004440:	d02b      	beq.n	800449a <_malloc_r+0xd2>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	442b      	add	r3, r5
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	e00e      	b.n	8004468 <_malloc_r+0xa0>
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	1b52      	subs	r2, r2, r5
 800444e:	d41e      	bmi.n	800448e <_malloc_r+0xc6>
 8004450:	2a0b      	cmp	r2, #11
 8004452:	d916      	bls.n	8004482 <_malloc_r+0xba>
 8004454:	1961      	adds	r1, r4, r5
 8004456:	42a3      	cmp	r3, r4
 8004458:	6025      	str	r5, [r4, #0]
 800445a:	bf18      	it	ne
 800445c:	6059      	strne	r1, [r3, #4]
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	bf08      	it	eq
 8004462:	6031      	streq	r1, [r6, #0]
 8004464:	5162      	str	r2, [r4, r5]
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	4638      	mov	r0, r7
 800446a:	f104 060b 	add.w	r6, r4, #11
 800446e:	f000 fa69 	bl	8004944 <__malloc_unlock>
 8004472:	f026 0607 	bic.w	r6, r6, #7
 8004476:	1d23      	adds	r3, r4, #4
 8004478:	1af2      	subs	r2, r6, r3
 800447a:	d0b6      	beq.n	80043ea <_malloc_r+0x22>
 800447c:	1b9b      	subs	r3, r3, r6
 800447e:	50a3      	str	r3, [r4, r2]
 8004480:	e7b3      	b.n	80043ea <_malloc_r+0x22>
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	42a3      	cmp	r3, r4
 8004486:	bf0c      	ite	eq
 8004488:	6032      	streq	r2, [r6, #0]
 800448a:	605a      	strne	r2, [r3, #4]
 800448c:	e7ec      	b.n	8004468 <_malloc_r+0xa0>
 800448e:	4623      	mov	r3, r4
 8004490:	6864      	ldr	r4, [r4, #4]
 8004492:	e7b2      	b.n	80043fa <_malloc_r+0x32>
 8004494:	4634      	mov	r4, r6
 8004496:	6876      	ldr	r6, [r6, #4]
 8004498:	e7b9      	b.n	800440e <_malloc_r+0x46>
 800449a:	230c      	movs	r3, #12
 800449c:	4638      	mov	r0, r7
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	f000 fa50 	bl	8004944 <__malloc_unlock>
 80044a4:	e7a1      	b.n	80043ea <_malloc_r+0x22>
 80044a6:	6025      	str	r5, [r4, #0]
 80044a8:	e7de      	b.n	8004468 <_malloc_r+0xa0>
 80044aa:	bf00      	nop
 80044ac:	20000244 	.word	0x20000244

080044b0 <__sfputc_r>:
 80044b0:	6893      	ldr	r3, [r2, #8]
 80044b2:	b410      	push	{r4}
 80044b4:	3b01      	subs	r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	6093      	str	r3, [r2, #8]
 80044ba:	da07      	bge.n	80044cc <__sfputc_r+0x1c>
 80044bc:	6994      	ldr	r4, [r2, #24]
 80044be:	42a3      	cmp	r3, r4
 80044c0:	db01      	blt.n	80044c6 <__sfputc_r+0x16>
 80044c2:	290a      	cmp	r1, #10
 80044c4:	d102      	bne.n	80044cc <__sfputc_r+0x1c>
 80044c6:	bc10      	pop	{r4}
 80044c8:	f7fe ba00 	b.w	80028cc <__swbuf_r>
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	1c58      	adds	r0, r3, #1
 80044d0:	6010      	str	r0, [r2, #0]
 80044d2:	7019      	strb	r1, [r3, #0]
 80044d4:	4608      	mov	r0, r1
 80044d6:	bc10      	pop	{r4}
 80044d8:	4770      	bx	lr

080044da <__sfputs_r>:
 80044da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044dc:	4606      	mov	r6, r0
 80044de:	460f      	mov	r7, r1
 80044e0:	4614      	mov	r4, r2
 80044e2:	18d5      	adds	r5, r2, r3
 80044e4:	42ac      	cmp	r4, r5
 80044e6:	d101      	bne.n	80044ec <__sfputs_r+0x12>
 80044e8:	2000      	movs	r0, #0
 80044ea:	e007      	b.n	80044fc <__sfputs_r+0x22>
 80044ec:	463a      	mov	r2, r7
 80044ee:	4630      	mov	r0, r6
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	f7ff ffdc 	bl	80044b0 <__sfputc_r>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d1f3      	bne.n	80044e4 <__sfputs_r+0xa>
 80044fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004500 <_vfiprintf_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	460d      	mov	r5, r1
 8004506:	4614      	mov	r4, r2
 8004508:	4698      	mov	r8, r3
 800450a:	4606      	mov	r6, r0
 800450c:	b09d      	sub	sp, #116	; 0x74
 800450e:	b118      	cbz	r0, 8004518 <_vfiprintf_r+0x18>
 8004510:	6983      	ldr	r3, [r0, #24]
 8004512:	b90b      	cbnz	r3, 8004518 <_vfiprintf_r+0x18>
 8004514:	f7ff fa2c 	bl	8003970 <__sinit>
 8004518:	4b89      	ldr	r3, [pc, #548]	; (8004740 <_vfiprintf_r+0x240>)
 800451a:	429d      	cmp	r5, r3
 800451c:	d11b      	bne.n	8004556 <_vfiprintf_r+0x56>
 800451e:	6875      	ldr	r5, [r6, #4]
 8004520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004522:	07d9      	lsls	r1, r3, #31
 8004524:	d405      	bmi.n	8004532 <_vfiprintf_r+0x32>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	059a      	lsls	r2, r3, #22
 800452a:	d402      	bmi.n	8004532 <_vfiprintf_r+0x32>
 800452c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800452e:	f7ff fac2 	bl	8003ab6 <__retarget_lock_acquire_recursive>
 8004532:	89ab      	ldrh	r3, [r5, #12]
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	d501      	bpl.n	800453c <_vfiprintf_r+0x3c>
 8004538:	692b      	ldr	r3, [r5, #16]
 800453a:	b9eb      	cbnz	r3, 8004578 <_vfiprintf_r+0x78>
 800453c:	4629      	mov	r1, r5
 800453e:	4630      	mov	r0, r6
 8004540:	f7fe fa16 	bl	8002970 <__swsetup_r>
 8004544:	b1c0      	cbz	r0, 8004578 <_vfiprintf_r+0x78>
 8004546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004548:	07dc      	lsls	r4, r3, #31
 800454a:	d50e      	bpl.n	800456a <_vfiprintf_r+0x6a>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b01d      	add	sp, #116	; 0x74
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	4b7b      	ldr	r3, [pc, #492]	; (8004744 <_vfiprintf_r+0x244>)
 8004558:	429d      	cmp	r5, r3
 800455a:	d101      	bne.n	8004560 <_vfiprintf_r+0x60>
 800455c:	68b5      	ldr	r5, [r6, #8]
 800455e:	e7df      	b.n	8004520 <_vfiprintf_r+0x20>
 8004560:	4b79      	ldr	r3, [pc, #484]	; (8004748 <_vfiprintf_r+0x248>)
 8004562:	429d      	cmp	r5, r3
 8004564:	bf08      	it	eq
 8004566:	68f5      	ldreq	r5, [r6, #12]
 8004568:	e7da      	b.n	8004520 <_vfiprintf_r+0x20>
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	0598      	lsls	r0, r3, #22
 800456e:	d4ed      	bmi.n	800454c <_vfiprintf_r+0x4c>
 8004570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004572:	f7ff faa1 	bl	8003ab8 <__retarget_lock_release_recursive>
 8004576:	e7e9      	b.n	800454c <_vfiprintf_r+0x4c>
 8004578:	2300      	movs	r3, #0
 800457a:	9309      	str	r3, [sp, #36]	; 0x24
 800457c:	2320      	movs	r3, #32
 800457e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004582:	2330      	movs	r3, #48	; 0x30
 8004584:	f04f 0901 	mov.w	r9, #1
 8004588:	f8cd 800c 	str.w	r8, [sp, #12]
 800458c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800474c <_vfiprintf_r+0x24c>
 8004590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004594:	4623      	mov	r3, r4
 8004596:	469a      	mov	sl, r3
 8004598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800459c:	b10a      	cbz	r2, 80045a2 <_vfiprintf_r+0xa2>
 800459e:	2a25      	cmp	r2, #37	; 0x25
 80045a0:	d1f9      	bne.n	8004596 <_vfiprintf_r+0x96>
 80045a2:	ebba 0b04 	subs.w	fp, sl, r4
 80045a6:	d00b      	beq.n	80045c0 <_vfiprintf_r+0xc0>
 80045a8:	465b      	mov	r3, fp
 80045aa:	4622      	mov	r2, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	4630      	mov	r0, r6
 80045b0:	f7ff ff93 	bl	80044da <__sfputs_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	f000 80aa 	beq.w	800470e <_vfiprintf_r+0x20e>
 80045ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045bc:	445a      	add	r2, fp
 80045be:	9209      	str	r2, [sp, #36]	; 0x24
 80045c0:	f89a 3000 	ldrb.w	r3, [sl]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80a2 	beq.w	800470e <_vfiprintf_r+0x20e>
 80045ca:	2300      	movs	r3, #0
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045d4:	f10a 0a01 	add.w	sl, sl, #1
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	9307      	str	r3, [sp, #28]
 80045dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045e0:	931a      	str	r3, [sp, #104]	; 0x68
 80045e2:	4654      	mov	r4, sl
 80045e4:	2205      	movs	r2, #5
 80045e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ea:	4858      	ldr	r0, [pc, #352]	; (800474c <_vfiprintf_r+0x24c>)
 80045ec:	f7ff fad2 	bl	8003b94 <memchr>
 80045f0:	9a04      	ldr	r2, [sp, #16]
 80045f2:	b9d8      	cbnz	r0, 800462c <_vfiprintf_r+0x12c>
 80045f4:	06d1      	lsls	r1, r2, #27
 80045f6:	bf44      	itt	mi
 80045f8:	2320      	movmi	r3, #32
 80045fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045fe:	0713      	lsls	r3, r2, #28
 8004600:	bf44      	itt	mi
 8004602:	232b      	movmi	r3, #43	; 0x2b
 8004604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004608:	f89a 3000 	ldrb.w	r3, [sl]
 800460c:	2b2a      	cmp	r3, #42	; 0x2a
 800460e:	d015      	beq.n	800463c <_vfiprintf_r+0x13c>
 8004610:	4654      	mov	r4, sl
 8004612:	2000      	movs	r0, #0
 8004614:	f04f 0c0a 	mov.w	ip, #10
 8004618:	9a07      	ldr	r2, [sp, #28]
 800461a:	4621      	mov	r1, r4
 800461c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004620:	3b30      	subs	r3, #48	; 0x30
 8004622:	2b09      	cmp	r3, #9
 8004624:	d94e      	bls.n	80046c4 <_vfiprintf_r+0x1c4>
 8004626:	b1b0      	cbz	r0, 8004656 <_vfiprintf_r+0x156>
 8004628:	9207      	str	r2, [sp, #28]
 800462a:	e014      	b.n	8004656 <_vfiprintf_r+0x156>
 800462c:	eba0 0308 	sub.w	r3, r0, r8
 8004630:	fa09 f303 	lsl.w	r3, r9, r3
 8004634:	4313      	orrs	r3, r2
 8004636:	46a2      	mov	sl, r4
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	e7d2      	b.n	80045e2 <_vfiprintf_r+0xe2>
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	1d19      	adds	r1, r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	9103      	str	r1, [sp, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	bfbb      	ittet	lt
 8004648:	425b      	neglt	r3, r3
 800464a:	f042 0202 	orrlt.w	r2, r2, #2
 800464e:	9307      	strge	r3, [sp, #28]
 8004650:	9307      	strlt	r3, [sp, #28]
 8004652:	bfb8      	it	lt
 8004654:	9204      	strlt	r2, [sp, #16]
 8004656:	7823      	ldrb	r3, [r4, #0]
 8004658:	2b2e      	cmp	r3, #46	; 0x2e
 800465a:	d10c      	bne.n	8004676 <_vfiprintf_r+0x176>
 800465c:	7863      	ldrb	r3, [r4, #1]
 800465e:	2b2a      	cmp	r3, #42	; 0x2a
 8004660:	d135      	bne.n	80046ce <_vfiprintf_r+0x1ce>
 8004662:	9b03      	ldr	r3, [sp, #12]
 8004664:	3402      	adds	r4, #2
 8004666:	1d1a      	adds	r2, r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	9203      	str	r2, [sp, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	bfb8      	it	lt
 8004670:	f04f 33ff 	movlt.w	r3, #4294967295
 8004674:	9305      	str	r3, [sp, #20]
 8004676:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004750 <_vfiprintf_r+0x250>
 800467a:	2203      	movs	r2, #3
 800467c:	4650      	mov	r0, sl
 800467e:	7821      	ldrb	r1, [r4, #0]
 8004680:	f7ff fa88 	bl	8003b94 <memchr>
 8004684:	b140      	cbz	r0, 8004698 <_vfiprintf_r+0x198>
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	eba0 000a 	sub.w	r0, r0, sl
 800468c:	fa03 f000 	lsl.w	r0, r3, r0
 8004690:	9b04      	ldr	r3, [sp, #16]
 8004692:	3401      	adds	r4, #1
 8004694:	4303      	orrs	r3, r0
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800469c:	2206      	movs	r2, #6
 800469e:	482d      	ldr	r0, [pc, #180]	; (8004754 <_vfiprintf_r+0x254>)
 80046a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046a4:	f7ff fa76 	bl	8003b94 <memchr>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d03f      	beq.n	800472c <_vfiprintf_r+0x22c>
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <_vfiprintf_r+0x258>)
 80046ae:	bb1b      	cbnz	r3, 80046f8 <_vfiprintf_r+0x1f8>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	3307      	adds	r3, #7
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	3308      	adds	r3, #8
 80046ba:	9303      	str	r3, [sp, #12]
 80046bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046be:	443b      	add	r3, r7
 80046c0:	9309      	str	r3, [sp, #36]	; 0x24
 80046c2:	e767      	b.n	8004594 <_vfiprintf_r+0x94>
 80046c4:	460c      	mov	r4, r1
 80046c6:	2001      	movs	r0, #1
 80046c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80046cc:	e7a5      	b.n	800461a <_vfiprintf_r+0x11a>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f04f 0c0a 	mov.w	ip, #10
 80046d4:	4619      	mov	r1, r3
 80046d6:	3401      	adds	r4, #1
 80046d8:	9305      	str	r3, [sp, #20]
 80046da:	4620      	mov	r0, r4
 80046dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e0:	3a30      	subs	r2, #48	; 0x30
 80046e2:	2a09      	cmp	r2, #9
 80046e4:	d903      	bls.n	80046ee <_vfiprintf_r+0x1ee>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0c5      	beq.n	8004676 <_vfiprintf_r+0x176>
 80046ea:	9105      	str	r1, [sp, #20]
 80046ec:	e7c3      	b.n	8004676 <_vfiprintf_r+0x176>
 80046ee:	4604      	mov	r4, r0
 80046f0:	2301      	movs	r3, #1
 80046f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80046f6:	e7f0      	b.n	80046da <_vfiprintf_r+0x1da>
 80046f8:	ab03      	add	r3, sp, #12
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	462a      	mov	r2, r5
 80046fe:	4630      	mov	r0, r6
 8004700:	4b16      	ldr	r3, [pc, #88]	; (800475c <_vfiprintf_r+0x25c>)
 8004702:	a904      	add	r1, sp, #16
 8004704:	f7fd fc92 	bl	800202c <_printf_float>
 8004708:	4607      	mov	r7, r0
 800470a:	1c78      	adds	r0, r7, #1
 800470c:	d1d6      	bne.n	80046bc <_vfiprintf_r+0x1bc>
 800470e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004710:	07d9      	lsls	r1, r3, #31
 8004712:	d405      	bmi.n	8004720 <_vfiprintf_r+0x220>
 8004714:	89ab      	ldrh	r3, [r5, #12]
 8004716:	059a      	lsls	r2, r3, #22
 8004718:	d402      	bmi.n	8004720 <_vfiprintf_r+0x220>
 800471a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800471c:	f7ff f9cc 	bl	8003ab8 <__retarget_lock_release_recursive>
 8004720:	89ab      	ldrh	r3, [r5, #12]
 8004722:	065b      	lsls	r3, r3, #25
 8004724:	f53f af12 	bmi.w	800454c <_vfiprintf_r+0x4c>
 8004728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800472a:	e711      	b.n	8004550 <_vfiprintf_r+0x50>
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4630      	mov	r0, r6
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <_vfiprintf_r+0x25c>)
 8004736:	a904      	add	r1, sp, #16
 8004738:	f7fd ff14 	bl	8002564 <_printf_i>
 800473c:	e7e4      	b.n	8004708 <_vfiprintf_r+0x208>
 800473e:	bf00      	nop
 8004740:	08004c08 	.word	0x08004c08
 8004744:	08004c28 	.word	0x08004c28
 8004748:	08004be8 	.word	0x08004be8
 800474c:	08004da4 	.word	0x08004da4
 8004750:	08004daa 	.word	0x08004daa
 8004754:	08004dae 	.word	0x08004dae
 8004758:	0800202d 	.word	0x0800202d
 800475c:	080044db 	.word	0x080044db

08004760 <_sbrk_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	2300      	movs	r3, #0
 8004764:	4d05      	ldr	r5, [pc, #20]	; (800477c <_sbrk_r+0x1c>)
 8004766:	4604      	mov	r4, r0
 8004768:	4608      	mov	r0, r1
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	f000 f992 	bl	8004a94 <_sbrk>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_sbrk_r+0x1a>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_sbrk_r+0x1a>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	2000024c 	.word	0x2000024c

08004780 <__sread>:
 8004780:	b510      	push	{r4, lr}
 8004782:	460c      	mov	r4, r1
 8004784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004788:	f000 f8e2 	bl	8004950 <_read_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	bfab      	itete	ge
 8004790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004792:	89a3      	ldrhlt	r3, [r4, #12]
 8004794:	181b      	addge	r3, r3, r0
 8004796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800479a:	bfac      	ite	ge
 800479c:	6563      	strge	r3, [r4, #84]	; 0x54
 800479e:	81a3      	strhlt	r3, [r4, #12]
 80047a0:	bd10      	pop	{r4, pc}

080047a2 <__swrite>:
 80047a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	461f      	mov	r7, r3
 80047a8:	898b      	ldrh	r3, [r1, #12]
 80047aa:	4605      	mov	r5, r0
 80047ac:	05db      	lsls	r3, r3, #23
 80047ae:	460c      	mov	r4, r1
 80047b0:	4616      	mov	r6, r2
 80047b2:	d505      	bpl.n	80047c0 <__swrite+0x1e>
 80047b4:	2302      	movs	r3, #2
 80047b6:	2200      	movs	r2, #0
 80047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047bc:	f000 f898 	bl	80048f0 <_lseek_r>
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	4632      	mov	r2, r6
 80047c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	4628      	mov	r0, r5
 80047cc:	463b      	mov	r3, r7
 80047ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047d6:	f000 b817 	b.w	8004808 <_write_r>

080047da <__sseek>:
 80047da:	b510      	push	{r4, lr}
 80047dc:	460c      	mov	r4, r1
 80047de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e2:	f000 f885 	bl	80048f0 <_lseek_r>
 80047e6:	1c43      	adds	r3, r0, #1
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	bf15      	itete	ne
 80047ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80047ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047f6:	81a3      	strheq	r3, [r4, #12]
 80047f8:	bf18      	it	ne
 80047fa:	81a3      	strhne	r3, [r4, #12]
 80047fc:	bd10      	pop	{r4, pc}

080047fe <__sclose>:
 80047fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004802:	f000 b831 	b.w	8004868 <_close_r>
	...

08004808 <_write_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	2200      	movs	r2, #0
 8004812:	4d05      	ldr	r5, [pc, #20]	; (8004828 <_write_r+0x20>)
 8004814:	602a      	str	r2, [r5, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	f7fc f970 	bl	8000afc <_write>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_write_r+0x1e>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_write_r+0x1e>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	2000024c 	.word	0x2000024c

0800482c <__assert_func>:
 800482c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800482e:	4614      	mov	r4, r2
 8004830:	461a      	mov	r2, r3
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <__assert_func+0x2c>)
 8004834:	4605      	mov	r5, r0
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68d8      	ldr	r0, [r3, #12]
 800483a:	b14c      	cbz	r4, 8004850 <__assert_func+0x24>
 800483c:	4b07      	ldr	r3, [pc, #28]	; (800485c <__assert_func+0x30>)
 800483e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004842:	9100      	str	r1, [sp, #0]
 8004844:	462b      	mov	r3, r5
 8004846:	4906      	ldr	r1, [pc, #24]	; (8004860 <__assert_func+0x34>)
 8004848:	f000 f81e 	bl	8004888 <fiprintf>
 800484c:	f000 f89f 	bl	800498e <abort>
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <__assert_func+0x38>)
 8004852:	461c      	mov	r4, r3
 8004854:	e7f3      	b.n	800483e <__assert_func+0x12>
 8004856:	bf00      	nop
 8004858:	2000000c 	.word	0x2000000c
 800485c:	08004db5 	.word	0x08004db5
 8004860:	08004dc2 	.word	0x08004dc2
 8004864:	08004df0 	.word	0x08004df0

08004868 <_close_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	2300      	movs	r3, #0
 800486c:	4d05      	ldr	r5, [pc, #20]	; (8004884 <_close_r+0x1c>)
 800486e:	4604      	mov	r4, r0
 8004870:	4608      	mov	r0, r1
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f000 f8d6 	bl	8004a24 <_close>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d102      	bne.n	8004882 <_close_r+0x1a>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	b103      	cbz	r3, 8004882 <_close_r+0x1a>
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	2000024c 	.word	0x2000024c

08004888 <fiprintf>:
 8004888:	b40e      	push	{r1, r2, r3}
 800488a:	b503      	push	{r0, r1, lr}
 800488c:	4601      	mov	r1, r0
 800488e:	ab03      	add	r3, sp, #12
 8004890:	4805      	ldr	r0, [pc, #20]	; (80048a8 <fiprintf+0x20>)
 8004892:	f853 2b04 	ldr.w	r2, [r3], #4
 8004896:	6800      	ldr	r0, [r0, #0]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	f7ff fe31 	bl	8004500 <_vfiprintf_r>
 800489e:	b002      	add	sp, #8
 80048a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a4:	b003      	add	sp, #12
 80048a6:	4770      	bx	lr
 80048a8:	2000000c 	.word	0x2000000c

080048ac <_fstat_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	2300      	movs	r3, #0
 80048b0:	4d06      	ldr	r5, [pc, #24]	; (80048cc <_fstat_r+0x20>)
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	602b      	str	r3, [r5, #0]
 80048ba:	f000 f8bb 	bl	8004a34 <_fstat>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d102      	bne.n	80048c8 <_fstat_r+0x1c>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	b103      	cbz	r3, 80048c8 <_fstat_r+0x1c>
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
 80048ca:	bf00      	nop
 80048cc:	2000024c 	.word	0x2000024c

080048d0 <_isatty_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	2300      	movs	r3, #0
 80048d4:	4d05      	ldr	r5, [pc, #20]	; (80048ec <_isatty_r+0x1c>)
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f000 f8ba 	bl	8004a54 <_isatty>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_isatty_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_isatty_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	2000024c 	.word	0x2000024c

080048f0 <_lseek_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	4d05      	ldr	r5, [pc, #20]	; (8004910 <_lseek_r+0x20>)
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 f8b8 	bl	8004a74 <_lseek>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_lseek_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_lseek_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	2000024c 	.word	0x2000024c

08004914 <__ascii_mbtowc>:
 8004914:	b082      	sub	sp, #8
 8004916:	b901      	cbnz	r1, 800491a <__ascii_mbtowc+0x6>
 8004918:	a901      	add	r1, sp, #4
 800491a:	b142      	cbz	r2, 800492e <__ascii_mbtowc+0x1a>
 800491c:	b14b      	cbz	r3, 8004932 <__ascii_mbtowc+0x1e>
 800491e:	7813      	ldrb	r3, [r2, #0]
 8004920:	600b      	str	r3, [r1, #0]
 8004922:	7812      	ldrb	r2, [r2, #0]
 8004924:	1e10      	subs	r0, r2, #0
 8004926:	bf18      	it	ne
 8004928:	2001      	movne	r0, #1
 800492a:	b002      	add	sp, #8
 800492c:	4770      	bx	lr
 800492e:	4610      	mov	r0, r2
 8004930:	e7fb      	b.n	800492a <__ascii_mbtowc+0x16>
 8004932:	f06f 0001 	mvn.w	r0, #1
 8004936:	e7f8      	b.n	800492a <__ascii_mbtowc+0x16>

08004938 <__malloc_lock>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__malloc_lock+0x8>)
 800493a:	f7ff b8bc 	b.w	8003ab6 <__retarget_lock_acquire_recursive>
 800493e:	bf00      	nop
 8004940:	20000240 	.word	0x20000240

08004944 <__malloc_unlock>:
 8004944:	4801      	ldr	r0, [pc, #4]	; (800494c <__malloc_unlock+0x8>)
 8004946:	f7ff b8b7 	b.w	8003ab8 <__retarget_lock_release_recursive>
 800494a:	bf00      	nop
 800494c:	20000240 	.word	0x20000240

08004950 <_read_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	2200      	movs	r2, #0
 800495a:	4d05      	ldr	r5, [pc, #20]	; (8004970 <_read_r+0x20>)
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f000 f890 	bl	8004a84 <_read>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_read_r+0x1e>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_read_r+0x1e>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	2000024c 	.word	0x2000024c

08004974 <__ascii_wctomb>:
 8004974:	4603      	mov	r3, r0
 8004976:	4608      	mov	r0, r1
 8004978:	b141      	cbz	r1, 800498c <__ascii_wctomb+0x18>
 800497a:	2aff      	cmp	r2, #255	; 0xff
 800497c:	d904      	bls.n	8004988 <__ascii_wctomb+0x14>
 800497e:	228a      	movs	r2, #138	; 0x8a
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	4770      	bx	lr
 8004988:	2001      	movs	r0, #1
 800498a:	700a      	strb	r2, [r1, #0]
 800498c:	4770      	bx	lr

0800498e <abort>:
 800498e:	2006      	movs	r0, #6
 8004990:	b508      	push	{r3, lr}
 8004992:	f000 f82b 	bl	80049ec <raise>
 8004996:	2001      	movs	r0, #1
 8004998:	f000 f88a 	bl	8004ab0 <_exit>

0800499c <_raise_r>:
 800499c:	291f      	cmp	r1, #31
 800499e:	b538      	push	{r3, r4, r5, lr}
 80049a0:	4604      	mov	r4, r0
 80049a2:	460d      	mov	r5, r1
 80049a4:	d904      	bls.n	80049b0 <_raise_r+0x14>
 80049a6:	2316      	movs	r3, #22
 80049a8:	6003      	str	r3, [r0, #0]
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80049b2:	b112      	cbz	r2, 80049ba <_raise_r+0x1e>
 80049b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049b8:	b94b      	cbnz	r3, 80049ce <_raise_r+0x32>
 80049ba:	4620      	mov	r0, r4
 80049bc:	f000 f830 	bl	8004a20 <_getpid_r>
 80049c0:	462a      	mov	r2, r5
 80049c2:	4601      	mov	r1, r0
 80049c4:	4620      	mov	r0, r4
 80049c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ca:	f000 b817 	b.w	80049fc <_kill_r>
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d00a      	beq.n	80049e8 <_raise_r+0x4c>
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	d103      	bne.n	80049de <_raise_r+0x42>
 80049d6:	2316      	movs	r3, #22
 80049d8:	6003      	str	r3, [r0, #0]
 80049da:	2001      	movs	r0, #1
 80049dc:	e7e7      	b.n	80049ae <_raise_r+0x12>
 80049de:	2400      	movs	r4, #0
 80049e0:	4628      	mov	r0, r5
 80049e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049e6:	4798      	blx	r3
 80049e8:	2000      	movs	r0, #0
 80049ea:	e7e0      	b.n	80049ae <_raise_r+0x12>

080049ec <raise>:
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <raise+0xc>)
 80049ee:	4601      	mov	r1, r0
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	f7ff bfd3 	b.w	800499c <_raise_r>
 80049f6:	bf00      	nop
 80049f8:	2000000c 	.word	0x2000000c

080049fc <_kill_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	2300      	movs	r3, #0
 8004a00:	4d06      	ldr	r5, [pc, #24]	; (8004a1c <_kill_r+0x20>)
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	f000 f82b 	bl	8004a64 <_kill>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d102      	bne.n	8004a18 <_kill_r+0x1c>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	b103      	cbz	r3, 8004a18 <_kill_r+0x1c>
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2000024c 	.word	0x2000024c

08004a20 <_getpid_r>:
 8004a20:	f000 b810 	b.w	8004a44 <_getpid>

08004a24 <_close>:
 8004a24:	2258      	movs	r2, #88	; 0x58
 8004a26:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <_close+0xc>)
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	4770      	bx	lr
 8004a30:	2000024c 	.word	0x2000024c

08004a34 <_fstat>:
 8004a34:	2258      	movs	r2, #88	; 0x58
 8004a36:	4b02      	ldr	r3, [pc, #8]	; (8004a40 <_fstat+0xc>)
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	4770      	bx	lr
 8004a40:	2000024c 	.word	0x2000024c

08004a44 <_getpid>:
 8004a44:	2258      	movs	r2, #88	; 0x58
 8004a46:	4b02      	ldr	r3, [pc, #8]	; (8004a50 <_getpid+0xc>)
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	4770      	bx	lr
 8004a50:	2000024c 	.word	0x2000024c

08004a54 <_isatty>:
 8004a54:	2258      	movs	r2, #88	; 0x58
 8004a56:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <_isatty+0xc>)
 8004a58:	2000      	movs	r0, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	2000024c 	.word	0x2000024c

08004a64 <_kill>:
 8004a64:	2258      	movs	r2, #88	; 0x58
 8004a66:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <_kill+0xc>)
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	4770      	bx	lr
 8004a70:	2000024c 	.word	0x2000024c

08004a74 <_lseek>:
 8004a74:	2258      	movs	r2, #88	; 0x58
 8004a76:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <_lseek+0xc>)
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	4770      	bx	lr
 8004a80:	2000024c 	.word	0x2000024c

08004a84 <_read>:
 8004a84:	2258      	movs	r2, #88	; 0x58
 8004a86:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <_read+0xc>)
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	4770      	bx	lr
 8004a90:	2000024c 	.word	0x2000024c

08004a94 <_sbrk>:
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <_sbrk+0x14>)
 8004a96:	4603      	mov	r3, r0
 8004a98:	6811      	ldr	r1, [r2, #0]
 8004a9a:	b909      	cbnz	r1, 8004aa0 <_sbrk+0xc>
 8004a9c:	4903      	ldr	r1, [pc, #12]	; (8004aac <_sbrk+0x18>)
 8004a9e:	6011      	str	r1, [r2, #0]
 8004aa0:	6810      	ldr	r0, [r2, #0]
 8004aa2:	4403      	add	r3, r0
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4770      	bx	lr
 8004aa8:	20000250 	.word	0x20000250
 8004aac:	20000258 	.word	0x20000258

08004ab0 <_exit>:
 8004ab0:	e7fe      	b.n	8004ab0 <_exit>
	...

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
