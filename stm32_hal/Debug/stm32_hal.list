
stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005998  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08005aa8  08005aa8  00015aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eac  08005eac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005eac  08005eac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eac  08005eac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001dc  08006090  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08006090  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d44a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002587  00000000  00000000  0002d64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000309e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002daa  00000000  00000000  000316e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a2f  00000000  00000000  0003448a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007941e  00000000  00000000  00045eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf2d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a90  00000000  00000000  000bf328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  000c3db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  000c3e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a90 	.word	0x08005a90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005a90 	.word	0x08005a90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:

//-----------------------------------------------------------------------//
// main function                                                         //
//-----------------------------------------------------------------------//
int main()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  HAL_Init();
 8000a8c:	f000 f896 	bl	8000bbc <HAL_Init>
  // clock
  rcc_system_clock_config();
 8000a90:	f002 f900 	bl	8002c94 <rcc_system_clock_config>

  // uart
  uart_UART1_GPIO_config();
 8000a94:	f002 f9e8 	bl	8002e68 <uart_UART1_GPIO_config>
  uart_UART1_config();
 8000a98:	f002 fa18 	bl	8002ecc <uart_UART1_config>

  // led
  gpio_LED_config();
 8000a9c:	f002 f84a 	bl	8002b34 <gpio_LED_config>

  // pb
  gpio_PB_config();
 8000aa0:	f002 f882 	bl	8002ba8 <gpio_PB_config>

  //sw
  gpio_SW_config();
 8000aa4:	f002 f8ac 	bl	8002c00 <gpio_SW_config>

  // tim_oc
  tim_TIM1_GPIO_config();
 8000aa8:	f002 f938 	bl	8002d1c <tim_TIM1_GPIO_config>
  tim_TIM1_OC_config(500);
 8000aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab0:	f002 f962 	bl	8002d78 <tim_TIM1_OC_config>

  // start channel 1 inverted
  HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_1);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <main+0x40>)
 8000ab8:	f001 fda8 	bl	800260c <HAL_TIMEx_OCN_Start>
  // start channel 1 inverted
  HAL_TIMEx_OCN_Start(&htim1, TIM_CHANNEL_2);
 8000abc:	2104      	movs	r1, #4
 8000abe:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <main+0x40>)
 8000ac0:	f001 fda4 	bl	800260c <HAL_TIMEx_OCN_Start>

  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x3c>
 8000ac6:	bf00      	nop
 8000ac8:	20000274 	.word	0x20000274

08000acc <HAL_TIM_PeriodElapsedCallback>:
  } // end of while loop
} // end of main

//-----------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		gpio_LED_toggle_red();
 8000ade:	f002 f857 	bl	8002b90 <gpio_LED_toggle_red>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40000400 	.word	0x40000400

08000af0 <__io_putchar>:
//-----------------------------------------------------------------------//
int __io_putchar(int ch);
int _write(int file, char *ptr, int len);

int __io_putchar(int ch)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    uint8_t c[1];
    c[0] = ch & 0x00FF;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, &c[0], 1, 100);
 8000afe:	f107 010c 	add.w	r1, r7, #12
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <__io_putchar+0x28>)
 8000b08:	f001 feaa 	bl	8002860 <HAL_UART_Transmit>
    return ch;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200002bc 	.word	0x200002bc

08000b1c <_write>:

int _write(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e009      	b.n	8000b42 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	60ba      	str	r2, [r7, #8]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffda 	bl	8000af0 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	dbf1      	blt.n	8000b2e <_write+0x12>
    }
    return len;
 8000b4a:	687b      	ldr	r3, [r7, #4]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

//-----------------------------------------------------------------------//
// function definition                                                   //
//-----------------------------------------------------------------------//
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b58:	f000 f87c 	bl	8000c54 <HAL_IncTick>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fcf7 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&adc_1_handle);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <ADC1_2_IRQHandler+0x10>)
 8000b76:	f000 f889 	bl	8000c8c <HAL_ADC_IRQHandler>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001fc 	.word	0x200001fc

08000b84 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(adc_1_handle.DMA_Handle);
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <DMA1_Channel1_IRQHandler+0x14>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fa3f 	bl	8001010 <HAL_DMA_IRQHandler>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001fc 	.word	0x200001fc

08000b9c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM3_IRQHandler+0x10>)
 8000ba2:	f001 f9c5 	bl	8001f30 <HAL_TIM_IRQHandler>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000022c 	.word	0x2000022c

08000bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x28>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x28>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f9eb 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f000 f80e 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f000 f806 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f9ef 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f9c5 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x1c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x20>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x20>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	20000008 	.word	0x20000008
 8000c74:	200001f8 	.word	0x200001f8

08000c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <HAL_GetTick+0x10>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	200001f8 	.word	0x200001f8

08000c8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	2b20      	cmp	r3, #32
 8000ca0:	d140      	bne.n	8000d24 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d139      	bne.n	8000d24 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cd6:	d11d      	bne.n	8000d14 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d119      	bne.n	8000d14 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0220 	bic.w	r2, r2, #32
 8000cee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d105      	bne.n	8000d14 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f043 0201 	orr.w	r2, r3, #1
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f87c 	bl	8000e12 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f06f 0212 	mvn.w	r2, #18
 8000d22:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	2b80      	cmp	r3, #128	; 0x80
 8000d30:	d14f      	bne.n	8000dd2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d148      	bne.n	8000dd2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000d62:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000d66:	d012      	beq.n	8000d8e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d125      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d84:	d11d      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d119      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d9c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f837 	bl	8000e36 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f06f 020c 	mvn.w	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ddc:	2b40      	cmp	r3, #64	; 0x40
 8000dde:	d114      	bne.n	8000e0a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10d      	bne.n	8000e0a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f812 	bl	8000e24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f06f 0201 	mvn.w	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff90 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff49 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff90 	bl	8000f00 <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5f 	bl	8000eac <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2204      	movs	r2, #4
 800102e:	409a      	lsls	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d04f      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xc8>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	d04a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	2b00      	cmp	r3, #0
 800104e:	d107      	bne.n	8001060 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a66      	ldr	r2, [pc, #408]	; (8001200 <HAL_DMA_IRQHandler+0x1f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d029      	beq.n	80010be <HAL_DMA_IRQHandler+0xae>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_DMA_IRQHandler+0x1f4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d022      	beq.n	80010ba <HAL_DMA_IRQHandler+0xaa>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a63      	ldr	r2, [pc, #396]	; (8001208 <HAL_DMA_IRQHandler+0x1f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01a      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xa4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a62      	ldr	r2, [pc, #392]	; (800120c <HAL_DMA_IRQHandler+0x1fc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d012      	beq.n	80010ae <HAL_DMA_IRQHandler+0x9e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a60      	ldr	r2, [pc, #384]	; (8001210 <HAL_DMA_IRQHandler+0x200>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00a      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x98>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a5f      	ldr	r2, [pc, #380]	; (8001214 <HAL_DMA_IRQHandler+0x204>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <HAL_DMA_IRQHandler+0x92>
 800109c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a0:	e00e      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010a6:	e00b      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010ac:	e008      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b2:	e005      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	e002      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010ba:	2340      	movs	r3, #64	; 0x40
 80010bc:	e000      	b.n	80010c0 <HAL_DMA_IRQHandler+0xb0>
 80010be:	2304      	movs	r3, #4
 80010c0:	4a55      	ldr	r2, [pc, #340]	; (8001218 <HAL_DMA_IRQHandler+0x208>)
 80010c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 8094 	beq.w	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010d6:	e08e      	b.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2202      	movs	r2, #2
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d056      	beq.n	8001196 <HAL_DMA_IRQHandler+0x186>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d051      	beq.n	8001196 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020a 	bic.w	r2, r2, #10
 800110e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a38      	ldr	r2, [pc, #224]	; (8001200 <HAL_DMA_IRQHandler+0x1f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d029      	beq.n	8001176 <HAL_DMA_IRQHandler+0x166>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a37      	ldr	r2, [pc, #220]	; (8001204 <HAL_DMA_IRQHandler+0x1f4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d022      	beq.n	8001172 <HAL_DMA_IRQHandler+0x162>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a35      	ldr	r2, [pc, #212]	; (8001208 <HAL_DMA_IRQHandler+0x1f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01a      	beq.n	800116c <HAL_DMA_IRQHandler+0x15c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_DMA_IRQHandler+0x1fc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d012      	beq.n	8001166 <HAL_DMA_IRQHandler+0x156>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <HAL_DMA_IRQHandler+0x200>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00a      	beq.n	8001160 <HAL_DMA_IRQHandler+0x150>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a31      	ldr	r2, [pc, #196]	; (8001214 <HAL_DMA_IRQHandler+0x204>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d102      	bne.n	800115a <HAL_DMA_IRQHandler+0x14a>
 8001154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001158:	e00e      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 800115a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800115e:	e00b      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001164:	e008      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	e005      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 800116c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001170:	e002      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001172:	2320      	movs	r3, #32
 8001174:	e000      	b.n	8001178 <HAL_DMA_IRQHandler+0x168>
 8001176:	2302      	movs	r3, #2
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_DMA_IRQHandler+0x208>)
 800117a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	2b00      	cmp	r3, #0
 800118a:	d034      	beq.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001194:	e02f      	b.n	80011f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2208      	movs	r2, #8
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d028      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d023      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 020e 	bic.w	r2, r2, #14
 80011be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	4798      	blx	r3
    }
  }
  return;
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
}
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020008 	.word	0x40020008
 8001204:	4002001c 	.word	0x4002001c
 8001208:	40020030 	.word	0x40020030
 800120c:	40020044 	.word	0x40020044
 8001210:	40020058 	.word	0x40020058
 8001214:	4002006c 	.word	0x4002006c
 8001218:	40020000 	.word	0x40020000

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b08b      	sub	sp, #44	; 0x2c
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	e169      	b.n	8001504 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001230:	2201      	movs	r2, #1
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8158 	bne.w	80014fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a9a      	ldr	r2, [pc, #616]	; (80014bc <HAL_GPIO_Init+0x2a0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d05e      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001258:	4a98      	ldr	r2, [pc, #608]	; (80014bc <HAL_GPIO_Init+0x2a0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d875      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800125e:	4a98      	ldr	r2, [pc, #608]	; (80014c0 <HAL_GPIO_Init+0x2a4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d058      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001264:	4a96      	ldr	r2, [pc, #600]	; (80014c0 <HAL_GPIO_Init+0x2a4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d86f      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800126a:	4a96      	ldr	r2, [pc, #600]	; (80014c4 <HAL_GPIO_Init+0x2a8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d052      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001270:	4a94      	ldr	r2, [pc, #592]	; (80014c4 <HAL_GPIO_Init+0x2a8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d869      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001276:	4a94      	ldr	r2, [pc, #592]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d04c      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 800127c:	4a92      	ldr	r2, [pc, #584]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d863      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001282:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_GPIO_Init+0x2b0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d046      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001288:	4a90      	ldr	r2, [pc, #576]	; (80014cc <HAL_GPIO_Init+0x2b0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d85d      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d82a      	bhi.n	80012e8 <HAL_GPIO_Init+0xcc>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d859      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <HAL_GPIO_Init+0x80>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	08001317 	.word	0x08001317
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	08001303 	.word	0x08001303
 80012a8:	08001345 	.word	0x08001345
 80012ac:	0800134b 	.word	0x0800134b
 80012b0:	0800134b 	.word	0x0800134b
 80012b4:	0800134b 	.word	0x0800134b
 80012b8:	0800134b 	.word	0x0800134b
 80012bc:	0800134b 	.word	0x0800134b
 80012c0:	0800134b 	.word	0x0800134b
 80012c4:	0800134b 	.word	0x0800134b
 80012c8:	0800134b 	.word	0x0800134b
 80012cc:	0800134b 	.word	0x0800134b
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	0800134b 	.word	0x0800134b
 80012d8:	0800134b 	.word	0x0800134b
 80012dc:	0800134b 	.word	0x0800134b
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	0800130d 	.word	0x0800130d
 80012e8:	4a79      	ldr	r2, [pc, #484]	; (80014d0 <HAL_GPIO_Init+0x2b4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ee:	e02c      	b.n	800134a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e029      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e024      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	3308      	adds	r3, #8
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e01f      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	330c      	adds	r3, #12
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e01a      	b.n	800134c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131e:	2304      	movs	r3, #4
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e013      	b.n	800134c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	611a      	str	r2, [r3, #16]
          break;
 8001336:	e009      	b.n	800134c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	615a      	str	r2, [r3, #20]
          break;
 8001342:	e003      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x130>
          break;
 800134a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d801      	bhi.n	8001356 <HAL_GPIO_Init+0x13a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	e001      	b.n	800135a <HAL_GPIO_Init+0x13e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d802      	bhi.n	8001368 <HAL_GPIO_Init+0x14c>
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x152>
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3b08      	subs	r3, #8
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	210f      	movs	r1, #15
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	401a      	ands	r2, r3
 8001380:	6a39      	ldr	r1, [r7, #32]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80b1 	beq.w	80014fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139c:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_GPIO_Init+0x2b8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b4:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <HAL_GPIO_Init+0x2bc>)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a40      	ldr	r2, [pc, #256]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d013      	beq.n	8001408 <HAL_GPIO_Init+0x1ec>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <HAL_GPIO_Init+0x2c4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d00d      	beq.n	8001404 <HAL_GPIO_Init+0x1e8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <HAL_GPIO_Init+0x2c8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d007      	beq.n	8001400 <HAL_GPIO_Init+0x1e4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a3d      	ldr	r2, [pc, #244]	; (80014e8 <HAL_GPIO_Init+0x2cc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <HAL_GPIO_Init+0x1e0>
 80013f8:	2303      	movs	r3, #3
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1ee>
 8001408:	2300      	movs	r3, #0
 800140a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141a:	492f      	ldr	r1, [pc, #188]	; (80014d8 <HAL_GPIO_Init+0x2bc>)
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	492c      	ldr	r1, [pc, #176]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	4928      	ldr	r1, [pc, #160]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 800144c:	4013      	ands	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4922      	ldr	r1, [pc, #136]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	491e      	ldr	r1, [pc, #120]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001474:	4013      	ands	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	4918      	ldr	r1, [pc, #96]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	4914      	ldr	r1, [pc, #80]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d021      	beq.n	80014f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
 80014b8:	e021      	b.n	80014fe <HAL_GPIO_Init+0x2e2>
 80014ba:	bf00      	nop
 80014bc:	10320000 	.word	0x10320000
 80014c0:	10310000 	.word	0x10310000
 80014c4:	10220000 	.word	0x10220000
 80014c8:	10210000 	.word	0x10210000
 80014cc:	10120000 	.word	0x10120000
 80014d0:	10110000 	.word	0x10110000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40011400 	.word	0x40011400
 80014ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_GPIO_Init+0x304>)
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	4909      	ldr	r1, [pc, #36]	; (8001520 <HAL_GPIO_Init+0x304>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	3301      	adds	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	f47f ae8e 	bne.w	8001230 <HAL_GPIO_Init+0x14>
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	372c      	adds	r7, #44	; 0x2c
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43d9      	mvns	r1, r3
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	400b      	ands	r3, r1
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	611a      	str	r2, [r3, #16]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f806 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40010400 	.word	0x40010400

08001588 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e272      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 8087 	beq.w	80016ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d00c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c8:	4b8f      	ldr	r3, [pc, #572]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d112      	bne.n	80015fa <HAL_RCC_OscConfig+0x5e>
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d10b      	bne.n	80015fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d06c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x12c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d168      	bne.n	80016c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e24c      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d106      	bne.n	8001612 <HAL_RCC_OscConfig+0x76>
 8001604:	4b80      	ldr	r3, [pc, #512]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a7f      	ldr	r2, [pc, #508]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e02e      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b7b      	ldr	r3, [pc, #492]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7a      	ldr	r2, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a77      	ldr	r2, [pc, #476]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e01d      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0xbc>
 800163e:	4b72      	ldr	r3, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a71      	ldr	r2, [pc, #452]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a6a      	ldr	r2, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800165e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a67      	ldr	r2, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fafe 	bl	8000c78 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fafa 	bl	8000c78 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e200      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xe4>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff faea 	bl	8000c78 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fae6 	bl	8000c78 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1ec      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x10c>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d063      	beq.n	800179e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d11c      	bne.n	8001728 <HAL_RCC_OscConfig+0x18c>
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_RCC_OscConfig+0x176>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e1c0      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4939      	ldr	r1, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	e03a      	b.n	800179e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x270>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fa9f 	bl	8000c78 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173e:	f7ff fa9b 	bl	8000c78 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1a1      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4927      	ldr	r1, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x270>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fa7e 	bl	8000c78 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001780:	f7ff fa7a 	bl	8000c78 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e180      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03a      	beq.n	8001820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d019      	beq.n	80017e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fa5e 	bl	8000c78 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fa5a 	bl	8000c78 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e160      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f000 fad8 	bl	8001d94 <RCC_Delay>
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_OscConfig+0x274>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa44 	bl	8000c78 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f2:	e00f      	b.n	8001814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff fa40 	bl	8000c78 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d908      	bls.n	8001814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e146      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	42420000 	.word	0x42420000
 8001810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e9      	bne.n	80017f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a6 	beq.w	800197a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001832:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001856:	2301      	movs	r3, #1
 8001858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b82      	ldr	r3, [pc, #520]	; (8001a64 <HAL_RCC_OscConfig+0x4c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d118      	bne.n	8001898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x4c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7e      	ldr	r2, [pc, #504]	; (8001a64 <HAL_RCC_OscConfig+0x4c8>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7ff fa01 	bl	8000c78 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187a:	f7ff f9fd 	bl	8000c78 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b64      	cmp	r3, #100	; 0x64
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e103      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0x4c8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d106      	bne.n	80018ae <HAL_RCC_OscConfig+0x312>
 80018a0:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a6e      	ldr	r2, [pc, #440]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	e02d      	b.n	800190a <HAL_RCC_OscConfig+0x36e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x334>
 80018b6:	4b6a      	ldr	r3, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a69      	ldr	r2, [pc, #420]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a66      	ldr	r2, [pc, #408]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	e01c      	b.n	800190a <HAL_RCC_OscConfig+0x36e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d10c      	bne.n	80018f2 <HAL_RCC_OscConfig+0x356>
 80018d8:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a60      	ldr	r2, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e00b      	b.n	800190a <HAL_RCC_OscConfig+0x36e>
 80018f2:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a5a      	ldr	r2, [pc, #360]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f023 0304 	bic.w	r3, r3, #4
 8001908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d015      	beq.n	800193e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff f9b1 	bl	8000c78 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff f9ad 	bl	8000c78 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0b1      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001930:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ee      	beq.n	800191a <HAL_RCC_OscConfig+0x37e>
 800193c:	e014      	b.n	8001968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff f99b 	bl	8000c78 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f997 	bl	8000c78 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e09b      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800195c:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ee      	bne.n	8001946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a3b      	ldr	r2, [pc, #236]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b08      	cmp	r3, #8
 800198e:	d061      	beq.n	8001a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d146      	bne.n	8001a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_RCC_OscConfig+0x4cc>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f96b 	bl	8000c78 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f967 	bl	8000c78 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e06d      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4921      	ldr	r1, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a19      	ldr	r1, [r3, #32]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	430b      	orrs	r3, r1
 80019f2:	491b      	ldr	r1, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x4cc>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f93b 	bl	8000c78 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff f937 	bl	8000c78 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e03d      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x46a>
 8001a24:	e035      	b.n	8001a92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x4cc>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f924 	bl	8000c78 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f920 	bl	8000c78 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e026      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x498>
 8001a52:	e01e      	b.n	8001a92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e019      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40007000 	.word	0x40007000
 8001a68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x500>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d0      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4965      	ldr	r1, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a58      	ldr	r2, [pc, #352]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a52      	ldr	r2, [pc, #328]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d040      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d115      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e073      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e06b      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4936      	ldr	r1, [pc, #216]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff f872 	bl	8000c78 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f86e 	bl	8000c78 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e053      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d210      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4922      	ldr	r1, [pc, #136]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1cc>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1d0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe ffd0 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08005ab8 	.word	0x08005ab8
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b490      	push	{r4, r7}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c7c:	1d3c      	adds	r4, r7, #4
 8001c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c84:	f240 2301 	movw	r3, #513	; 0x201
 8001c88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0x46>
 8001cb2:	e02b      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb6:	623b      	str	r3, [r7, #32]
      break;
 8001cb8:	e02b      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	0c9b      	lsrs	r3, r3, #18
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3328      	adds	r3, #40	; 0x28
 8001cc4:	443b      	add	r3, r7
 8001cc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0c5b      	lsrs	r3, r3, #17
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	3328      	adds	r3, #40	; 0x28
 8001ce2:	443b      	add	r3, r7
 8001ce4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ce8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cee:	fb03 f202 	mul.w	r2, r3, r2
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e004      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	623b      	str	r3, [r7, #32]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d0e:	623b      	str	r3, [r7, #32]
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	6a3b      	ldr	r3, [r7, #32]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc90      	pop	{r4, r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	08005aa8 	.word	0x08005aa8
 8001d24:	40021000 	.word	0x40021000
 8001d28:	007a1200 	.word	0x007a1200
 8001d2c:	003d0900 	.word	0x003d0900

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff2 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08005ac8 	.word	0x08005ac8

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08005ac8 	.word	0x08005ac8

08001d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <RCC_Delay+0x34>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <RCC_Delay+0x38>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0a5b      	lsrs	r3, r3, #9
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db0:	bf00      	nop
  }
  while (Delay --);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	60fa      	str	r2, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <RCC_Delay+0x1c>
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	10624dd3 	.word	0x10624dd3

08001dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e041      	b.n	8001e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f839 	bl	8001e6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f000 fa12 	bl	8002238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e041      	b.n	8001f16 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f839 	bl	8001f1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f000 f9ba 	bl	8002238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f945 	bl	8002202 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f938 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f947 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0204 	mvn.w	r2, #4
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f91b 	bl	8002202 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f90e 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f91d 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0208 	mvn.w	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8f1 	bl	8002202 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8e4 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8f3 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b10      	cmp	r3, #16
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0210 	mvn.w	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2208      	movs	r2, #8
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8c7 	bl	8002202 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8ba 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8c9 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0201 	mvn.w	r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fd0c 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fb3d 	bl	800275a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f88d 	bl	8002226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0220 	mvn.w	r2, #32
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fb08 	bl	8002748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002156:	2302      	movs	r3, #2
 8002158:	e046      	b.n	80021e8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d839      	bhi.n	80021dc <HAL_TIM_OC_ConfigChannel+0x9c>
 8002168:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <HAL_TIM_OC_ConfigChannel+0x30>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	080021a5 	.word	0x080021a5
 8002174:	080021dd 	.word	0x080021dd
 8002178:	080021dd 	.word	0x080021dd
 800217c:	080021dd 	.word	0x080021dd
 8002180:	080021b3 	.word	0x080021b3
 8002184:	080021dd 	.word	0x080021dd
 8002188:	080021dd 	.word	0x080021dd
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021c1 	.word	0x080021c1
 8002194:	080021dd 	.word	0x080021dd
 8002198:	080021dd 	.word	0x080021dd
 800219c:	080021dd 	.word	0x080021dd
 80021a0:	080021cf 	.word	0x080021cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f8a6 	bl	80022fc <TIM_OC1_SetConfig>
      break;
 80021b0:	e015      	b.n	80021de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f905 	bl	80023c8 <TIM_OC2_SetConfig>
      break;
 80021be:	e00e      	b.n	80021de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f968 	bl	800249c <TIM_OC3_SetConfig>
      break;
 80021cc:	e007      	b.n	80021de <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f9cb 	bl	8002570 <TIM_OC4_SetConfig>
      break;
 80021da:	e000      	b.n	80021de <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80021dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <TIM_Base_SetConfig+0xb8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00b      	beq.n	8002268 <TIM_Base_SetConfig+0x30>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002256:	d007      	beq.n	8002268 <TIM_Base_SetConfig+0x30>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <TIM_Base_SetConfig+0xbc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d003      	beq.n	8002268 <TIM_Base_SetConfig+0x30>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <TIM_Base_SetConfig+0xc0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <TIM_Base_SetConfig+0xb8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00b      	beq.n	800229a <TIM_Base_SetConfig+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d007      	beq.n	800229a <TIM_Base_SetConfig+0x62>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <TIM_Base_SetConfig+0xbc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <TIM_Base_SetConfig+0x62>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <TIM_Base_SetConfig+0xc0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d108      	bne.n	80022ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <TIM_Base_SetConfig+0xb8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d103      	bne.n	80022e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	615a      	str	r2, [r3, #20]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800

080022fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	f023 0201 	bic.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <TIM_OC1_SetConfig+0xc8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d10c      	bne.n	8002372 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f023 0308 	bic.w	r3, r3, #8
 800235e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <TIM_OC1_SetConfig+0xc8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d111      	bne.n	800239e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	621a      	str	r2, [r3, #32]
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00

080023c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f023 0210 	bic.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 0320 	bic.w	r3, r3, #32
 8002412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <TIM_OC2_SetConfig+0xd0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d10d      	bne.n	8002444 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800242e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a14      	ldr	r2, [pc, #80]	; (8002498 <TIM_OC2_SetConfig+0xd0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d113      	bne.n	8002474 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800245a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40012c00 	.word	0x40012c00

0800249c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <TIM_OC3_SetConfig+0xd0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10d      	bne.n	8002516 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <TIM_OC3_SetConfig+0xd0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d113      	bne.n	8002546 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800252c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	621a      	str	r2, [r3, #32]
}
 8002560:	bf00      	nop
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40012c00 	.word	0x40012c00

08002570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	031b      	lsls	r3, r3, #12
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <TIM_OC4_SetConfig+0x98>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d109      	bne.n	80025e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	621a      	str	r2, [r3, #32]
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40012c00 	.word	0x40012c00

0800260c <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_TIMEx_OCN_Start+0x24>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e022      	b.n	8002676 <HAL_TIMEx_OCN_Start+0x6a>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d109      	bne.n	800264a <HAL_TIMEx_OCN_Start+0x3e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e015      	b.n	8002676 <HAL_TIMEx_OCN_Start+0x6a>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d109      	bne.n	8002664 <HAL_TIMEx_OCN_Start+0x58>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e008      	b.n	8002676 <HAL_TIMEx_OCN_Start+0x6a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e059      	b.n	8002732 <HAL_TIMEx_OCN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <HAL_TIMEx_OCN_Start+0x82>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800268c:	e013      	b.n	80026b6 <HAL_TIMEx_OCN_Start+0xaa>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d104      	bne.n	800269e <HAL_TIMEx_OCN_Start+0x92>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800269c:	e00b      	b.n	80026b6 <HAL_TIMEx_OCN_Start+0xaa>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d104      	bne.n	80026ae <HAL_TIMEx_OCN_Start+0xa2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ac:	e003      	b.n	80026b6 <HAL_TIMEx_OCN_Start+0xaa>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2204      	movs	r2, #4
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f854 	bl	800276c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_TIMEx_OCN_Start+0x130>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_TIMEx_OCN_Start+0xf0>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d009      	beq.n	80026fc <HAL_TIMEx_OCN_Start+0xf0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_TIMEx_OCN_Start+0x134>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_TIMEx_OCN_Start+0xf0>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <HAL_TIMEx_OCN_Start+0x138>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_TIMEx_OCN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b06      	cmp	r3, #6
 800270c:	d010      	beq.n	8002730 <HAL_TIMEx_OCN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	e007      	b.n	8002730 <HAL_TIMEx_OCN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800

08002748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2204      	movs	r2, #4
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e03f      	b.n	8002846 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f837 	bl	800284e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f90d 	bl	8002a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800280c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800281c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800282c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d17c      	bne.n	800297a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_UART_Transmit+0x2c>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e075      	b.n	800297c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Transmit+0x3e>
 800289a:	2302      	movs	r3, #2
 800289c:	e06e      	b.n	800297c <HAL_UART_Transmit+0x11c>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2221      	movs	r2, #33	; 0x21
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028b4:	f7fe f9e0 	bl	8000c78 <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	88fa      	ldrh	r2, [r7, #6]
 80028be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ce:	d108      	bne.n	80028e2 <HAL_UART_Transmit+0x82>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e003      	b.n	80028ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028f2:	e02a      	b.n	800294a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f840 	bl	8002984 <UART_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e036      	b.n	800297c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002922:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	3302      	adds	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e007      	b.n	800293c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1cf      	bne.n	80028f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2200      	movs	r2, #0
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f810 	bl	8002984 <UART_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e006      	b.n	800297c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002994:	e02c      	b.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d028      	beq.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029a4:	f7fe f968 	bl	8000c78 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d21d      	bcs.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e00f      	b.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d0c3      	beq.n	8002996 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a52:	f023 030c 	bic.w	r3, r3, #12
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	; (8002b2c <UART_SetConfig+0x114>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d103      	bne.n	8002a88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a80:	f7ff f974 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	e002      	b.n	8002a8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff f95c 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	0119      	lsls	r1, r3, #4
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <UART_SetConfig+0x118>)
 8002ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	fb00 f303 	mul.w	r3, r0, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <UART_SetConfig+0x118>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	4419      	add	r1, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <UART_SetConfig+0x118>)
 8002afe:	fba3 0302 	umull	r0, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	3332      	adds	r3, #50	; 0x32
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	440a      	add	r2, r1
 8002b22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	51eb851f 	.word	0x51eb851f

08002b34 <gpio_LED_config>:

/*
// @brief LED GPIO Configuration
*/
void gpio_LED_config(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
	// green LED => PB13
	// red   LED => PB14

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <gpio_LED_config+0x54>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <gpio_LED_config+0x54>)
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	6193      	str	r3, [r2, #24]
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <gpio_LED_config+0x54>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef gpio_init_struct = {0};
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
  gpio_init_struct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8002b64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002b68:	60bb      	str	r3, [r7, #8]
  gpio_init_struct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &gpio_init_struct);
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	4619      	mov	r1, r3
 8002b78:	4804      	ldr	r0, [pc, #16]	; (8002b8c <gpio_LED_config+0x58>)
 8002b7a:	f7fe fb4f 	bl	800121c <HAL_GPIO_Init>

}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010c00 	.word	0x40010c00

08002b90 <gpio_LED_toggle_red>:
void gpio_LED_toggle_green(void)
{
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
}
void gpio_LED_toggle_red(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <gpio_LED_toggle_red+0x14>)
 8002b9a:	f7fe fcc3 	bl	8001524 <HAL_GPIO_TogglePin>
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40010c00 	.word	0x40010c00

08002ba8 <gpio_PB_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_PB_config(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
	// user button PA0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <gpio_PB_config+0x50>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <gpio_PB_config+0x50>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <gpio_PB_config+0x50>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pin = GPIO_PIN_0;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2302      	movs	r3, #2
 8002be2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	4619      	mov	r1, r3
 8002bea:	4804      	ldr	r0, [pc, #16]	; (8002bfc <gpio_PB_config+0x54>)
 8002bec:	f7fe fb16 	bl	800121c <HAL_GPIO_Init>

}
 8002bf0:	bf00      	nop
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010800 	.word	0x40010800

08002c00 <gpio_SW_config>:

/*
// @brief PB GPIO Configuration
*/
void gpio_SW_config(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
	// sw-1 PA8
	// sw-2 PA15

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <gpio_SW_config+0x88>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <gpio_SW_config+0x88>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6193      	str	r3, [r2, #24]
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <gpio_SW_config+0x88>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef gpio_init_struct = {0};
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
	gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
	gpio_init_struct.Pin = GPIO_PIN_8 | GPIO_PIN_15;
 8002c30:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002c34:	60fb      	str	r3, [r7, #12]
	gpio_init_struct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
	gpio_init_struct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002c3e:	f107 030c 	add.w	r3, r7, #12
 8002c42:	4619      	mov	r1, r3
 8002c44:	4811      	ldr	r0, [pc, #68]	; (8002c8c <gpio_SW_config+0x8c>)
 8002c46:	f7fe fae9 	bl	800121c <HAL_GPIO_Init>

	// remap
	__HAL_RCC_AFIO_CLK_ENABLE();
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <gpio_SW_config+0x88>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <gpio_SW_config+0x88>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6193      	str	r3, [r2, #24]
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <gpio_SW_config+0x88>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <gpio_SW_config+0x90>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <gpio_SW_config+0x90>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	6053      	str	r3, [r2, #4]
}
 8002c7e:	bf00      	nop
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40010800 	.word	0x40010800
 8002c90:	40010000 	.word	0x40010000

08002c94 <rcc_system_clock_config>:
//-----------------------------------------------------------------------//
/*
// rcc clock configuration
*/
bool rcc_system_clock_config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b090      	sub	sp, #64	; 0x40
 8002c98:	af00      	add	r7, sp, #0

    // APB1 Prescaler = 2 => 36, 72 MHz
    // APB2 Prescaler = 1 => 72, 72 MHz
    // ADC Prescaler = 6 => 12 MHz

    RCC_OscInitTypeDef osc_init_struct = {0};
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	2228      	movs	r2, #40	; 0x28
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f998 	bl	8002fd8 <memset>
    RCC_ClkInitTypeDef clk_init_struct = {0};
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]

    osc_init_struct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61bb      	str	r3, [r7, #24]
    osc_init_struct.HSEState = RCC_HSE_ON;
 8002cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cbe:	61fb      	str	r3, [r7, #28]
    osc_init_struct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
    osc_init_struct.PLL.PLLState = RCC_PLL_ON;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init_struct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init_struct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002cce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(HAL_RCC_OscConfig(&osc_init_struct) != HAL_OK)
 8002cd4:	f107 0318 	add.w	r3, r7, #24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fc5f 	bl	800159c <HAL_RCC_OscConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <rcc_system_clock_config+0x54>
    {
      return false;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	e014      	b.n	8002d12 <rcc_system_clock_config+0x7e>
    }

    // clock initialization
    clk_init_struct.ClockType = RCC_CLOCKTYPE_HCLK   |
 8002ce8:	230f      	movs	r3, #15
 8002cea:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1  |
                                RCC_CLOCKTYPE_PCLK2  |
                                RCC_CLOCKTYPE_SYSCLK ;

    clk_init_struct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cec:	2302      	movs	r3, #2
 8002cee:	60bb      	str	r3, [r7, #8]
    clk_init_struct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
    clk_init_struct.APB1CLKDivider = RCC_SYSCLK_DIV2;
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	613b      	str	r3, [r7, #16]
    clk_init_struct.APB2CLKDivider = RCC_SYSCLK_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
    // 00 - 24MHz => 0
    // 24 - 48MHz => 1
    // 48 - 72MHz => 2
    if(HAL_RCC_ClockConfig(&clk_init_struct, FLASH_LATENCY_2) != HAL_OK)
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fecd 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <rcc_system_clock_config+0x7c>
    {
      return false;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <rcc_system_clock_config+0x7e>
    }

    return true;
 8002d10:	2301      	movs	r3, #1
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3740      	adds	r7, #64	; 0x40
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <tim_TIM1_GPIO_config>:

/*
// @brief TIM1 Output GPIO
*/
void tim_TIM1_GPIO_config(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_config = {0};
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <tim_TIM1_GPIO_config+0x54>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <tim_TIM1_GPIO_config+0x54>)
 8002d36:	f043 0308 	orr.w	r3, r3, #8
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <tim_TIM1_GPIO_config+0x54>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
	// PB13, PB14
	gpio_config.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	60fb      	str	r3, [r7, #12]
	gpio_config.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8002d4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d50:	60bb      	str	r3, [r7, #8]
	gpio_config.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
	gpio_config.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2302      	movs	r3, #2
 8002d58:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio_config);
 8002d5a:	f107 0308 	add.w	r3, r7, #8
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4804      	ldr	r0, [pc, #16]	; (8002d74 <tim_TIM1_GPIO_config+0x58>)
 8002d62:	f7fe fa5b 	bl	800121c <HAL_GPIO_Init>

}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40010c00 	.word	0x40010c00

08002d78 <tim_TIM1_OC_config>:

/*
// @brief TIM1 Output Compare Peripherals Configuration
*/
bool tim_TIM1_OC_config(uint32_t ms_period)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM1_CLK_ENABLE();
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <tim_TIM1_OC_config+0xe4>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <tim_TIM1_OC_config+0xe4>)
 8002d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <tim_TIM1_OC_config+0xe4>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]

	htim1.Instance = TIM1;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002d9a:	4a32      	ldr	r2, [pc, #200]	; (8002e64 <tim_TIM1_OC_config+0xec>)
 8002d9c:	601a      	str	r2, [r3, #0]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9e:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 7200 - 1; // 10KHz
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002da6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002daa:	60da      	str	r2, [r3, #12]
	htim1.Init.Prescaler = (ms_period * 10) - 1;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002dba:	6053      	str	r3, [r2, #4]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
	if(HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dc8:	4825      	ldr	r0, [pc, #148]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002dca:	f7ff f801 	bl	8001dd0 <HAL_TIM_Base_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <tim_TIM1_OC_config+0x60>
	{
		return false;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e03c      	b.n	8002e52 <tim_TIM1_OC_config+0xda>
	}
	if(HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002dd8:	4821      	ldr	r0, [pc, #132]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002dda:	f7ff f851 	bl	8001e80 <HAL_TIM_OC_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <tim_TIM1_OC_config+0x70>
	{
		return false;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e034      	b.n	8002e52 <tim_TIM1_OC_config+0xda>
	}
	// output compare channel settings
	TIM_OC_InitTypeDef oc_config = {0};
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
 8002df8:	615a      	str	r2, [r3, #20]
 8002dfa:	619a      	str	r2, [r3, #24]
	oc_config.OCMode = TIM_OCMODE_TOGGLE;
 8002dfc:	2330      	movs	r3, #48	; 0x30
 8002dfe:	60fb      	str	r3, [r7, #12]
	oc_config.Pulse = 2000 - 1;
 8002e00:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8002e04:	613b      	str	r3, [r7, #16]
	oc_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
	oc_config.OCNPolarity = TIM_OCPOLARITY_HIGH;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
	oc_config.OCFastMode = TIM_OCFAST_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
	oc_config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
	oc_config.OCNIdleState = TIM_OCIDLESTATE_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_TIM_OC_ConfigChannel(&htim1, &oc_config, TIM_CHANNEL_1) != HAL_OK)
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4619      	mov	r1, r3
 8002e22:	480f      	ldr	r0, [pc, #60]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002e24:	f7ff f98c 	bl	8002140 <HAL_TIM_OC_ConfigChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <tim_TIM1_OC_config+0xba>
	{
		return false;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e00f      	b.n	8002e52 <tim_TIM1_OC_config+0xda>
	}

	oc_config.Pulse = 5000 - 1;
 8002e32:	f241 3387 	movw	r3, #4999	; 0x1387
 8002e36:	613b      	str	r3, [r7, #16]
	if(HAL_TIM_OC_ConfigChannel(&htim1, &oc_config, TIM_CHANNEL_2) != HAL_OK)
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4807      	ldr	r0, [pc, #28]	; (8002e60 <tim_TIM1_OC_config+0xe8>)
 8002e42:	f7ff f97d 	bl	8002140 <HAL_TIM_OC_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <tim_TIM1_OC_config+0xd8>
	{
		return false;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <tim_TIM1_OC_config+0xda>
	}

	return true;
 8002e50:	2301      	movs	r3, #1
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	20000274 	.word	0x20000274
 8002e64:	40012c00 	.word	0x40012c00

08002e68 <uart_UART1_GPIO_config>:
//-----------------------------------------------------------------------//
/*
// @brief UART1 GPIO configuration
*/
void uart_UART1_GPIO_config(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
    // PA9  => TX
    // PA10 => RX
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <uart_UART1_GPIO_config+0x5c>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <uart_UART1_GPIO_config+0x5c>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	6193      	str	r3, [r2, #24]
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <uart_UART1_GPIO_config+0x5c>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    // PA9  => TX
    gpio_init_struct.Pin = GPIO_PIN_9;
 8002e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e8a:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002e94:	f107 0308 	add.w	r3, r7, #8
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <uart_UART1_GPIO_config+0x60>)
 8002e9c:	f7fe f9be 	bl	800121c <HAL_GPIO_Init>

    // PA10 => RX
    gpio_init_struct.Pin = GPIO_PIN_10;
 8002ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea4:	60bb      	str	r3, [r7, #8]
    gpio_init_struct.Mode = GPIO_MODE_INPUT;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
    gpio_init_struct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <uart_UART1_GPIO_config+0x60>)
 8002eb6:	f7fe f9b1 	bl	800121c <HAL_GPIO_Init>




}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010800 	.word	0x40010800

08002ecc <uart_UART1_config>:
/*
// @brief UART1 Peripheral configuration
*/
bool uart_UART1_config(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  __HAL_RCC_USART1_CLK_ENABLE();
 8002ed2:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <uart_UART1_config+0x6c>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <uart_UART1_config+0x6c>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6193      	str	r3, [r2, #24]
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <uart_UART1_config+0x6c>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]

  huart1.Instance = USART1;
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <uart_UART1_config+0x70>)
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <uart_UART1_config+0x74>)
 8002eee:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <uart_UART1_config+0x70>)
 8002ef2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef6:	605a      	str	r2, [r3, #4]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <uart_UART1_config+0x70>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <uart_UART1_config+0x70>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <uart_UART1_config+0x70>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <uart_UART1_config+0x70>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <uart_UART1_config+0x70>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <uart_UART1_config+0x70>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&huart1) != HAL_OK)
 8002f1c:	4807      	ldr	r0, [pc, #28]	; (8002f3c <uart_UART1_config+0x70>)
 8002f1e:	f7ff fc49 	bl	80027b4 <HAL_UART_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <uart_UART1_config+0x60>
  {
    return false;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <uart_UART1_config+0x62>
  }

  return true;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	200002bc 	.word	0x200002bc
 8002f40:	40013800 	.word	0x40013800

08002f44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f46:	490d      	ldr	r1, [pc, #52]	; (8002f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f48:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f5c:	4c0a      	ldr	r4, [pc, #40]	; (8002f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f6a:	f7fd fe21 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f000 f80f 	bl	8002f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f72:	f7fd fd89 	bl	8000a88 <main>
  bx lr
 8002f76:	4770      	bx	lr
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f80:	08005eb4 	.word	0x08005eb4
  ldr r2, =_sbss
 8002f84:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f88:	20000314 	.word	0x20000314

08002f8c <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <BusFault_Handler>
	...

08002f90 <__libc_init_array>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	2600      	movs	r6, #0
 8002f94:	4d0c      	ldr	r5, [pc, #48]	; (8002fc8 <__libc_init_array+0x38>)
 8002f96:	4c0d      	ldr	r4, [pc, #52]	; (8002fcc <__libc_init_array+0x3c>)
 8002f98:	1b64      	subs	r4, r4, r5
 8002f9a:	10a4      	asrs	r4, r4, #2
 8002f9c:	42a6      	cmp	r6, r4
 8002f9e:	d109      	bne.n	8002fb4 <__libc_init_array+0x24>
 8002fa0:	f002 fd76 	bl	8005a90 <_init>
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	4d0a      	ldr	r5, [pc, #40]	; (8002fd0 <__libc_init_array+0x40>)
 8002fa8:	4c0a      	ldr	r4, [pc, #40]	; (8002fd4 <__libc_init_array+0x44>)
 8002faa:	1b64      	subs	r4, r4, r5
 8002fac:	10a4      	asrs	r4, r4, #2
 8002fae:	42a6      	cmp	r6, r4
 8002fb0:	d105      	bne.n	8002fbe <__libc_init_array+0x2e>
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
 8002fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb8:	4798      	blx	r3
 8002fba:	3601      	adds	r6, #1
 8002fbc:	e7ee      	b.n	8002f9c <__libc_init_array+0xc>
 8002fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc2:	4798      	blx	r3
 8002fc4:	3601      	adds	r6, #1
 8002fc6:	e7f2      	b.n	8002fae <__libc_init_array+0x1e>
 8002fc8:	08005eac 	.word	0x08005eac
 8002fcc:	08005eac 	.word	0x08005eac
 8002fd0:	08005eac 	.word	0x08005eac
 8002fd4:	08005eb0 	.word	0x08005eb0

08002fd8 <memset>:
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4402      	add	r2, r0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d100      	bne.n	8002fe2 <memset+0xa>
 8002fe0:	4770      	bx	lr
 8002fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe6:	e7f9      	b.n	8002fdc <memset+0x4>

08002fe8 <__cvt>:
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fee:	461f      	mov	r7, r3
 8002ff0:	bfbb      	ittet	lt
 8002ff2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ff6:	461f      	movlt	r7, r3
 8002ff8:	2300      	movge	r3, #0
 8002ffa:	232d      	movlt	r3, #45	; 0x2d
 8002ffc:	b088      	sub	sp, #32
 8002ffe:	4614      	mov	r4, r2
 8003000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003002:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003004:	7013      	strb	r3, [r2, #0]
 8003006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003008:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800300c:	f023 0820 	bic.w	r8, r3, #32
 8003010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003014:	d005      	beq.n	8003022 <__cvt+0x3a>
 8003016:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800301a:	d100      	bne.n	800301e <__cvt+0x36>
 800301c:	3501      	adds	r5, #1
 800301e:	2302      	movs	r3, #2
 8003020:	e000      	b.n	8003024 <__cvt+0x3c>
 8003022:	2303      	movs	r3, #3
 8003024:	aa07      	add	r2, sp, #28
 8003026:	9204      	str	r2, [sp, #16]
 8003028:	aa06      	add	r2, sp, #24
 800302a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800302e:	e9cd 3500 	strd	r3, r5, [sp]
 8003032:	4622      	mov	r2, r4
 8003034:	463b      	mov	r3, r7
 8003036:	f000 fcc3 	bl	80039c0 <_dtoa_r>
 800303a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800303e:	4606      	mov	r6, r0
 8003040:	d102      	bne.n	8003048 <__cvt+0x60>
 8003042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003044:	07db      	lsls	r3, r3, #31
 8003046:	d522      	bpl.n	800308e <__cvt+0xa6>
 8003048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800304c:	eb06 0905 	add.w	r9, r6, r5
 8003050:	d110      	bne.n	8003074 <__cvt+0x8c>
 8003052:	7833      	ldrb	r3, [r6, #0]
 8003054:	2b30      	cmp	r3, #48	; 0x30
 8003056:	d10a      	bne.n	800306e <__cvt+0x86>
 8003058:	2200      	movs	r2, #0
 800305a:	2300      	movs	r3, #0
 800305c:	4620      	mov	r0, r4
 800305e:	4639      	mov	r1, r7
 8003060:	f7fd fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8003064:	b918      	cbnz	r0, 800306e <__cvt+0x86>
 8003066:	f1c5 0501 	rsb	r5, r5, #1
 800306a:	f8ca 5000 	str.w	r5, [sl]
 800306e:	f8da 3000 	ldr.w	r3, [sl]
 8003072:	4499      	add	r9, r3
 8003074:	2200      	movs	r2, #0
 8003076:	2300      	movs	r3, #0
 8003078:	4620      	mov	r0, r4
 800307a:	4639      	mov	r1, r7
 800307c:	f7fd fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8003080:	b108      	cbz	r0, 8003086 <__cvt+0x9e>
 8003082:	f8cd 901c 	str.w	r9, [sp, #28]
 8003086:	2230      	movs	r2, #48	; 0x30
 8003088:	9b07      	ldr	r3, [sp, #28]
 800308a:	454b      	cmp	r3, r9
 800308c:	d307      	bcc.n	800309e <__cvt+0xb6>
 800308e:	4630      	mov	r0, r6
 8003090:	9b07      	ldr	r3, [sp, #28]
 8003092:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003094:	1b9b      	subs	r3, r3, r6
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	b008      	add	sp, #32
 800309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	9107      	str	r1, [sp, #28]
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e7f0      	b.n	8003088 <__cvt+0xa0>

080030a6 <__exponent>:
 80030a6:	4603      	mov	r3, r0
 80030a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030aa:	2900      	cmp	r1, #0
 80030ac:	f803 2b02 	strb.w	r2, [r3], #2
 80030b0:	bfb6      	itet	lt
 80030b2:	222d      	movlt	r2, #45	; 0x2d
 80030b4:	222b      	movge	r2, #43	; 0x2b
 80030b6:	4249      	neglt	r1, r1
 80030b8:	2909      	cmp	r1, #9
 80030ba:	7042      	strb	r2, [r0, #1]
 80030bc:	dd2b      	ble.n	8003116 <__exponent+0x70>
 80030be:	f10d 0407 	add.w	r4, sp, #7
 80030c2:	46a4      	mov	ip, r4
 80030c4:	270a      	movs	r7, #10
 80030c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80030ca:	460a      	mov	r2, r1
 80030cc:	46a6      	mov	lr, r4
 80030ce:	fb07 1516 	mls	r5, r7, r6, r1
 80030d2:	2a63      	cmp	r2, #99	; 0x63
 80030d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80030d8:	4631      	mov	r1, r6
 80030da:	f104 34ff 	add.w	r4, r4, #4294967295
 80030de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80030e2:	dcf0      	bgt.n	80030c6 <__exponent+0x20>
 80030e4:	3130      	adds	r1, #48	; 0x30
 80030e6:	f1ae 0502 	sub.w	r5, lr, #2
 80030ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80030ee:	4629      	mov	r1, r5
 80030f0:	1c44      	adds	r4, r0, #1
 80030f2:	4561      	cmp	r1, ip
 80030f4:	d30a      	bcc.n	800310c <__exponent+0x66>
 80030f6:	f10d 0209 	add.w	r2, sp, #9
 80030fa:	eba2 020e 	sub.w	r2, r2, lr
 80030fe:	4565      	cmp	r5, ip
 8003100:	bf88      	it	hi
 8003102:	2200      	movhi	r2, #0
 8003104:	4413      	add	r3, r2
 8003106:	1a18      	subs	r0, r3, r0
 8003108:	b003      	add	sp, #12
 800310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003110:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003114:	e7ed      	b.n	80030f2 <__exponent+0x4c>
 8003116:	2330      	movs	r3, #48	; 0x30
 8003118:	3130      	adds	r1, #48	; 0x30
 800311a:	7083      	strb	r3, [r0, #2]
 800311c:	70c1      	strb	r1, [r0, #3]
 800311e:	1d03      	adds	r3, r0, #4
 8003120:	e7f1      	b.n	8003106 <__exponent+0x60>
	...

08003124 <_printf_float>:
 8003124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003128:	b091      	sub	sp, #68	; 0x44
 800312a:	460c      	mov	r4, r1
 800312c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003130:	4616      	mov	r6, r2
 8003132:	461f      	mov	r7, r3
 8003134:	4605      	mov	r5, r0
 8003136:	f001 fa31 	bl	800459c <_localeconv_r>
 800313a:	6803      	ldr	r3, [r0, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	9309      	str	r3, [sp, #36]	; 0x24
 8003140:	f7fd f806 	bl	8000150 <strlen>
 8003144:	2300      	movs	r3, #0
 8003146:	930e      	str	r3, [sp, #56]	; 0x38
 8003148:	f8d8 3000 	ldr.w	r3, [r8]
 800314c:	900a      	str	r0, [sp, #40]	; 0x28
 800314e:	3307      	adds	r3, #7
 8003150:	f023 0307 	bic.w	r3, r3, #7
 8003154:	f103 0208 	add.w	r2, r3, #8
 8003158:	f894 9018 	ldrb.w	r9, [r4, #24]
 800315c:	f8d4 b000 	ldr.w	fp, [r4]
 8003160:	f8c8 2000 	str.w	r2, [r8]
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800316c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003170:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003174:	930b      	str	r3, [sp, #44]	; 0x2c
 8003176:	f04f 32ff 	mov.w	r2, #4294967295
 800317a:	4640      	mov	r0, r8
 800317c:	4b9c      	ldr	r3, [pc, #624]	; (80033f0 <_printf_float+0x2cc>)
 800317e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003180:	f7fd fc44 	bl	8000a0c <__aeabi_dcmpun>
 8003184:	bb70      	cbnz	r0, 80031e4 <_printf_float+0xc0>
 8003186:	f04f 32ff 	mov.w	r2, #4294967295
 800318a:	4640      	mov	r0, r8
 800318c:	4b98      	ldr	r3, [pc, #608]	; (80033f0 <_printf_float+0x2cc>)
 800318e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003190:	f7fd fc1e 	bl	80009d0 <__aeabi_dcmple>
 8003194:	bb30      	cbnz	r0, 80031e4 <_printf_float+0xc0>
 8003196:	2200      	movs	r2, #0
 8003198:	2300      	movs	r3, #0
 800319a:	4640      	mov	r0, r8
 800319c:	4651      	mov	r1, sl
 800319e:	f7fd fc0d 	bl	80009bc <__aeabi_dcmplt>
 80031a2:	b110      	cbz	r0, 80031aa <_printf_float+0x86>
 80031a4:	232d      	movs	r3, #45	; 0x2d
 80031a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031aa:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <_printf_float+0x2d0>)
 80031ac:	4892      	ldr	r0, [pc, #584]	; (80033f8 <_printf_float+0x2d4>)
 80031ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80031b2:	bf94      	ite	ls
 80031b4:	4698      	movls	r8, r3
 80031b6:	4680      	movhi	r8, r0
 80031b8:	2303      	movs	r3, #3
 80031ba:	f04f 0a00 	mov.w	sl, #0
 80031be:	6123      	str	r3, [r4, #16]
 80031c0:	f02b 0304 	bic.w	r3, fp, #4
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	4633      	mov	r3, r6
 80031c8:	4621      	mov	r1, r4
 80031ca:	4628      	mov	r0, r5
 80031cc:	9700      	str	r7, [sp, #0]
 80031ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80031d0:	f000 f9d4 	bl	800357c <_printf_common>
 80031d4:	3001      	adds	r0, #1
 80031d6:	f040 8090 	bne.w	80032fa <_printf_float+0x1d6>
 80031da:	f04f 30ff 	mov.w	r0, #4294967295
 80031de:	b011      	add	sp, #68	; 0x44
 80031e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e4:	4642      	mov	r2, r8
 80031e6:	4653      	mov	r3, sl
 80031e8:	4640      	mov	r0, r8
 80031ea:	4651      	mov	r1, sl
 80031ec:	f7fd fc0e 	bl	8000a0c <__aeabi_dcmpun>
 80031f0:	b148      	cbz	r0, 8003206 <_printf_float+0xe2>
 80031f2:	f1ba 0f00 	cmp.w	sl, #0
 80031f6:	bfb8      	it	lt
 80031f8:	232d      	movlt	r3, #45	; 0x2d
 80031fa:	4880      	ldr	r0, [pc, #512]	; (80033fc <_printf_float+0x2d8>)
 80031fc:	bfb8      	it	lt
 80031fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003202:	4b7f      	ldr	r3, [pc, #508]	; (8003400 <_printf_float+0x2dc>)
 8003204:	e7d3      	b.n	80031ae <_printf_float+0x8a>
 8003206:	6863      	ldr	r3, [r4, #4]
 8003208:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	d142      	bne.n	8003296 <_printf_float+0x172>
 8003210:	2306      	movs	r3, #6
 8003212:	6063      	str	r3, [r4, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	9206      	str	r2, [sp, #24]
 8003218:	aa0e      	add	r2, sp, #56	; 0x38
 800321a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800321e:	aa0d      	add	r2, sp, #52	; 0x34
 8003220:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800322a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	6863      	ldr	r3, [r4, #4]
 8003232:	4642      	mov	r2, r8
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4628      	mov	r0, r5
 8003238:	4653      	mov	r3, sl
 800323a:	910b      	str	r1, [sp, #44]	; 0x2c
 800323c:	f7ff fed4 	bl	8002fe8 <__cvt>
 8003240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003242:	4680      	mov	r8, r0
 8003244:	2947      	cmp	r1, #71	; 0x47
 8003246:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003248:	d108      	bne.n	800325c <_printf_float+0x138>
 800324a:	1cc8      	adds	r0, r1, #3
 800324c:	db02      	blt.n	8003254 <_printf_float+0x130>
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	4299      	cmp	r1, r3
 8003252:	dd40      	ble.n	80032d6 <_printf_float+0x1b2>
 8003254:	f1a9 0902 	sub.w	r9, r9, #2
 8003258:	fa5f f989 	uxtb.w	r9, r9
 800325c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003260:	d81f      	bhi.n	80032a2 <_printf_float+0x17e>
 8003262:	464a      	mov	r2, r9
 8003264:	3901      	subs	r1, #1
 8003266:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800326a:	910d      	str	r1, [sp, #52]	; 0x34
 800326c:	f7ff ff1b 	bl	80030a6 <__exponent>
 8003270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003272:	4682      	mov	sl, r0
 8003274:	1813      	adds	r3, r2, r0
 8003276:	2a01      	cmp	r2, #1
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	dc02      	bgt.n	8003282 <_printf_float+0x15e>
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	07d2      	lsls	r2, r2, #31
 8003280:	d501      	bpl.n	8003286 <_printf_float+0x162>
 8003282:	3301      	adds	r3, #1
 8003284:	6123      	str	r3, [r4, #16]
 8003286:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800328a:	2b00      	cmp	r3, #0
 800328c:	d09b      	beq.n	80031c6 <_printf_float+0xa2>
 800328e:	232d      	movs	r3, #45	; 0x2d
 8003290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003294:	e797      	b.n	80031c6 <_printf_float+0xa2>
 8003296:	2947      	cmp	r1, #71	; 0x47
 8003298:	d1bc      	bne.n	8003214 <_printf_float+0xf0>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ba      	bne.n	8003214 <_printf_float+0xf0>
 800329e:	2301      	movs	r3, #1
 80032a0:	e7b7      	b.n	8003212 <_printf_float+0xee>
 80032a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80032a6:	d118      	bne.n	80032da <_printf_float+0x1b6>
 80032a8:	2900      	cmp	r1, #0
 80032aa:	6863      	ldr	r3, [r4, #4]
 80032ac:	dd0b      	ble.n	80032c6 <_printf_float+0x1a2>
 80032ae:	6121      	str	r1, [r4, #16]
 80032b0:	b913      	cbnz	r3, 80032b8 <_printf_float+0x194>
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	07d0      	lsls	r0, r2, #31
 80032b6:	d502      	bpl.n	80032be <_printf_float+0x19a>
 80032b8:	3301      	adds	r3, #1
 80032ba:	440b      	add	r3, r1
 80032bc:	6123      	str	r3, [r4, #16]
 80032be:	f04f 0a00 	mov.w	sl, #0
 80032c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80032c4:	e7df      	b.n	8003286 <_printf_float+0x162>
 80032c6:	b913      	cbnz	r3, 80032ce <_printf_float+0x1aa>
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	07d2      	lsls	r2, r2, #31
 80032cc:	d501      	bpl.n	80032d2 <_printf_float+0x1ae>
 80032ce:	3302      	adds	r3, #2
 80032d0:	e7f4      	b.n	80032bc <_printf_float+0x198>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e7f2      	b.n	80032bc <_printf_float+0x198>
 80032d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032dc:	4299      	cmp	r1, r3
 80032de:	db05      	blt.n	80032ec <_printf_float+0x1c8>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	6121      	str	r1, [r4, #16]
 80032e4:	07d8      	lsls	r0, r3, #31
 80032e6:	d5ea      	bpl.n	80032be <_printf_float+0x19a>
 80032e8:	1c4b      	adds	r3, r1, #1
 80032ea:	e7e7      	b.n	80032bc <_printf_float+0x198>
 80032ec:	2900      	cmp	r1, #0
 80032ee:	bfcc      	ite	gt
 80032f0:	2201      	movgt	r2, #1
 80032f2:	f1c1 0202 	rsble	r2, r1, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	e7e0      	b.n	80032bc <_printf_float+0x198>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	055a      	lsls	r2, r3, #21
 80032fe:	d407      	bmi.n	8003310 <_printf_float+0x1ec>
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	4642      	mov	r2, r8
 8003304:	4631      	mov	r1, r6
 8003306:	4628      	mov	r0, r5
 8003308:	47b8      	blx	r7
 800330a:	3001      	adds	r0, #1
 800330c:	d12b      	bne.n	8003366 <_printf_float+0x242>
 800330e:	e764      	b.n	80031da <_printf_float+0xb6>
 8003310:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003314:	f240 80dd 	bls.w	80034d2 <_printf_float+0x3ae>
 8003318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800331c:	2200      	movs	r2, #0
 800331e:	2300      	movs	r3, #0
 8003320:	f7fd fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8003324:	2800      	cmp	r0, #0
 8003326:	d033      	beq.n	8003390 <_printf_float+0x26c>
 8003328:	2301      	movs	r3, #1
 800332a:	4631      	mov	r1, r6
 800332c:	4628      	mov	r0, r5
 800332e:	4a35      	ldr	r2, [pc, #212]	; (8003404 <_printf_float+0x2e0>)
 8003330:	47b8      	blx	r7
 8003332:	3001      	adds	r0, #1
 8003334:	f43f af51 	beq.w	80031da <_printf_float+0xb6>
 8003338:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800333c:	429a      	cmp	r2, r3
 800333e:	db02      	blt.n	8003346 <_printf_float+0x222>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	07d8      	lsls	r0, r3, #31
 8003344:	d50f      	bpl.n	8003366 <_printf_float+0x242>
 8003346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800334a:	4631      	mov	r1, r6
 800334c:	4628      	mov	r0, r5
 800334e:	47b8      	blx	r7
 8003350:	3001      	adds	r0, #1
 8003352:	f43f af42 	beq.w	80031da <_printf_float+0xb6>
 8003356:	f04f 0800 	mov.w	r8, #0
 800335a:	f104 091a 	add.w	r9, r4, #26
 800335e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003360:	3b01      	subs	r3, #1
 8003362:	4543      	cmp	r3, r8
 8003364:	dc09      	bgt.n	800337a <_printf_float+0x256>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	079b      	lsls	r3, r3, #30
 800336a:	f100 8102 	bmi.w	8003572 <_printf_float+0x44e>
 800336e:	68e0      	ldr	r0, [r4, #12]
 8003370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003372:	4298      	cmp	r0, r3
 8003374:	bfb8      	it	lt
 8003376:	4618      	movlt	r0, r3
 8003378:	e731      	b.n	80031de <_printf_float+0xba>
 800337a:	2301      	movs	r3, #1
 800337c:	464a      	mov	r2, r9
 800337e:	4631      	mov	r1, r6
 8003380:	4628      	mov	r0, r5
 8003382:	47b8      	blx	r7
 8003384:	3001      	adds	r0, #1
 8003386:	f43f af28 	beq.w	80031da <_printf_float+0xb6>
 800338a:	f108 0801 	add.w	r8, r8, #1
 800338e:	e7e6      	b.n	800335e <_printf_float+0x23a>
 8003390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	dc38      	bgt.n	8003408 <_printf_float+0x2e4>
 8003396:	2301      	movs	r3, #1
 8003398:	4631      	mov	r1, r6
 800339a:	4628      	mov	r0, r5
 800339c:	4a19      	ldr	r2, [pc, #100]	; (8003404 <_printf_float+0x2e0>)
 800339e:	47b8      	blx	r7
 80033a0:	3001      	adds	r0, #1
 80033a2:	f43f af1a 	beq.w	80031da <_printf_float+0xb6>
 80033a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033aa:	4313      	orrs	r3, r2
 80033ac:	d102      	bne.n	80033b4 <_printf_float+0x290>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	07d9      	lsls	r1, r3, #31
 80033b2:	d5d8      	bpl.n	8003366 <_printf_float+0x242>
 80033b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033b8:	4631      	mov	r1, r6
 80033ba:	4628      	mov	r0, r5
 80033bc:	47b8      	blx	r7
 80033be:	3001      	adds	r0, #1
 80033c0:	f43f af0b 	beq.w	80031da <_printf_float+0xb6>
 80033c4:	f04f 0900 	mov.w	r9, #0
 80033c8:	f104 0a1a 	add.w	sl, r4, #26
 80033cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ce:	425b      	negs	r3, r3
 80033d0:	454b      	cmp	r3, r9
 80033d2:	dc01      	bgt.n	80033d8 <_printf_float+0x2b4>
 80033d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033d6:	e794      	b.n	8003302 <_printf_float+0x1de>
 80033d8:	2301      	movs	r3, #1
 80033da:	4652      	mov	r2, sl
 80033dc:	4631      	mov	r1, r6
 80033de:	4628      	mov	r0, r5
 80033e0:	47b8      	blx	r7
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f aef9 	beq.w	80031da <_printf_float+0xb6>
 80033e8:	f109 0901 	add.w	r9, r9, #1
 80033ec:	e7ee      	b.n	80033cc <_printf_float+0x2a8>
 80033ee:	bf00      	nop
 80033f0:	7fefffff 	.word	0x7fefffff
 80033f4:	08005ad4 	.word	0x08005ad4
 80033f8:	08005ad8 	.word	0x08005ad8
 80033fc:	08005ae0 	.word	0x08005ae0
 8003400:	08005adc 	.word	0x08005adc
 8003404:	08005ae4 	.word	0x08005ae4
 8003408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800340a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800340c:	429a      	cmp	r2, r3
 800340e:	bfa8      	it	ge
 8003410:	461a      	movge	r2, r3
 8003412:	2a00      	cmp	r2, #0
 8003414:	4691      	mov	r9, r2
 8003416:	dc37      	bgt.n	8003488 <_printf_float+0x364>
 8003418:	f04f 0b00 	mov.w	fp, #0
 800341c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003420:	f104 021a 	add.w	r2, r4, #26
 8003424:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003428:	ebaa 0309 	sub.w	r3, sl, r9
 800342c:	455b      	cmp	r3, fp
 800342e:	dc33      	bgt.n	8003498 <_printf_float+0x374>
 8003430:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003434:	429a      	cmp	r2, r3
 8003436:	db3b      	blt.n	80034b0 <_printf_float+0x38c>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	07da      	lsls	r2, r3, #31
 800343c:	d438      	bmi.n	80034b0 <_printf_float+0x38c>
 800343e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003440:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003442:	eba3 020a 	sub.w	r2, r3, sl
 8003446:	eba3 0901 	sub.w	r9, r3, r1
 800344a:	4591      	cmp	r9, r2
 800344c:	bfa8      	it	ge
 800344e:	4691      	movge	r9, r2
 8003450:	f1b9 0f00 	cmp.w	r9, #0
 8003454:	dc34      	bgt.n	80034c0 <_printf_float+0x39c>
 8003456:	f04f 0800 	mov.w	r8, #0
 800345a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800345e:	f104 0a1a 	add.w	sl, r4, #26
 8003462:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	eba3 0309 	sub.w	r3, r3, r9
 800346c:	4543      	cmp	r3, r8
 800346e:	f77f af7a 	ble.w	8003366 <_printf_float+0x242>
 8003472:	2301      	movs	r3, #1
 8003474:	4652      	mov	r2, sl
 8003476:	4631      	mov	r1, r6
 8003478:	4628      	mov	r0, r5
 800347a:	47b8      	blx	r7
 800347c:	3001      	adds	r0, #1
 800347e:	f43f aeac 	beq.w	80031da <_printf_float+0xb6>
 8003482:	f108 0801 	add.w	r8, r8, #1
 8003486:	e7ec      	b.n	8003462 <_printf_float+0x33e>
 8003488:	4613      	mov	r3, r2
 800348a:	4631      	mov	r1, r6
 800348c:	4642      	mov	r2, r8
 800348e:	4628      	mov	r0, r5
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	d1c0      	bne.n	8003418 <_printf_float+0x2f4>
 8003496:	e6a0      	b.n	80031da <_printf_float+0xb6>
 8003498:	2301      	movs	r3, #1
 800349a:	4631      	mov	r1, r6
 800349c:	4628      	mov	r0, r5
 800349e:	920b      	str	r2, [sp, #44]	; 0x2c
 80034a0:	47b8      	blx	r7
 80034a2:	3001      	adds	r0, #1
 80034a4:	f43f ae99 	beq.w	80031da <_printf_float+0xb6>
 80034a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034aa:	f10b 0b01 	add.w	fp, fp, #1
 80034ae:	e7b9      	b.n	8003424 <_printf_float+0x300>
 80034b0:	4631      	mov	r1, r6
 80034b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	d1bf      	bne.n	800343e <_printf_float+0x31a>
 80034be:	e68c      	b.n	80031da <_printf_float+0xb6>
 80034c0:	464b      	mov	r3, r9
 80034c2:	4631      	mov	r1, r6
 80034c4:	4628      	mov	r0, r5
 80034c6:	eb08 020a 	add.w	r2, r8, sl
 80034ca:	47b8      	blx	r7
 80034cc:	3001      	adds	r0, #1
 80034ce:	d1c2      	bne.n	8003456 <_printf_float+0x332>
 80034d0:	e683      	b.n	80031da <_printf_float+0xb6>
 80034d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034d4:	2a01      	cmp	r2, #1
 80034d6:	dc01      	bgt.n	80034dc <_printf_float+0x3b8>
 80034d8:	07db      	lsls	r3, r3, #31
 80034da:	d537      	bpl.n	800354c <_printf_float+0x428>
 80034dc:	2301      	movs	r3, #1
 80034de:	4642      	mov	r2, r8
 80034e0:	4631      	mov	r1, r6
 80034e2:	4628      	mov	r0, r5
 80034e4:	47b8      	blx	r7
 80034e6:	3001      	adds	r0, #1
 80034e8:	f43f ae77 	beq.w	80031da <_printf_float+0xb6>
 80034ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034f0:	4631      	mov	r1, r6
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b8      	blx	r7
 80034f6:	3001      	adds	r0, #1
 80034f8:	f43f ae6f 	beq.w	80031da <_printf_float+0xb6>
 80034fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003500:	2200      	movs	r2, #0
 8003502:	2300      	movs	r3, #0
 8003504:	f7fd fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8003508:	b9d8      	cbnz	r0, 8003542 <_printf_float+0x41e>
 800350a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800350c:	f108 0201 	add.w	r2, r8, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	d10e      	bne.n	800353a <_printf_float+0x416>
 800351c:	e65d      	b.n	80031da <_printf_float+0xb6>
 800351e:	2301      	movs	r3, #1
 8003520:	464a      	mov	r2, r9
 8003522:	4631      	mov	r1, r6
 8003524:	4628      	mov	r0, r5
 8003526:	47b8      	blx	r7
 8003528:	3001      	adds	r0, #1
 800352a:	f43f ae56 	beq.w	80031da <_printf_float+0xb6>
 800352e:	f108 0801 	add.w	r8, r8, #1
 8003532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003534:	3b01      	subs	r3, #1
 8003536:	4543      	cmp	r3, r8
 8003538:	dcf1      	bgt.n	800351e <_printf_float+0x3fa>
 800353a:	4653      	mov	r3, sl
 800353c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003540:	e6e0      	b.n	8003304 <_printf_float+0x1e0>
 8003542:	f04f 0800 	mov.w	r8, #0
 8003546:	f104 091a 	add.w	r9, r4, #26
 800354a:	e7f2      	b.n	8003532 <_printf_float+0x40e>
 800354c:	2301      	movs	r3, #1
 800354e:	4642      	mov	r2, r8
 8003550:	e7df      	b.n	8003512 <_printf_float+0x3ee>
 8003552:	2301      	movs	r3, #1
 8003554:	464a      	mov	r2, r9
 8003556:	4631      	mov	r1, r6
 8003558:	4628      	mov	r0, r5
 800355a:	47b8      	blx	r7
 800355c:	3001      	adds	r0, #1
 800355e:	f43f ae3c 	beq.w	80031da <_printf_float+0xb6>
 8003562:	f108 0801 	add.w	r8, r8, #1
 8003566:	68e3      	ldr	r3, [r4, #12]
 8003568:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800356a:	1a5b      	subs	r3, r3, r1
 800356c:	4543      	cmp	r3, r8
 800356e:	dcf0      	bgt.n	8003552 <_printf_float+0x42e>
 8003570:	e6fd      	b.n	800336e <_printf_float+0x24a>
 8003572:	f04f 0800 	mov.w	r8, #0
 8003576:	f104 0919 	add.w	r9, r4, #25
 800357a:	e7f4      	b.n	8003566 <_printf_float+0x442>

0800357c <_printf_common>:
 800357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003580:	4616      	mov	r6, r2
 8003582:	4699      	mov	r9, r3
 8003584:	688a      	ldr	r2, [r1, #8]
 8003586:	690b      	ldr	r3, [r1, #16]
 8003588:	4607      	mov	r7, r0
 800358a:	4293      	cmp	r3, r2
 800358c:	bfb8      	it	lt
 800358e:	4613      	movlt	r3, r2
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003596:	460c      	mov	r4, r1
 8003598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800359c:	b10a      	cbz	r2, 80035a2 <_printf_common+0x26>
 800359e:	3301      	adds	r3, #1
 80035a0:	6033      	str	r3, [r6, #0]
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	0699      	lsls	r1, r3, #26
 80035a6:	bf42      	ittt	mi
 80035a8:	6833      	ldrmi	r3, [r6, #0]
 80035aa:	3302      	addmi	r3, #2
 80035ac:	6033      	strmi	r3, [r6, #0]
 80035ae:	6825      	ldr	r5, [r4, #0]
 80035b0:	f015 0506 	ands.w	r5, r5, #6
 80035b4:	d106      	bne.n	80035c4 <_printf_common+0x48>
 80035b6:	f104 0a19 	add.w	sl, r4, #25
 80035ba:	68e3      	ldr	r3, [r4, #12]
 80035bc:	6832      	ldr	r2, [r6, #0]
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	42ab      	cmp	r3, r5
 80035c2:	dc28      	bgt.n	8003616 <_printf_common+0x9a>
 80035c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035c8:	1e13      	subs	r3, r2, #0
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	bf18      	it	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	0692      	lsls	r2, r2, #26
 80035d2:	d42d      	bmi.n	8003630 <_printf_common+0xb4>
 80035d4:	4649      	mov	r1, r9
 80035d6:	4638      	mov	r0, r7
 80035d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035dc:	47c0      	blx	r8
 80035de:	3001      	adds	r0, #1
 80035e0:	d020      	beq.n	8003624 <_printf_common+0xa8>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	68e5      	ldr	r5, [r4, #12]
 80035e6:	f003 0306 	and.w	r3, r3, #6
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf18      	it	ne
 80035ee:	2500      	movne	r5, #0
 80035f0:	6832      	ldr	r2, [r6, #0]
 80035f2:	f04f 0600 	mov.w	r6, #0
 80035f6:	68a3      	ldr	r3, [r4, #8]
 80035f8:	bf08      	it	eq
 80035fa:	1aad      	subeq	r5, r5, r2
 80035fc:	6922      	ldr	r2, [r4, #16]
 80035fe:	bf08      	it	eq
 8003600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003604:	4293      	cmp	r3, r2
 8003606:	bfc4      	itt	gt
 8003608:	1a9b      	subgt	r3, r3, r2
 800360a:	18ed      	addgt	r5, r5, r3
 800360c:	341a      	adds	r4, #26
 800360e:	42b5      	cmp	r5, r6
 8003610:	d11a      	bne.n	8003648 <_printf_common+0xcc>
 8003612:	2000      	movs	r0, #0
 8003614:	e008      	b.n	8003628 <_printf_common+0xac>
 8003616:	2301      	movs	r3, #1
 8003618:	4652      	mov	r2, sl
 800361a:	4649      	mov	r1, r9
 800361c:	4638      	mov	r0, r7
 800361e:	47c0      	blx	r8
 8003620:	3001      	adds	r0, #1
 8003622:	d103      	bne.n	800362c <_printf_common+0xb0>
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362c:	3501      	adds	r5, #1
 800362e:	e7c4      	b.n	80035ba <_printf_common+0x3e>
 8003630:	2030      	movs	r0, #48	; 0x30
 8003632:	18e1      	adds	r1, r4, r3
 8003634:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800363e:	4422      	add	r2, r4
 8003640:	3302      	adds	r3, #2
 8003642:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003646:	e7c5      	b.n	80035d4 <_printf_common+0x58>
 8003648:	2301      	movs	r3, #1
 800364a:	4622      	mov	r2, r4
 800364c:	4649      	mov	r1, r9
 800364e:	4638      	mov	r0, r7
 8003650:	47c0      	blx	r8
 8003652:	3001      	adds	r0, #1
 8003654:	d0e6      	beq.n	8003624 <_printf_common+0xa8>
 8003656:	3601      	adds	r6, #1
 8003658:	e7d9      	b.n	800360e <_printf_common+0x92>
	...

0800365c <_printf_i>:
 800365c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003660:	7e0f      	ldrb	r7, [r1, #24]
 8003662:	4691      	mov	r9, r2
 8003664:	2f78      	cmp	r7, #120	; 0x78
 8003666:	4680      	mov	r8, r0
 8003668:	460c      	mov	r4, r1
 800366a:	469a      	mov	sl, r3
 800366c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800366e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003672:	d807      	bhi.n	8003684 <_printf_i+0x28>
 8003674:	2f62      	cmp	r7, #98	; 0x62
 8003676:	d80a      	bhi.n	800368e <_printf_i+0x32>
 8003678:	2f00      	cmp	r7, #0
 800367a:	f000 80d9 	beq.w	8003830 <_printf_i+0x1d4>
 800367e:	2f58      	cmp	r7, #88	; 0x58
 8003680:	f000 80a4 	beq.w	80037cc <_printf_i+0x170>
 8003684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800368c:	e03a      	b.n	8003704 <_printf_i+0xa8>
 800368e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003692:	2b15      	cmp	r3, #21
 8003694:	d8f6      	bhi.n	8003684 <_printf_i+0x28>
 8003696:	a101      	add	r1, pc, #4	; (adr r1, 800369c <_printf_i+0x40>)
 8003698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800369c:	080036f5 	.word	0x080036f5
 80036a0:	08003709 	.word	0x08003709
 80036a4:	08003685 	.word	0x08003685
 80036a8:	08003685 	.word	0x08003685
 80036ac:	08003685 	.word	0x08003685
 80036b0:	08003685 	.word	0x08003685
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003685 	.word	0x08003685
 80036bc:	08003685 	.word	0x08003685
 80036c0:	08003685 	.word	0x08003685
 80036c4:	08003685 	.word	0x08003685
 80036c8:	08003817 	.word	0x08003817
 80036cc:	08003739 	.word	0x08003739
 80036d0:	080037f9 	.word	0x080037f9
 80036d4:	08003685 	.word	0x08003685
 80036d8:	08003685 	.word	0x08003685
 80036dc:	08003839 	.word	0x08003839
 80036e0:	08003685 	.word	0x08003685
 80036e4:	08003739 	.word	0x08003739
 80036e8:	08003685 	.word	0x08003685
 80036ec:	08003685 	.word	0x08003685
 80036f0:	08003801 	.word	0x08003801
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	1d1a      	adds	r2, r3, #4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	602a      	str	r2, [r5, #0]
 80036fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003704:	2301      	movs	r3, #1
 8003706:	e0a4      	b.n	8003852 <_printf_i+0x1f6>
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	6829      	ldr	r1, [r5, #0]
 800370c:	0606      	lsls	r6, r0, #24
 800370e:	f101 0304 	add.w	r3, r1, #4
 8003712:	d50a      	bpl.n	800372a <_printf_i+0xce>
 8003714:	680e      	ldr	r6, [r1, #0]
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	2e00      	cmp	r6, #0
 800371a:	da03      	bge.n	8003724 <_printf_i+0xc8>
 800371c:	232d      	movs	r3, #45	; 0x2d
 800371e:	4276      	negs	r6, r6
 8003720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003724:	230a      	movs	r3, #10
 8003726:	485e      	ldr	r0, [pc, #376]	; (80038a0 <_printf_i+0x244>)
 8003728:	e019      	b.n	800375e <_printf_i+0x102>
 800372a:	680e      	ldr	r6, [r1, #0]
 800372c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003730:	602b      	str	r3, [r5, #0]
 8003732:	bf18      	it	ne
 8003734:	b236      	sxthne	r6, r6
 8003736:	e7ef      	b.n	8003718 <_printf_i+0xbc>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	1d19      	adds	r1, r3, #4
 800373e:	6029      	str	r1, [r5, #0]
 8003740:	0601      	lsls	r1, r0, #24
 8003742:	d501      	bpl.n	8003748 <_printf_i+0xec>
 8003744:	681e      	ldr	r6, [r3, #0]
 8003746:	e002      	b.n	800374e <_printf_i+0xf2>
 8003748:	0646      	lsls	r6, r0, #25
 800374a:	d5fb      	bpl.n	8003744 <_printf_i+0xe8>
 800374c:	881e      	ldrh	r6, [r3, #0]
 800374e:	2f6f      	cmp	r7, #111	; 0x6f
 8003750:	bf0c      	ite	eq
 8003752:	2308      	moveq	r3, #8
 8003754:	230a      	movne	r3, #10
 8003756:	4852      	ldr	r0, [pc, #328]	; (80038a0 <_printf_i+0x244>)
 8003758:	2100      	movs	r1, #0
 800375a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800375e:	6865      	ldr	r5, [r4, #4]
 8003760:	2d00      	cmp	r5, #0
 8003762:	bfa8      	it	ge
 8003764:	6821      	ldrge	r1, [r4, #0]
 8003766:	60a5      	str	r5, [r4, #8]
 8003768:	bfa4      	itt	ge
 800376a:	f021 0104 	bicge.w	r1, r1, #4
 800376e:	6021      	strge	r1, [r4, #0]
 8003770:	b90e      	cbnz	r6, 8003776 <_printf_i+0x11a>
 8003772:	2d00      	cmp	r5, #0
 8003774:	d04d      	beq.n	8003812 <_printf_i+0x1b6>
 8003776:	4615      	mov	r5, r2
 8003778:	fbb6 f1f3 	udiv	r1, r6, r3
 800377c:	fb03 6711 	mls	r7, r3, r1, r6
 8003780:	5dc7      	ldrb	r7, [r0, r7]
 8003782:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003786:	4637      	mov	r7, r6
 8003788:	42bb      	cmp	r3, r7
 800378a:	460e      	mov	r6, r1
 800378c:	d9f4      	bls.n	8003778 <_printf_i+0x11c>
 800378e:	2b08      	cmp	r3, #8
 8003790:	d10b      	bne.n	80037aa <_printf_i+0x14e>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	07de      	lsls	r6, r3, #31
 8003796:	d508      	bpl.n	80037aa <_printf_i+0x14e>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	6861      	ldr	r1, [r4, #4]
 800379c:	4299      	cmp	r1, r3
 800379e:	bfde      	ittt	le
 80037a0:	2330      	movle	r3, #48	; 0x30
 80037a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037aa:	1b52      	subs	r2, r2, r5
 80037ac:	6122      	str	r2, [r4, #16]
 80037ae:	464b      	mov	r3, r9
 80037b0:	4621      	mov	r1, r4
 80037b2:	4640      	mov	r0, r8
 80037b4:	f8cd a000 	str.w	sl, [sp]
 80037b8:	aa03      	add	r2, sp, #12
 80037ba:	f7ff fedf 	bl	800357c <_printf_common>
 80037be:	3001      	adds	r0, #1
 80037c0:	d14c      	bne.n	800385c <_printf_i+0x200>
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	b004      	add	sp, #16
 80037c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037cc:	4834      	ldr	r0, [pc, #208]	; (80038a0 <_printf_i+0x244>)
 80037ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037d2:	6829      	ldr	r1, [r5, #0]
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80037da:	6029      	str	r1, [r5, #0]
 80037dc:	061d      	lsls	r5, r3, #24
 80037de:	d514      	bpl.n	800380a <_printf_i+0x1ae>
 80037e0:	07df      	lsls	r7, r3, #31
 80037e2:	bf44      	itt	mi
 80037e4:	f043 0320 	orrmi.w	r3, r3, #32
 80037e8:	6023      	strmi	r3, [r4, #0]
 80037ea:	b91e      	cbnz	r6, 80037f4 <_printf_i+0x198>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f023 0320 	bic.w	r3, r3, #32
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	2310      	movs	r3, #16
 80037f6:	e7af      	b.n	8003758 <_printf_i+0xfc>
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	f043 0320 	orr.w	r3, r3, #32
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	2378      	movs	r3, #120	; 0x78
 8003802:	4828      	ldr	r0, [pc, #160]	; (80038a4 <_printf_i+0x248>)
 8003804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003808:	e7e3      	b.n	80037d2 <_printf_i+0x176>
 800380a:	0659      	lsls	r1, r3, #25
 800380c:	bf48      	it	mi
 800380e:	b2b6      	uxthmi	r6, r6
 8003810:	e7e6      	b.n	80037e0 <_printf_i+0x184>
 8003812:	4615      	mov	r5, r2
 8003814:	e7bb      	b.n	800378e <_printf_i+0x132>
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	6826      	ldr	r6, [r4, #0]
 800381a:	1d18      	adds	r0, r3, #4
 800381c:	6961      	ldr	r1, [r4, #20]
 800381e:	6028      	str	r0, [r5, #0]
 8003820:	0635      	lsls	r5, r6, #24
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	d501      	bpl.n	800382a <_printf_i+0x1ce>
 8003826:	6019      	str	r1, [r3, #0]
 8003828:	e002      	b.n	8003830 <_printf_i+0x1d4>
 800382a:	0670      	lsls	r0, r6, #25
 800382c:	d5fb      	bpl.n	8003826 <_printf_i+0x1ca>
 800382e:	8019      	strh	r1, [r3, #0]
 8003830:	2300      	movs	r3, #0
 8003832:	4615      	mov	r5, r2
 8003834:	6123      	str	r3, [r4, #16]
 8003836:	e7ba      	b.n	80037ae <_printf_i+0x152>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	2100      	movs	r1, #0
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	602a      	str	r2, [r5, #0]
 8003840:	681d      	ldr	r5, [r3, #0]
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	4628      	mov	r0, r5
 8003846:	f000 feb5 	bl	80045b4 <memchr>
 800384a:	b108      	cbz	r0, 8003850 <_printf_i+0x1f4>
 800384c:	1b40      	subs	r0, r0, r5
 800384e:	6060      	str	r0, [r4, #4]
 8003850:	6863      	ldr	r3, [r4, #4]
 8003852:	6123      	str	r3, [r4, #16]
 8003854:	2300      	movs	r3, #0
 8003856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800385a:	e7a8      	b.n	80037ae <_printf_i+0x152>
 800385c:	462a      	mov	r2, r5
 800385e:	4649      	mov	r1, r9
 8003860:	4640      	mov	r0, r8
 8003862:	6923      	ldr	r3, [r4, #16]
 8003864:	47d0      	blx	sl
 8003866:	3001      	adds	r0, #1
 8003868:	d0ab      	beq.n	80037c2 <_printf_i+0x166>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	079b      	lsls	r3, r3, #30
 800386e:	d413      	bmi.n	8003898 <_printf_i+0x23c>
 8003870:	68e0      	ldr	r0, [r4, #12]
 8003872:	9b03      	ldr	r3, [sp, #12]
 8003874:	4298      	cmp	r0, r3
 8003876:	bfb8      	it	lt
 8003878:	4618      	movlt	r0, r3
 800387a:	e7a4      	b.n	80037c6 <_printf_i+0x16a>
 800387c:	2301      	movs	r3, #1
 800387e:	4632      	mov	r2, r6
 8003880:	4649      	mov	r1, r9
 8003882:	4640      	mov	r0, r8
 8003884:	47d0      	blx	sl
 8003886:	3001      	adds	r0, #1
 8003888:	d09b      	beq.n	80037c2 <_printf_i+0x166>
 800388a:	3501      	adds	r5, #1
 800388c:	68e3      	ldr	r3, [r4, #12]
 800388e:	9903      	ldr	r1, [sp, #12]
 8003890:	1a5b      	subs	r3, r3, r1
 8003892:	42ab      	cmp	r3, r5
 8003894:	dcf2      	bgt.n	800387c <_printf_i+0x220>
 8003896:	e7eb      	b.n	8003870 <_printf_i+0x214>
 8003898:	2500      	movs	r5, #0
 800389a:	f104 0619 	add.w	r6, r4, #25
 800389e:	e7f5      	b.n	800388c <_printf_i+0x230>
 80038a0:	08005ae6 	.word	0x08005ae6
 80038a4:	08005af7 	.word	0x08005af7

080038a8 <quorem>:
 80038a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	6903      	ldr	r3, [r0, #16]
 80038ae:	690c      	ldr	r4, [r1, #16]
 80038b0:	4607      	mov	r7, r0
 80038b2:	42a3      	cmp	r3, r4
 80038b4:	f2c0 8082 	blt.w	80039bc <quorem+0x114>
 80038b8:	3c01      	subs	r4, #1
 80038ba:	f100 0514 	add.w	r5, r0, #20
 80038be:	f101 0814 	add.w	r8, r1, #20
 80038c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80038cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038d0:	3301      	adds	r3, #1
 80038d2:	429a      	cmp	r2, r3
 80038d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80038d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80038dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80038e0:	d331      	bcc.n	8003946 <quorem+0x9e>
 80038e2:	f04f 0e00 	mov.w	lr, #0
 80038e6:	4640      	mov	r0, r8
 80038e8:	46ac      	mov	ip, r5
 80038ea:	46f2      	mov	sl, lr
 80038ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80038f0:	b293      	uxth	r3, r2
 80038f2:	fb06 e303 	mla	r3, r6, r3, lr
 80038f6:	0c12      	lsrs	r2, r2, #16
 80038f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	fb06 e202 	mla	r2, r6, r2, lr
 8003902:	ebaa 0303 	sub.w	r3, sl, r3
 8003906:	f8dc a000 	ldr.w	sl, [ip]
 800390a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800390e:	fa1f fa8a 	uxth.w	sl, sl
 8003912:	4453      	add	r3, sl
 8003914:	f8dc a000 	ldr.w	sl, [ip]
 8003918:	b292      	uxth	r2, r2
 800391a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800391e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003922:	b29b      	uxth	r3, r3
 8003924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003928:	4581      	cmp	r9, r0
 800392a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800392e:	f84c 3b04 	str.w	r3, [ip], #4
 8003932:	d2db      	bcs.n	80038ec <quorem+0x44>
 8003934:	f855 300b 	ldr.w	r3, [r5, fp]
 8003938:	b92b      	cbnz	r3, 8003946 <quorem+0x9e>
 800393a:	9b01      	ldr	r3, [sp, #4]
 800393c:	3b04      	subs	r3, #4
 800393e:	429d      	cmp	r5, r3
 8003940:	461a      	mov	r2, r3
 8003942:	d32f      	bcc.n	80039a4 <quorem+0xfc>
 8003944:	613c      	str	r4, [r7, #16]
 8003946:	4638      	mov	r0, r7
 8003948:	f001 f8ce 	bl	8004ae8 <__mcmp>
 800394c:	2800      	cmp	r0, #0
 800394e:	db25      	blt.n	800399c <quorem+0xf4>
 8003950:	4628      	mov	r0, r5
 8003952:	f04f 0c00 	mov.w	ip, #0
 8003956:	3601      	adds	r6, #1
 8003958:	f858 1b04 	ldr.w	r1, [r8], #4
 800395c:	f8d0 e000 	ldr.w	lr, [r0]
 8003960:	b28b      	uxth	r3, r1
 8003962:	ebac 0303 	sub.w	r3, ip, r3
 8003966:	fa1f f28e 	uxth.w	r2, lr
 800396a:	4413      	add	r3, r2
 800396c:	0c0a      	lsrs	r2, r1, #16
 800396e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003972:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003976:	b29b      	uxth	r3, r3
 8003978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800397c:	45c1      	cmp	r9, r8
 800397e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003982:	f840 3b04 	str.w	r3, [r0], #4
 8003986:	d2e7      	bcs.n	8003958 <quorem+0xb0>
 8003988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800398c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003990:	b922      	cbnz	r2, 800399c <quorem+0xf4>
 8003992:	3b04      	subs	r3, #4
 8003994:	429d      	cmp	r5, r3
 8003996:	461a      	mov	r2, r3
 8003998:	d30a      	bcc.n	80039b0 <quorem+0x108>
 800399a:	613c      	str	r4, [r7, #16]
 800399c:	4630      	mov	r0, r6
 800399e:	b003      	add	sp, #12
 80039a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	3b04      	subs	r3, #4
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	d1cb      	bne.n	8003944 <quorem+0x9c>
 80039ac:	3c01      	subs	r4, #1
 80039ae:	e7c6      	b.n	800393e <quorem+0x96>
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	3b04      	subs	r3, #4
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d1f0      	bne.n	800399a <quorem+0xf2>
 80039b8:	3c01      	subs	r4, #1
 80039ba:	e7eb      	b.n	8003994 <quorem+0xec>
 80039bc:	2000      	movs	r0, #0
 80039be:	e7ee      	b.n	800399e <quorem+0xf6>

080039c0 <_dtoa_r>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	4616      	mov	r6, r2
 80039c6:	461f      	mov	r7, r3
 80039c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80039ca:	b099      	sub	sp, #100	; 0x64
 80039cc:	4605      	mov	r5, r0
 80039ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80039d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80039d6:	b974      	cbnz	r4, 80039f6 <_dtoa_r+0x36>
 80039d8:	2010      	movs	r0, #16
 80039da:	f000 fde3 	bl	80045a4 <malloc>
 80039de:	4602      	mov	r2, r0
 80039e0:	6268      	str	r0, [r5, #36]	; 0x24
 80039e2:	b920      	cbnz	r0, 80039ee <_dtoa_r+0x2e>
 80039e4:	21ea      	movs	r1, #234	; 0xea
 80039e6:	4ba8      	ldr	r3, [pc, #672]	; (8003c88 <_dtoa_r+0x2c8>)
 80039e8:	48a8      	ldr	r0, [pc, #672]	; (8003c8c <_dtoa_r+0x2cc>)
 80039ea:	f001 fa81 	bl	8004ef0 <__assert_func>
 80039ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80039f2:	6004      	str	r4, [r0, #0]
 80039f4:	60c4      	str	r4, [r0, #12]
 80039f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	b151      	cbz	r1, 8003a12 <_dtoa_r+0x52>
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2301      	movs	r3, #1
 8003a00:	4093      	lsls	r3, r2
 8003a02:	604a      	str	r2, [r1, #4]
 8003a04:	608b      	str	r3, [r1, #8]
 8003a06:	4628      	mov	r0, r5
 8003a08:	f000 fe30 	bl	800466c <_Bfree>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	1e3b      	subs	r3, r7, #0
 8003a14:	bfaf      	iteee	ge
 8003a16:	2300      	movge	r3, #0
 8003a18:	2201      	movlt	r2, #1
 8003a1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a1e:	9305      	strlt	r3, [sp, #20]
 8003a20:	bfa8      	it	ge
 8003a22:	f8c8 3000 	strge.w	r3, [r8]
 8003a26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003a2a:	4b99      	ldr	r3, [pc, #612]	; (8003c90 <_dtoa_r+0x2d0>)
 8003a2c:	bfb8      	it	lt
 8003a2e:	f8c8 2000 	strlt.w	r2, [r8]
 8003a32:	ea33 0309 	bics.w	r3, r3, r9
 8003a36:	d119      	bne.n	8003a6c <_dtoa_r+0xac>
 8003a38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a44:	4333      	orrs	r3, r6
 8003a46:	f000 857f 	beq.w	8004548 <_dtoa_r+0xb88>
 8003a4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a4c:	b953      	cbnz	r3, 8003a64 <_dtoa_r+0xa4>
 8003a4e:	4b91      	ldr	r3, [pc, #580]	; (8003c94 <_dtoa_r+0x2d4>)
 8003a50:	e022      	b.n	8003a98 <_dtoa_r+0xd8>
 8003a52:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <_dtoa_r+0x2d8>)
 8003a54:	9303      	str	r3, [sp, #12]
 8003a56:	3308      	adds	r3, #8
 8003a58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	9803      	ldr	r0, [sp, #12]
 8003a5e:	b019      	add	sp, #100	; 0x64
 8003a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a64:	4b8b      	ldr	r3, [pc, #556]	; (8003c94 <_dtoa_r+0x2d4>)
 8003a66:	9303      	str	r3, [sp, #12]
 8003a68:	3303      	adds	r3, #3
 8003a6a:	e7f5      	b.n	8003a58 <_dtoa_r+0x98>
 8003a6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003a70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f7fc ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8003a80:	4680      	mov	r8, r0
 8003a82:	b158      	cbz	r0, 8003a9c <_dtoa_r+0xdc>
 8003a84:	2301      	movs	r3, #1
 8003a86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8558 	beq.w	8004542 <_dtoa_r+0xb82>
 8003a92:	4882      	ldr	r0, [pc, #520]	; (8003c9c <_dtoa_r+0x2dc>)
 8003a94:	6018      	str	r0, [r3, #0]
 8003a96:	1e43      	subs	r3, r0, #1
 8003a98:	9303      	str	r3, [sp, #12]
 8003a9a:	e7df      	b.n	8003a5c <_dtoa_r+0x9c>
 8003a9c:	ab16      	add	r3, sp, #88	; 0x58
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	ab17      	add	r3, sp, #92	; 0x5c
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003aaa:	f001 f8c5 	bl	8004c38 <__d2b>
 8003aae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003ab2:	4683      	mov	fp, r0
 8003ab4:	2c00      	cmp	r4, #0
 8003ab6:	d07f      	beq.n	8003bb8 <_dtoa_r+0x1f8>
 8003ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003abe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ac6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003aca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ace:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <_dtoa_r+0x2e0>)
 8003ad6:	f7fc fb47 	bl	8000168 <__aeabi_dsub>
 8003ada:	a365      	add	r3, pc, #404	; (adr r3, 8003c70 <_dtoa_r+0x2b0>)
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f7fc fcfa 	bl	80004d8 <__aeabi_dmul>
 8003ae4:	a364      	add	r3, pc, #400	; (adr r3, 8003c78 <_dtoa_r+0x2b8>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fb3f 	bl	800016c <__adddf3>
 8003aee:	4606      	mov	r6, r0
 8003af0:	4620      	mov	r0, r4
 8003af2:	460f      	mov	r7, r1
 8003af4:	f7fc fc86 	bl	8000404 <__aeabi_i2d>
 8003af8:	a361      	add	r3, pc, #388	; (adr r3, 8003c80 <_dtoa_r+0x2c0>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fceb 	bl	80004d8 <__aeabi_dmul>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4630      	mov	r0, r6
 8003b08:	4639      	mov	r1, r7
 8003b0a:	f7fc fb2f 	bl	800016c <__adddf3>
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460f      	mov	r7, r1
 8003b12:	f7fc ff91 	bl	8000a38 <__aeabi_d2iz>
 8003b16:	2200      	movs	r2, #0
 8003b18:	4682      	mov	sl, r0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	4639      	mov	r1, r7
 8003b20:	f7fc ff4c 	bl	80009bc <__aeabi_dcmplt>
 8003b24:	b148      	cbz	r0, 8003b3a <_dtoa_r+0x17a>
 8003b26:	4650      	mov	r0, sl
 8003b28:	f7fc fc6c 	bl	8000404 <__aeabi_i2d>
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	463b      	mov	r3, r7
 8003b30:	f7fc ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 8003b34:	b908      	cbnz	r0, 8003b3a <_dtoa_r+0x17a>
 8003b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b3a:	f1ba 0f16 	cmp.w	sl, #22
 8003b3e:	d858      	bhi.n	8003bf2 <_dtoa_r+0x232>
 8003b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <_dtoa_r+0x2e4>)
 8003b46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc ff35 	bl	80009bc <__aeabi_dcmplt>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d04f      	beq.n	8003bf6 <_dtoa_r+0x236>
 8003b56:	2300      	movs	r3, #0
 8003b58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b60:	1b1c      	subs	r4, r3, r4
 8003b62:	1e63      	subs	r3, r4, #1
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	bf49      	itett	mi
 8003b68:	f1c4 0301 	rsbmi	r3, r4, #1
 8003b6c:	2300      	movpl	r3, #0
 8003b6e:	9306      	strmi	r3, [sp, #24]
 8003b70:	2300      	movmi	r3, #0
 8003b72:	bf54      	ite	pl
 8003b74:	9306      	strpl	r3, [sp, #24]
 8003b76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003b78:	f1ba 0f00 	cmp.w	sl, #0
 8003b7c:	db3d      	blt.n	8003bfa <_dtoa_r+0x23a>
 8003b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003b84:	4453      	add	r3, sl
 8003b86:	9309      	str	r3, [sp, #36]	; 0x24
 8003b88:	2300      	movs	r3, #0
 8003b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b8e:	2b09      	cmp	r3, #9
 8003b90:	f200 808c 	bhi.w	8003cac <_dtoa_r+0x2ec>
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	bfc4      	itt	gt
 8003b98:	3b04      	subgt	r3, #4
 8003b9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b9e:	bfc8      	it	gt
 8003ba0:	2400      	movgt	r4, #0
 8003ba2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ba6:	bfd8      	it	le
 8003ba8:	2401      	movle	r4, #1
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	f200 808a 	bhi.w	8003cc4 <_dtoa_r+0x304>
 8003bb0:	e8df f003 	tbb	[pc, r3]
 8003bb4:	5b4d4f2d 	.word	0x5b4d4f2d
 8003bb8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003bbc:	441c      	add	r4, r3
 8003bbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	bfc3      	ittte	gt
 8003bc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003bca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003bce:	fa09 f303 	lslgt.w	r3, r9, r3
 8003bd2:	f1c3 0320 	rsble	r3, r3, #32
 8003bd6:	bfc6      	itte	gt
 8003bd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003bdc:	4318      	orrgt	r0, r3
 8003bde:	fa06 f003 	lslle.w	r0, r6, r3
 8003be2:	f7fc fbff 	bl	80003e4 <__aeabi_ui2d>
 8003be6:	2301      	movs	r3, #1
 8003be8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003bec:	3c01      	subs	r4, #1
 8003bee:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bf0:	e76f      	b.n	8003ad2 <_dtoa_r+0x112>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e7b2      	b.n	8003b5c <_dtoa_r+0x19c>
 8003bf6:	900f      	str	r0, [sp, #60]	; 0x3c
 8003bf8:	e7b1      	b.n	8003b5e <_dtoa_r+0x19e>
 8003bfa:	9b06      	ldr	r3, [sp, #24]
 8003bfc:	eba3 030a 	sub.w	r3, r3, sl
 8003c00:	9306      	str	r3, [sp, #24]
 8003c02:	f1ca 0300 	rsb	r3, sl, #0
 8003c06:	930a      	str	r3, [sp, #40]	; 0x28
 8003c08:	2300      	movs	r3, #0
 8003c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8003c0c:	e7be      	b.n	8003b8c <_dtoa_r+0x1cc>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dc58      	bgt.n	8003cca <_dtoa_r+0x30a>
 8003c18:	f04f 0901 	mov.w	r9, #1
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003c22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003c26:	2200      	movs	r2, #0
 8003c28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c2a:	6042      	str	r2, [r0, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	f102 0614 	add.w	r6, r2, #20
 8003c32:	429e      	cmp	r6, r3
 8003c34:	6841      	ldr	r1, [r0, #4]
 8003c36:	d94e      	bls.n	8003cd6 <_dtoa_r+0x316>
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 fcd7 	bl	80045ec <_Balloc>
 8003c3e:	9003      	str	r0, [sp, #12]
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d14c      	bne.n	8003cde <_dtoa_r+0x31e>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c4a:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <_dtoa_r+0x2e8>)
 8003c4c:	e6cc      	b.n	80039e8 <_dtoa_r+0x28>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e7de      	b.n	8003c10 <_dtoa_r+0x250>
 8003c52:	2300      	movs	r3, #0
 8003c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c58:	eb0a 0903 	add.w	r9, sl, r3
 8003c5c:	f109 0301 	add.w	r3, r9, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	9308      	str	r3, [sp, #32]
 8003c64:	bfb8      	it	lt
 8003c66:	2301      	movlt	r3, #1
 8003c68:	e7dd      	b.n	8003c26 <_dtoa_r+0x266>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e7f2      	b.n	8003c54 <_dtoa_r+0x294>
 8003c6e:	bf00      	nop
 8003c70:	636f4361 	.word	0x636f4361
 8003c74:	3fd287a7 	.word	0x3fd287a7
 8003c78:	8b60c8b3 	.word	0x8b60c8b3
 8003c7c:	3fc68a28 	.word	0x3fc68a28
 8003c80:	509f79fb 	.word	0x509f79fb
 8003c84:	3fd34413 	.word	0x3fd34413
 8003c88:	08005b15 	.word	0x08005b15
 8003c8c:	08005b2c 	.word	0x08005b2c
 8003c90:	7ff00000 	.word	0x7ff00000
 8003c94:	08005b11 	.word	0x08005b11
 8003c98:	08005b08 	.word	0x08005b08
 8003c9c:	08005ae5 	.word	0x08005ae5
 8003ca0:	3ff80000 	.word	0x3ff80000
 8003ca4:	08005c20 	.word	0x08005c20
 8003ca8:	08005b87 	.word	0x08005b87
 8003cac:	2401      	movs	r4, #1
 8003cae:	2300      	movs	r3, #0
 8003cb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003cb2:	9322      	str	r3, [sp, #136]	; 0x88
 8003cb4:	f04f 39ff 	mov.w	r9, #4294967295
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2312      	movs	r3, #18
 8003cbc:	f8cd 9020 	str.w	r9, [sp, #32]
 8003cc0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003cc2:	e7b0      	b.n	8003c26 <_dtoa_r+0x266>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cc8:	e7f4      	b.n	8003cb4 <_dtoa_r+0x2f4>
 8003cca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003cce:	464b      	mov	r3, r9
 8003cd0:	f8cd 9020 	str.w	r9, [sp, #32]
 8003cd4:	e7a7      	b.n	8003c26 <_dtoa_r+0x266>
 8003cd6:	3101      	adds	r1, #1
 8003cd8:	6041      	str	r1, [r0, #4]
 8003cda:	0052      	lsls	r2, r2, #1
 8003cdc:	e7a7      	b.n	8003c2e <_dtoa_r+0x26e>
 8003cde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ce0:	9a03      	ldr	r2, [sp, #12]
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	9b08      	ldr	r3, [sp, #32]
 8003ce6:	2b0e      	cmp	r3, #14
 8003ce8:	f200 80a8 	bhi.w	8003e3c <_dtoa_r+0x47c>
 8003cec:	2c00      	cmp	r4, #0
 8003cee:	f000 80a5 	beq.w	8003e3c <_dtoa_r+0x47c>
 8003cf2:	f1ba 0f00 	cmp.w	sl, #0
 8003cf6:	dd34      	ble.n	8003d62 <_dtoa_r+0x3a2>
 8003cf8:	4a9a      	ldr	r2, [pc, #616]	; (8003f64 <_dtoa_r+0x5a4>)
 8003cfa:	f00a 030f 	and.w	r3, sl, #15
 8003cfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003d06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003d0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003d12:	d016      	beq.n	8003d42 <_dtoa_r+0x382>
 8003d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d18:	4b93      	ldr	r3, [pc, #588]	; (8003f68 <_dtoa_r+0x5a8>)
 8003d1a:	2703      	movs	r7, #3
 8003d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d20:	f7fc fd04 	bl	800072c <__aeabi_ddiv>
 8003d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d28:	f004 040f 	and.w	r4, r4, #15
 8003d2c:	4e8e      	ldr	r6, [pc, #568]	; (8003f68 <_dtoa_r+0x5a8>)
 8003d2e:	b954      	cbnz	r4, 8003d46 <_dtoa_r+0x386>
 8003d30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d38:	f7fc fcf8 	bl	800072c <__aeabi_ddiv>
 8003d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d40:	e029      	b.n	8003d96 <_dtoa_r+0x3d6>
 8003d42:	2702      	movs	r7, #2
 8003d44:	e7f2      	b.n	8003d2c <_dtoa_r+0x36c>
 8003d46:	07e1      	lsls	r1, r4, #31
 8003d48:	d508      	bpl.n	8003d5c <_dtoa_r+0x39c>
 8003d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003d52:	f7fc fbc1 	bl	80004d8 <__aeabi_dmul>
 8003d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d5a:	3701      	adds	r7, #1
 8003d5c:	1064      	asrs	r4, r4, #1
 8003d5e:	3608      	adds	r6, #8
 8003d60:	e7e5      	b.n	8003d2e <_dtoa_r+0x36e>
 8003d62:	f000 80a5 	beq.w	8003eb0 <_dtoa_r+0x4f0>
 8003d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d6a:	f1ca 0400 	rsb	r4, sl, #0
 8003d6e:	4b7d      	ldr	r3, [pc, #500]	; (8003f64 <_dtoa_r+0x5a4>)
 8003d70:	f004 020f 	and.w	r2, r4, #15
 8003d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f7fc fbac 	bl	80004d8 <__aeabi_dmul>
 8003d80:	2702      	movs	r7, #2
 8003d82:	2300      	movs	r3, #0
 8003d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d88:	4e77      	ldr	r6, [pc, #476]	; (8003f68 <_dtoa_r+0x5a8>)
 8003d8a:	1124      	asrs	r4, r4, #4
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	f040 8084 	bne.w	8003e9a <_dtoa_r+0x4da>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1d2      	bne.n	8003d3c <_dtoa_r+0x37c>
 8003d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 808b 	beq.w	8003eb4 <_dtoa_r+0x4f4>
 8003d9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003da2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003da6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003daa:	2200      	movs	r2, #0
 8003dac:	4b6f      	ldr	r3, [pc, #444]	; (8003f6c <_dtoa_r+0x5ac>)
 8003dae:	f7fc fe05 	bl	80009bc <__aeabi_dcmplt>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d07e      	beq.n	8003eb4 <_dtoa_r+0x4f4>
 8003db6:	9b08      	ldr	r3, [sp, #32]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d07b      	beq.n	8003eb4 <_dtoa_r+0x4f4>
 8003dbc:	f1b9 0f00 	cmp.w	r9, #0
 8003dc0:	dd38      	ble.n	8003e34 <_dtoa_r+0x474>
 8003dc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <_dtoa_r+0x5b0>)
 8003dca:	f7fc fb85 	bl	80004d8 <__aeabi_dmul>
 8003dce:	464c      	mov	r4, r9
 8003dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003dd4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003dd8:	3701      	adds	r7, #1
 8003dda:	4638      	mov	r0, r7
 8003ddc:	f7fc fb12 	bl	8000404 <__aeabi_i2d>
 8003de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003de4:	f7fc fb78 	bl	80004d8 <__aeabi_dmul>
 8003de8:	2200      	movs	r2, #0
 8003dea:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <_dtoa_r+0x5b4>)
 8003dec:	f7fc f9be 	bl	800016c <__adddf3>
 8003df0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003df4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003df8:	9611      	str	r6, [sp, #68]	; 0x44
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	d15d      	bne.n	8003eba <_dtoa_r+0x4fa>
 8003dfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <_dtoa_r+0x5b8>)
 8003e06:	f7fc f9af 	bl	8000168 <__aeabi_dsub>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e12:	4633      	mov	r3, r6
 8003e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e16:	f7fc fdef 	bl	80009f8 <__aeabi_dcmpgt>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	f040 829c 	bne.w	8004358 <_dtoa_r+0x998>
 8003e20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003e2a:	f7fc fdc7 	bl	80009bc <__aeabi_dcmplt>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	f040 8290 	bne.w	8004354 <_dtoa_r+0x994>
 8003e34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003e38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f2c0 8152 	blt.w	80040e8 <_dtoa_r+0x728>
 8003e44:	f1ba 0f0e 	cmp.w	sl, #14
 8003e48:	f300 814e 	bgt.w	80040e8 <_dtoa_r+0x728>
 8003e4c:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <_dtoa_r+0x5a4>)
 8003e4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003e5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f280 80db 	bge.w	8004018 <_dtoa_r+0x658>
 8003e62:	9b08      	ldr	r3, [sp, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f300 80d7 	bgt.w	8004018 <_dtoa_r+0x658>
 8003e6a:	f040 8272 	bne.w	8004352 <_dtoa_r+0x992>
 8003e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e72:	2200      	movs	r2, #0
 8003e74:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <_dtoa_r+0x5b8>)
 8003e76:	f7fc fb2f 	bl	80004d8 <__aeabi_dmul>
 8003e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e7e:	f7fc fdb1 	bl	80009e4 <__aeabi_dcmpge>
 8003e82:	9c08      	ldr	r4, [sp, #32]
 8003e84:	4626      	mov	r6, r4
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f040 8248 	bne.w	800431c <_dtoa_r+0x95c>
 8003e8c:	2331      	movs	r3, #49	; 0x31
 8003e8e:	9f03      	ldr	r7, [sp, #12]
 8003e90:	f10a 0a01 	add.w	sl, sl, #1
 8003e94:	f807 3b01 	strb.w	r3, [r7], #1
 8003e98:	e244      	b.n	8004324 <_dtoa_r+0x964>
 8003e9a:	07e2      	lsls	r2, r4, #31
 8003e9c:	d505      	bpl.n	8003eaa <_dtoa_r+0x4ea>
 8003e9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ea2:	f7fc fb19 	bl	80004d8 <__aeabi_dmul>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	3701      	adds	r7, #1
 8003eaa:	1064      	asrs	r4, r4, #1
 8003eac:	3608      	adds	r6, #8
 8003eae:	e76d      	b.n	8003d8c <_dtoa_r+0x3cc>
 8003eb0:	2702      	movs	r7, #2
 8003eb2:	e770      	b.n	8003d96 <_dtoa_r+0x3d6>
 8003eb4:	46d0      	mov	r8, sl
 8003eb6:	9c08      	ldr	r4, [sp, #32]
 8003eb8:	e78f      	b.n	8003dda <_dtoa_r+0x41a>
 8003eba:	9903      	ldr	r1, [sp, #12]
 8003ebc:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <_dtoa_r+0x5a4>)
 8003ebe:	4421      	add	r1, r4
 8003ec0:	9112      	str	r1, [sp, #72]	; 0x48
 8003ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ec4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ec8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003ecc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d055      	beq.n	8003f80 <_dtoa_r+0x5c0>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4929      	ldr	r1, [pc, #164]	; (8003f7c <_dtoa_r+0x5bc>)
 8003ed8:	f7fc fc28 	bl	800072c <__aeabi_ddiv>
 8003edc:	463b      	mov	r3, r7
 8003ede:	4632      	mov	r2, r6
 8003ee0:	f7fc f942 	bl	8000168 <__aeabi_dsub>
 8003ee4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ee8:	9f03      	ldr	r7, [sp, #12]
 8003eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eee:	f7fc fda3 	bl	8000a38 <__aeabi_d2iz>
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	f7fc fa86 	bl	8000404 <__aeabi_i2d>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f00:	f7fc f932 	bl	8000168 <__aeabi_dsub>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	3430      	adds	r4, #48	; 0x30
 8003f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f12:	f807 4b01 	strb.w	r4, [r7], #1
 8003f16:	f7fc fd51 	bl	80009bc <__aeabi_dcmplt>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d174      	bne.n	8004008 <_dtoa_r+0x648>
 8003f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f22:	2000      	movs	r0, #0
 8003f24:	4911      	ldr	r1, [pc, #68]	; (8003f6c <_dtoa_r+0x5ac>)
 8003f26:	f7fc f91f 	bl	8000168 <__aeabi_dsub>
 8003f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f2e:	f7fc fd45 	bl	80009bc <__aeabi_dcmplt>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	f040 80b7 	bne.w	80040a6 <_dtoa_r+0x6e6>
 8003f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f3a:	429f      	cmp	r7, r3
 8003f3c:	f43f af7a 	beq.w	8003e34 <_dtoa_r+0x474>
 8003f40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f44:	2200      	movs	r2, #0
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <_dtoa_r+0x5b0>)
 8003f48:	f7fc fac6 	bl	80004d8 <__aeabi_dmul>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <_dtoa_r+0x5b0>)
 8003f58:	f7fc fabe 	bl	80004d8 <__aeabi_dmul>
 8003f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f60:	e7c3      	b.n	8003eea <_dtoa_r+0x52a>
 8003f62:	bf00      	nop
 8003f64:	08005c20 	.word	0x08005c20
 8003f68:	08005bf8 	.word	0x08005bf8
 8003f6c:	3ff00000 	.word	0x3ff00000
 8003f70:	40240000 	.word	0x40240000
 8003f74:	401c0000 	.word	0x401c0000
 8003f78:	40140000 	.word	0x40140000
 8003f7c:	3fe00000 	.word	0x3fe00000
 8003f80:	4630      	mov	r0, r6
 8003f82:	4639      	mov	r1, r7
 8003f84:	f7fc faa8 	bl	80004d8 <__aeabi_dmul>
 8003f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f8e:	9c03      	ldr	r4, [sp, #12]
 8003f90:	9314      	str	r3, [sp, #80]	; 0x50
 8003f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f96:	f7fc fd4f 	bl	8000a38 <__aeabi_d2iz>
 8003f9a:	9015      	str	r0, [sp, #84]	; 0x54
 8003f9c:	f7fc fa32 	bl	8000404 <__aeabi_i2d>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fa8:	f7fc f8de 	bl	8000168 <__aeabi_dsub>
 8003fac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003fae:	4606      	mov	r6, r0
 8003fb0:	3330      	adds	r3, #48	; 0x30
 8003fb2:	f804 3b01 	strb.w	r3, [r4], #1
 8003fb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003fb8:	460f      	mov	r7, r1
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	d124      	bne.n	800400c <_dtoa_r+0x64c>
 8003fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fc6:	4bb0      	ldr	r3, [pc, #704]	; (8004288 <_dtoa_r+0x8c8>)
 8003fc8:	f7fc f8d0 	bl	800016c <__adddf3>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	f7fc fd10 	bl	80009f8 <__aeabi_dcmpgt>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d163      	bne.n	80040a4 <_dtoa_r+0x6e4>
 8003fdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	49a9      	ldr	r1, [pc, #676]	; (8004288 <_dtoa_r+0x8c8>)
 8003fe4:	f7fc f8c0 	bl	8000168 <__aeabi_dsub>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4630      	mov	r0, r6
 8003fee:	4639      	mov	r1, r7
 8003ff0:	f7fc fce4 	bl	80009bc <__aeabi_dcmplt>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f43f af1d 	beq.w	8003e34 <_dtoa_r+0x474>
 8003ffa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003ffc:	1e7b      	subs	r3, r7, #1
 8003ffe:	9314      	str	r3, [sp, #80]	; 0x50
 8004000:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004004:	2b30      	cmp	r3, #48	; 0x30
 8004006:	d0f8      	beq.n	8003ffa <_dtoa_r+0x63a>
 8004008:	46c2      	mov	sl, r8
 800400a:	e03b      	b.n	8004084 <_dtoa_r+0x6c4>
 800400c:	4b9f      	ldr	r3, [pc, #636]	; (800428c <_dtoa_r+0x8cc>)
 800400e:	f7fc fa63 	bl	80004d8 <__aeabi_dmul>
 8004012:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004016:	e7bc      	b.n	8003f92 <_dtoa_r+0x5d2>
 8004018:	9f03      	ldr	r7, [sp, #12]
 800401a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800401e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004022:	4640      	mov	r0, r8
 8004024:	4649      	mov	r1, r9
 8004026:	f7fc fb81 	bl	800072c <__aeabi_ddiv>
 800402a:	f7fc fd05 	bl	8000a38 <__aeabi_d2iz>
 800402e:	4604      	mov	r4, r0
 8004030:	f7fc f9e8 	bl	8000404 <__aeabi_i2d>
 8004034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004038:	f7fc fa4e 	bl	80004d8 <__aeabi_dmul>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4640      	mov	r0, r8
 8004042:	4649      	mov	r1, r9
 8004044:	f7fc f890 	bl	8000168 <__aeabi_dsub>
 8004048:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800404c:	f807 6b01 	strb.w	r6, [r7], #1
 8004050:	9e03      	ldr	r6, [sp, #12]
 8004052:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004056:	1bbe      	subs	r6, r7, r6
 8004058:	45b4      	cmp	ip, r6
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	d136      	bne.n	80040ce <_dtoa_r+0x70e>
 8004060:	f7fc f884 	bl	800016c <__adddf3>
 8004064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004068:	4680      	mov	r8, r0
 800406a:	4689      	mov	r9, r1
 800406c:	f7fc fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8004070:	bb58      	cbnz	r0, 80040ca <_dtoa_r+0x70a>
 8004072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004076:	4640      	mov	r0, r8
 8004078:	4649      	mov	r1, r9
 800407a:	f7fc fc95 	bl	80009a8 <__aeabi_dcmpeq>
 800407e:	b108      	cbz	r0, 8004084 <_dtoa_r+0x6c4>
 8004080:	07e1      	lsls	r1, r4, #31
 8004082:	d422      	bmi.n	80040ca <_dtoa_r+0x70a>
 8004084:	4628      	mov	r0, r5
 8004086:	4659      	mov	r1, fp
 8004088:	f000 faf0 	bl	800466c <_Bfree>
 800408c:	2300      	movs	r3, #0
 800408e:	703b      	strb	r3, [r7, #0]
 8004090:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004092:	f10a 0001 	add.w	r0, sl, #1
 8004096:	6018      	str	r0, [r3, #0]
 8004098:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800409a:	2b00      	cmp	r3, #0
 800409c:	f43f acde 	beq.w	8003a5c <_dtoa_r+0x9c>
 80040a0:	601f      	str	r7, [r3, #0]
 80040a2:	e4db      	b.n	8003a5c <_dtoa_r+0x9c>
 80040a4:	4627      	mov	r7, r4
 80040a6:	463b      	mov	r3, r7
 80040a8:	461f      	mov	r7, r3
 80040aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040ae:	2a39      	cmp	r2, #57	; 0x39
 80040b0:	d107      	bne.n	80040c2 <_dtoa_r+0x702>
 80040b2:	9a03      	ldr	r2, [sp, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d1f7      	bne.n	80040a8 <_dtoa_r+0x6e8>
 80040b8:	2230      	movs	r2, #48	; 0x30
 80040ba:	9903      	ldr	r1, [sp, #12]
 80040bc:	f108 0801 	add.w	r8, r8, #1
 80040c0:	700a      	strb	r2, [r1, #0]
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	3201      	adds	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e79e      	b.n	8004008 <_dtoa_r+0x648>
 80040ca:	46d0      	mov	r8, sl
 80040cc:	e7eb      	b.n	80040a6 <_dtoa_r+0x6e6>
 80040ce:	2200      	movs	r2, #0
 80040d0:	4b6e      	ldr	r3, [pc, #440]	; (800428c <_dtoa_r+0x8cc>)
 80040d2:	f7fc fa01 	bl	80004d8 <__aeabi_dmul>
 80040d6:	2200      	movs	r2, #0
 80040d8:	2300      	movs	r3, #0
 80040da:	4680      	mov	r8, r0
 80040dc:	4689      	mov	r9, r1
 80040de:	f7fc fc63 	bl	80009a8 <__aeabi_dcmpeq>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d09b      	beq.n	800401e <_dtoa_r+0x65e>
 80040e6:	e7cd      	b.n	8004084 <_dtoa_r+0x6c4>
 80040e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	f000 80d0 	beq.w	8004290 <_dtoa_r+0x8d0>
 80040f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80040f2:	2a01      	cmp	r2, #1
 80040f4:	f300 80ae 	bgt.w	8004254 <_dtoa_r+0x894>
 80040f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80040fa:	2a00      	cmp	r2, #0
 80040fc:	f000 80a6 	beq.w	800424c <_dtoa_r+0x88c>
 8004100:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004104:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004106:	9f06      	ldr	r7, [sp, #24]
 8004108:	9a06      	ldr	r2, [sp, #24]
 800410a:	2101      	movs	r1, #1
 800410c:	441a      	add	r2, r3
 800410e:	9206      	str	r2, [sp, #24]
 8004110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004112:	4628      	mov	r0, r5
 8004114:	441a      	add	r2, r3
 8004116:	9209      	str	r2, [sp, #36]	; 0x24
 8004118:	f000 fb5e 	bl	80047d8 <__i2b>
 800411c:	4606      	mov	r6, r0
 800411e:	2f00      	cmp	r7, #0
 8004120:	dd0c      	ble.n	800413c <_dtoa_r+0x77c>
 8004122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	dd09      	ble.n	800413c <_dtoa_r+0x77c>
 8004128:	42bb      	cmp	r3, r7
 800412a:	bfa8      	it	ge
 800412c:	463b      	movge	r3, r7
 800412e:	9a06      	ldr	r2, [sp, #24]
 8004130:	1aff      	subs	r7, r7, r3
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	9206      	str	r2, [sp, #24]
 8004136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	9309      	str	r3, [sp, #36]	; 0x24
 800413c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800413e:	b1f3      	cbz	r3, 800417e <_dtoa_r+0x7be>
 8004140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80a8 	beq.w	8004298 <_dtoa_r+0x8d8>
 8004148:	2c00      	cmp	r4, #0
 800414a:	dd10      	ble.n	800416e <_dtoa_r+0x7ae>
 800414c:	4631      	mov	r1, r6
 800414e:	4622      	mov	r2, r4
 8004150:	4628      	mov	r0, r5
 8004152:	f000 fbff 	bl	8004954 <__pow5mult>
 8004156:	465a      	mov	r2, fp
 8004158:	4601      	mov	r1, r0
 800415a:	4606      	mov	r6, r0
 800415c:	4628      	mov	r0, r5
 800415e:	f000 fb51 	bl	8004804 <__multiply>
 8004162:	4680      	mov	r8, r0
 8004164:	4659      	mov	r1, fp
 8004166:	4628      	mov	r0, r5
 8004168:	f000 fa80 	bl	800466c <_Bfree>
 800416c:	46c3      	mov	fp, r8
 800416e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004170:	1b1a      	subs	r2, r3, r4
 8004172:	d004      	beq.n	800417e <_dtoa_r+0x7be>
 8004174:	4659      	mov	r1, fp
 8004176:	4628      	mov	r0, r5
 8004178:	f000 fbec 	bl	8004954 <__pow5mult>
 800417c:	4683      	mov	fp, r0
 800417e:	2101      	movs	r1, #1
 8004180:	4628      	mov	r0, r5
 8004182:	f000 fb29 	bl	80047d8 <__i2b>
 8004186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004188:	4604      	mov	r4, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	f340 8086 	ble.w	800429c <_dtoa_r+0x8dc>
 8004190:	461a      	mov	r2, r3
 8004192:	4601      	mov	r1, r0
 8004194:	4628      	mov	r0, r5
 8004196:	f000 fbdd 	bl	8004954 <__pow5mult>
 800419a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800419c:	4604      	mov	r4, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	dd7f      	ble.n	80042a2 <_dtoa_r+0x8e2>
 80041a2:	f04f 0800 	mov.w	r8, #0
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80041ac:	6918      	ldr	r0, [r3, #16]
 80041ae:	f000 fac5 	bl	800473c <__hi0bits>
 80041b2:	f1c0 0020 	rsb	r0, r0, #32
 80041b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b8:	4418      	add	r0, r3
 80041ba:	f010 001f 	ands.w	r0, r0, #31
 80041be:	f000 8092 	beq.w	80042e6 <_dtoa_r+0x926>
 80041c2:	f1c0 0320 	rsb	r3, r0, #32
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	f340 808a 	ble.w	80042e0 <_dtoa_r+0x920>
 80041cc:	f1c0 001c 	rsb	r0, r0, #28
 80041d0:	9b06      	ldr	r3, [sp, #24]
 80041d2:	4407      	add	r7, r0
 80041d4:	4403      	add	r3, r0
 80041d6:	9306      	str	r3, [sp, #24]
 80041d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041da:	4403      	add	r3, r0
 80041dc:	9309      	str	r3, [sp, #36]	; 0x24
 80041de:	9b06      	ldr	r3, [sp, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	dd05      	ble.n	80041f0 <_dtoa_r+0x830>
 80041e4:	4659      	mov	r1, fp
 80041e6:	461a      	mov	r2, r3
 80041e8:	4628      	mov	r0, r5
 80041ea:	f000 fc0d 	bl	8004a08 <__lshift>
 80041ee:	4683      	mov	fp, r0
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dd05      	ble.n	8004202 <_dtoa_r+0x842>
 80041f6:	4621      	mov	r1, r4
 80041f8:	461a      	mov	r2, r3
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 fc04 	bl	8004a08 <__lshift>
 8004200:	4604      	mov	r4, r0
 8004202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d070      	beq.n	80042ea <_dtoa_r+0x92a>
 8004208:	4621      	mov	r1, r4
 800420a:	4658      	mov	r0, fp
 800420c:	f000 fc6c 	bl	8004ae8 <__mcmp>
 8004210:	2800      	cmp	r0, #0
 8004212:	da6a      	bge.n	80042ea <_dtoa_r+0x92a>
 8004214:	2300      	movs	r3, #0
 8004216:	4659      	mov	r1, fp
 8004218:	220a      	movs	r2, #10
 800421a:	4628      	mov	r0, r5
 800421c:	f000 fa48 	bl	80046b0 <__multadd>
 8004220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004222:	4683      	mov	fp, r0
 8004224:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8194 	beq.w	8004556 <_dtoa_r+0xb96>
 800422e:	4631      	mov	r1, r6
 8004230:	2300      	movs	r3, #0
 8004232:	220a      	movs	r2, #10
 8004234:	4628      	mov	r0, r5
 8004236:	f000 fa3b 	bl	80046b0 <__multadd>
 800423a:	f1b9 0f00 	cmp.w	r9, #0
 800423e:	4606      	mov	r6, r0
 8004240:	f300 8093 	bgt.w	800436a <_dtoa_r+0x9aa>
 8004244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004246:	2b02      	cmp	r3, #2
 8004248:	dc57      	bgt.n	80042fa <_dtoa_r+0x93a>
 800424a:	e08e      	b.n	800436a <_dtoa_r+0x9aa>
 800424c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800424e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004252:	e757      	b.n	8004104 <_dtoa_r+0x744>
 8004254:	9b08      	ldr	r3, [sp, #32]
 8004256:	1e5c      	subs	r4, r3, #1
 8004258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800425a:	42a3      	cmp	r3, r4
 800425c:	bfb7      	itett	lt
 800425e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004260:	1b1c      	subge	r4, r3, r4
 8004262:	1ae2      	sublt	r2, r4, r3
 8004264:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004266:	bfbe      	ittt	lt
 8004268:	940a      	strlt	r4, [sp, #40]	; 0x28
 800426a:	189b      	addlt	r3, r3, r2
 800426c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800426e:	9b08      	ldr	r3, [sp, #32]
 8004270:	bfb8      	it	lt
 8004272:	2400      	movlt	r4, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	bfbb      	ittet	lt
 8004278:	9b06      	ldrlt	r3, [sp, #24]
 800427a:	9a08      	ldrlt	r2, [sp, #32]
 800427c:	9f06      	ldrge	r7, [sp, #24]
 800427e:	1a9f      	sublt	r7, r3, r2
 8004280:	bfac      	ite	ge
 8004282:	9b08      	ldrge	r3, [sp, #32]
 8004284:	2300      	movlt	r3, #0
 8004286:	e73f      	b.n	8004108 <_dtoa_r+0x748>
 8004288:	3fe00000 	.word	0x3fe00000
 800428c:	40240000 	.word	0x40240000
 8004290:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004292:	9f06      	ldr	r7, [sp, #24]
 8004294:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004296:	e742      	b.n	800411e <_dtoa_r+0x75e>
 8004298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800429a:	e76b      	b.n	8004174 <_dtoa_r+0x7b4>
 800429c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800429e:	2b01      	cmp	r3, #1
 80042a0:	dc19      	bgt.n	80042d6 <_dtoa_r+0x916>
 80042a2:	9b04      	ldr	r3, [sp, #16]
 80042a4:	b9bb      	cbnz	r3, 80042d6 <_dtoa_r+0x916>
 80042a6:	9b05      	ldr	r3, [sp, #20]
 80042a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ac:	b99b      	cbnz	r3, 80042d6 <_dtoa_r+0x916>
 80042ae:	9b05      	ldr	r3, [sp, #20]
 80042b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042b4:	0d1b      	lsrs	r3, r3, #20
 80042b6:	051b      	lsls	r3, r3, #20
 80042b8:	b183      	cbz	r3, 80042dc <_dtoa_r+0x91c>
 80042ba:	f04f 0801 	mov.w	r8, #1
 80042be:	9b06      	ldr	r3, [sp, #24]
 80042c0:	3301      	adds	r3, #1
 80042c2:	9306      	str	r3, [sp, #24]
 80042c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c6:	3301      	adds	r3, #1
 80042c8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f af6a 	bne.w	80041a6 <_dtoa_r+0x7e6>
 80042d2:	2001      	movs	r0, #1
 80042d4:	e76f      	b.n	80041b6 <_dtoa_r+0x7f6>
 80042d6:	f04f 0800 	mov.w	r8, #0
 80042da:	e7f6      	b.n	80042ca <_dtoa_r+0x90a>
 80042dc:	4698      	mov	r8, r3
 80042de:	e7f4      	b.n	80042ca <_dtoa_r+0x90a>
 80042e0:	f43f af7d 	beq.w	80041de <_dtoa_r+0x81e>
 80042e4:	4618      	mov	r0, r3
 80042e6:	301c      	adds	r0, #28
 80042e8:	e772      	b.n	80041d0 <_dtoa_r+0x810>
 80042ea:	9b08      	ldr	r3, [sp, #32]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dc36      	bgt.n	800435e <_dtoa_r+0x99e>
 80042f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	dd33      	ble.n	800435e <_dtoa_r+0x99e>
 80042f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042fa:	f1b9 0f00 	cmp.w	r9, #0
 80042fe:	d10d      	bne.n	800431c <_dtoa_r+0x95c>
 8004300:	4621      	mov	r1, r4
 8004302:	464b      	mov	r3, r9
 8004304:	2205      	movs	r2, #5
 8004306:	4628      	mov	r0, r5
 8004308:	f000 f9d2 	bl	80046b0 <__multadd>
 800430c:	4601      	mov	r1, r0
 800430e:	4604      	mov	r4, r0
 8004310:	4658      	mov	r0, fp
 8004312:	f000 fbe9 	bl	8004ae8 <__mcmp>
 8004316:	2800      	cmp	r0, #0
 8004318:	f73f adb8 	bgt.w	8003e8c <_dtoa_r+0x4cc>
 800431c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800431e:	9f03      	ldr	r7, [sp, #12]
 8004320:	ea6f 0a03 	mvn.w	sl, r3
 8004324:	f04f 0800 	mov.w	r8, #0
 8004328:	4621      	mov	r1, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f000 f99e 	bl	800466c <_Bfree>
 8004330:	2e00      	cmp	r6, #0
 8004332:	f43f aea7 	beq.w	8004084 <_dtoa_r+0x6c4>
 8004336:	f1b8 0f00 	cmp.w	r8, #0
 800433a:	d005      	beq.n	8004348 <_dtoa_r+0x988>
 800433c:	45b0      	cmp	r8, r6
 800433e:	d003      	beq.n	8004348 <_dtoa_r+0x988>
 8004340:	4641      	mov	r1, r8
 8004342:	4628      	mov	r0, r5
 8004344:	f000 f992 	bl	800466c <_Bfree>
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	f000 f98e 	bl	800466c <_Bfree>
 8004350:	e698      	b.n	8004084 <_dtoa_r+0x6c4>
 8004352:	2400      	movs	r4, #0
 8004354:	4626      	mov	r6, r4
 8004356:	e7e1      	b.n	800431c <_dtoa_r+0x95c>
 8004358:	46c2      	mov	sl, r8
 800435a:	4626      	mov	r6, r4
 800435c:	e596      	b.n	8003e8c <_dtoa_r+0x4cc>
 800435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80fd 	beq.w	8004564 <_dtoa_r+0xba4>
 800436a:	2f00      	cmp	r7, #0
 800436c:	dd05      	ble.n	800437a <_dtoa_r+0x9ba>
 800436e:	4631      	mov	r1, r6
 8004370:	463a      	mov	r2, r7
 8004372:	4628      	mov	r0, r5
 8004374:	f000 fb48 	bl	8004a08 <__lshift>
 8004378:	4606      	mov	r6, r0
 800437a:	f1b8 0f00 	cmp.w	r8, #0
 800437e:	d05c      	beq.n	800443a <_dtoa_r+0xa7a>
 8004380:	4628      	mov	r0, r5
 8004382:	6871      	ldr	r1, [r6, #4]
 8004384:	f000 f932 	bl	80045ec <_Balloc>
 8004388:	4607      	mov	r7, r0
 800438a:	b928      	cbnz	r0, 8004398 <_dtoa_r+0x9d8>
 800438c:	4602      	mov	r2, r0
 800438e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004392:	4b7f      	ldr	r3, [pc, #508]	; (8004590 <_dtoa_r+0xbd0>)
 8004394:	f7ff bb28 	b.w	80039e8 <_dtoa_r+0x28>
 8004398:	6932      	ldr	r2, [r6, #16]
 800439a:	f106 010c 	add.w	r1, r6, #12
 800439e:	3202      	adds	r2, #2
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	300c      	adds	r0, #12
 80043a4:	f000 f914 	bl	80045d0 <memcpy>
 80043a8:	2201      	movs	r2, #1
 80043aa:	4639      	mov	r1, r7
 80043ac:	4628      	mov	r0, r5
 80043ae:	f000 fb2b 	bl	8004a08 <__lshift>
 80043b2:	46b0      	mov	r8, r6
 80043b4:	4606      	mov	r6, r0
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	3301      	adds	r3, #1
 80043ba:	9308      	str	r3, [sp, #32]
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	444b      	add	r3, r9
 80043c0:	930a      	str	r3, [sp, #40]	; 0x28
 80043c2:	9b04      	ldr	r3, [sp, #16]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ca:	9b08      	ldr	r3, [sp, #32]
 80043cc:	4621      	mov	r1, r4
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4658      	mov	r0, fp
 80043d2:	9304      	str	r3, [sp, #16]
 80043d4:	f7ff fa68 	bl	80038a8 <quorem>
 80043d8:	4603      	mov	r3, r0
 80043da:	4641      	mov	r1, r8
 80043dc:	3330      	adds	r3, #48	; 0x30
 80043de:	9006      	str	r0, [sp, #24]
 80043e0:	4658      	mov	r0, fp
 80043e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80043e4:	f000 fb80 	bl	8004ae8 <__mcmp>
 80043e8:	4632      	mov	r2, r6
 80043ea:	4681      	mov	r9, r0
 80043ec:	4621      	mov	r1, r4
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 fb96 	bl	8004b20 <__mdiff>
 80043f4:	68c2      	ldr	r2, [r0, #12]
 80043f6:	4607      	mov	r7, r0
 80043f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043fa:	bb02      	cbnz	r2, 800443e <_dtoa_r+0xa7e>
 80043fc:	4601      	mov	r1, r0
 80043fe:	4658      	mov	r0, fp
 8004400:	f000 fb72 	bl	8004ae8 <__mcmp>
 8004404:	4602      	mov	r2, r0
 8004406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004408:	4639      	mov	r1, r7
 800440a:	4628      	mov	r0, r5
 800440c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004410:	f000 f92c 	bl	800466c <_Bfree>
 8004414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004418:	9f08      	ldr	r7, [sp, #32]
 800441a:	ea43 0102 	orr.w	r1, r3, r2
 800441e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004420:	430b      	orrs	r3, r1
 8004422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004424:	d10d      	bne.n	8004442 <_dtoa_r+0xa82>
 8004426:	2b39      	cmp	r3, #57	; 0x39
 8004428:	d029      	beq.n	800447e <_dtoa_r+0xabe>
 800442a:	f1b9 0f00 	cmp.w	r9, #0
 800442e:	dd01      	ble.n	8004434 <_dtoa_r+0xa74>
 8004430:	9b06      	ldr	r3, [sp, #24]
 8004432:	3331      	adds	r3, #49	; 0x31
 8004434:	9a04      	ldr	r2, [sp, #16]
 8004436:	7013      	strb	r3, [r2, #0]
 8004438:	e776      	b.n	8004328 <_dtoa_r+0x968>
 800443a:	4630      	mov	r0, r6
 800443c:	e7b9      	b.n	80043b2 <_dtoa_r+0x9f2>
 800443e:	2201      	movs	r2, #1
 8004440:	e7e2      	b.n	8004408 <_dtoa_r+0xa48>
 8004442:	f1b9 0f00 	cmp.w	r9, #0
 8004446:	db06      	blt.n	8004456 <_dtoa_r+0xa96>
 8004448:	9922      	ldr	r1, [sp, #136]	; 0x88
 800444a:	ea41 0909 	orr.w	r9, r1, r9
 800444e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004450:	ea59 0101 	orrs.w	r1, r9, r1
 8004454:	d120      	bne.n	8004498 <_dtoa_r+0xad8>
 8004456:	2a00      	cmp	r2, #0
 8004458:	ddec      	ble.n	8004434 <_dtoa_r+0xa74>
 800445a:	4659      	mov	r1, fp
 800445c:	2201      	movs	r2, #1
 800445e:	4628      	mov	r0, r5
 8004460:	9308      	str	r3, [sp, #32]
 8004462:	f000 fad1 	bl	8004a08 <__lshift>
 8004466:	4621      	mov	r1, r4
 8004468:	4683      	mov	fp, r0
 800446a:	f000 fb3d 	bl	8004ae8 <__mcmp>
 800446e:	2800      	cmp	r0, #0
 8004470:	9b08      	ldr	r3, [sp, #32]
 8004472:	dc02      	bgt.n	800447a <_dtoa_r+0xaba>
 8004474:	d1de      	bne.n	8004434 <_dtoa_r+0xa74>
 8004476:	07da      	lsls	r2, r3, #31
 8004478:	d5dc      	bpl.n	8004434 <_dtoa_r+0xa74>
 800447a:	2b39      	cmp	r3, #57	; 0x39
 800447c:	d1d8      	bne.n	8004430 <_dtoa_r+0xa70>
 800447e:	2339      	movs	r3, #57	; 0x39
 8004480:	9a04      	ldr	r2, [sp, #16]
 8004482:	7013      	strb	r3, [r2, #0]
 8004484:	463b      	mov	r3, r7
 8004486:	461f      	mov	r7, r3
 8004488:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800448c:	3b01      	subs	r3, #1
 800448e:	2a39      	cmp	r2, #57	; 0x39
 8004490:	d050      	beq.n	8004534 <_dtoa_r+0xb74>
 8004492:	3201      	adds	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e747      	b.n	8004328 <_dtoa_r+0x968>
 8004498:	2a00      	cmp	r2, #0
 800449a:	dd03      	ble.n	80044a4 <_dtoa_r+0xae4>
 800449c:	2b39      	cmp	r3, #57	; 0x39
 800449e:	d0ee      	beq.n	800447e <_dtoa_r+0xabe>
 80044a0:	3301      	adds	r3, #1
 80044a2:	e7c7      	b.n	8004434 <_dtoa_r+0xa74>
 80044a4:	9a08      	ldr	r2, [sp, #32]
 80044a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80044a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80044ac:	428a      	cmp	r2, r1
 80044ae:	d02a      	beq.n	8004506 <_dtoa_r+0xb46>
 80044b0:	4659      	mov	r1, fp
 80044b2:	2300      	movs	r3, #0
 80044b4:	220a      	movs	r2, #10
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f8fa 	bl	80046b0 <__multadd>
 80044bc:	45b0      	cmp	r8, r6
 80044be:	4683      	mov	fp, r0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	f04f 020a 	mov.w	r2, #10
 80044c8:	4641      	mov	r1, r8
 80044ca:	4628      	mov	r0, r5
 80044cc:	d107      	bne.n	80044de <_dtoa_r+0xb1e>
 80044ce:	f000 f8ef 	bl	80046b0 <__multadd>
 80044d2:	4680      	mov	r8, r0
 80044d4:	4606      	mov	r6, r0
 80044d6:	9b08      	ldr	r3, [sp, #32]
 80044d8:	3301      	adds	r3, #1
 80044da:	9308      	str	r3, [sp, #32]
 80044dc:	e775      	b.n	80043ca <_dtoa_r+0xa0a>
 80044de:	f000 f8e7 	bl	80046b0 <__multadd>
 80044e2:	4631      	mov	r1, r6
 80044e4:	4680      	mov	r8, r0
 80044e6:	2300      	movs	r3, #0
 80044e8:	220a      	movs	r2, #10
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f8e0 	bl	80046b0 <__multadd>
 80044f0:	4606      	mov	r6, r0
 80044f2:	e7f0      	b.n	80044d6 <_dtoa_r+0xb16>
 80044f4:	f1b9 0f00 	cmp.w	r9, #0
 80044f8:	bfcc      	ite	gt
 80044fa:	464f      	movgt	r7, r9
 80044fc:	2701      	movle	r7, #1
 80044fe:	f04f 0800 	mov.w	r8, #0
 8004502:	9a03      	ldr	r2, [sp, #12]
 8004504:	4417      	add	r7, r2
 8004506:	4659      	mov	r1, fp
 8004508:	2201      	movs	r2, #1
 800450a:	4628      	mov	r0, r5
 800450c:	9308      	str	r3, [sp, #32]
 800450e:	f000 fa7b 	bl	8004a08 <__lshift>
 8004512:	4621      	mov	r1, r4
 8004514:	4683      	mov	fp, r0
 8004516:	f000 fae7 	bl	8004ae8 <__mcmp>
 800451a:	2800      	cmp	r0, #0
 800451c:	dcb2      	bgt.n	8004484 <_dtoa_r+0xac4>
 800451e:	d102      	bne.n	8004526 <_dtoa_r+0xb66>
 8004520:	9b08      	ldr	r3, [sp, #32]
 8004522:	07db      	lsls	r3, r3, #31
 8004524:	d4ae      	bmi.n	8004484 <_dtoa_r+0xac4>
 8004526:	463b      	mov	r3, r7
 8004528:	461f      	mov	r7, r3
 800452a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800452e:	2a30      	cmp	r2, #48	; 0x30
 8004530:	d0fa      	beq.n	8004528 <_dtoa_r+0xb68>
 8004532:	e6f9      	b.n	8004328 <_dtoa_r+0x968>
 8004534:	9a03      	ldr	r2, [sp, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d1a5      	bne.n	8004486 <_dtoa_r+0xac6>
 800453a:	2331      	movs	r3, #49	; 0x31
 800453c:	f10a 0a01 	add.w	sl, sl, #1
 8004540:	e779      	b.n	8004436 <_dtoa_r+0xa76>
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <_dtoa_r+0xbd4>)
 8004544:	f7ff baa8 	b.w	8003a98 <_dtoa_r+0xd8>
 8004548:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800454a:	2b00      	cmp	r3, #0
 800454c:	f47f aa81 	bne.w	8003a52 <_dtoa_r+0x92>
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <_dtoa_r+0xbd8>)
 8004552:	f7ff baa1 	b.w	8003a98 <_dtoa_r+0xd8>
 8004556:	f1b9 0f00 	cmp.w	r9, #0
 800455a:	dc03      	bgt.n	8004564 <_dtoa_r+0xba4>
 800455c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800455e:	2b02      	cmp	r3, #2
 8004560:	f73f aecb 	bgt.w	80042fa <_dtoa_r+0x93a>
 8004564:	9f03      	ldr	r7, [sp, #12]
 8004566:	4621      	mov	r1, r4
 8004568:	4658      	mov	r0, fp
 800456a:	f7ff f99d 	bl	80038a8 <quorem>
 800456e:	9a03      	ldr	r2, [sp, #12]
 8004570:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004574:	f807 3b01 	strb.w	r3, [r7], #1
 8004578:	1aba      	subs	r2, r7, r2
 800457a:	4591      	cmp	r9, r2
 800457c:	ddba      	ble.n	80044f4 <_dtoa_r+0xb34>
 800457e:	4659      	mov	r1, fp
 8004580:	2300      	movs	r3, #0
 8004582:	220a      	movs	r2, #10
 8004584:	4628      	mov	r0, r5
 8004586:	f000 f893 	bl	80046b0 <__multadd>
 800458a:	4683      	mov	fp, r0
 800458c:	e7eb      	b.n	8004566 <_dtoa_r+0xba6>
 800458e:	bf00      	nop
 8004590:	08005b87 	.word	0x08005b87
 8004594:	08005ae4 	.word	0x08005ae4
 8004598:	08005b08 	.word	0x08005b08

0800459c <_localeconv_r>:
 800459c:	4800      	ldr	r0, [pc, #0]	; (80045a0 <_localeconv_r+0x4>)
 800459e:	4770      	bx	lr
 80045a0:	20000160 	.word	0x20000160

080045a4 <malloc>:
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <malloc+0xc>)
 80045a6:	4601      	mov	r1, r0
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f000 bc1d 	b.w	8004de8 <_malloc_r>
 80045ae:	bf00      	nop
 80045b0:	2000000c 	.word	0x2000000c

080045b4 <memchr>:
 80045b4:	4603      	mov	r3, r0
 80045b6:	b510      	push	{r4, lr}
 80045b8:	b2c9      	uxtb	r1, r1
 80045ba:	4402      	add	r2, r0
 80045bc:	4293      	cmp	r3, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	d101      	bne.n	80045c6 <memchr+0x12>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e003      	b.n	80045ce <memchr+0x1a>
 80045c6:	7804      	ldrb	r4, [r0, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	428c      	cmp	r4, r1
 80045cc:	d1f6      	bne.n	80045bc <memchr+0x8>
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <memcpy>:
 80045d0:	440a      	add	r2, r1
 80045d2:	4291      	cmp	r1, r2
 80045d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045d8:	d100      	bne.n	80045dc <memcpy+0xc>
 80045da:	4770      	bx	lr
 80045dc:	b510      	push	{r4, lr}
 80045de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e2:	4291      	cmp	r1, r2
 80045e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045e8:	d1f9      	bne.n	80045de <memcpy+0xe>
 80045ea:	bd10      	pop	{r4, pc}

080045ec <_Balloc>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80045f0:	4604      	mov	r4, r0
 80045f2:	460d      	mov	r5, r1
 80045f4:	b976      	cbnz	r6, 8004614 <_Balloc+0x28>
 80045f6:	2010      	movs	r0, #16
 80045f8:	f7ff ffd4 	bl	80045a4 <malloc>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004600:	b920      	cbnz	r0, 800460c <_Balloc+0x20>
 8004602:	2166      	movs	r1, #102	; 0x66
 8004604:	4b17      	ldr	r3, [pc, #92]	; (8004664 <_Balloc+0x78>)
 8004606:	4818      	ldr	r0, [pc, #96]	; (8004668 <_Balloc+0x7c>)
 8004608:	f000 fc72 	bl	8004ef0 <__assert_func>
 800460c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004610:	6006      	str	r6, [r0, #0]
 8004612:	60c6      	str	r6, [r0, #12]
 8004614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004616:	68f3      	ldr	r3, [r6, #12]
 8004618:	b183      	cbz	r3, 800463c <_Balloc+0x50>
 800461a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004622:	b9b8      	cbnz	r0, 8004654 <_Balloc+0x68>
 8004624:	2101      	movs	r1, #1
 8004626:	fa01 f605 	lsl.w	r6, r1, r5
 800462a:	1d72      	adds	r2, r6, #5
 800462c:	4620      	mov	r0, r4
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	f000 fb5e 	bl	8004cf0 <_calloc_r>
 8004634:	b160      	cbz	r0, 8004650 <_Balloc+0x64>
 8004636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800463a:	e00e      	b.n	800465a <_Balloc+0x6e>
 800463c:	2221      	movs	r2, #33	; 0x21
 800463e:	2104      	movs	r1, #4
 8004640:	4620      	mov	r0, r4
 8004642:	f000 fb55 	bl	8004cf0 <_calloc_r>
 8004646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004648:	60f0      	str	r0, [r6, #12]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e4      	bne.n	800461a <_Balloc+0x2e>
 8004650:	2000      	movs	r0, #0
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	6802      	ldr	r2, [r0, #0]
 8004656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800465a:	2300      	movs	r3, #0
 800465c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004660:	e7f7      	b.n	8004652 <_Balloc+0x66>
 8004662:	bf00      	nop
 8004664:	08005b15 	.word	0x08005b15
 8004668:	08005b98 	.word	0x08005b98

0800466c <_Bfree>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004670:	4605      	mov	r5, r0
 8004672:	460c      	mov	r4, r1
 8004674:	b976      	cbnz	r6, 8004694 <_Bfree+0x28>
 8004676:	2010      	movs	r0, #16
 8004678:	f7ff ff94 	bl	80045a4 <malloc>
 800467c:	4602      	mov	r2, r0
 800467e:	6268      	str	r0, [r5, #36]	; 0x24
 8004680:	b920      	cbnz	r0, 800468c <_Bfree+0x20>
 8004682:	218a      	movs	r1, #138	; 0x8a
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <_Bfree+0x3c>)
 8004686:	4809      	ldr	r0, [pc, #36]	; (80046ac <_Bfree+0x40>)
 8004688:	f000 fc32 	bl	8004ef0 <__assert_func>
 800468c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004690:	6006      	str	r6, [r0, #0]
 8004692:	60c6      	str	r6, [r0, #12]
 8004694:	b13c      	cbz	r4, 80046a6 <_Bfree+0x3a>
 8004696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004698:	6862      	ldr	r2, [r4, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046a0:	6021      	str	r1, [r4, #0]
 80046a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	08005b15 	.word	0x08005b15
 80046ac:	08005b98 	.word	0x08005b98

080046b0 <__multadd>:
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b4:	4607      	mov	r7, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	461e      	mov	r6, r3
 80046ba:	2000      	movs	r0, #0
 80046bc:	690d      	ldr	r5, [r1, #16]
 80046be:	f101 0c14 	add.w	ip, r1, #20
 80046c2:	f8dc 3000 	ldr.w	r3, [ip]
 80046c6:	3001      	adds	r0, #1
 80046c8:	b299      	uxth	r1, r3
 80046ca:	fb02 6101 	mla	r1, r2, r1, r6
 80046ce:	0c1e      	lsrs	r6, r3, #16
 80046d0:	0c0b      	lsrs	r3, r1, #16
 80046d2:	fb02 3306 	mla	r3, r2, r6, r3
 80046d6:	b289      	uxth	r1, r1
 80046d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80046dc:	4285      	cmp	r5, r0
 80046de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80046e2:	f84c 1b04 	str.w	r1, [ip], #4
 80046e6:	dcec      	bgt.n	80046c2 <__multadd+0x12>
 80046e8:	b30e      	cbz	r6, 800472e <__multadd+0x7e>
 80046ea:	68a3      	ldr	r3, [r4, #8]
 80046ec:	42ab      	cmp	r3, r5
 80046ee:	dc19      	bgt.n	8004724 <__multadd+0x74>
 80046f0:	6861      	ldr	r1, [r4, #4]
 80046f2:	4638      	mov	r0, r7
 80046f4:	3101      	adds	r1, #1
 80046f6:	f7ff ff79 	bl	80045ec <_Balloc>
 80046fa:	4680      	mov	r8, r0
 80046fc:	b928      	cbnz	r0, 800470a <__multadd+0x5a>
 80046fe:	4602      	mov	r2, r0
 8004700:	21b5      	movs	r1, #181	; 0xb5
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <__multadd+0x84>)
 8004704:	480c      	ldr	r0, [pc, #48]	; (8004738 <__multadd+0x88>)
 8004706:	f000 fbf3 	bl	8004ef0 <__assert_func>
 800470a:	6922      	ldr	r2, [r4, #16]
 800470c:	f104 010c 	add.w	r1, r4, #12
 8004710:	3202      	adds	r2, #2
 8004712:	0092      	lsls	r2, r2, #2
 8004714:	300c      	adds	r0, #12
 8004716:	f7ff ff5b 	bl	80045d0 <memcpy>
 800471a:	4621      	mov	r1, r4
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ffa5 	bl	800466c <_Bfree>
 8004722:	4644      	mov	r4, r8
 8004724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004728:	3501      	adds	r5, #1
 800472a:	615e      	str	r6, [r3, #20]
 800472c:	6125      	str	r5, [r4, #16]
 800472e:	4620      	mov	r0, r4
 8004730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004734:	08005b87 	.word	0x08005b87
 8004738:	08005b98 	.word	0x08005b98

0800473c <__hi0bits>:
 800473c:	0c02      	lsrs	r2, r0, #16
 800473e:	0412      	lsls	r2, r2, #16
 8004740:	4603      	mov	r3, r0
 8004742:	b9ca      	cbnz	r2, 8004778 <__hi0bits+0x3c>
 8004744:	0403      	lsls	r3, r0, #16
 8004746:	2010      	movs	r0, #16
 8004748:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800474c:	bf04      	itt	eq
 800474e:	021b      	lsleq	r3, r3, #8
 8004750:	3008      	addeq	r0, #8
 8004752:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004756:	bf04      	itt	eq
 8004758:	011b      	lsleq	r3, r3, #4
 800475a:	3004      	addeq	r0, #4
 800475c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004760:	bf04      	itt	eq
 8004762:	009b      	lsleq	r3, r3, #2
 8004764:	3002      	addeq	r0, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	db05      	blt.n	8004776 <__hi0bits+0x3a>
 800476a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800476e:	f100 0001 	add.w	r0, r0, #1
 8004772:	bf08      	it	eq
 8004774:	2020      	moveq	r0, #32
 8004776:	4770      	bx	lr
 8004778:	2000      	movs	r0, #0
 800477a:	e7e5      	b.n	8004748 <__hi0bits+0xc>

0800477c <__lo0bits>:
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	4602      	mov	r2, r0
 8004780:	f013 0007 	ands.w	r0, r3, #7
 8004784:	d00b      	beq.n	800479e <__lo0bits+0x22>
 8004786:	07d9      	lsls	r1, r3, #31
 8004788:	d421      	bmi.n	80047ce <__lo0bits+0x52>
 800478a:	0798      	lsls	r0, r3, #30
 800478c:	bf49      	itett	mi
 800478e:	085b      	lsrmi	r3, r3, #1
 8004790:	089b      	lsrpl	r3, r3, #2
 8004792:	2001      	movmi	r0, #1
 8004794:	6013      	strmi	r3, [r2, #0]
 8004796:	bf5c      	itt	pl
 8004798:	2002      	movpl	r0, #2
 800479a:	6013      	strpl	r3, [r2, #0]
 800479c:	4770      	bx	lr
 800479e:	b299      	uxth	r1, r3
 80047a0:	b909      	cbnz	r1, 80047a6 <__lo0bits+0x2a>
 80047a2:	2010      	movs	r0, #16
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	b2d9      	uxtb	r1, r3
 80047a8:	b909      	cbnz	r1, 80047ae <__lo0bits+0x32>
 80047aa:	3008      	adds	r0, #8
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	0719      	lsls	r1, r3, #28
 80047b0:	bf04      	itt	eq
 80047b2:	091b      	lsreq	r3, r3, #4
 80047b4:	3004      	addeq	r0, #4
 80047b6:	0799      	lsls	r1, r3, #30
 80047b8:	bf04      	itt	eq
 80047ba:	089b      	lsreq	r3, r3, #2
 80047bc:	3002      	addeq	r0, #2
 80047be:	07d9      	lsls	r1, r3, #31
 80047c0:	d403      	bmi.n	80047ca <__lo0bits+0x4e>
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	f100 0001 	add.w	r0, r0, #1
 80047c8:	d003      	beq.n	80047d2 <__lo0bits+0x56>
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4770      	bx	lr
 80047ce:	2000      	movs	r0, #0
 80047d0:	4770      	bx	lr
 80047d2:	2020      	movs	r0, #32
 80047d4:	4770      	bx	lr
	...

080047d8 <__i2b>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	460c      	mov	r4, r1
 80047dc:	2101      	movs	r1, #1
 80047de:	f7ff ff05 	bl	80045ec <_Balloc>
 80047e2:	4602      	mov	r2, r0
 80047e4:	b928      	cbnz	r0, 80047f2 <__i2b+0x1a>
 80047e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <__i2b+0x24>)
 80047ec:	4804      	ldr	r0, [pc, #16]	; (8004800 <__i2b+0x28>)
 80047ee:	f000 fb7f 	bl	8004ef0 <__assert_func>
 80047f2:	2301      	movs	r3, #1
 80047f4:	6144      	str	r4, [r0, #20]
 80047f6:	6103      	str	r3, [r0, #16]
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	bf00      	nop
 80047fc:	08005b87 	.word	0x08005b87
 8004800:	08005b98 	.word	0x08005b98

08004804 <__multiply>:
 8004804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	4691      	mov	r9, r2
 800480a:	690a      	ldr	r2, [r1, #16]
 800480c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004810:	460c      	mov	r4, r1
 8004812:	429a      	cmp	r2, r3
 8004814:	bfbe      	ittt	lt
 8004816:	460b      	movlt	r3, r1
 8004818:	464c      	movlt	r4, r9
 800481a:	4699      	movlt	r9, r3
 800481c:	6927      	ldr	r7, [r4, #16]
 800481e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	6861      	ldr	r1, [r4, #4]
 8004826:	eb07 060a 	add.w	r6, r7, sl
 800482a:	42b3      	cmp	r3, r6
 800482c:	b085      	sub	sp, #20
 800482e:	bfb8      	it	lt
 8004830:	3101      	addlt	r1, #1
 8004832:	f7ff fedb 	bl	80045ec <_Balloc>
 8004836:	b930      	cbnz	r0, 8004846 <__multiply+0x42>
 8004838:	4602      	mov	r2, r0
 800483a:	f240 115d 	movw	r1, #349	; 0x15d
 800483e:	4b43      	ldr	r3, [pc, #268]	; (800494c <__multiply+0x148>)
 8004840:	4843      	ldr	r0, [pc, #268]	; (8004950 <__multiply+0x14c>)
 8004842:	f000 fb55 	bl	8004ef0 <__assert_func>
 8004846:	f100 0514 	add.w	r5, r0, #20
 800484a:	462b      	mov	r3, r5
 800484c:	2200      	movs	r2, #0
 800484e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004852:	4543      	cmp	r3, r8
 8004854:	d321      	bcc.n	800489a <__multiply+0x96>
 8004856:	f104 0314 	add.w	r3, r4, #20
 800485a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800485e:	f109 0314 	add.w	r3, r9, #20
 8004862:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004866:	9202      	str	r2, [sp, #8]
 8004868:	1b3a      	subs	r2, r7, r4
 800486a:	3a15      	subs	r2, #21
 800486c:	f022 0203 	bic.w	r2, r2, #3
 8004870:	3204      	adds	r2, #4
 8004872:	f104 0115 	add.w	r1, r4, #21
 8004876:	428f      	cmp	r7, r1
 8004878:	bf38      	it	cc
 800487a:	2204      	movcc	r2, #4
 800487c:	9201      	str	r2, [sp, #4]
 800487e:	9a02      	ldr	r2, [sp, #8]
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	429a      	cmp	r2, r3
 8004884:	d80c      	bhi.n	80048a0 <__multiply+0x9c>
 8004886:	2e00      	cmp	r6, #0
 8004888:	dd03      	ble.n	8004892 <__multiply+0x8e>
 800488a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800488e:	2b00      	cmp	r3, #0
 8004890:	d059      	beq.n	8004946 <__multiply+0x142>
 8004892:	6106      	str	r6, [r0, #16]
 8004894:	b005      	add	sp, #20
 8004896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489a:	f843 2b04 	str.w	r2, [r3], #4
 800489e:	e7d8      	b.n	8004852 <__multiply+0x4e>
 80048a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80048a4:	f1ba 0f00 	cmp.w	sl, #0
 80048a8:	d023      	beq.n	80048f2 <__multiply+0xee>
 80048aa:	46a9      	mov	r9, r5
 80048ac:	f04f 0c00 	mov.w	ip, #0
 80048b0:	f104 0e14 	add.w	lr, r4, #20
 80048b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80048b8:	f8d9 1000 	ldr.w	r1, [r9]
 80048bc:	fa1f fb82 	uxth.w	fp, r2
 80048c0:	b289      	uxth	r1, r1
 80048c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80048c6:	4461      	add	r1, ip
 80048c8:	f8d9 c000 	ldr.w	ip, [r9]
 80048cc:	0c12      	lsrs	r2, r2, #16
 80048ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80048d2:	fb0a c202 	mla	r2, sl, r2, ip
 80048d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80048da:	b289      	uxth	r1, r1
 80048dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80048e0:	4577      	cmp	r7, lr
 80048e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80048e6:	f849 1b04 	str.w	r1, [r9], #4
 80048ea:	d8e3      	bhi.n	80048b4 <__multiply+0xb0>
 80048ec:	9a01      	ldr	r2, [sp, #4]
 80048ee:	f845 c002 	str.w	ip, [r5, r2]
 80048f2:	9a03      	ldr	r2, [sp, #12]
 80048f4:	3304      	adds	r3, #4
 80048f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80048fa:	f1b9 0f00 	cmp.w	r9, #0
 80048fe:	d020      	beq.n	8004942 <__multiply+0x13e>
 8004900:	46ae      	mov	lr, r5
 8004902:	f04f 0a00 	mov.w	sl, #0
 8004906:	6829      	ldr	r1, [r5, #0]
 8004908:	f104 0c14 	add.w	ip, r4, #20
 800490c:	f8bc b000 	ldrh.w	fp, [ip]
 8004910:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004914:	b289      	uxth	r1, r1
 8004916:	fb09 220b 	mla	r2, r9, fp, r2
 800491a:	4492      	add	sl, r2
 800491c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004920:	f84e 1b04 	str.w	r1, [lr], #4
 8004924:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004928:	f8be 1000 	ldrh.w	r1, [lr]
 800492c:	0c12      	lsrs	r2, r2, #16
 800492e:	fb09 1102 	mla	r1, r9, r2, r1
 8004932:	4567      	cmp	r7, ip
 8004934:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004938:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800493c:	d8e6      	bhi.n	800490c <__multiply+0x108>
 800493e:	9a01      	ldr	r2, [sp, #4]
 8004940:	50a9      	str	r1, [r5, r2]
 8004942:	3504      	adds	r5, #4
 8004944:	e79b      	b.n	800487e <__multiply+0x7a>
 8004946:	3e01      	subs	r6, #1
 8004948:	e79d      	b.n	8004886 <__multiply+0x82>
 800494a:	bf00      	nop
 800494c:	08005b87 	.word	0x08005b87
 8004950:	08005b98 	.word	0x08005b98

08004954 <__pow5mult>:
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004958:	4615      	mov	r5, r2
 800495a:	f012 0203 	ands.w	r2, r2, #3
 800495e:	4606      	mov	r6, r0
 8004960:	460f      	mov	r7, r1
 8004962:	d007      	beq.n	8004974 <__pow5mult+0x20>
 8004964:	4c25      	ldr	r4, [pc, #148]	; (80049fc <__pow5mult+0xa8>)
 8004966:	3a01      	subs	r2, #1
 8004968:	2300      	movs	r3, #0
 800496a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800496e:	f7ff fe9f 	bl	80046b0 <__multadd>
 8004972:	4607      	mov	r7, r0
 8004974:	10ad      	asrs	r5, r5, #2
 8004976:	d03d      	beq.n	80049f4 <__pow5mult+0xa0>
 8004978:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800497a:	b97c      	cbnz	r4, 800499c <__pow5mult+0x48>
 800497c:	2010      	movs	r0, #16
 800497e:	f7ff fe11 	bl	80045a4 <malloc>
 8004982:	4602      	mov	r2, r0
 8004984:	6270      	str	r0, [r6, #36]	; 0x24
 8004986:	b928      	cbnz	r0, 8004994 <__pow5mult+0x40>
 8004988:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800498c:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <__pow5mult+0xac>)
 800498e:	481d      	ldr	r0, [pc, #116]	; (8004a04 <__pow5mult+0xb0>)
 8004990:	f000 faae 	bl	8004ef0 <__assert_func>
 8004994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004998:	6004      	str	r4, [r0, #0]
 800499a:	60c4      	str	r4, [r0, #12]
 800499c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80049a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80049a4:	b94c      	cbnz	r4, 80049ba <__pow5mult+0x66>
 80049a6:	f240 2171 	movw	r1, #625	; 0x271
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ff14 	bl	80047d8 <__i2b>
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80049b8:	6003      	str	r3, [r0, #0]
 80049ba:	f04f 0900 	mov.w	r9, #0
 80049be:	07eb      	lsls	r3, r5, #31
 80049c0:	d50a      	bpl.n	80049d8 <__pow5mult+0x84>
 80049c2:	4639      	mov	r1, r7
 80049c4:	4622      	mov	r2, r4
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff ff1c 	bl	8004804 <__multiply>
 80049cc:	4680      	mov	r8, r0
 80049ce:	4639      	mov	r1, r7
 80049d0:	4630      	mov	r0, r6
 80049d2:	f7ff fe4b 	bl	800466c <_Bfree>
 80049d6:	4647      	mov	r7, r8
 80049d8:	106d      	asrs	r5, r5, #1
 80049da:	d00b      	beq.n	80049f4 <__pow5mult+0xa0>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	b938      	cbnz	r0, 80049f0 <__pow5mult+0x9c>
 80049e0:	4622      	mov	r2, r4
 80049e2:	4621      	mov	r1, r4
 80049e4:	4630      	mov	r0, r6
 80049e6:	f7ff ff0d 	bl	8004804 <__multiply>
 80049ea:	6020      	str	r0, [r4, #0]
 80049ec:	f8c0 9000 	str.w	r9, [r0]
 80049f0:	4604      	mov	r4, r0
 80049f2:	e7e4      	b.n	80049be <__pow5mult+0x6a>
 80049f4:	4638      	mov	r0, r7
 80049f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049fa:	bf00      	nop
 80049fc:	08005ce8 	.word	0x08005ce8
 8004a00:	08005b15 	.word	0x08005b15
 8004a04:	08005b98 	.word	0x08005b98

08004a08 <__lshift>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4607      	mov	r7, r0
 8004a10:	4691      	mov	r9, r2
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	6849      	ldr	r1, [r1, #4]
 8004a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a20:	f108 0601 	add.w	r6, r8, #1
 8004a24:	42b3      	cmp	r3, r6
 8004a26:	db0b      	blt.n	8004a40 <__lshift+0x38>
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f7ff fddf 	bl	80045ec <_Balloc>
 8004a2e:	4605      	mov	r5, r0
 8004a30:	b948      	cbnz	r0, 8004a46 <__lshift+0x3e>
 8004a32:	4602      	mov	r2, r0
 8004a34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004a38:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <__lshift+0xd8>)
 8004a3a:	482a      	ldr	r0, [pc, #168]	; (8004ae4 <__lshift+0xdc>)
 8004a3c:	f000 fa58 	bl	8004ef0 <__assert_func>
 8004a40:	3101      	adds	r1, #1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	e7ee      	b.n	8004a24 <__lshift+0x1c>
 8004a46:	2300      	movs	r3, #0
 8004a48:	f100 0114 	add.w	r1, r0, #20
 8004a4c:	f100 0210 	add.w	r2, r0, #16
 8004a50:	4618      	mov	r0, r3
 8004a52:	4553      	cmp	r3, sl
 8004a54:	db37      	blt.n	8004ac6 <__lshift+0xbe>
 8004a56:	6920      	ldr	r0, [r4, #16]
 8004a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a5c:	f104 0314 	add.w	r3, r4, #20
 8004a60:	f019 091f 	ands.w	r9, r9, #31
 8004a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a6c:	d02f      	beq.n	8004ace <__lshift+0xc6>
 8004a6e:	468a      	mov	sl, r1
 8004a70:	f04f 0c00 	mov.w	ip, #0
 8004a74:	f1c9 0e20 	rsb	lr, r9, #32
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	fa02 f209 	lsl.w	r2, r2, r9
 8004a7e:	ea42 020c 	orr.w	r2, r2, ip
 8004a82:	f84a 2b04 	str.w	r2, [sl], #4
 8004a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004a90:	d8f2      	bhi.n	8004a78 <__lshift+0x70>
 8004a92:	1b03      	subs	r3, r0, r4
 8004a94:	3b15      	subs	r3, #21
 8004a96:	f023 0303 	bic.w	r3, r3, #3
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	f104 0215 	add.w	r2, r4, #21
 8004aa0:	4290      	cmp	r0, r2
 8004aa2:	bf38      	it	cc
 8004aa4:	2304      	movcc	r3, #4
 8004aa6:	f841 c003 	str.w	ip, [r1, r3]
 8004aaa:	f1bc 0f00 	cmp.w	ip, #0
 8004aae:	d001      	beq.n	8004ab4 <__lshift+0xac>
 8004ab0:	f108 0602 	add.w	r6, r8, #2
 8004ab4:	3e01      	subs	r6, #1
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	4621      	mov	r1, r4
 8004aba:	612e      	str	r6, [r5, #16]
 8004abc:	f7ff fdd6 	bl	800466c <_Bfree>
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004aca:	3301      	adds	r3, #1
 8004acc:	e7c1      	b.n	8004a52 <__lshift+0x4a>
 8004ace:	3904      	subs	r1, #4
 8004ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad4:	4298      	cmp	r0, r3
 8004ad6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004ada:	d8f9      	bhi.n	8004ad0 <__lshift+0xc8>
 8004adc:	e7ea      	b.n	8004ab4 <__lshift+0xac>
 8004ade:	bf00      	nop
 8004ae0:	08005b87 	.word	0x08005b87
 8004ae4:	08005b98 	.word	0x08005b98

08004ae8 <__mcmp>:
 8004ae8:	4603      	mov	r3, r0
 8004aea:	690a      	ldr	r2, [r1, #16]
 8004aec:	6900      	ldr	r0, [r0, #16]
 8004aee:	b530      	push	{r4, r5, lr}
 8004af0:	1a80      	subs	r0, r0, r2
 8004af2:	d10d      	bne.n	8004b10 <__mcmp+0x28>
 8004af4:	3314      	adds	r3, #20
 8004af6:	3114      	adds	r1, #20
 8004af8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004afc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004b00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b08:	4295      	cmp	r5, r2
 8004b0a:	d002      	beq.n	8004b12 <__mcmp+0x2a>
 8004b0c:	d304      	bcc.n	8004b18 <__mcmp+0x30>
 8004b0e:	2001      	movs	r0, #1
 8004b10:	bd30      	pop	{r4, r5, pc}
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	d3f4      	bcc.n	8004b00 <__mcmp+0x18>
 8004b16:	e7fb      	b.n	8004b10 <__mcmp+0x28>
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	e7f8      	b.n	8004b10 <__mcmp+0x28>
	...

08004b20 <__mdiff>:
 8004b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	460d      	mov	r5, r1
 8004b26:	4607      	mov	r7, r0
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	f7ff ffdb 	bl	8004ae8 <__mcmp>
 8004b32:	1e06      	subs	r6, r0, #0
 8004b34:	d111      	bne.n	8004b5a <__mdiff+0x3a>
 8004b36:	4631      	mov	r1, r6
 8004b38:	4638      	mov	r0, r7
 8004b3a:	f7ff fd57 	bl	80045ec <_Balloc>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	b928      	cbnz	r0, 8004b4e <__mdiff+0x2e>
 8004b42:	f240 2132 	movw	r1, #562	; 0x232
 8004b46:	4b3a      	ldr	r3, [pc, #232]	; (8004c30 <__mdiff+0x110>)
 8004b48:	483a      	ldr	r0, [pc, #232]	; (8004c34 <__mdiff+0x114>)
 8004b4a:	f000 f9d1 	bl	8004ef0 <__assert_func>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004b54:	4610      	mov	r0, r2
 8004b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5a:	bfa4      	itt	ge
 8004b5c:	4623      	movge	r3, r4
 8004b5e:	462c      	movge	r4, r5
 8004b60:	4638      	mov	r0, r7
 8004b62:	6861      	ldr	r1, [r4, #4]
 8004b64:	bfa6      	itte	ge
 8004b66:	461d      	movge	r5, r3
 8004b68:	2600      	movge	r6, #0
 8004b6a:	2601      	movlt	r6, #1
 8004b6c:	f7ff fd3e 	bl	80045ec <_Balloc>
 8004b70:	4602      	mov	r2, r0
 8004b72:	b918      	cbnz	r0, 8004b7c <__mdiff+0x5c>
 8004b74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <__mdiff+0x110>)
 8004b7a:	e7e5      	b.n	8004b48 <__mdiff+0x28>
 8004b7c:	f102 0814 	add.w	r8, r2, #20
 8004b80:	46c2      	mov	sl, r8
 8004b82:	f04f 0c00 	mov.w	ip, #0
 8004b86:	6927      	ldr	r7, [r4, #16]
 8004b88:	60c6      	str	r6, [r0, #12]
 8004b8a:	692e      	ldr	r6, [r5, #16]
 8004b8c:	f104 0014 	add.w	r0, r4, #20
 8004b90:	f105 0914 	add.w	r9, r5, #20
 8004b94:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004b98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004b9c:	3410      	adds	r4, #16
 8004b9e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004ba2:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ba6:	fa1f f18b 	uxth.w	r1, fp
 8004baa:	448c      	add	ip, r1
 8004bac:	b299      	uxth	r1, r3
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	ebac 0101 	sub.w	r1, ip, r1
 8004bb4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004bb8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004bbc:	b289      	uxth	r1, r1
 8004bbe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004bc2:	454e      	cmp	r6, r9
 8004bc4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004bc8:	f84a 3b04 	str.w	r3, [sl], #4
 8004bcc:	d8e7      	bhi.n	8004b9e <__mdiff+0x7e>
 8004bce:	1b73      	subs	r3, r6, r5
 8004bd0:	3b15      	subs	r3, #21
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	3515      	adds	r5, #21
 8004bd8:	3304      	adds	r3, #4
 8004bda:	42ae      	cmp	r6, r5
 8004bdc:	bf38      	it	cc
 8004bde:	2304      	movcc	r3, #4
 8004be0:	4418      	add	r0, r3
 8004be2:	4443      	add	r3, r8
 8004be4:	461e      	mov	r6, r3
 8004be6:	4605      	mov	r5, r0
 8004be8:	4575      	cmp	r5, lr
 8004bea:	d30e      	bcc.n	8004c0a <__mdiff+0xea>
 8004bec:	f10e 0103 	add.w	r1, lr, #3
 8004bf0:	1a09      	subs	r1, r1, r0
 8004bf2:	f021 0103 	bic.w	r1, r1, #3
 8004bf6:	3803      	subs	r0, #3
 8004bf8:	4586      	cmp	lr, r0
 8004bfa:	bf38      	it	cc
 8004bfc:	2100      	movcc	r1, #0
 8004bfe:	4419      	add	r1, r3
 8004c00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004c04:	b18b      	cbz	r3, 8004c2a <__mdiff+0x10a>
 8004c06:	6117      	str	r7, [r2, #16]
 8004c08:	e7a4      	b.n	8004b54 <__mdiff+0x34>
 8004c0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8004c0e:	fa1f f188 	uxth.w	r1, r8
 8004c12:	4461      	add	r1, ip
 8004c14:	140c      	asrs	r4, r1, #16
 8004c16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004c1a:	b289      	uxth	r1, r1
 8004c1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004c20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004c24:	f846 1b04 	str.w	r1, [r6], #4
 8004c28:	e7de      	b.n	8004be8 <__mdiff+0xc8>
 8004c2a:	3f01      	subs	r7, #1
 8004c2c:	e7e8      	b.n	8004c00 <__mdiff+0xe0>
 8004c2e:	bf00      	nop
 8004c30:	08005b87 	.word	0x08005b87
 8004c34:	08005b98 	.word	0x08005b98

08004c38 <__d2b>:
 8004c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004c42:	4690      	mov	r8, r2
 8004c44:	461d      	mov	r5, r3
 8004c46:	f7ff fcd1 	bl	80045ec <_Balloc>
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	b930      	cbnz	r0, 8004c5c <__d2b+0x24>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f240 310a 	movw	r1, #778	; 0x30a
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <__d2b+0xb0>)
 8004c56:	4825      	ldr	r0, [pc, #148]	; (8004cec <__d2b+0xb4>)
 8004c58:	f000 f94a 	bl	8004ef0 <__assert_func>
 8004c5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004c60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004c64:	bb2d      	cbnz	r5, 8004cb2 <__d2b+0x7a>
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	f1b8 0300 	subs.w	r3, r8, #0
 8004c6c:	d026      	beq.n	8004cbc <__d2b+0x84>
 8004c6e:	4668      	mov	r0, sp
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	f7ff fd83 	bl	800477c <__lo0bits>
 8004c76:	9900      	ldr	r1, [sp, #0]
 8004c78:	b1f0      	cbz	r0, 8004cb8 <__d2b+0x80>
 8004c7a:	9a01      	ldr	r2, [sp, #4]
 8004c7c:	f1c0 0320 	rsb	r3, r0, #32
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	430b      	orrs	r3, r1
 8004c86:	40c2      	lsrs	r2, r0
 8004c88:	6163      	str	r3, [r4, #20]
 8004c8a:	9201      	str	r2, [sp, #4]
 8004c8c:	9b01      	ldr	r3, [sp, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf14      	ite	ne
 8004c92:	2102      	movne	r1, #2
 8004c94:	2101      	moveq	r1, #1
 8004c96:	61a3      	str	r3, [r4, #24]
 8004c98:	6121      	str	r1, [r4, #16]
 8004c9a:	b1c5      	cbz	r5, 8004cce <__d2b+0x96>
 8004c9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004ca0:	4405      	add	r5, r0
 8004ca2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ca6:	603d      	str	r5, [r7, #0]
 8004ca8:	6030      	str	r0, [r6, #0]
 8004caa:	4620      	mov	r0, r4
 8004cac:	b002      	add	sp, #8
 8004cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb6:	e7d6      	b.n	8004c66 <__d2b+0x2e>
 8004cb8:	6161      	str	r1, [r4, #20]
 8004cba:	e7e7      	b.n	8004c8c <__d2b+0x54>
 8004cbc:	a801      	add	r0, sp, #4
 8004cbe:	f7ff fd5d 	bl	800477c <__lo0bits>
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	9b01      	ldr	r3, [sp, #4]
 8004cc6:	6121      	str	r1, [r4, #16]
 8004cc8:	6163      	str	r3, [r4, #20]
 8004cca:	3020      	adds	r0, #32
 8004ccc:	e7e5      	b.n	8004c9a <__d2b+0x62>
 8004cce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004cd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004cd6:	6038      	str	r0, [r7, #0]
 8004cd8:	6918      	ldr	r0, [r3, #16]
 8004cda:	f7ff fd2f 	bl	800473c <__hi0bits>
 8004cde:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004ce2:	6031      	str	r1, [r6, #0]
 8004ce4:	e7e1      	b.n	8004caa <__d2b+0x72>
 8004ce6:	bf00      	nop
 8004ce8:	08005b87 	.word	0x08005b87
 8004cec:	08005b98 	.word	0x08005b98

08004cf0 <_calloc_r>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	fba1 5402 	umull	r5, r4, r1, r2
 8004cf6:	b934      	cbnz	r4, 8004d06 <_calloc_r+0x16>
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f000 f875 	bl	8004de8 <_malloc_r>
 8004cfe:	4606      	mov	r6, r0
 8004d00:	b928      	cbnz	r0, 8004d0e <_calloc_r+0x1e>
 8004d02:	4630      	mov	r0, r6
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	220c      	movs	r2, #12
 8004d08:	2600      	movs	r6, #0
 8004d0a:	6002      	str	r2, [r0, #0]
 8004d0c:	e7f9      	b.n	8004d02 <_calloc_r+0x12>
 8004d0e:	462a      	mov	r2, r5
 8004d10:	4621      	mov	r1, r4
 8004d12:	f7fe f961 	bl	8002fd8 <memset>
 8004d16:	e7f4      	b.n	8004d02 <_calloc_r+0x12>

08004d18 <_free_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	d040      	beq.n	8004da2 <_free_r+0x8a>
 8004d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d24:	1f0c      	subs	r4, r1, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfb8      	it	lt
 8004d2a:	18e4      	addlt	r4, r4, r3
 8004d2c:	f000 f922 	bl	8004f74 <__malloc_lock>
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <_free_r+0x8c>)
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	b933      	cbnz	r3, 8004d44 <_free_r+0x2c>
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	6014      	str	r4, [r2, #0]
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d40:	f000 b91e 	b.w	8004f80 <__malloc_unlock>
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d908      	bls.n	8004d5a <_free_r+0x42>
 8004d48:	6820      	ldr	r0, [r4, #0]
 8004d4a:	1821      	adds	r1, r4, r0
 8004d4c:	428b      	cmp	r3, r1
 8004d4e:	bf01      	itttt	eq
 8004d50:	6819      	ldreq	r1, [r3, #0]
 8004d52:	685b      	ldreq	r3, [r3, #4]
 8004d54:	1809      	addeq	r1, r1, r0
 8004d56:	6021      	streq	r1, [r4, #0]
 8004d58:	e7ed      	b.n	8004d36 <_free_r+0x1e>
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b10b      	cbz	r3, 8004d64 <_free_r+0x4c>
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d9fa      	bls.n	8004d5a <_free_r+0x42>
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	1850      	adds	r0, r2, r1
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d10b      	bne.n	8004d84 <_free_r+0x6c>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	4401      	add	r1, r0
 8004d70:	1850      	adds	r0, r2, r1
 8004d72:	4283      	cmp	r3, r0
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	d1e0      	bne.n	8004d3a <_free_r+0x22>
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4401      	add	r1, r0
 8004d7e:	6011      	str	r1, [r2, #0]
 8004d80:	6053      	str	r3, [r2, #4]
 8004d82:	e7da      	b.n	8004d3a <_free_r+0x22>
 8004d84:	d902      	bls.n	8004d8c <_free_r+0x74>
 8004d86:	230c      	movs	r3, #12
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	e7d6      	b.n	8004d3a <_free_r+0x22>
 8004d8c:	6820      	ldr	r0, [r4, #0]
 8004d8e:	1821      	adds	r1, r4, r0
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf01      	itttt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	1809      	addeq	r1, r1, r0
 8004d9a:	6021      	streq	r1, [r4, #0]
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	6054      	str	r4, [r2, #4]
 8004da0:	e7cb      	b.n	8004d3a <_free_r+0x22>
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20000300 	.word	0x20000300

08004da8 <sbrk_aligned>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	4e0e      	ldr	r6, [pc, #56]	; (8004de4 <sbrk_aligned+0x3c>)
 8004dac:	460c      	mov	r4, r1
 8004dae:	6831      	ldr	r1, [r6, #0]
 8004db0:	4605      	mov	r5, r0
 8004db2:	b911      	cbnz	r1, 8004dba <sbrk_aligned+0x12>
 8004db4:	f000 f88c 	bl	8004ed0 <_sbrk_r>
 8004db8:	6030      	str	r0, [r6, #0]
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f000 f887 	bl	8004ed0 <_sbrk_r>
 8004dc2:	1c43      	adds	r3, r0, #1
 8004dc4:	d00a      	beq.n	8004ddc <sbrk_aligned+0x34>
 8004dc6:	1cc4      	adds	r4, r0, #3
 8004dc8:	f024 0403 	bic.w	r4, r4, #3
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d007      	beq.n	8004de0 <sbrk_aligned+0x38>
 8004dd0:	1a21      	subs	r1, r4, r0
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f87c 	bl	8004ed0 <_sbrk_r>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d101      	bne.n	8004de0 <sbrk_aligned+0x38>
 8004ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8004de0:	4620      	mov	r0, r4
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	20000304 	.word	0x20000304

08004de8 <_malloc_r>:
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	1ccd      	adds	r5, r1, #3
 8004dee:	f025 0503 	bic.w	r5, r5, #3
 8004df2:	3508      	adds	r5, #8
 8004df4:	2d0c      	cmp	r5, #12
 8004df6:	bf38      	it	cc
 8004df8:	250c      	movcc	r5, #12
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	db01      	blt.n	8004e04 <_malloc_r+0x1c>
 8004e00:	42a9      	cmp	r1, r5
 8004e02:	d905      	bls.n	8004e10 <_malloc_r+0x28>
 8004e04:	230c      	movs	r3, #12
 8004e06:	2600      	movs	r6, #0
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	4e2e      	ldr	r6, [pc, #184]	; (8004ecc <_malloc_r+0xe4>)
 8004e12:	f000 f8af 	bl	8004f74 <__malloc_lock>
 8004e16:	6833      	ldr	r3, [r6, #0]
 8004e18:	461c      	mov	r4, r3
 8004e1a:	bb34      	cbnz	r4, 8004e6a <_malloc_r+0x82>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f7ff ffc2 	bl	8004da8 <sbrk_aligned>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	4604      	mov	r4, r0
 8004e28:	d14d      	bne.n	8004ec6 <_malloc_r+0xde>
 8004e2a:	6834      	ldr	r4, [r6, #0]
 8004e2c:	4626      	mov	r6, r4
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	d140      	bne.n	8004eb4 <_malloc_r+0xcc>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	4631      	mov	r1, r6
 8004e36:	4638      	mov	r0, r7
 8004e38:	eb04 0803 	add.w	r8, r4, r3
 8004e3c:	f000 f848 	bl	8004ed0 <_sbrk_r>
 8004e40:	4580      	cmp	r8, r0
 8004e42:	d13a      	bne.n	8004eba <_malloc_r+0xd2>
 8004e44:	6821      	ldr	r1, [r4, #0]
 8004e46:	3503      	adds	r5, #3
 8004e48:	1a6d      	subs	r5, r5, r1
 8004e4a:	f025 0503 	bic.w	r5, r5, #3
 8004e4e:	3508      	adds	r5, #8
 8004e50:	2d0c      	cmp	r5, #12
 8004e52:	bf38      	it	cc
 8004e54:	250c      	movcc	r5, #12
 8004e56:	4638      	mov	r0, r7
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f7ff ffa5 	bl	8004da8 <sbrk_aligned>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d02b      	beq.n	8004eba <_malloc_r+0xd2>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	442b      	add	r3, r5
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	e00e      	b.n	8004e88 <_malloc_r+0xa0>
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	1b52      	subs	r2, r2, r5
 8004e6e:	d41e      	bmi.n	8004eae <_malloc_r+0xc6>
 8004e70:	2a0b      	cmp	r2, #11
 8004e72:	d916      	bls.n	8004ea2 <_malloc_r+0xba>
 8004e74:	1961      	adds	r1, r4, r5
 8004e76:	42a3      	cmp	r3, r4
 8004e78:	6025      	str	r5, [r4, #0]
 8004e7a:	bf18      	it	ne
 8004e7c:	6059      	strne	r1, [r3, #4]
 8004e7e:	6863      	ldr	r3, [r4, #4]
 8004e80:	bf08      	it	eq
 8004e82:	6031      	streq	r1, [r6, #0]
 8004e84:	5162      	str	r2, [r4, r5]
 8004e86:	604b      	str	r3, [r1, #4]
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f104 060b 	add.w	r6, r4, #11
 8004e8e:	f000 f877 	bl	8004f80 <__malloc_unlock>
 8004e92:	f026 0607 	bic.w	r6, r6, #7
 8004e96:	1d23      	adds	r3, r4, #4
 8004e98:	1af2      	subs	r2, r6, r3
 8004e9a:	d0b6      	beq.n	8004e0a <_malloc_r+0x22>
 8004e9c:	1b9b      	subs	r3, r3, r6
 8004e9e:	50a3      	str	r3, [r4, r2]
 8004ea0:	e7b3      	b.n	8004e0a <_malloc_r+0x22>
 8004ea2:	6862      	ldr	r2, [r4, #4]
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	bf0c      	ite	eq
 8004ea8:	6032      	streq	r2, [r6, #0]
 8004eaa:	605a      	strne	r2, [r3, #4]
 8004eac:	e7ec      	b.n	8004e88 <_malloc_r+0xa0>
 8004eae:	4623      	mov	r3, r4
 8004eb0:	6864      	ldr	r4, [r4, #4]
 8004eb2:	e7b2      	b.n	8004e1a <_malloc_r+0x32>
 8004eb4:	4634      	mov	r4, r6
 8004eb6:	6876      	ldr	r6, [r6, #4]
 8004eb8:	e7b9      	b.n	8004e2e <_malloc_r+0x46>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	f000 f85e 	bl	8004f80 <__malloc_unlock>
 8004ec4:	e7a1      	b.n	8004e0a <_malloc_r+0x22>
 8004ec6:	6025      	str	r5, [r4, #0]
 8004ec8:	e7de      	b.n	8004e88 <_malloc_r+0xa0>
 8004eca:	bf00      	nop
 8004ecc:	20000300 	.word	0x20000300

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4d05      	ldr	r5, [pc, #20]	; (8004eec <_sbrk_r+0x1c>)
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f000 fdc8 	bl	8005a70 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000308 	.word	0x20000308

08004ef0 <__assert_func>:
 8004ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ef2:	4614      	mov	r4, r2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <__assert_func+0x2c>)
 8004ef8:	4605      	mov	r5, r0
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68d8      	ldr	r0, [r3, #12]
 8004efe:	b14c      	cbz	r4, 8004f14 <__assert_func+0x24>
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <__assert_func+0x30>)
 8004f02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f06:	9100      	str	r1, [sp, #0]
 8004f08:	462b      	mov	r3, r5
 8004f0a:	4906      	ldr	r1, [pc, #24]	; (8004f24 <__assert_func+0x34>)
 8004f0c:	f000 f80e 	bl	8004f2c <fiprintf>
 8004f10:	f000 fa62 	bl	80053d8 <abort>
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <__assert_func+0x38>)
 8004f16:	461c      	mov	r4, r3
 8004f18:	e7f3      	b.n	8004f02 <__assert_func+0x12>
 8004f1a:	bf00      	nop
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	08005cf4 	.word	0x08005cf4
 8004f24:	08005d01 	.word	0x08005d01
 8004f28:	08005d2f 	.word	0x08005d2f

08004f2c <fiprintf>:
 8004f2c:	b40e      	push	{r1, r2, r3}
 8004f2e:	b503      	push	{r0, r1, lr}
 8004f30:	4601      	mov	r1, r0
 8004f32:	ab03      	add	r3, sp, #12
 8004f34:	4805      	ldr	r0, [pc, #20]	; (8004f4c <fiprintf+0x20>)
 8004f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f000 f84d 	bl	8004fdc <_vfiprintf_r>
 8004f42:	b002      	add	sp, #8
 8004f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f48:	b003      	add	sp, #12
 8004f4a:	4770      	bx	lr
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <__ascii_mbtowc>:
 8004f50:	b082      	sub	sp, #8
 8004f52:	b901      	cbnz	r1, 8004f56 <__ascii_mbtowc+0x6>
 8004f54:	a901      	add	r1, sp, #4
 8004f56:	b142      	cbz	r2, 8004f6a <__ascii_mbtowc+0x1a>
 8004f58:	b14b      	cbz	r3, 8004f6e <__ascii_mbtowc+0x1e>
 8004f5a:	7813      	ldrb	r3, [r2, #0]
 8004f5c:	600b      	str	r3, [r1, #0]
 8004f5e:	7812      	ldrb	r2, [r2, #0]
 8004f60:	1e10      	subs	r0, r2, #0
 8004f62:	bf18      	it	ne
 8004f64:	2001      	movne	r0, #1
 8004f66:	b002      	add	sp, #8
 8004f68:	4770      	bx	lr
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	e7fb      	b.n	8004f66 <__ascii_mbtowc+0x16>
 8004f6e:	f06f 0001 	mvn.w	r0, #1
 8004f72:	e7f8      	b.n	8004f66 <__ascii_mbtowc+0x16>

08004f74 <__malloc_lock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_lock+0x8>)
 8004f76:	f000 bbeb 	b.w	8005750 <__retarget_lock_acquire_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	2000030c 	.word	0x2000030c

08004f80 <__malloc_unlock>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__malloc_unlock+0x8>)
 8004f82:	f000 bbe6 	b.w	8005752 <__retarget_lock_release_recursive>
 8004f86:	bf00      	nop
 8004f88:	2000030c 	.word	0x2000030c

08004f8c <__sfputc_r>:
 8004f8c:	6893      	ldr	r3, [r2, #8]
 8004f8e:	b410      	push	{r4}
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	6093      	str	r3, [r2, #8]
 8004f96:	da07      	bge.n	8004fa8 <__sfputc_r+0x1c>
 8004f98:	6994      	ldr	r4, [r2, #24]
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	db01      	blt.n	8004fa2 <__sfputc_r+0x16>
 8004f9e:	290a      	cmp	r1, #10
 8004fa0:	d102      	bne.n	8004fa8 <__sfputc_r+0x1c>
 8004fa2:	bc10      	pop	{r4}
 8004fa4:	f000 b94a 	b.w	800523c <__swbuf_r>
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	1c58      	adds	r0, r3, #1
 8004fac:	6010      	str	r0, [r2, #0]
 8004fae:	7019      	strb	r1, [r3, #0]
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	bc10      	pop	{r4}
 8004fb4:	4770      	bx	lr

08004fb6 <__sfputs_r>:
 8004fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb8:	4606      	mov	r6, r0
 8004fba:	460f      	mov	r7, r1
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	18d5      	adds	r5, r2, r3
 8004fc0:	42ac      	cmp	r4, r5
 8004fc2:	d101      	bne.n	8004fc8 <__sfputs_r+0x12>
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	e007      	b.n	8004fd8 <__sfputs_r+0x22>
 8004fc8:	463a      	mov	r2, r7
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd0:	f7ff ffdc 	bl	8004f8c <__sfputc_r>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d1f3      	bne.n	8004fc0 <__sfputs_r+0xa>
 8004fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fdc <_vfiprintf_r>:
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	b09d      	sub	sp, #116	; 0x74
 8004fea:	b118      	cbz	r0, 8004ff4 <_vfiprintf_r+0x18>
 8004fec:	6983      	ldr	r3, [r0, #24]
 8004fee:	b90b      	cbnz	r3, 8004ff4 <_vfiprintf_r+0x18>
 8004ff0:	f000 fb10 	bl	8005614 <__sinit>
 8004ff4:	4b89      	ldr	r3, [pc, #548]	; (800521c <_vfiprintf_r+0x240>)
 8004ff6:	429d      	cmp	r5, r3
 8004ff8:	d11b      	bne.n	8005032 <_vfiprintf_r+0x56>
 8004ffa:	6875      	ldr	r5, [r6, #4]
 8004ffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ffe:	07d9      	lsls	r1, r3, #31
 8005000:	d405      	bmi.n	800500e <_vfiprintf_r+0x32>
 8005002:	89ab      	ldrh	r3, [r5, #12]
 8005004:	059a      	lsls	r2, r3, #22
 8005006:	d402      	bmi.n	800500e <_vfiprintf_r+0x32>
 8005008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800500a:	f000 fba1 	bl	8005750 <__retarget_lock_acquire_recursive>
 800500e:	89ab      	ldrh	r3, [r5, #12]
 8005010:	071b      	lsls	r3, r3, #28
 8005012:	d501      	bpl.n	8005018 <_vfiprintf_r+0x3c>
 8005014:	692b      	ldr	r3, [r5, #16]
 8005016:	b9eb      	cbnz	r3, 8005054 <_vfiprintf_r+0x78>
 8005018:	4629      	mov	r1, r5
 800501a:	4630      	mov	r0, r6
 800501c:	f000 f96e 	bl	80052fc <__swsetup_r>
 8005020:	b1c0      	cbz	r0, 8005054 <_vfiprintf_r+0x78>
 8005022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005024:	07dc      	lsls	r4, r3, #31
 8005026:	d50e      	bpl.n	8005046 <_vfiprintf_r+0x6a>
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	b01d      	add	sp, #116	; 0x74
 800502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005032:	4b7b      	ldr	r3, [pc, #492]	; (8005220 <_vfiprintf_r+0x244>)
 8005034:	429d      	cmp	r5, r3
 8005036:	d101      	bne.n	800503c <_vfiprintf_r+0x60>
 8005038:	68b5      	ldr	r5, [r6, #8]
 800503a:	e7df      	b.n	8004ffc <_vfiprintf_r+0x20>
 800503c:	4b79      	ldr	r3, [pc, #484]	; (8005224 <_vfiprintf_r+0x248>)
 800503e:	429d      	cmp	r5, r3
 8005040:	bf08      	it	eq
 8005042:	68f5      	ldreq	r5, [r6, #12]
 8005044:	e7da      	b.n	8004ffc <_vfiprintf_r+0x20>
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	0598      	lsls	r0, r3, #22
 800504a:	d4ed      	bmi.n	8005028 <_vfiprintf_r+0x4c>
 800504c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800504e:	f000 fb80 	bl	8005752 <__retarget_lock_release_recursive>
 8005052:	e7e9      	b.n	8005028 <_vfiprintf_r+0x4c>
 8005054:	2300      	movs	r3, #0
 8005056:	9309      	str	r3, [sp, #36]	; 0x24
 8005058:	2320      	movs	r3, #32
 800505a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800505e:	2330      	movs	r3, #48	; 0x30
 8005060:	f04f 0901 	mov.w	r9, #1
 8005064:	f8cd 800c 	str.w	r8, [sp, #12]
 8005068:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005228 <_vfiprintf_r+0x24c>
 800506c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005070:	4623      	mov	r3, r4
 8005072:	469a      	mov	sl, r3
 8005074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005078:	b10a      	cbz	r2, 800507e <_vfiprintf_r+0xa2>
 800507a:	2a25      	cmp	r2, #37	; 0x25
 800507c:	d1f9      	bne.n	8005072 <_vfiprintf_r+0x96>
 800507e:	ebba 0b04 	subs.w	fp, sl, r4
 8005082:	d00b      	beq.n	800509c <_vfiprintf_r+0xc0>
 8005084:	465b      	mov	r3, fp
 8005086:	4622      	mov	r2, r4
 8005088:	4629      	mov	r1, r5
 800508a:	4630      	mov	r0, r6
 800508c:	f7ff ff93 	bl	8004fb6 <__sfputs_r>
 8005090:	3001      	adds	r0, #1
 8005092:	f000 80aa 	beq.w	80051ea <_vfiprintf_r+0x20e>
 8005096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005098:	445a      	add	r2, fp
 800509a:	9209      	str	r2, [sp, #36]	; 0x24
 800509c:	f89a 3000 	ldrb.w	r3, [sl]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80a2 	beq.w	80051ea <_vfiprintf_r+0x20e>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b0:	f10a 0a01 	add.w	sl, sl, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050bc:	931a      	str	r3, [sp, #104]	; 0x68
 80050be:	4654      	mov	r4, sl
 80050c0:	2205      	movs	r2, #5
 80050c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c6:	4858      	ldr	r0, [pc, #352]	; (8005228 <_vfiprintf_r+0x24c>)
 80050c8:	f7ff fa74 	bl	80045b4 <memchr>
 80050cc:	9a04      	ldr	r2, [sp, #16]
 80050ce:	b9d8      	cbnz	r0, 8005108 <_vfiprintf_r+0x12c>
 80050d0:	06d1      	lsls	r1, r2, #27
 80050d2:	bf44      	itt	mi
 80050d4:	2320      	movmi	r3, #32
 80050d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050da:	0713      	lsls	r3, r2, #28
 80050dc:	bf44      	itt	mi
 80050de:	232b      	movmi	r3, #43	; 0x2b
 80050e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e4:	f89a 3000 	ldrb.w	r3, [sl]
 80050e8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ea:	d015      	beq.n	8005118 <_vfiprintf_r+0x13c>
 80050ec:	4654      	mov	r4, sl
 80050ee:	2000      	movs	r0, #0
 80050f0:	f04f 0c0a 	mov.w	ip, #10
 80050f4:	9a07      	ldr	r2, [sp, #28]
 80050f6:	4621      	mov	r1, r4
 80050f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fc:	3b30      	subs	r3, #48	; 0x30
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d94e      	bls.n	80051a0 <_vfiprintf_r+0x1c4>
 8005102:	b1b0      	cbz	r0, 8005132 <_vfiprintf_r+0x156>
 8005104:	9207      	str	r2, [sp, #28]
 8005106:	e014      	b.n	8005132 <_vfiprintf_r+0x156>
 8005108:	eba0 0308 	sub.w	r3, r0, r8
 800510c:	fa09 f303 	lsl.w	r3, r9, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	46a2      	mov	sl, r4
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	e7d2      	b.n	80050be <_vfiprintf_r+0xe2>
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	1d19      	adds	r1, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	9103      	str	r1, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfbb      	ittet	lt
 8005124:	425b      	neglt	r3, r3
 8005126:	f042 0202 	orrlt.w	r2, r2, #2
 800512a:	9307      	strge	r3, [sp, #28]
 800512c:	9307      	strlt	r3, [sp, #28]
 800512e:	bfb8      	it	lt
 8005130:	9204      	strlt	r2, [sp, #16]
 8005132:	7823      	ldrb	r3, [r4, #0]
 8005134:	2b2e      	cmp	r3, #46	; 0x2e
 8005136:	d10c      	bne.n	8005152 <_vfiprintf_r+0x176>
 8005138:	7863      	ldrb	r3, [r4, #1]
 800513a:	2b2a      	cmp	r3, #42	; 0x2a
 800513c:	d135      	bne.n	80051aa <_vfiprintf_r+0x1ce>
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	3402      	adds	r4, #2
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	9203      	str	r2, [sp, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	bfb8      	it	lt
 800514c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005150:	9305      	str	r3, [sp, #20]
 8005152:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800522c <_vfiprintf_r+0x250>
 8005156:	2203      	movs	r2, #3
 8005158:	4650      	mov	r0, sl
 800515a:	7821      	ldrb	r1, [r4, #0]
 800515c:	f7ff fa2a 	bl	80045b4 <memchr>
 8005160:	b140      	cbz	r0, 8005174 <_vfiprintf_r+0x198>
 8005162:	2340      	movs	r3, #64	; 0x40
 8005164:	eba0 000a 	sub.w	r0, r0, sl
 8005168:	fa03 f000 	lsl.w	r0, r3, r0
 800516c:	9b04      	ldr	r3, [sp, #16]
 800516e:	3401      	adds	r4, #1
 8005170:	4303      	orrs	r3, r0
 8005172:	9304      	str	r3, [sp, #16]
 8005174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005178:	2206      	movs	r2, #6
 800517a:	482d      	ldr	r0, [pc, #180]	; (8005230 <_vfiprintf_r+0x254>)
 800517c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005180:	f7ff fa18 	bl	80045b4 <memchr>
 8005184:	2800      	cmp	r0, #0
 8005186:	d03f      	beq.n	8005208 <_vfiprintf_r+0x22c>
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <_vfiprintf_r+0x258>)
 800518a:	bb1b      	cbnz	r3, 80051d4 <_vfiprintf_r+0x1f8>
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	3307      	adds	r3, #7
 8005190:	f023 0307 	bic.w	r3, r3, #7
 8005194:	3308      	adds	r3, #8
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519a:	443b      	add	r3, r7
 800519c:	9309      	str	r3, [sp, #36]	; 0x24
 800519e:	e767      	b.n	8005070 <_vfiprintf_r+0x94>
 80051a0:	460c      	mov	r4, r1
 80051a2:	2001      	movs	r0, #1
 80051a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a8:	e7a5      	b.n	80050f6 <_vfiprintf_r+0x11a>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f04f 0c0a 	mov.w	ip, #10
 80051b0:	4619      	mov	r1, r3
 80051b2:	3401      	adds	r4, #1
 80051b4:	9305      	str	r3, [sp, #20]
 80051b6:	4620      	mov	r0, r4
 80051b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051bc:	3a30      	subs	r2, #48	; 0x30
 80051be:	2a09      	cmp	r2, #9
 80051c0:	d903      	bls.n	80051ca <_vfiprintf_r+0x1ee>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0c5      	beq.n	8005152 <_vfiprintf_r+0x176>
 80051c6:	9105      	str	r1, [sp, #20]
 80051c8:	e7c3      	b.n	8005152 <_vfiprintf_r+0x176>
 80051ca:	4604      	mov	r4, r0
 80051cc:	2301      	movs	r3, #1
 80051ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d2:	e7f0      	b.n	80051b6 <_vfiprintf_r+0x1da>
 80051d4:	ab03      	add	r3, sp, #12
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	462a      	mov	r2, r5
 80051da:	4630      	mov	r0, r6
 80051dc:	4b16      	ldr	r3, [pc, #88]	; (8005238 <_vfiprintf_r+0x25c>)
 80051de:	a904      	add	r1, sp, #16
 80051e0:	f7fd ffa0 	bl	8003124 <_printf_float>
 80051e4:	4607      	mov	r7, r0
 80051e6:	1c78      	adds	r0, r7, #1
 80051e8:	d1d6      	bne.n	8005198 <_vfiprintf_r+0x1bc>
 80051ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ec:	07d9      	lsls	r1, r3, #31
 80051ee:	d405      	bmi.n	80051fc <_vfiprintf_r+0x220>
 80051f0:	89ab      	ldrh	r3, [r5, #12]
 80051f2:	059a      	lsls	r2, r3, #22
 80051f4:	d402      	bmi.n	80051fc <_vfiprintf_r+0x220>
 80051f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051f8:	f000 faab 	bl	8005752 <__retarget_lock_release_recursive>
 80051fc:	89ab      	ldrh	r3, [r5, #12]
 80051fe:	065b      	lsls	r3, r3, #25
 8005200:	f53f af12 	bmi.w	8005028 <_vfiprintf_r+0x4c>
 8005204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005206:	e711      	b.n	800502c <_vfiprintf_r+0x50>
 8005208:	ab03      	add	r3, sp, #12
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	462a      	mov	r2, r5
 800520e:	4630      	mov	r0, r6
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <_vfiprintf_r+0x25c>)
 8005212:	a904      	add	r1, sp, #16
 8005214:	f7fe fa22 	bl	800365c <_printf_i>
 8005218:	e7e4      	b.n	80051e4 <_vfiprintf_r+0x208>
 800521a:	bf00      	nop
 800521c:	08005e6c 	.word	0x08005e6c
 8005220:	08005e8c 	.word	0x08005e8c
 8005224:	08005e4c 	.word	0x08005e4c
 8005228:	08005d3a 	.word	0x08005d3a
 800522c:	08005d40 	.word	0x08005d40
 8005230:	08005d44 	.word	0x08005d44
 8005234:	08003125 	.word	0x08003125
 8005238:	08004fb7 	.word	0x08004fb7

0800523c <__swbuf_r>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	460e      	mov	r6, r1
 8005240:	4614      	mov	r4, r2
 8005242:	4605      	mov	r5, r0
 8005244:	b118      	cbz	r0, 800524e <__swbuf_r+0x12>
 8005246:	6983      	ldr	r3, [r0, #24]
 8005248:	b90b      	cbnz	r3, 800524e <__swbuf_r+0x12>
 800524a:	f000 f9e3 	bl	8005614 <__sinit>
 800524e:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <__swbuf_r+0x98>)
 8005250:	429c      	cmp	r4, r3
 8005252:	d12b      	bne.n	80052ac <__swbuf_r+0x70>
 8005254:	686c      	ldr	r4, [r5, #4]
 8005256:	69a3      	ldr	r3, [r4, #24]
 8005258:	60a3      	str	r3, [r4, #8]
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	071a      	lsls	r2, r3, #28
 800525e:	d52f      	bpl.n	80052c0 <__swbuf_r+0x84>
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	b36b      	cbz	r3, 80052c0 <__swbuf_r+0x84>
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	b2f6      	uxtb	r6, r6
 800526a:	1ac0      	subs	r0, r0, r3
 800526c:	6963      	ldr	r3, [r4, #20]
 800526e:	4637      	mov	r7, r6
 8005270:	4283      	cmp	r3, r0
 8005272:	dc04      	bgt.n	800527e <__swbuf_r+0x42>
 8005274:	4621      	mov	r1, r4
 8005276:	4628      	mov	r0, r5
 8005278:	f000 f938 	bl	80054ec <_fflush_r>
 800527c:	bb30      	cbnz	r0, 80052cc <__swbuf_r+0x90>
 800527e:	68a3      	ldr	r3, [r4, #8]
 8005280:	3001      	adds	r0, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	60a3      	str	r3, [r4, #8]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	701e      	strb	r6, [r3, #0]
 800528e:	6963      	ldr	r3, [r4, #20]
 8005290:	4283      	cmp	r3, r0
 8005292:	d004      	beq.n	800529e <__swbuf_r+0x62>
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	07db      	lsls	r3, r3, #31
 8005298:	d506      	bpl.n	80052a8 <__swbuf_r+0x6c>
 800529a:	2e0a      	cmp	r6, #10
 800529c:	d104      	bne.n	80052a8 <__swbuf_r+0x6c>
 800529e:	4621      	mov	r1, r4
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f923 	bl	80054ec <_fflush_r>
 80052a6:	b988      	cbnz	r0, 80052cc <__swbuf_r+0x90>
 80052a8:	4638      	mov	r0, r7
 80052aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <__swbuf_r+0x9c>)
 80052ae:	429c      	cmp	r4, r3
 80052b0:	d101      	bne.n	80052b6 <__swbuf_r+0x7a>
 80052b2:	68ac      	ldr	r4, [r5, #8]
 80052b4:	e7cf      	b.n	8005256 <__swbuf_r+0x1a>
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <__swbuf_r+0xa0>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	bf08      	it	eq
 80052bc:	68ec      	ldreq	r4, [r5, #12]
 80052be:	e7ca      	b.n	8005256 <__swbuf_r+0x1a>
 80052c0:	4621      	mov	r1, r4
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 f81a 	bl	80052fc <__swsetup_r>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d0cb      	beq.n	8005264 <__swbuf_r+0x28>
 80052cc:	f04f 37ff 	mov.w	r7, #4294967295
 80052d0:	e7ea      	b.n	80052a8 <__swbuf_r+0x6c>
 80052d2:	bf00      	nop
 80052d4:	08005e6c 	.word	0x08005e6c
 80052d8:	08005e8c 	.word	0x08005e8c
 80052dc:	08005e4c 	.word	0x08005e4c

080052e0 <__ascii_wctomb>:
 80052e0:	4603      	mov	r3, r0
 80052e2:	4608      	mov	r0, r1
 80052e4:	b141      	cbz	r1, 80052f8 <__ascii_wctomb+0x18>
 80052e6:	2aff      	cmp	r2, #255	; 0xff
 80052e8:	d904      	bls.n	80052f4 <__ascii_wctomb+0x14>
 80052ea:	228a      	movs	r2, #138	; 0x8a
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	4770      	bx	lr
 80052f4:	2001      	movs	r0, #1
 80052f6:	700a      	strb	r2, [r1, #0]
 80052f8:	4770      	bx	lr
	...

080052fc <__swsetup_r>:
 80052fc:	4b32      	ldr	r3, [pc, #200]	; (80053c8 <__swsetup_r+0xcc>)
 80052fe:	b570      	push	{r4, r5, r6, lr}
 8005300:	681d      	ldr	r5, [r3, #0]
 8005302:	4606      	mov	r6, r0
 8005304:	460c      	mov	r4, r1
 8005306:	b125      	cbz	r5, 8005312 <__swsetup_r+0x16>
 8005308:	69ab      	ldr	r3, [r5, #24]
 800530a:	b913      	cbnz	r3, 8005312 <__swsetup_r+0x16>
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f981 	bl	8005614 <__sinit>
 8005312:	4b2e      	ldr	r3, [pc, #184]	; (80053cc <__swsetup_r+0xd0>)
 8005314:	429c      	cmp	r4, r3
 8005316:	d10f      	bne.n	8005338 <__swsetup_r+0x3c>
 8005318:	686c      	ldr	r4, [r5, #4]
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005320:	0719      	lsls	r1, r3, #28
 8005322:	d42c      	bmi.n	800537e <__swsetup_r+0x82>
 8005324:	06dd      	lsls	r5, r3, #27
 8005326:	d411      	bmi.n	800534c <__swsetup_r+0x50>
 8005328:	2309      	movs	r3, #9
 800532a:	6033      	str	r3, [r6, #0]
 800532c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	81a3      	strh	r3, [r4, #12]
 8005336:	e03e      	b.n	80053b6 <__swsetup_r+0xba>
 8005338:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <__swsetup_r+0xd4>)
 800533a:	429c      	cmp	r4, r3
 800533c:	d101      	bne.n	8005342 <__swsetup_r+0x46>
 800533e:	68ac      	ldr	r4, [r5, #8]
 8005340:	e7eb      	b.n	800531a <__swsetup_r+0x1e>
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <__swsetup_r+0xd8>)
 8005344:	429c      	cmp	r4, r3
 8005346:	bf08      	it	eq
 8005348:	68ec      	ldreq	r4, [r5, #12]
 800534a:	e7e6      	b.n	800531a <__swsetup_r+0x1e>
 800534c:	0758      	lsls	r0, r3, #29
 800534e:	d512      	bpl.n	8005376 <__swsetup_r+0x7a>
 8005350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005352:	b141      	cbz	r1, 8005366 <__swsetup_r+0x6a>
 8005354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005358:	4299      	cmp	r1, r3
 800535a:	d002      	beq.n	8005362 <__swsetup_r+0x66>
 800535c:	4630      	mov	r0, r6
 800535e:	f7ff fcdb 	bl	8004d18 <_free_r>
 8005362:	2300      	movs	r3, #0
 8005364:	6363      	str	r3, [r4, #52]	; 0x34
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	2300      	movs	r3, #0
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f043 0308 	orr.w	r3, r3, #8
 800537c:	81a3      	strh	r3, [r4, #12]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	b94b      	cbnz	r3, 8005396 <__swsetup_r+0x9a>
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538c:	d003      	beq.n	8005396 <__swsetup_r+0x9a>
 800538e:	4621      	mov	r1, r4
 8005390:	4630      	mov	r0, r6
 8005392:	f000 fa05 	bl	80057a0 <__smakebuf_r>
 8005396:	89a0      	ldrh	r0, [r4, #12]
 8005398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800539c:	f010 0301 	ands.w	r3, r0, #1
 80053a0:	d00a      	beq.n	80053b8 <__swsetup_r+0xbc>
 80053a2:	2300      	movs	r3, #0
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	6963      	ldr	r3, [r4, #20]
 80053a8:	425b      	negs	r3, r3
 80053aa:	61a3      	str	r3, [r4, #24]
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	b943      	cbnz	r3, 80053c2 <__swsetup_r+0xc6>
 80053b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053b4:	d1ba      	bne.n	800532c <__swsetup_r+0x30>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	0781      	lsls	r1, r0, #30
 80053ba:	bf58      	it	pl
 80053bc:	6963      	ldrpl	r3, [r4, #20]
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	e7f4      	b.n	80053ac <__swsetup_r+0xb0>
 80053c2:	2000      	movs	r0, #0
 80053c4:	e7f7      	b.n	80053b6 <__swsetup_r+0xba>
 80053c6:	bf00      	nop
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	08005e6c 	.word	0x08005e6c
 80053d0:	08005e8c 	.word	0x08005e8c
 80053d4:	08005e4c 	.word	0x08005e4c

080053d8 <abort>:
 80053d8:	2006      	movs	r0, #6
 80053da:	b508      	push	{r3, lr}
 80053dc:	f000 fa48 	bl	8005870 <raise>
 80053e0:	2001      	movs	r0, #1
 80053e2:	f000 fb53 	bl	8005a8c <_exit>
	...

080053e8 <__sflush_r>:
 80053e8:	898a      	ldrh	r2, [r1, #12]
 80053ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ec:	4605      	mov	r5, r0
 80053ee:	0710      	lsls	r0, r2, #28
 80053f0:	460c      	mov	r4, r1
 80053f2:	d457      	bmi.n	80054a4 <__sflush_r+0xbc>
 80053f4:	684b      	ldr	r3, [r1, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	dc04      	bgt.n	8005404 <__sflush_r+0x1c>
 80053fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	dc01      	bgt.n	8005404 <__sflush_r+0x1c>
 8005400:	2000      	movs	r0, #0
 8005402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005406:	2e00      	cmp	r6, #0
 8005408:	d0fa      	beq.n	8005400 <__sflush_r+0x18>
 800540a:	2300      	movs	r3, #0
 800540c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005410:	682f      	ldr	r7, [r5, #0]
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	d032      	beq.n	800547c <__sflush_r+0x94>
 8005416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	075a      	lsls	r2, r3, #29
 800541c:	d505      	bpl.n	800542a <__sflush_r+0x42>
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	1ac0      	subs	r0, r0, r3
 8005422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005424:	b10b      	cbz	r3, 800542a <__sflush_r+0x42>
 8005426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005428:	1ac0      	subs	r0, r0, r3
 800542a:	2300      	movs	r3, #0
 800542c:	4602      	mov	r2, r0
 800542e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005430:	4628      	mov	r0, r5
 8005432:	6a21      	ldr	r1, [r4, #32]
 8005434:	47b0      	blx	r6
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	d106      	bne.n	800544a <__sflush_r+0x62>
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	291d      	cmp	r1, #29
 8005440:	d82c      	bhi.n	800549c <__sflush_r+0xb4>
 8005442:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <__sflush_r+0x100>)
 8005444:	40ca      	lsrs	r2, r1
 8005446:	07d6      	lsls	r6, r2, #31
 8005448:	d528      	bpl.n	800549c <__sflush_r+0xb4>
 800544a:	2200      	movs	r2, #0
 800544c:	6062      	str	r2, [r4, #4]
 800544e:	6922      	ldr	r2, [r4, #16]
 8005450:	04d9      	lsls	r1, r3, #19
 8005452:	6022      	str	r2, [r4, #0]
 8005454:	d504      	bpl.n	8005460 <__sflush_r+0x78>
 8005456:	1c42      	adds	r2, r0, #1
 8005458:	d101      	bne.n	800545e <__sflush_r+0x76>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	b903      	cbnz	r3, 8005460 <__sflush_r+0x78>
 800545e:	6560      	str	r0, [r4, #84]	; 0x54
 8005460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005462:	602f      	str	r7, [r5, #0]
 8005464:	2900      	cmp	r1, #0
 8005466:	d0cb      	beq.n	8005400 <__sflush_r+0x18>
 8005468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800546c:	4299      	cmp	r1, r3
 800546e:	d002      	beq.n	8005476 <__sflush_r+0x8e>
 8005470:	4628      	mov	r0, r5
 8005472:	f7ff fc51 	bl	8004d18 <_free_r>
 8005476:	2000      	movs	r0, #0
 8005478:	6360      	str	r0, [r4, #52]	; 0x34
 800547a:	e7c2      	b.n	8005402 <__sflush_r+0x1a>
 800547c:	6a21      	ldr	r1, [r4, #32]
 800547e:	2301      	movs	r3, #1
 8005480:	4628      	mov	r0, r5
 8005482:	47b0      	blx	r6
 8005484:	1c41      	adds	r1, r0, #1
 8005486:	d1c7      	bne.n	8005418 <__sflush_r+0x30>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0c4      	beq.n	8005418 <__sflush_r+0x30>
 800548e:	2b1d      	cmp	r3, #29
 8005490:	d001      	beq.n	8005496 <__sflush_r+0xae>
 8005492:	2b16      	cmp	r3, #22
 8005494:	d101      	bne.n	800549a <__sflush_r+0xb2>
 8005496:	602f      	str	r7, [r5, #0]
 8005498:	e7b2      	b.n	8005400 <__sflush_r+0x18>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	e7ae      	b.n	8005402 <__sflush_r+0x1a>
 80054a4:	690f      	ldr	r7, [r1, #16]
 80054a6:	2f00      	cmp	r7, #0
 80054a8:	d0aa      	beq.n	8005400 <__sflush_r+0x18>
 80054aa:	0793      	lsls	r3, r2, #30
 80054ac:	bf18      	it	ne
 80054ae:	2300      	movne	r3, #0
 80054b0:	680e      	ldr	r6, [r1, #0]
 80054b2:	bf08      	it	eq
 80054b4:	694b      	ldreq	r3, [r1, #20]
 80054b6:	1bf6      	subs	r6, r6, r7
 80054b8:	600f      	str	r7, [r1, #0]
 80054ba:	608b      	str	r3, [r1, #8]
 80054bc:	2e00      	cmp	r6, #0
 80054be:	dd9f      	ble.n	8005400 <__sflush_r+0x18>
 80054c0:	4633      	mov	r3, r6
 80054c2:	463a      	mov	r2, r7
 80054c4:	4628      	mov	r0, r5
 80054c6:	6a21      	ldr	r1, [r4, #32]
 80054c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80054cc:	47e0      	blx	ip
 80054ce:	2800      	cmp	r0, #0
 80054d0:	dc06      	bgt.n	80054e0 <__sflush_r+0xf8>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	e790      	b.n	8005402 <__sflush_r+0x1a>
 80054e0:	4407      	add	r7, r0
 80054e2:	1a36      	subs	r6, r6, r0
 80054e4:	e7ea      	b.n	80054bc <__sflush_r+0xd4>
 80054e6:	bf00      	nop
 80054e8:	20400001 	.word	0x20400001

080054ec <_fflush_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	690b      	ldr	r3, [r1, #16]
 80054f0:	4605      	mov	r5, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	b913      	cbnz	r3, 80054fc <_fflush_r+0x10>
 80054f6:	2500      	movs	r5, #0
 80054f8:	4628      	mov	r0, r5
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	b118      	cbz	r0, 8005506 <_fflush_r+0x1a>
 80054fe:	6983      	ldr	r3, [r0, #24]
 8005500:	b90b      	cbnz	r3, 8005506 <_fflush_r+0x1a>
 8005502:	f000 f887 	bl	8005614 <__sinit>
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <_fflush_r+0x6c>)
 8005508:	429c      	cmp	r4, r3
 800550a:	d11b      	bne.n	8005544 <_fflush_r+0x58>
 800550c:	686c      	ldr	r4, [r5, #4]
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0ef      	beq.n	80054f6 <_fflush_r+0xa>
 8005516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005518:	07d0      	lsls	r0, r2, #31
 800551a:	d404      	bmi.n	8005526 <_fflush_r+0x3a>
 800551c:	0599      	lsls	r1, r3, #22
 800551e:	d402      	bmi.n	8005526 <_fflush_r+0x3a>
 8005520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005522:	f000 f915 	bl	8005750 <__retarget_lock_acquire_recursive>
 8005526:	4628      	mov	r0, r5
 8005528:	4621      	mov	r1, r4
 800552a:	f7ff ff5d 	bl	80053e8 <__sflush_r>
 800552e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005530:	4605      	mov	r5, r0
 8005532:	07da      	lsls	r2, r3, #31
 8005534:	d4e0      	bmi.n	80054f8 <_fflush_r+0xc>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	059b      	lsls	r3, r3, #22
 800553a:	d4dd      	bmi.n	80054f8 <_fflush_r+0xc>
 800553c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800553e:	f000 f908 	bl	8005752 <__retarget_lock_release_recursive>
 8005542:	e7d9      	b.n	80054f8 <_fflush_r+0xc>
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <_fflush_r+0x70>)
 8005546:	429c      	cmp	r4, r3
 8005548:	d101      	bne.n	800554e <_fflush_r+0x62>
 800554a:	68ac      	ldr	r4, [r5, #8]
 800554c:	e7df      	b.n	800550e <_fflush_r+0x22>
 800554e:	4b04      	ldr	r3, [pc, #16]	; (8005560 <_fflush_r+0x74>)
 8005550:	429c      	cmp	r4, r3
 8005552:	bf08      	it	eq
 8005554:	68ec      	ldreq	r4, [r5, #12]
 8005556:	e7da      	b.n	800550e <_fflush_r+0x22>
 8005558:	08005e6c 	.word	0x08005e6c
 800555c:	08005e8c 	.word	0x08005e8c
 8005560:	08005e4c 	.word	0x08005e4c

08005564 <std>:
 8005564:	2300      	movs	r3, #0
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
 800556a:	e9c0 3300 	strd	r3, r3, [r0]
 800556e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005572:	6083      	str	r3, [r0, #8]
 8005574:	8181      	strh	r1, [r0, #12]
 8005576:	6643      	str	r3, [r0, #100]	; 0x64
 8005578:	81c2      	strh	r2, [r0, #14]
 800557a:	6183      	str	r3, [r0, #24]
 800557c:	4619      	mov	r1, r3
 800557e:	2208      	movs	r2, #8
 8005580:	305c      	adds	r0, #92	; 0x5c
 8005582:	f7fd fd29 	bl	8002fd8 <memset>
 8005586:	4b05      	ldr	r3, [pc, #20]	; (800559c <std+0x38>)
 8005588:	6224      	str	r4, [r4, #32]
 800558a:	6263      	str	r3, [r4, #36]	; 0x24
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <std+0x3c>)
 800558e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <std+0x40>)
 8005592:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <std+0x44>)
 8005596:	6323      	str	r3, [r4, #48]	; 0x30
 8005598:	bd10      	pop	{r4, pc}
 800559a:	bf00      	nop
 800559c:	080058a9 	.word	0x080058a9
 80055a0:	080058cb 	.word	0x080058cb
 80055a4:	08005903 	.word	0x08005903
 80055a8:	08005927 	.word	0x08005927

080055ac <_cleanup_r>:
 80055ac:	4901      	ldr	r1, [pc, #4]	; (80055b4 <_cleanup_r+0x8>)
 80055ae:	f000 b8af 	b.w	8005710 <_fwalk_reent>
 80055b2:	bf00      	nop
 80055b4:	080054ed 	.word	0x080054ed

080055b8 <__sfmoreglue>:
 80055b8:	2268      	movs	r2, #104	; 0x68
 80055ba:	b570      	push	{r4, r5, r6, lr}
 80055bc:	1e4d      	subs	r5, r1, #1
 80055be:	4355      	muls	r5, r2
 80055c0:	460e      	mov	r6, r1
 80055c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055c6:	f7ff fc0f 	bl	8004de8 <_malloc_r>
 80055ca:	4604      	mov	r4, r0
 80055cc:	b140      	cbz	r0, 80055e0 <__sfmoreglue+0x28>
 80055ce:	2100      	movs	r1, #0
 80055d0:	e9c0 1600 	strd	r1, r6, [r0]
 80055d4:	300c      	adds	r0, #12
 80055d6:	60a0      	str	r0, [r4, #8]
 80055d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055dc:	f7fd fcfc 	bl	8002fd8 <memset>
 80055e0:	4620      	mov	r0, r4
 80055e2:	bd70      	pop	{r4, r5, r6, pc}

080055e4 <__sfp_lock_acquire>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__sfp_lock_acquire+0x8>)
 80055e6:	f000 b8b3 	b.w	8005750 <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	2000030d 	.word	0x2000030d

080055f0 <__sfp_lock_release>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__sfp_lock_release+0x8>)
 80055f2:	f000 b8ae 	b.w	8005752 <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	2000030d 	.word	0x2000030d

080055fc <__sinit_lock_acquire>:
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <__sinit_lock_acquire+0x8>)
 80055fe:	f000 b8a7 	b.w	8005750 <__retarget_lock_acquire_recursive>
 8005602:	bf00      	nop
 8005604:	2000030e 	.word	0x2000030e

08005608 <__sinit_lock_release>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__sinit_lock_release+0x8>)
 800560a:	f000 b8a2 	b.w	8005752 <__retarget_lock_release_recursive>
 800560e:	bf00      	nop
 8005610:	2000030e 	.word	0x2000030e

08005614 <__sinit>:
 8005614:	b510      	push	{r4, lr}
 8005616:	4604      	mov	r4, r0
 8005618:	f7ff fff0 	bl	80055fc <__sinit_lock_acquire>
 800561c:	69a3      	ldr	r3, [r4, #24]
 800561e:	b11b      	cbz	r3, 8005628 <__sinit+0x14>
 8005620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005624:	f7ff bff0 	b.w	8005608 <__sinit_lock_release>
 8005628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800562c:	6523      	str	r3, [r4, #80]	; 0x50
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <__sinit+0x68>)
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <__sinit+0x6c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	62a2      	str	r2, [r4, #40]	; 0x28
 8005636:	42a3      	cmp	r3, r4
 8005638:	bf08      	it	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	4620      	mov	r0, r4
 800563e:	bf08      	it	eq
 8005640:	61a3      	streq	r3, [r4, #24]
 8005642:	f000 f81f 	bl	8005684 <__sfp>
 8005646:	6060      	str	r0, [r4, #4]
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f81b 	bl	8005684 <__sfp>
 800564e:	60a0      	str	r0, [r4, #8]
 8005650:	4620      	mov	r0, r4
 8005652:	f000 f817 	bl	8005684 <__sfp>
 8005656:	2200      	movs	r2, #0
 8005658:	2104      	movs	r1, #4
 800565a:	60e0      	str	r0, [r4, #12]
 800565c:	6860      	ldr	r0, [r4, #4]
 800565e:	f7ff ff81 	bl	8005564 <std>
 8005662:	2201      	movs	r2, #1
 8005664:	2109      	movs	r1, #9
 8005666:	68a0      	ldr	r0, [r4, #8]
 8005668:	f7ff ff7c 	bl	8005564 <std>
 800566c:	2202      	movs	r2, #2
 800566e:	2112      	movs	r1, #18
 8005670:	68e0      	ldr	r0, [r4, #12]
 8005672:	f7ff ff77 	bl	8005564 <std>
 8005676:	2301      	movs	r3, #1
 8005678:	61a3      	str	r3, [r4, #24]
 800567a:	e7d1      	b.n	8005620 <__sinit+0xc>
 800567c:	08005ad0 	.word	0x08005ad0
 8005680:	080055ad 	.word	0x080055ad

08005684 <__sfp>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	4607      	mov	r7, r0
 8005688:	f7ff ffac 	bl	80055e4 <__sfp_lock_acquire>
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <__sfp+0x84>)
 800568e:	681e      	ldr	r6, [r3, #0]
 8005690:	69b3      	ldr	r3, [r6, #24]
 8005692:	b913      	cbnz	r3, 800569a <__sfp+0x16>
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff ffbd 	bl	8005614 <__sinit>
 800569a:	3648      	adds	r6, #72	; 0x48
 800569c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	d503      	bpl.n	80056ac <__sfp+0x28>
 80056a4:	6833      	ldr	r3, [r6, #0]
 80056a6:	b30b      	cbz	r3, 80056ec <__sfp+0x68>
 80056a8:	6836      	ldr	r6, [r6, #0]
 80056aa:	e7f7      	b.n	800569c <__sfp+0x18>
 80056ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056b0:	b9d5      	cbnz	r5, 80056e8 <__sfp+0x64>
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <__sfp+0x88>)
 80056b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056b8:	60e3      	str	r3, [r4, #12]
 80056ba:	6665      	str	r5, [r4, #100]	; 0x64
 80056bc:	f000 f847 	bl	800574e <__retarget_lock_init_recursive>
 80056c0:	f7ff ff96 	bl	80055f0 <__sfp_lock_release>
 80056c4:	2208      	movs	r2, #8
 80056c6:	4629      	mov	r1, r5
 80056c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056d0:	6025      	str	r5, [r4, #0]
 80056d2:	61a5      	str	r5, [r4, #24]
 80056d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056d8:	f7fd fc7e 	bl	8002fd8 <memset>
 80056dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056e4:	4620      	mov	r0, r4
 80056e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e8:	3468      	adds	r4, #104	; 0x68
 80056ea:	e7d9      	b.n	80056a0 <__sfp+0x1c>
 80056ec:	2104      	movs	r1, #4
 80056ee:	4638      	mov	r0, r7
 80056f0:	f7ff ff62 	bl	80055b8 <__sfmoreglue>
 80056f4:	4604      	mov	r4, r0
 80056f6:	6030      	str	r0, [r6, #0]
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d1d5      	bne.n	80056a8 <__sfp+0x24>
 80056fc:	f7ff ff78 	bl	80055f0 <__sfp_lock_release>
 8005700:	230c      	movs	r3, #12
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	e7ee      	b.n	80056e4 <__sfp+0x60>
 8005706:	bf00      	nop
 8005708:	08005ad0 	.word	0x08005ad0
 800570c:	ffff0001 	.word	0xffff0001

08005710 <_fwalk_reent>:
 8005710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005714:	4606      	mov	r6, r0
 8005716:	4688      	mov	r8, r1
 8005718:	2700      	movs	r7, #0
 800571a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800571e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005722:	f1b9 0901 	subs.w	r9, r9, #1
 8005726:	d505      	bpl.n	8005734 <_fwalk_reent+0x24>
 8005728:	6824      	ldr	r4, [r4, #0]
 800572a:	2c00      	cmp	r4, #0
 800572c:	d1f7      	bne.n	800571e <_fwalk_reent+0xe>
 800572e:	4638      	mov	r0, r7
 8005730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005734:	89ab      	ldrh	r3, [r5, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d907      	bls.n	800574a <_fwalk_reent+0x3a>
 800573a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800573e:	3301      	adds	r3, #1
 8005740:	d003      	beq.n	800574a <_fwalk_reent+0x3a>
 8005742:	4629      	mov	r1, r5
 8005744:	4630      	mov	r0, r6
 8005746:	47c0      	blx	r8
 8005748:	4307      	orrs	r7, r0
 800574a:	3568      	adds	r5, #104	; 0x68
 800574c:	e7e9      	b.n	8005722 <_fwalk_reent+0x12>

0800574e <__retarget_lock_init_recursive>:
 800574e:	4770      	bx	lr

08005750 <__retarget_lock_acquire_recursive>:
 8005750:	4770      	bx	lr

08005752 <__retarget_lock_release_recursive>:
 8005752:	4770      	bx	lr

08005754 <__swhatbuf_r>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	460e      	mov	r6, r1
 8005758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575c:	4614      	mov	r4, r2
 800575e:	2900      	cmp	r1, #0
 8005760:	461d      	mov	r5, r3
 8005762:	b096      	sub	sp, #88	; 0x58
 8005764:	da08      	bge.n	8005778 <__swhatbuf_r+0x24>
 8005766:	2200      	movs	r2, #0
 8005768:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	061a      	lsls	r2, r3, #24
 8005770:	d410      	bmi.n	8005794 <__swhatbuf_r+0x40>
 8005772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005776:	e00e      	b.n	8005796 <__swhatbuf_r+0x42>
 8005778:	466a      	mov	r2, sp
 800577a:	f000 f8fb 	bl	8005974 <_fstat_r>
 800577e:	2800      	cmp	r0, #0
 8005780:	dbf1      	blt.n	8005766 <__swhatbuf_r+0x12>
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800578c:	425a      	negs	r2, r3
 800578e:	415a      	adcs	r2, r3
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	e7ee      	b.n	8005772 <__swhatbuf_r+0x1e>
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	2000      	movs	r0, #0
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	b016      	add	sp, #88	; 0x58
 800579c:	bd70      	pop	{r4, r5, r6, pc}
	...

080057a0 <__smakebuf_r>:
 80057a0:	898b      	ldrh	r3, [r1, #12]
 80057a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057a4:	079d      	lsls	r5, r3, #30
 80057a6:	4606      	mov	r6, r0
 80057a8:	460c      	mov	r4, r1
 80057aa:	d507      	bpl.n	80057bc <__smakebuf_r+0x1c>
 80057ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	2301      	movs	r3, #1
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	b002      	add	sp, #8
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	466a      	mov	r2, sp
 80057be:	ab01      	add	r3, sp, #4
 80057c0:	f7ff ffc8 	bl	8005754 <__swhatbuf_r>
 80057c4:	9900      	ldr	r1, [sp, #0]
 80057c6:	4605      	mov	r5, r0
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff fb0d 	bl	8004de8 <_malloc_r>
 80057ce:	b948      	cbnz	r0, 80057e4 <__smakebuf_r+0x44>
 80057d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d4:	059a      	lsls	r2, r3, #22
 80057d6:	d4ef      	bmi.n	80057b8 <__smakebuf_r+0x18>
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7e3      	b.n	80057ac <__smakebuf_r+0xc>
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <__smakebuf_r+0x7c>)
 80057e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	6120      	str	r0, [r4, #16]
 80057f6:	6163      	str	r3, [r4, #20]
 80057f8:	9b01      	ldr	r3, [sp, #4]
 80057fa:	b15b      	cbz	r3, 8005814 <__smakebuf_r+0x74>
 80057fc:	4630      	mov	r0, r6
 80057fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005802:	f000 f8c9 	bl	8005998 <_isatty_r>
 8005806:	b128      	cbz	r0, 8005814 <__smakebuf_r+0x74>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	89a0      	ldrh	r0, [r4, #12]
 8005816:	4305      	orrs	r5, r0
 8005818:	81a5      	strh	r5, [r4, #12]
 800581a:	e7cd      	b.n	80057b8 <__smakebuf_r+0x18>
 800581c:	080055ad 	.word	0x080055ad

08005820 <_raise_r>:
 8005820:	291f      	cmp	r1, #31
 8005822:	b538      	push	{r3, r4, r5, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	460d      	mov	r5, r1
 8005828:	d904      	bls.n	8005834 <_raise_r+0x14>
 800582a:	2316      	movs	r3, #22
 800582c:	6003      	str	r3, [r0, #0]
 800582e:	f04f 30ff 	mov.w	r0, #4294967295
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005836:	b112      	cbz	r2, 800583e <_raise_r+0x1e>
 8005838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800583c:	b94b      	cbnz	r3, 8005852 <_raise_r+0x32>
 800583e:	4620      	mov	r0, r4
 8005840:	f000 f830 	bl	80058a4 <_getpid_r>
 8005844:	462a      	mov	r2, r5
 8005846:	4601      	mov	r1, r0
 8005848:	4620      	mov	r0, r4
 800584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800584e:	f000 b817 	b.w	8005880 <_kill_r>
 8005852:	2b01      	cmp	r3, #1
 8005854:	d00a      	beq.n	800586c <_raise_r+0x4c>
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	d103      	bne.n	8005862 <_raise_r+0x42>
 800585a:	2316      	movs	r3, #22
 800585c:	6003      	str	r3, [r0, #0]
 800585e:	2001      	movs	r0, #1
 8005860:	e7e7      	b.n	8005832 <_raise_r+0x12>
 8005862:	2400      	movs	r4, #0
 8005864:	4628      	mov	r0, r5
 8005866:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800586a:	4798      	blx	r3
 800586c:	2000      	movs	r0, #0
 800586e:	e7e0      	b.n	8005832 <_raise_r+0x12>

08005870 <raise>:
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <raise+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f7ff bfd3 	b.w	8005820 <_raise_r>
 800587a:	bf00      	nop
 800587c:	2000000c 	.word	0x2000000c

08005880 <_kill_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	2300      	movs	r3, #0
 8005884:	4d06      	ldr	r5, [pc, #24]	; (80058a0 <_kill_r+0x20>)
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f000 f8d7 	bl	8005a40 <_kill>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_kill_r+0x1c>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	b103      	cbz	r3, 800589c <_kill_r+0x1c>
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	20000308 	.word	0x20000308

080058a4 <_getpid_r>:
 80058a4:	f000 b8bc 	b.w	8005a20 <_getpid>

080058a8 <__sread>:
 80058a8:	b510      	push	{r4, lr}
 80058aa:	460c      	mov	r4, r1
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	f000 f894 	bl	80059dc <_read_r>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	bfab      	itete	ge
 80058b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058ba:	89a3      	ldrhlt	r3, [r4, #12]
 80058bc:	181b      	addge	r3, r3, r0
 80058be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058c2:	bfac      	ite	ge
 80058c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058c6:	81a3      	strhlt	r3, [r4, #12]
 80058c8:	bd10      	pop	{r4, pc}

080058ca <__swrite>:
 80058ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	461f      	mov	r7, r3
 80058d0:	898b      	ldrh	r3, [r1, #12]
 80058d2:	4605      	mov	r5, r0
 80058d4:	05db      	lsls	r3, r3, #23
 80058d6:	460c      	mov	r4, r1
 80058d8:	4616      	mov	r6, r2
 80058da:	d505      	bpl.n	80058e8 <__swrite+0x1e>
 80058dc:	2302      	movs	r3, #2
 80058de:	2200      	movs	r2, #0
 80058e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e4:	f000 f868 	bl	80059b8 <_lseek_r>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	4632      	mov	r2, r6
 80058ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058f0:	81a3      	strh	r3, [r4, #12]
 80058f2:	4628      	mov	r0, r5
 80058f4:	463b      	mov	r3, r7
 80058f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058fe:	f000 b817 	b.w	8005930 <_write_r>

08005902 <__sseek>:
 8005902:	b510      	push	{r4, lr}
 8005904:	460c      	mov	r4, r1
 8005906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590a:	f000 f855 	bl	80059b8 <_lseek_r>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	bf15      	itete	ne
 8005914:	6560      	strne	r0, [r4, #84]	; 0x54
 8005916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800591a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800591e:	81a3      	strheq	r3, [r4, #12]
 8005920:	bf18      	it	ne
 8005922:	81a3      	strhne	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__sclose>:
 8005926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592a:	f000 b813 	b.w	8005954 <_close_r>
	...

08005930 <_write_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	2200      	movs	r2, #0
 800593a:	4d05      	ldr	r5, [pc, #20]	; (8005950 <_write_r+0x20>)
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f7fb f8ec 	bl	8000b1c <_write>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_write_r+0x1e>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_write_r+0x1e>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	20000308 	.word	0x20000308

08005954 <_close_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	2300      	movs	r3, #0
 8005958:	4d05      	ldr	r5, [pc, #20]	; (8005970 <_close_r+0x1c>)
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f000 f84e 	bl	8005a00 <_close>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_close_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_close_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000308 	.word	0x20000308

08005974 <_fstat_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	2300      	movs	r3, #0
 8005978:	4d06      	ldr	r5, [pc, #24]	; (8005994 <_fstat_r+0x20>)
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f000 f845 	bl	8005a10 <_fstat>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d102      	bne.n	8005990 <_fstat_r+0x1c>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	b103      	cbz	r3, 8005990 <_fstat_r+0x1c>
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop
 8005994:	20000308 	.word	0x20000308

08005998 <_isatty_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	2300      	movs	r3, #0
 800599c:	4d05      	ldr	r5, [pc, #20]	; (80059b4 <_isatty_r+0x1c>)
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f000 f844 	bl	8005a30 <_isatty>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_isatty_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_isatty_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000308 	.word	0x20000308

080059b8 <_lseek_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	2200      	movs	r2, #0
 80059c2:	4d05      	ldr	r5, [pc, #20]	; (80059d8 <_lseek_r+0x20>)
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 f842 	bl	8005a50 <_lseek>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_lseek_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_lseek_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	20000308 	.word	0x20000308

080059dc <_read_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	4611      	mov	r1, r2
 80059e4:	2200      	movs	r2, #0
 80059e6:	4d05      	ldr	r5, [pc, #20]	; (80059fc <_read_r+0x20>)
 80059e8:	602a      	str	r2, [r5, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 f838 	bl	8005a60 <_read>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_read_r+0x1e>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_read_r+0x1e>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	20000308 	.word	0x20000308

08005a00 <_close>:
 8005a00:	2258      	movs	r2, #88	; 0x58
 8005a02:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <_close+0xc>)
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	4770      	bx	lr
 8005a0c:	20000308 	.word	0x20000308

08005a10 <_fstat>:
 8005a10:	2258      	movs	r2, #88	; 0x58
 8005a12:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <_fstat+0xc>)
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4770      	bx	lr
 8005a1c:	20000308 	.word	0x20000308

08005a20 <_getpid>:
 8005a20:	2258      	movs	r2, #88	; 0x58
 8005a22:	4b02      	ldr	r3, [pc, #8]	; (8005a2c <_getpid+0xc>)
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	4770      	bx	lr
 8005a2c:	20000308 	.word	0x20000308

08005a30 <_isatty>:
 8005a30:	2258      	movs	r2, #88	; 0x58
 8005a32:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <_isatty+0xc>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000308 	.word	0x20000308

08005a40 <_kill>:
 8005a40:	2258      	movs	r2, #88	; 0x58
 8005a42:	4b02      	ldr	r3, [pc, #8]	; (8005a4c <_kill+0xc>)
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	4770      	bx	lr
 8005a4c:	20000308 	.word	0x20000308

08005a50 <_lseek>:
 8005a50:	2258      	movs	r2, #88	; 0x58
 8005a52:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <_lseek+0xc>)
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	4770      	bx	lr
 8005a5c:	20000308 	.word	0x20000308

08005a60 <_read>:
 8005a60:	2258      	movs	r2, #88	; 0x58
 8005a62:	4b02      	ldr	r3, [pc, #8]	; (8005a6c <_read+0xc>)
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	4770      	bx	lr
 8005a6c:	20000308 	.word	0x20000308

08005a70 <_sbrk>:
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <_sbrk+0x14>)
 8005a72:	4603      	mov	r3, r0
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	b909      	cbnz	r1, 8005a7c <_sbrk+0xc>
 8005a78:	4903      	ldr	r1, [pc, #12]	; (8005a88 <_sbrk+0x18>)
 8005a7a:	6011      	str	r1, [r2, #0]
 8005a7c:	6810      	ldr	r0, [r2, #0]
 8005a7e:	4403      	add	r3, r0
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	4770      	bx	lr
 8005a84:	20000310 	.word	0x20000310
 8005a88:	20000318 	.word	0x20000318

08005a8c <_exit>:
 8005a8c:	e7fe      	b.n	8005a8c <_exit>
	...

08005a90 <_init>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr

08005a9c <_fini>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr
